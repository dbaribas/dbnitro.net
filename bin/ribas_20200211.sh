#!/bin/bash
#!/usr/bin/perl
#
#########################################################################################################
#
Author="Andre Augusto Ribas"
SoftwareVersion="3.2.7"
DateCreation="07/09/2013"
DateModification="11/02/2020"
EMAIL="dba.ribas@gmail.com"
GITHUB="https://github.com/dbaribas/dbnitro.net"
WEBSITE="http://dbnitro.net"
#
#########################################################################################################
#
# set -x                                    # Debug
#
#########################################################################################################
#
# How It Works
#
#########################################################################################################
#
# + Main Menu......: All About Oracle Databases                          #             # 
# + RAC............: All About Oracle RAC (Real Application Cluster)     # IS_RAC      # rac
# + ODA............: All About Oracle Database Appliance                 # IS_ODA      # oda
# + EXADATA........: All About Oracle Exadata                            # IS_EXA      # exadata
# + DATAGUARD......: All About Oracle DataGuard                          # IS_ODG      # odg
# + GOLDENGATE.....: All About Oracle GoldenGate                         # IS_OGG      # ogg
# - WALLET.........: All About Oracle Wallet (Security)                  # IS_WAL      # wallet
# - AUTOUPGRADE....: All About Oracle Auto Upgrade                       # IS_AUP      # autoup
# - LINUX/UNIX.....: All About Oracle Linux/Unix                         # IS_UNX      # unix
#
#########################################################################################################
#
OS=""                                       # Which Operation System
IPADDR=""                                   # IP Address of First Adapter
HOST=""                                     # Hostname of the Server
RED=""                                      # Red Color
YEL=""                                      # Yellow Color
BLUE=""                                     # Blue Color
GREEN=""                                    # Green Color
BLACK=""                                    # Finish Color
ECHO=""                                     # Echo Option -e
WHOIS=""                                    # If is ROOT or Not
OSDISTRO=""                                 # Operation System Distribution
ORATAB=""                                   # Oracle ORATAB File
SLEEP=""                                    # Sleep Command
SRVHARDWARE=""                              # Hardware Verification Physical or Virtual
SRVMEMBANK=""                               # Hardware Verification Memory
SRVDISKS=""                                 # Hardware Verification Disk
SRVTEMPERATURE=""                           # Hardware Verification Temperature
#
#########################################################################################################
#
function check_error()
{
V_ERROR_CODE=$1
V_ERROR_STRING=$2
if [ ${V_ERROR_CODE} -ne 0 ]
then
  echo "-----------------------------------------------------------------------------------------------------"
  echo " ERROR WHILE RUNNING SCRIPT "
  echo "-----------------------------------------------------------------------------------------------------"
  echo " ${V_ERROR_STRING}"
  echo "-----------------------------------------------------------------------------------------------------"
  echo " Code...: ${V_ERROR_CODE}"
  echo "-----------------------------------------------------------------------------------------------------"
  return ${V_ERROR_CODE}
fi
}
#########################################################################################################
V_ECHO=`which echo | grep -v -i "alias"` 
if [ -x ${V_ECHO} ]
then
   R_ECHO=${V_ECHO}
else
  check_error 1 "ECHO does not exist"
fi
#########################################################################################################
V_NAWK=`which nawk | grep -v -i "alias"` 
if [ -x ${V_NAWK} ]
then
  R_NAWK=${V_NAWK}
else
  check_error 1 "NAWK does not exist"
fi
#########################################################################################################
V_AWK=`which awk | grep -v -i "alias"` 
if [ -x ${V_AWK} ]
then
  R_AWK=${V_AWK}
else
  check_error 1 "AWK does not exist"
fi
#########################################################################################################
V_UNIQ=`which uniq | grep -v -i "alias"` 
if [ -x ${V_UNIQ} ]
then
  R_UNIQ=${V_UNIQ}
else
  check_error 1 "UNIQ does not exist"
fi
#########################################################################################################
V_TR=`which tr | grep -v -i "alias"` 
if [ -x ${V_TR} ]
then
  R_TR=${V_TR}
else
  check_error 1 "TR does not exist"
fi
#########################################################################################################
V_LS=`which ls | grep -v -i "alias"` 
if [ -x ${V_LS} ]
then
  R_LS=${V_LS}
else
  check_error 1 "LS does not exist"
fi
#########################################################################################################
V_GREP=`which grep | grep -v -i "alias"` 
if [ -x ${V_GREP} ]
then
  R_GREP=${V_GREP}
else
  check_error 1 "GREP does not exist"
fi
#########################################################################################################
V_EGREP=`which egrep | grep -v -i "alias"` 
if [ -x ${V_EGREP} ]
then
  R_EGREP=${V_EGREP}
else
  check_error 1 "EGREP does not exist"
fi
#########################################################################################################
V_WC=`which wc | grep -v -i "alias"` 
if [ -x ${V_WC} ]
then
  R_WC=${V_WC}
else
  check_error 1 "WC does not exist"
fi
#########################################################################################################
V_IFCONFIG=`which ifconfig | grep -v -i "alias"` 
if [ -x ${V_IFCONFIG} ]
then
  R_IFCONFIG=${V_IFCONFIG}
else
  check_error 1 "IFCONFIG does not exist"
fi
#########################################################################################################
V_IP=`which ip | grep -v -i "alias"` 
if [ -x ${V_IP} ]
then
  R_IP=${V_IP}
else
  check_error 1 "IP does not exist"
fi
#########################################################################################################
V_HOSTNAME=`which hostname | grep -v -i "alias"` 
if [ -x ${V_HOSTNAME} ]
then
  R_HOSTNAME=${V_HOSTNAME}
else
  check_error 1 "HOSTNAME does not exist"
fi
#########################################################################################################
V_HOSTNAMECTL=`which hostnamectl | grep -v -i "alias"` 
if [ -x ${V_HOSTNAMECTL} ]
then
  R_HOSTNAME=`${V_HOSTNAMECTL} | egrep "Static hostname:" | awk '{ print $3, $4 }'`
else
  check_error 1 "HOSTNAMECTL does not exist"
fi
#########################################################################################################
V_WHOAMI=`which whoami | grep -v -i "alias"` 
if [ -x ${V_WHOAMI} ]
then
  R_WHOAMI=${V_WHOAMI}
else
  check_error 1 "WHOAMI does not exist"
fi
#########################################################################################################
V_SLEEP=`which sleep | grep -v -i "alias"` 
if [ -x ${V_SLEEP} ]
then
  R_SLEEP=${V_SLEEP}
else
  check_error 1 "SLEEP does not exist"
fi
#########################################################################################################
V_DF=`which df | grep -v -i "alias"` 
if [ -x ${V_DF} ]
then
  R_DF=${V_DF}
else
  check_error 1 "DF does not exist"
fi
#########################################################################################################
V_DMIDECODE=`which dmidecode | grep -v -i "alias"`
if [ -x ${V_DMIDECODE} ]
then
  R_DMIDECODE=${V_DMIDECODE}
else
  check_error 1 "DMIDECODE does not exist"
fi
#########################################################################################################
V_LSHW=`which lshw | grep -v -i "alias"` 
if [ -x ${V_LSHW} ]
then
  R_LSHW=${V_LSHW}
else
  check_error 1 "LSHW does not exist"
fi
#########################################################################################################
V_SENSORS=`which sensors | grep -v -i "alias"` 
if [ -x ${V_SENSORS} ]
then
  R_SENSORS=${V_SENSORS}
else
  check_error 1 "SENSORS does not exist"
fi
#########################################################################################################
V_UNAME=`which uname | grep -v -i "alias"` 
if [ -x ${V_UNAME} ]
then
  R_UNAME=${V_UNAME}
else
  check_error 1 "UNAME does not exist"
fi
#########################################################################################################
V_CUT=`which cut | grep -v -i "alias"` 
if [ -x ${V_CUT} ]
then
  R_CUT=${V_CUT}
else
  check_error 1 "CUT does not exist"
fi
#
#########################################################################################################
#
if [ `uname` = "SunOS" ]
then
  OS="Solaris"
  if [ -x ${R_IFCONFIG} ]
  then
    IPADDR=`${R_IFCONFIG} -a | egrep inet | awk '{ print $2 }' | head -2 | egrep -v 127.0.0.1 | head -1`
  elif [ -x ${R_IP} ]
  then
    IPADDR=`${R_IP} a | egrep -v -i "inet6|link|127.0.0.1|lo:" | egrep "inet" | awk '{ print $2 }' | head -1`
  else
    IPADDR="Your OS Does Not Have The IP Configuration"
  fi
  if [ -x ${R_HOSTNAME} ]
  then
    HOST=`hostname`
  elif [ -x ${R_HOSTNAMECTL} ]
  then
    HOST=`hostname`
  else
    HOST="Your OS Does Not Have The HOSTNAME Configuration"
  fi
  RED="[\033[1;31m"
  YEL="[\033[1;33m"
  BLUE="[\033[1;34m"
  GREEN="[\033[1;32m"
  BLACK="\033[m]"
  ECHO=" -e "
  WHOIS=`${R_WHOAMI}`
  SLEEP=`${R_SLEEP} 2`
  OSDISTRO="SUN Solaris"
  ORATAB="/var/opt/oracle/oratab"
  if [ -x ${R_LSHW} ]
  then
    SRVMEMBANK=`${R_LSHW} -class memory | egrep "bank" | egrep -v -i "[empty]" | wc -l`
    SRVDISKS=`${R_LSHW} -class disk | egrep "disk" | wc -l`
  else
    SRVMEMBANK="Your OS Does Not Have The LSWH"
    SRVDISKS="Your OS Does Not Have The LSWH"
  fi
  if [ -x ${R_SENSORS} ]
  then
    SRVTEMPERATURE=`${R_SENSORS} | egrep "temp" | awk '{ print $2 }'`
  else
    SRVTEMPERATURE="Your OS Does Not Have The SENSORS"
  fi
  SRVHARDWARE=`${R_DMIDECODE} -t system | egrep "Product Name:" | awk '{ print $3, $4, $5 }'`
#########################################################################################################
elif [ `uname` = "AIX" ]
then
  OS="AIX"
  if [ -x ${R_IFCONFIG} ]
  then
    IPADDR=`${R_IFCONFIG} -a | egrep inet | awk '{ print $2 }' | head -2 | egrep -v 127.0.0.1 | head -1`
  elif [ -x ${R_IP} ]
  then
    IPADDR=`${R_IP} a | egrep -v -i "inet6|link|127.0.0.1|lo:" | egrep "inet" | awk '{ print $2 }' | head -1`
  else
    IPADDR="Your OS Does Not Have The IP Configuration"
  fi
  if [ -x ${R_HOSTNAME} ]
  then
    HOST=`hostname`
  elif [ -x ${R_HOSTNAMECTL} ]
  then
    HOST=`hostname`
  else
    HOST="Your OS Does Not Have The HOSTNAME Configuration"
  fi
  RED="[\033[1;31m"
  YEL="[\033[1;33m"
  BLUE="[\033[1;34m"
  GREEN="[\033[1;32m"
  BLACK="\033[m]"
  ECHO=" -e "
  WHOIS=`${R_WHOAMI}`
  SLEEP=${R_SLEEP} 2
  OSDISTRO="IBM AIX"
  ORATAB="/etc/oratab"
  if [ -x ${R_LSHW} ]
  then
    SRVMEMBANK=`${R_LSHW} -class memory | egrep "bank" | egrep -v -i "[empty]" | wc -l`
    SRVDISKS=`${R_LSHW} -class disk | egrep "disk" | wc -l`
  else
    SRVMEMBANK="Your OS Does Not Have The LSWH"
    SRVDISKS="Your OS Does Not Have The LSWH"
  fi
  if [ -x ${R_SENSORS} ]
  then
    SRVTEMPERATURE=`${R_SENSORS} | egrep "temp" | awk '{ print $2 }'`
  else
    SRVTEMPERATURE="Your OS Does Not Have The SENSORS"
  fi
  SRVHARDWARE=`dmidecode -t system | egrep "Product Name:" | awk '{ print $3, $4, $5 }'`
#########################################################################################################
elif [ `uname` = "HP-UX" ]
then
  OS="HP-UX"
  if [ -x ${R_IFCONFIG} ]
  then
    IPADDR=`${R_IFCONFIG} -a | egrep inet | awk '{ print $2 }' | head -2 | egrep -v 127.0.0.1 | head -1`
  elif [ -x ${R_IP} ]
  then
    IPADDR=`${R_IP} a | egrep -v -i "inet6|link|127.0.0.1|lo:" | egrep "inet" | awk '{ print $2 }' | head -1`
  else
    IPADDR="Your OS Does Not Have The IP Configuration"
  fi
  if [ -x ${R_HOSTNAME} ]
  then
    HOST=`hostname`
  elif [ -x ${R_HOSTNAMECTL} ]
  then
    HOST=`hostname`
  else
    HOST="Your OS Does Not Have The HOSTNAME Configuration"
  fi
  RED="[\033[1;31m"
  YEL="[\033[1;33m"
  BLUE="[\033[1;34m"
  GREEN="[\033[1;32m"
  BLACK="\033[m]"
  ECHO=" -e "
  WHOIS=`${R_WHOAMI} -m | awk '{ print $1 }'`
  SLEEP=`${R_SLEEP} 2`
  OSDISTRO="HP-UX"
  ORATAB="/var/opt/oracle/oratab"
  if [ -x ${R_LSHW} ]
  then
    SRVMEMBANK=`${R_LSHW} -class memory | egrep "bank" | egrep -v -i "[empty]" | wc -l`
    SRVDISKS=`${R_LSHW} -class disk | egrep "disk" | wc -l`
  else
    SRVMEMBANK="Your OS Does Not Have The LSWH"
    SRVDISKS="Your OS Does Not Have The LSWH"
  fi
  if [ -x ${R_SENSORS} ]
  then
    SRVTEMPERATURE=`${R_SENSORS} | egrep "temp" | awk '{ print $2 }'`
  else
    SRVTEMPERATURE="Your OS Does Not Have The SENSORS"
  fi
  SRVHARDWARE=`dmidecode -t system | egrep "Product Name:" | awk '{ print $3, $4, $5 }'`
#########################################################################################################
elif [ `uname` = "Linux" ]
then
  OS="Linux"
  if [ -x ${R_IFCONFIG} ]
  then
    IPADDR=`${R_IFCONFIG} -a | egrep inet | awk '{ print $2 }' | head -2 | egrep -v 127.0.0.1 | head -1`
  elif [ -x ${R_IP} ]
  then
    IPADDR=`${R_IP} a | egrep -v -i "inet6|link|127.0.0.1|lo:" | egrep "inet" | awk '{ print $2 }' | head -1`
  else
    IPADDR="Your OS Does Not Have The IP Configuration"
  fi
  if [ -x ${R_HOSTNAME} ]
  then
    HOST=`hostname`
  elif [ -x ${R_HOSTNAMECTL} ]
  then
    HOST=`hostname`
  else
    HOST="Your OS Does Not Have The HOSTNAME Configuration"
  fi
  RED="[\e[1;31;40m"
  YEL="[\e[1;33;40m"
  BLUE="[\e[1;34;40m"
  GREEN="[\e[1;32;40m"
  BLACK="\e[0m]"
  ECHO=" -e "
  WHOIS=`${R_WHOAMI}`
  SLEEP=`${R_SLEEP} 1`
  OSDISTRO=`cat /etc/system-release`
  ORATAB="/etc/oratab"
  if [ -x ${R_LSHW} ]
  then
    SRVMEMBANK=`${R_LSHW} -class memory | egrep "bank" | egrep -v -i "[empty]" | wc -l`
    SRVDISKS=`${R_LSHW} -class disk | egrep "disk" | wc -l`
  else
    SRVMEMBANK="Your OS Does Not Have The LSWH"
    SRVDISKS="Your OS Does Not Have The LSWH"
  fi
  if [ -x ${R_SENSORS} ]
  then
    SRVTEMPERATURE=`${R_SENSORS} | egrep "temp" | awk '{ print $2 }'`
  else
    SRVTEMPERATURE="Your OS Does Not Have The SENSORS"
  fi
  SRVHARDWARE=`dmidecode -t system | egrep "Product Name:" | awk '{ print $3, $4, $5 }'`
#########################################################################################################
elif [ `uname` = "Darwin" ]
then
  OS="Darwin"
  if [ -x ${R_IFCONFIG} ]
  then
    IPADDR=`${R_IFCONFIG} -a | egrep inet | awk '{ print $2 }' | head -2 | egrep -v 127.0.0.1 | head -1`
  elif [ -x ${R_IP} ]
  then
    IPADDR=`${R_IP} a | egrep -v -i "inet6|link|127.0.0.1|lo:" | egrep "inet" | awk '{ print $2 }' | head -1`
  else
    IPADDR="Your OS Does Not Have The IP Configuration"
  fi
  if [ -x ${R_HOSTNAME} ]
  then
    HOST=`hostname`
  elif [ -x ${R_HOSTNAMECTL} ]
  then
    HOST=`hostname`
  else
    HOST="Your OS Does Not Have The HOSTNAME Configuration"
  fi
  RED="[\033[1;31m"
  YEL="[\033[1;33m"
  BLUE="[\033[1;34m"
  GREEN="[\033[1;32m"
  BLACK="\033[m]"
  ECHO=" "
  WHOIS=`${R_WHOAMI}`
  SLEEP=`${R_SLEEP} 2`
  OSDISTRO="Mac OS X"
  ORATAB="/etc/oratab"
  if [ -x ${R_LSHW} ]
  then
    SRVMEMBANK=`${R_LSHW} -class memory | egrep "bank" | egrep -v -i "[empty]" | wc -l`
    SRVDISKS=`${R_LSHW} -class disk | egrep "disk" | wc -l`
  else
    SRVMEMBANK="Your OS Does Not Have The LSWH"
    SRVDISKS="Your OS Does Not Have The LSWH"
  fi
  if [ -x ${R_SENSORS} ]
  then
    SRVTEMPERATURE=`${R_SENSORS} | egrep "temp" | awk '{ print $2 }'`
  else
    SRVTEMPERATURE="Your OS Does Not Have The SENSORS"
  fi
  SRVHARDWARE=`dmidecode -t system | egrep "Product Name:" | awk '{ print $3, $4, $5 }'`
#########################################################################################################
else
  OS="Unknown"
  if [ -x ${R_IFCONFIG} ]
  then
    IPADDR=`${R_IFCONFIG} -a | egrep inet | awk '{ print $2 }' | head -2 | egrep -v 127.0.0.1 | head -1`
  elif [ -x ${R_IP} ]
  then
    IPADDR=`${R_IP} a | egrep -v -i "inet6|link|127.0.0.1|lo:" | egrep "inet" | awk '{ print $2 }' | head -1`
  else
    IPADDR="Your OS Does Not Have The IP Configuration"
  fi
  if [ -x ${R_HOSTNAME} ]
  then
    HOST=`hostname`
  elif [ -x ${R_HOSTNAMECTL} ]
  then
    HOST=`hostname`
  else
    HOST="Your OS Does Not Have The HOSTNAME Configuration"
  fi
  RED="["
  YEL="["
  BLUE="["
  GREEN="["
  BLACK="]"
  ECHO=" "
  WHOIS=`${R_WHOAMI}`
  SLEEP=`${R_SLEEP} 2`
  OSDISTRO="Unknown OS"
  ORATAB="/etc/oratab"
  if [ -x ${R_LSHW} ]
  then
    SRVMEMBANK=`${R_LSHW} -class memory | egrep "bank" | egrep -v -i "[empty]" | wc -l`
    SRVDISKS=`${R_LSHW} -class disk | egrep "disk" | wc -l`
  else
    SRVMEMBANK="Your OS Does Not Have The LSWH"
    SRVDISKS="Your OS Does Not Have The LSWH"
  fi
  if [ -x ${R_SENSORS} ]
  then
    SRVTEMPERATURE=`${R_SENSORS} | egrep "temp" | awk '{ print $2 }'`
  else
    SRVTEMPERATURE="Your OS Does Not Have The SENSORS"
  fi
  SRVHARDWARE=`dmidecode -t system | egrep "Product Name:" | awk '{ print $3, $4, $5 }'`
fi
#########################################################################################################
if [ ${WHOIS} = "root" ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- YOUR USER IS ${RED} ROOT ${BLACK}, YOU CAN NOT USE THIS SCRIPT WITH ROOT USER --"
  echo ${ECHO} " -- PLEASE USE AN OTHER USER TO ACCESS THIS SCRIPTS --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  exit 1
fi
#########################################################################################################
if [ ${OS} = "Unknown" ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- THE OPERATION SYSTEM: ${RED} ${OS} ${BLACK} IS ${RED} NOT ${BLACK} SUPPORTED ON THIS SCRIPT --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  exit 1
else
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- THE OPERATION SYSTEM: ${RED} ${OS} ${BLACK} IS SUPPORTED ON THIS SCRIPT --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  sleep 2
fi
#########################################################################################################
if [ "${ORACLE_HOME}" = "" ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- THE ${RED} ORACLE_HOME ${BLACK} VARIABLE IS NOT SET YET --"
  echo ${ECHO} " -- SET THE VARIABLE AND TRY AGAIN --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  exit 1
fi
#########################################################################################################
if [ "${ORACLE_SID}" = "" ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- THE ${RED} ORACLE_SID ${BLACK} VARIABLE IS NOT SET YET --"
  echo ${ECHO} " -- SET THE VARIABLE AND TRY AGAIN --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  exit 1
fi
#########################################################################################################
if [ `cat ${ORATAB} | egrep "ASM*" | grep -v "^#" | grep -v "^$" | grep -v agent | awk 'BEGIN {FS=":"} { printf("\t%s\n", $2)}' | uniq | awk '{ print $1 }' | wc -l` = 0 ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- THE ${RED} GRID_HOME ${BLACK} VARIABLE DOES NOT EXIST --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
else
  if [ "${GRID_HOME}" = "" ]
  then
    clear
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- THE ${RED} GRID_HOME ${BLACK} VARIABLE IS SETTING NOW --"
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    GRID_HOME=`cat ${ORATAB} | egrep "ASM*" | grep -v "^#" | grep -v "^$" | grep -v agent | awk 'BEGIN {FS=":"} { printf("\t%s\n", $2)}' | uniq | awk '{ print $1 }'`
    clear
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- THE ${RED} GRID_HOME ${BLACK} VARIABLE IS: ${GRID_HOME} --"
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  fi
fi
#
#########################################################################################################
# Load Bar Progress Solaris
#########################################################################################################
#
function func_sun_load()
{
progress_sun_bar() 
{
local duration=${1}
  already_done() { for ((done=0; done<$elapsed; done++)); do printf "#"; done }
  remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
  percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
  clean_line() { printf "\r"; }
for (( elapsed=1; elapsed<=$duration; elapsed++ ))
do
  already_done; remaining; percentage
  # sleep 1
  clean_line
done
clean_line
}
progress_sun_bar 100
}
#
#########################################################################################################
# Load Bar Progress AIX
#########################################################################################################
#
function func_aix_load()
{
progress_aix_bar() 
{
local duration=${1}
  already_done() { for ((done=0; done<$elapsed; done++)); do printf "#"; done }
  remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
  percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
  clean_line() { printf "\r"; }
for (( elapsed=1; elapsed<=$duration; elapsed++ ))
do
  already_done; remaining; percentage
  # sleep 1
  clean_line
done
clean_line
}
progress_aix_bar 100
}
#
#########################################################################################################
# Load Bar Progress Linux
#########################################################################################################
#
function func_linx_load()
{
 {
 for ((i = 0 ; i <= 100; i+=10))
 do
   sleep 0.05
   echo $i
 done
 } | whiptail --gauge "LOADING..." 6 50 0
}
#
#########################################################################################################
# Load Bar Progress HP-UX
#########################################################################################################
#
function func_hpux_load()
{
progress_hpux_bar() 
{
local duration=${1}
  already_done() { for ((done=0; done<$elapsed; done++)); do printf "#"; done }
  remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
  percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
  clean_line() { printf "\r"; }
for (( elapsed=1; elapsed<=$duration; elapsed++ ))
do
  already_done; remaining; percentage
  # sleep 1
  clean_line
done
clean_line
}
progress_hpux_bar 100
}
#
#########################################################################################################
# Load Bar Progress MAC
#########################################################################################################
#
function func_mac_load() {
{
  for ((i = 0 ; i <= 100; i+=10))
  do
    sleep 0.10
    echo $i
  done
  } | whiptail --gauge "LOADING..." 6 50 0
}
#
#########################################################################################################
# Load Bar Progress GENERIC
#########################################################################################################
#
function func_gen_load() {
  {
  for ((i = 0 ; i <= 100; i+=10))
  do
    sleep 0.10
    echo $i
  done
  } | whiptail --gauge "LOADING..." 6 50 0
}
#
#########################################################################################################
# LOAD BAR
#########################################################################################################
#
function func_load() {
if [ `uname` = "SunOS" ]
then
  func_sun_load
elif [ `uname` = "AIX" ]
then
  func_aix_load
elif [ `uname` = "HP-UX" ]
then
  func_hpux_load
elif [ `uname` = "Linux" ]
then
  func_linx_load
elif [ `uname` = "Darwin" ]
then
  func_mac_load
else
  func_gen_load
fi
}
#
#########################################################################################################
# Verify Solaris Disk Space
#########################################################################################################
#
function func_sun_disk_space() {
 WARNING=80
CRITICAL=90
df -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d '%' -f1 )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }')
  if [[ "${USEP}" -ge "${CRITICAL}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Critical: ${RED} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  elif [[ "${USEP}" -ge "${WARNING}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Warning: ${YEL} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  else
    echo ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space OK: ${GREEN} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  fi
done
}
#
#########################################################################################################
# Verify AIX Disk Space
#########################################################################################################
#
function func_aix_disk_space() {
 WARNING="80"
CRITICAL="90"
df -g | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $4 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d '%' -f1 )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }')
  if [ "${USEP}" -ge "${CRITICAL}" ]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Critical: ${RED} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  elif [ "${USEP}" -ge "${WARNING}" ]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Warning: ${YEL} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  else
    echo ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space OK: ${GREEN} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  fi
done
}
#
#########################################################################################################
# Verify HP-UX Disk Space
#########################################################################################################
#
function func_hpux_disk_space() {
 WARNING=80
CRITICAL=90
df -g | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $4 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d '%' -f1 )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }')
  if [[ "${USEP}" -ge "${CRITICAL}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Critical: ${RED} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  elif [[ "${USEP}" -ge "${WARNING}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Warning: ${YEL} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  else
    echo ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space OK: ${GREEN} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  fi
done
}
#
#########################################################################################################
# Verify LINUX Disk Space
#########################################################################################################
#
function func_linx_disk_space() {
 WARNING=80
CRITICAL=90
df -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 " " $6 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d '%' -f1 )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }')
  if [[ "${USEP}" -ge "${CRITICAL}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Critical: ${RED} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  elif [[ "${USEP}" -ge "${WARNING}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Warning: ${YEL} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  else
    echo ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space OK: ${GREEN} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  fi
done
# sleep 0.5
}
#
# df -hTP | awk 'NR==1 {print}; {print}'
#
#########################################################################################################
# Verify MAC Disk Space
#########################################################################################################
#
function func_mac_disk_space() {
 WARNING=80
CRITICAL=90
df -g | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $4 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d '%' -f1 )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }')
  if [[ "${USEP}" -ge "${CRITICAL}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Critical: ${RED} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  elif [[ "${USEP}" -ge "${WARNING}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Warning: ${YEL} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  else
    echo ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space OK: ${GREEN} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  fi
done
}
#
#########################################################################################################
# Verify GENERIC Disk Space
#########################################################################################################
#
function func_gen_disk_space() {
 WARNING=80
CRITICAL=90
df -g | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $4 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d '%' -f1 )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }')
  if [[ "${USEP}" -ge "${CRITICAL}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Critical: ${RED} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  elif [[ "${USEP}" -ge "${WARNING}" ]]; then
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space Warning: ${YEL} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  else
    echo ">--------------------------------------------------------------------------------------------------"
    echo ${ECHO} " -- Disk Space OK: ${GREEN} \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  fi
done
}
#
#########################################################################################################
# Disk Space by OS
#########################################################################################################
#
function disk_space() {
if [ `uname` = "SunOS" ]; then
  func_sun_disk_space
elif [ `uname` = "AIX" ]; then
  func_aix_disk_space
elif [ `uname` = "HP-UX" ]; then
  func_hpux_disk_space
elif [ `uname` = "Linux" ]; then
  func_linx_disk_space
elif [ `uname` = "Darwin" ]; then
  func_mac_disk_space
else
  func_gen_disk_space
fi
}
disk_space
#
#########################################################################################################
# Functions
#########################################################################################################
#
#########################################################################################################
# Exadata ASMDU
#########################################################################################################
#
function func_exa_asmdu() {
# Fred Denis -- Jun 2016 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# This scripts shows a clear and colored status of the ASM used and free space
# Please have a look at the usage function or $0 -h for the available options and their description
# More information and screenshots : https://unknowndba.blogspot.ca/2018/03/asmdush-far-better-du-for-asmcmd.html
#
# A note on the --nocp option
# Note that the --nocp asmcmd option (it disables the connection pooling) has been originaly implemented
# as a workaround of a bug that appeared with the April 2016 PSU
# It resolves error messages like this one :
# sh: -c: line 0: unexpected EOF while looking for matching `''
# sh: -c: line 1: syntax error: unexpected end of file
#
#
# The current version of the script is 20190219
#
# 20190219 - Fred Denis - Some had issues with the instance list, I then moved from sed to cut to fix it -- Thanks Jakub !
# 20181218 - Fred Denis - A new -n option to print with no color -- DEFAULT_NOCOLOR can be used to modify the default behavior
#                       - Fixed the regexp to list the instances running
# 20180827 - Fred Denis - A better regexp to list the instances running
# 20180503 - Fred Denis - GI 12c introduces a "Logical_Sector" column, took this into account (Thanks Leon !)
# 20180327 - Fred Denis - "Raw Used " label for the subdirectories "Mirror_used_MB" column, adjustments in the help
# 20180318 - Fred Denis - Shows only mirrored sizes by default and the total non mirrored size only shown with the -v option
# 20180211 - Fred Denis - Many improvements:
#                       - -d options to list the subdirectories of a directory
#                       - -v option to show the Raw Free and Reserverd size
#                       - -m -g and -t to choose the Unit you want the report to be in
#                       - Default values and verbosity can be changed using the DEFAULT_UNIT and the DEFAULT_VERBOSE variables
#                       - A nice usage function
# 20170719 - Fred Denis - Remove the --nocp option as default
#
# Default values (when no option is specified in the command line)
# The last uncommented value wins
#
DEFAULT_UNIT="MB"       # asmcmd default
DEFAULT_UNIT="GB"
DEFAULT_UNIT="TB"
DEFAULT_VERBOSE="Yes"
DEFAULT_VERBOSE="No"
DEFAULT_NOCOLOR="Yes"   # Print with no color
DEFAULT_NOCOLOR="No"    # Print with colors
#
# Colored thresholds (Red, Yellow, Green)
#
 WARNING=80
CRITICAL=90
#
# A color for a nice header
#
WHITE="\033[1;37m"
END_COLOR="\033[m"
#
# An usage function
#
usage() {
printf "\n\033[1;37m%-8s\033[m\n" "NAME";
cat << END
asmdu.sh - Shows a nice summary of the ASM DiskGroups Sizes
END

printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS";
cat << END
$0 [-d] [-m -g -t] [-n] [-v] [-h]
END

printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION";
cat << END
$0 needs to be executed as the GI owner user to be able to use asmcmd
With no option $0 will be showing what instances are running and a size summary for each DiskGroup
END

printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS";
cat << END
  -d        The directory you want the size details
  -v        Verbose -- show the "Total Raw", "Raw Free" and "Reserved" size
            You can change the default behavior with the DEFAULT_VERBOSE variable
  -m        Shows the output in MB
  -g        Shows the output in GB
  -t        Shows the output in TB
  -m -g -t  The default Unit can be specified using the DEFAULT_UNIT variable
            If more than one of these options is specified, the last one wins
  -n        Shows the output with no color (handy to send it by email)
  -h        Shows this help
END
exit 123
}
#
# Parameters management
#
PARAM_UNIT=""
PARAM_VERBOSE=""
#
while getopts "d:mgtnvh" OPT
do
  case ${OPT} in
    d) D=${OPTARG};;
    m) PARAM_UNIT="MB";;
    g) PARAM_UNIT="GB";;
    t) PARAM_UNIT="TB";;
    n) PARAM_NOCOLOR="Yes";;
    v) PARAM_VERBOSE="Yes";;
    h) usage;;
    \?) echo "Invalid option: -$OPTARG" >&2; usage;;
  esac
done

if [[ -z ${PARAM_UNIT} ]]
then # No parameter specified, we use the default
  UNIT=${DEFAULT_UNIT}
else
  UNIT=${PARAM_UNIT}
fi
if [[ -z ${PARAM_VERBOSE} ]]
then # No parameter specified, we use the default
  VERBOSE=${DEFAULT_VERBOSE}
else
  VERBOSE=${PARAM_VERBOSE}
fi
if [[ -z ${PARAM_NOCOLOR} ]]
then # No parameter specified, we use the default
  NOCOLOR=${DEFAULT_NOCOLOR}
else
  NOCOLOR=${PARAM_NOCOLOR}
fi
if [[ ${NOCOLOR} == "Yes" ]]
then
  WHITE=""
  END_COLOR=""
fi

#
# Set the ASM env
#
OLD_SID=${ORACLE_SID}
ORACLE_SID=`ps -ef | grep pmon | grep asm | awk '{print $NF}' | sed s'/asm_pmon_//' | egrep "^[+]"`
export ORAENV_ASK=NO
. oraenv > /dev/null 2>&1

#
# A quick list of the instances that are running on the server
#
ps -ef | grep pmon | grep -v grep | awk '{print $NF}' | cut -d_ -f3,4 | sort | awk -v H="`hostname -s`" 'BEGIN {printf("\n%s", "Instances running on " H " : ")} { printf("%s, ", $0)} END{printf("\n")}' | sed s'/, $//'

#
# Manage parameters
#
if [[ -z $D ]]; then                                                     # No directory provided, will check all the DG
  DG=`asmcmd lsdg | grep -v State | awk '{print $NF}' | sed s'/\///'`
  SUBDIR="No"                                                            # Do not show the subdirectories details if no directory is specified
else
  DG=`echo $D | sed s'/\/.*$//g'`
fi

#
# A header
#
printf "\n%25s%16s${WHITE}%16s${END_COLOR}" "DiskGroup" "Redundancy" "Total ${UNIT}"  # "Raw Free ${UNIT}" "Reserved ${UNIT}"  "Usable ${UNIT}" "% Free"
if [[ ${VERBOSE} == "Yes" ]]; then
  printf "%16s%16s%16s" "Raw Total ${UNIT}" "Raw Free ${UNIT}" "Reserved ${UNIT}"
fi
printf "${WHITE}%16s%14s${END_COLOR}\n" "Usable ${UNIT}" "% Free"
printf "%25s%16s${WHITE}%16s${END_COLOR}"   "---------"     "-----------" "--------"
if [[ ${VERBOSE} == "Yes" ]]; then
  printf "%16s%16s%16s"           "------------"  "-----------" "-----------"
fi
printf "${WHITE}%16s${END_COLOR}%14s\n"     "---------"     "------"

#
# Show DG info
#
for X in ${DG}
do
  asmcmd lsdg ${X} | tail -1 | awk -v DG="$X" -v W="$WARNING" -v C="$CRITICAL" -v UNIT="$UNIT" -v VERBOSE="$VERBOSE" -v NOCOLOR="$NOCOLOR" '\
  BEGIN \
  {
  if (NOCOLOR == "Yes")
    {
    COLOR_BEGIN = "";
    COLOR_END = "";
    RED = "";
    GREEN = "";
    YELLOW = "";
    WHITE = "";
    COLOR = "";
    } 
  else 
    {
    COLOR_BEGIN = "\033[1;";
    COLOR_END = "\033[m";
    RED = COLOR_BEGIN"31m";
    GREEN = COLOR_BEGIN"32m";
    YELLOW = COLOR_BEGIN"33m";
    WHITE = COLOR_BEGIN"37m";
    COLOR = GREEN;
    }
  DIVIDER = 1;                                              # Unit divider
  RED_DIV = 1;                                              # Redundancy divider

  if (UNIT == "GB") { DIVIDER="1024"};
  if (UNIT == "TB") { DIVIDER="1048576"};                   # 1024 * 1024
  }
  {
  if ($2 == "HIGH") {RED_DIV=3;}                            # Redundancy divider
  if ($2 == "NORMAL") {RED_DIV=2;}                          # Redundancy divider

  TOTAL = sprintf("%16.2f", $(NF-6)/DIVIDER/RED_DIV);       # Total mirrored in Unit
  USABLE = sprintf("%16.2f", $(NF-3)/DIVIDER);              # Usable space in Unit
  FREE = sprintf("%12d", USABLE/TOTAL*100);                 # % Free calculated using the Usable size

  if ((100-FREE) > W) { COLOR=YELLOW;}                      # Colored %Free thresholds
  if ((100-FREE) > C) { COLOR=RED;}                         # Colored %Free thresholds

  printf("%25s%16s%16s", DG, $2, WHITE TOTAL COLOR_END);    # DG Redundancy and Total

  if (VERBOSE == "Yes")
  {
    printf("%16.2f%16.2f%16.2f", $(NF-6)/DIVIDER, $(NF-5)/DIVIDER, $(NF-4)/DIVIDER);       # Total Raw, Raw Free and reserved if Verbose
  }
    printf("%16s%14s\n", WHITE USABLE COLOR_END, COLOR FREE COLOR_END);       # Usable and Free %
  }'
done
printf "\n"

#
# Subdirs info
#
if [ -z ${SUBDIR} ]
then
  (for DIR in `asmcmd ls ${D}`
do
  echo ${DIR} `asmcmd --nocp du ${D}/${DIR} | tail -1`      # Please look at the "About the --nocp option" notes in the header for more information
# echo ${DIR} `asmcmd du ${D}/${DIR} | tail -1`
done) | awk -v D="$D" -v UNIT="$UNIT"\
  ' BEGIN {    printf("\n\t\t%40s\n\n", D " subdirectories size")                      ;
               printf("%25s%16s%16s\n", "Subdir", "Used " UNIT, "Raw Used " UNIT)      ;
               printf("%25s%16s%16s\n", "------", "-------", "-----------")            ;

               DIVIDER=1                                                               ;
            if (UNIT == "GB") { DIVIDER="1024"}                                        ;
            if (UNIT == "TB") { DIVIDER="1048576"}                                     ;   # 1024 * 1024
           }
           {
               use=sprintf("%16.2f", $2/DIVIDER)                                       ;
               mir=sprintf("%16.2f", $3/DIVIDER)                                       ;

               printf("%25s%16s%16s\n", $1, use, mir)                                  ;

               total_use += $2                                                         ;
               total_mir += $3                                                         ;
            }
     END  {    total_use = sprintf("%16.2f", total_use/DIVIDER)                        ;
               total_mir = sprintf("%16.2f", total_mir/DIVIDER)                        ;
               printf("\n\n%25s%16s%16s\n", "------", "-------", "---------")          ;
               printf("%25s%16s%16s\n\n", "Total", total_use, total_mir)               ;
          } '
fi
#
# For information
#
if [[ ${VERBOSE} == "Yes" ]]
then
  printf "\t\t%40s\n\n" "Note : Usable = (Raw Free - Reserved)/Redundancy";
fi
}
#
#########################################################################################################
# Exadata Cell Status
#########################################################################################################
#
function func_exa_cell_status()
{
# Fred Denis -- May 2019 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# Shows a status of the cell disks and grid disks across all the nodes of an Exadata, see usage function (option -h) for more information
# More details on this scrit: https://unknowndba.blogspot.com/2019/05/cell-status-sh-overview-exadata-cells.html
#
# The current script version is 20190510
#
# History :
#
# 20190510 - Fred Denis - Initial release
#
# Variables
#
        NB_PER_LINE=$(bc <<< "`tput cols`/30")                                  # Number of DG to show per line,  can be changed with -n option
                TMP=/tmp/cell-status$$.tmp                                      # A tempfile
               TMP2=/tmp/cell-status2$$.tmp                                     # A tempfile
     SHOW_BAD_DISKS="NO"                                                        # Shows the details of the bad disks (-v option)
          DBMACHINE="/opt/oracle.SupportTools/onecommand/databasemachine.xml"   # databasemachine.xml file
#
# User used to connect to the cells `basename $0` -h for more information on this
#
               USER="root"                                                      # User to connect to the cells (-u option)
        NONROOTUSER="cellmonitor"                                               # User to connect to the cells if a non root user runs cell-status.sh (-u option)

        # If root is not used to run the script it is then less likely than root SSH keys will be deployed for this user
        # We then use ${NONROOTUSER} to connect
        if [[ $(id -u) -ne 0 ]]
        then
                USER=${NONROOTUSER}
        fi

#
# An usage function
#
usage()
{
printf "\n\033[1;37m%-8s\033[m\n" "NAME"                ;
cat << END
        `basename $0` shows a status of the Cell disks and the Grid disks on all the cells of an Exadata
END
printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS"            ;
cat << END
        $0 [-v] [-u] [-c] [-o] [-f] [-n] [-h]
END
printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION"         ;
cat << END
        - `basename $0` shows a status of the Cell disks and the Grid disks on all the cells of an Exadata
        - It has be be executed by a user with SSH equivalence on the cell servers
                - If `basename $0` is executed as root, then $USER is used to connect to the cells
                - If `basename $0` is executed as a non root user, then $NONROOTUSER is used to connect to the cells
                - You can change this behavior by forcing the use of a specific user with the -u option
        - About the cells `basename $0` reports about:
                - If `basename $0` is executed as root, it uses ibhosts to build the list of cells to connect to
                - If `basename $0` is executed as a non root user, it uses the databasemachine.xml file to build the list of cells to connect to
                - You can also specify a specific list of cells to analyze using the -c option
END
printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS"             ;
cat << END
        -v      Shows the details of the bad disks (with error or bad status)
        -u      User to connect to the cells (if the default does not suit you)
        -c      Specify a file which contains the cell list to connect to (aka cell_group)

        -o      Save the output of the dcli commands in a file (`basename $0` -o outputfile.log)
        -f      Use a file generated by the -o option as input (`basename $0` -f outputfile.log)
        -n      Number of diskgroups to show per line (if not specified, `basename $0` adapts it to the terminal size)

        -h      Shows this help

END
exit 123
}

#
# Options
#
while getopts "ho:f:n:vu:c:" OPT; do
        case ${OPT} in
        o)           OUT=${OPTARG}                                                              ;;
        f)            IN=${OPTARG}                                                              ;;
        n)   NB_PER_LINE=${OPTARG}                                                              ;;
        v)SHOW_BAD_DISKS="YES"                                                                  ;;
        u)          USER=${OPTARG}                                                              ;;
        c)    CELL_GROUP=${OPTARG}                                                              ;;
        h)         usage                                                                        ;;
        \?)        echo "Invalid option: -$OPTARG" >&2; usage                                   ;;
        esac
done

if [[ -z ${IN} ]]       # No input file specified, we dynamically find the info from the cells
then
  if [[ $(id -u) -eq 0 ]]
  then    # root is executing the script
    ibhosts | sed s'/"//' | grep cel | awk '{print $6}' | sort > ${TMP2}   # list of cells
  else    # When no root
    if [[ -f ${DBMACHINE} ]]
    then
      cat ${DBMACHINE} | awk 'BEGIN {FS="<|>"} {if ($3 == "cellnode") {while(getline) {if ($2 == "ADMINNAME") {print $3; break; } } }}' > ${TMP2}
    else
      cat << END
        Cannot access ${DBMACHINE}, cannot continue.
END
        exit 255
    fi
  fi
if [[ -n ${CELL_GROUP} && -f ${CELL_GROUP} ]]                           # If a cell_group file is specified we use it
then
  cp ${CELL_GROUP} ${TMP2}
fi
  dcli -g ${TMP2} -l ${USER} "echo celldisk; cellcli -e list celldisk attributes name,status,size,errorcount,disktype; echo BREAK; echo griddisk; cellcli -e list griddisk attributes asmDiskGroupName,name,asmmodestatus,asmdeactivationoutcome,size,errorcount,disktype; echo BREAK_CELL" > ${TMP}
  IN=${TMP}
fi
if [[ -n ${OUT} ]]      # Output file specified, we save the cell infos in and we exit
then
  cp ${TMP} ${OUT}
  rm ${TMP}
  cat << END
  Output file ${OUT} has been successfully generated.
END
exit 456
fi
if [[ ! -f ${IN} ]]
then
  cat << !
  Cannot find the file ${IN}; cannot continue.
!
exit 123
fi

#
# Show the Exadata model if possible
#
printf "\n"
if [ -f ${DBMACHINE} ] && [ -r ${DBMACHINE} ]
then
  cat << !
  Cluster is a `grep -i MACHINETYPES ${DBMACHINE} | sed s'/\t*//' | sed -e s':</*MACHINETYPES>::g' -e s'/^ *//' -e s'/ *$//'`
!
else
  printf "\n"
fi

#
# Read the information from the cells and make nice tables
#
awk -v nb_per_line="$NB_PER_LINE" -v show_bad_disks="$SHOW_BAD_DISKS" 'BEGIN\
        {
          # Some colors
             COLOR_BEGIN =       "\033[1;"                      ;
               COLOR_END =       "\033[m"                       ;
                     RED =       "31m"                          ;
                   GREEN =       "32m"                          ;
                  YELLOW =       "33m"                          ;
                    BLUE =       "34m"                          ;
                    TEAL =       "36m"                          ;
                   WHITE =       "37m"                          ;
                  NORMAL =        "0m"                          ;
          BACK_LIGHTBLUE =      "104m"                          ;
          RED_BACKGROUND =       "41m"                          ;
        # Column size
                COL_CELL =      20                              ;
            COL_DISKTYPE =      26                              ;
                  COL_NB =      COL_DISKTYPE/3                  ;
        }
        #
        # A function to center the outputs with colors
        #
        function center( str, n, color, sep)
        {       right = int((n - length(str)) / 2)                                                                    ;
              left  = n - length(str) - right                                                                         ;
              return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END sep, "", str, "" )                 ;
        }
        #
        # A function that just print a "---" white line
        #
        function print_a_line(size)
        {
               if ( ! size)
               {       size = COL_DB+COL_VER+(COL_NODE*n)+COL_TYPE+n+3                  ;
               }
               printf("%s", COLOR_BEGIN WHITE)                                          ;
               for (k=1; k<=size; k++) {printf("%s", "-");}                             ;
               printf("%s", COLOR_END"\n")                                              ;
        }
        {       sub (":", "", $1)                                                       ;
                if ($2 == "celldisk")
                {       cell = $1                                                       ;
                        tab_cell[cell] = cell                                           ;
                        while (getline)
                        {       sub (":", "", $1)                                       ;
                                if ($2 == "BREAK")
                                {
                                        break                                           ;
                                }
                                if ($3 == "normal")
                                {
                                        tab_status[cell,$NF,$3]++                       ;       # With status = normal
                                } else {
                                        bad_cell_disks[$0] = $0                         ;       # Bad disks with status != normal
                                }
                                tab_err[cell,$NF]+=$(NF-1)                              ;       # Disks with errors
                                if ($(NF-1) > 0)
                                {       bad_cell_disks[$0] = $0                         ;       # Details to show with -v option
                                }
                                tab_nbdisks[cell,$NF]++                                 ;       # NB disks per distype
                                tab_disktype[$NF]=$NF                                   ;       # Disktypes
                        }
                }       # End if ($2 == "celldisk")
                if ($2 == "griddisk")
                {       cell = $1                                                       ;
                        while(getline)
                        {       sub (":", "", $1)                                       ;
                                if ($2 == "BREAK_CELL")
                                {
                                        break                                           ;
                                }
                                if ($3 != "UNUSED")                                             # Unused disks have no DG
                                {
                                        tab2_err[cell,$2]+=$7                           ;       # Grid disks with errors
                                        if ($7 > 0)
                                        {       bad_grid_disks[$0] = $0                 ;       # Details to show with -v option
                                        }
                                        tab2_nbdisks[cell,$2]++                         ;       # Nb disks per diskgroup
                                        tab2_dgs[$2]=$2                                 ;       # Diskgroups
                                        if (tolower($5) != "yes")                               # asmDeactivationOutcome
                                        {       tab2_deact[cell,$2]="no"                ;
                                                bad_grid_disks[$0] = $0                 ;       # Details to show with -v option
                                        }
                                        if ($4 == "ONLINE")
                                        {       tab2_status[cell,$2]++                  ;       # cell,DG
                                        } else {
                                                tab2_bad[cell,$2]++                     ;       # bad status disks
                                                bad_grid_disks[$0] = $0                 ;       # Details to show with -v option
                                        }
                                }
                        }
                }       # End if ($2 == "griddisk")

        }
        function print_blue_hyphen(size, sep)
        {
                printf ("%s", center("--", size, BLUE, sep))                            ;       # Just print a blue "--"
        }
        function print_red_cross(size, sep)
        {
                printf ("%s", center("xx", size, COLOR_STATUS, sep))                    ;       # Just print a red "xx"
        }
        function print_legend()
        {       # A legend behind the tables
                printf(COLOR_BEGIN BLUE " %-"3"s" COLOR_END, "--")                              ;
                printf(COLOR_BEGIN WHITE " %-"12"s |" COLOR_END, ": Unused disks")              ;
                printf(COLOR_BEGIN RED " %-"3"s" COLOR_END, "xx")                               ;
                printf(COLOR_BEGIN WHITE " %-"20"s |" COLOR_END, ": Not ONLINE disks")          ;
                printf(COLOR_BEGIN RED_BACKGROUND " %-"3"s" COLOR_END, "  ")                    ;
                printf(COLOR_BEGIN WHITE " %-"20"s" COLOR_END, ": asmDeactivationOutcome is NOT yes");
        }
        function print_table(in_array, in_title, in_header)
        {
                # Print a table from in_array adapting every column to the largest colum in the table
                # including the header from in_header hich is a string collectyion separated by blank like "col1 col2 col3"
                # Only the first column always have a COL_CELL size to match with the other tables to keep nice output
                # It then always make a nice table and it was fun to code :)
                a=asort(in_array, sorted)                                               ;
                sorted[a+1]= in_header                                                  ;       # Table header
                print sorted[0]                                          ;
                printf("%s", center(in_title, COL_CELL, TEAL))       ;
                printf("\n")                                                            ;
                for (i=1; i<=a+1; i++)                                                          # For each line
                {       split(sorted[i], bad)                            ;
                        for (j=1; j<=length(bad); j++)                                          # For each column
                        {       if (j == 1)                                                     # To have the cell column same on all tables
                                {       size[j] = COL_CELL                              ;
                                } else {
                                        if (length(bad[j])>size[j]) { size[j] = length(bad[j])+2}       ;
                                }
                        }
                }
                line_size=0                                                             ;
                for (k=1; k<=length(size); k++) { line_size+=size[k]                    ;}
                for (i=1; i<=a; i++)                                                            # For each line
                {       split(sorted[i], bad)                            ;
                        if (i == 1)
                        {       for (j=1; j<=length(bad); j++)                                  # For each column
                                {       split(sorted[a+1], title)        ;
                                        printf("%s", center(title[j], size[j], NORMAL, "|"))            ;
                                }
                                printf("\n")                                            ;
                                print_a_line(line_size+length(size))                    ;
                        }
                        for (j=1; j<=length(bad); j++)  # Each column                           # For each column
                        {
                                printf("%s", center(bad[j], size[j], NORMAL, "|"))      ;
                        }
                        printf("\n")                                                    ;
                }
                print_a_line(line_size+length(size))                                    ;
        }
        function print_griddisk_header(i)
        {
                printed=0                                                               ;
                printf("\n\n", "")                                                        ;
                printf ("%s", center("Grid Disks", COL_CELL, TEAL, "|"))                ;

                for (j=i; j<i+nb_per_line; j++)
                {
                        dg=dgs_sorted[j]                                                ;       # To ease the naming below

                        if (j > nb_dgs)         # Everything is printed so we stop even if line is not full
                        {       break                                                   ;
                        }
                        printf ("%s", center(dg, COL_DISKTYPE, WHITE, "|"))             ;
                }
                printf("\n")                                                            ;
                printf ("%s", center(" ", COL_CELL, WHITE, "|"))                        ;

                for (j=i; j<i+nb_per_line; j++)
                {
                        if (j > nb_dgs)         # Everything is printed so we stop even if line is not full
                        {       break                                                   ;
                        }
                        printf ("%s", center("Nb", COL_NB, WHITE, "|"))                 ;
                        printf ("%s", center("Online", COL_NB, WHITE, "|"))             ;
                        printf ("%s", center("Errors", COL_NB, WHITE, "|"))             ;
                        printed++                                                       ;
                }
                printf("\n")                                                            ;
                print_a_line(COL_CELL+COL_DISKTYPE*printed+printed+1)                   ;
        }
        END\
        {       # Sort the arrays
                nb_cells=asort(tab_cell, tab_cell_sorted)                               ;
                #
                # CELL DISKS
                #
                # Disk Types
                printf("\n", "")                                                        ;
                printf ("%s", center("Cell Disks", COL_CELL, TEAL, "|"))                ;
                for (disktype in tab_disktype)
                {
                        printf ("%s", center(disktype, COL_DISKTYPE, WHITE, "|"))       ;
                }
                printf("\n")                                                            ;
                printf ("%s", center(" ", COL_CELL, WHITE, "|"))                        ;
                for (disktype in tab_disktype)
                {
                        printf ("%s", center("Nb", COL_NB, WHITE, "|"))                 ;
                        printf ("%s", center("Normal", COL_NB, WHITE, "|"))             ;
                        printf ("%s", center("Errors", COL_NB, WHITE, "|"))             ;
                }
                printf("\n")                                                            ;
                print_a_line(COL_CELL+COL_DISKTYPE*length(tab_disktype)+length(tab_disktype)+1) ;

                for (x=1; x<=nb_cells; x++)
                {
                        cell=tab_cell_sorted[x]                                         ;
                        printf ("%s", center(cell, COL_CELL, WHITE, "|"))               ;
                        for (y in tab_status)
                        {       split(y,sep,SUBSEP)                                     ;
                                if (sep[1] == cell)
                                {       for (disktype in tab_disktype)
                                        {
                                                COLOR_ERROR=GREEN                       ;
                                                COLOR_STATUS=GREEN                      ;

                                                # Nb disks
                                                printf ("%s", center(tab_nbdisks[cell,disktype], COL_NB, WHITE, "|"))                   ;

                                                # Disks status
                                                if (tab_status[cell,disktype,sep[3]]<tab_nbdisks[cell,disktype]) { COLOR_STATUS=RED;}
                                                printf ("%s", center(tab_status[cell,disktype,sep[3]], COL_NB, COLOR_STATUS, "|"))      ;

                                                # Number of error
                                                if (tab_err[cell,disktype]>0)   { COLOR_ERROR=RED;      }
                                                printf ("%s", center(tab_err[cell,disktype], COL_NB, COLOR_ERROR, "|"))                 ;
                                        }
                                        break                                           ;
                                }
                        }
                        printf("\n")                                                    ;
                }
                print_a_line(COL_CELL+COL_DISKTYPE*length(tab_disktype)+length(tab_disktype)+1)                                         ;

                #
                # Print the failed cell disks details contained in the array bad_cell_disks
                #
                if (tolower(show_bad_disks) == "yes")
                {
                        if (length(bad_cell_disks) > 0)
                        {       print_table(bad_cell_disks, "Failed Cell Disks details", "Cell Name Status Size Nb_Error Disktype")   ;
                        }
                }

                #
                # GRID DISKS
                #
                nb_dgs=asort(tab2_dgs, dgs_sorted)                                      ;

                for (i=1; i<=nb_dgs; i+=nb_per_line)
                {
                        print_griddisk_header(i)                                        ;
                        for (x=1; x<=nb_cells; x++)
                        {
                                      cell=tab_cell_sorted[x]                           ;        # To ease the naming below
                                nb_printed=0    ;
                                printf ("%s", center(cell, COL_CELL, WHITE, "|"))       ;
                                for (k=i; k<i+nb_per_line; k++)
                                {
                                        if (k > nb_dgs)                                         # Everything is printed so we stop even if line is not full
                                        {       break                                   ;
                                        }
                                        dg=dgs_sorted[k]                                ;       # To ease the naming below

                                        if (tab2_deact[cell,dg])                                # asmdeactivationoutcome is NOT yes
                                        {
                                                     COLOR_ERROR=RED_BACKGROUND         ;
                                                    COLOR_STATUS=RED_BACKGROUND         ;
                                                COLOR_STATUS_BAD=RED_BACKGROUND         ;
                                                  COLOR_NB_DISKS=RED_BACKGROUND         ;
                                        } else {
                                                     COLOR_ERROR=GREEN                  ;
                                                    COLOR_STATUS=GREEN                  ;
                                                 COLOR_STATUS_BAD=RED                   ;
                                                   COLOR_NB_DISKS=WHITE                 ;
                                        }

                                        if (tab2_nbdisks[cell,dg])
                                        {       printf ("%s", center(tab2_nbdisks[cell,dg], COL_NB, COLOR_NB_DISKS, "|"))       ;      # NB disks
                                        } else {
                                                print_blue_hyphen(COL_NB, "|")          ;
                                        }

                                        if (tab2_status[cell,dg]<tab2_nbdisks[cell,dg]) { COLOR_STATUS=COLOR_STATUS_BAD;}
                                        if (tab2_bad[cell,dg] > 0)
                                        {       print_red_cross(COL_NB, "|")            ;
                                        } else {
                                                if (tab2_status[cell,dg])
                                                {       printf ("%s", center(tab2_status[cell,dg], COL_NB, COLOR_STATUS, "|"))  ; # Nb disks with ONLINE status
                                                } else {
                                                        print_blue_hyphen(COL_NB, "|")  ;
                                                }
                                        }

                                        if (tab2_err[cell,dg]>0)    { COLOR_ERROR=COLOR_STATUS_BAD;      }
                                        if (tab2_err[cell,dg] != "")
                                        {       printf ("%s", center(tab2_err[cell,dg], COL_NB, COLOR_ERROR, "|"))              ;     # NB errors
                                        } else {
                                                print_blue_hyphen(COL_NB, "|")          ;
                                        }
                                        nb_printed++                                    ;
                                }
                                printf("\n")                                            ;
                        }
                        print_a_line(COL_CELL+COL_DISKTYPE*nb_printed+nb_printed+1)     ;
                        print_legend()                                                  ;
                }       # End         for (i=1; i<=nb_dgs; i++)

                # Show bad grid disks
                if (tolower(show_bad_disks) == "yes")
                {       printf("\n\n")                                                          ;
                        printf("%s", center("Failed Grid Disks details", COL_CELL, TEAL))       ;
                        printf("\n")                                                            ;
#                       print_table(bad_grid_disks, "Failed Grid Disks details", "Cell asmDGName Name Status Deact Size NBError Disktype")      ;
                        if (length(bad_grid_disks) > 0)
                        {
                                a=asort(bad_grid_disks, bad_grid_disks_sorted)                  ;
                                printf("%-14s%-24s%12s%16s%6s%8s%6s%16s\n", "cell", "asmDGName", "name","status", "deactoutcome", "size", "error" ,"disktype" )       ;
                                for (i=1; i<=a; i++)
                                {
                                        printf ("%s\n", bad_grid_disks_sorted[i])               ;
                                }
                        }
                        printf("\n")                                                            ;
                }
        printf("\n")                                                                    ;
        printf("\n")                                                                    ;
        }' ${IN}

#
# Delete tempfiles
#
for F in ${TMP} ${TMP2}
do
if [[ -f ${F} ]]
then
  rm -f ${F}
fi
done
}
#
#########################################################################################################
# Exadata How Smart
#########################################################################################################
#
function func_exa_how_smart()
{
# Fred Denis - March 2019
#
#*** Script in DEV ***
#
# History:
# 20190510 - Fred Denis -- divide by zero when no HCC in 12.2
#
TMP=/tmp/exastats$$.tmp
#. oraenv <<< floltp1 > /dev/null 2>&1
#cat /dev/null >  ${TMP}
#sqlplus -S / as sysdba << END | tee -a ${TMP}
sqlplus -S / as sysdba << END >  ${TMP}
set lines 200                                                           ;
set head off                                                            ;
set feed off                                                            ;
col value for 99999999999999999999999999999999                          ;
select (select instance_name from gv\$instance where inst_id = b.inst_id) || '|' || b.name || '|' || b.value from gv\$sysstat b order by b.inst_id, value ;
END

awk ' BEGIN {FS="|"}
{
    # Some colors
    COLOR_BEGIN="\033[1;"                      ;
      COLOR_END="\033[m"                       ;
            RED="31m"                          ;
          GREEN="32m"                          ;
         YELLOW="33m"                          ;
           BLUE="34m"                          ;
           TEAL="36m"                          ;
          WHITE="37m"                          ;
         NORMAL="0m"                           ;
 BACK_LIGHTBLUE="104m"                         ;

    # Size columns
       COL_EVENT=35                            ;
        COL_NODE=12                            ;
       # Misc
           FIRST=1                             ;

    # Save info in arrays
    if (NF == 3)
      {
         instances[$1] = $1                      ;
         gsub(/ *$/, "", $2)                     ;
         sub("cell physical IO",    "CPIO", $2)  ;
         sub("physical read total", "PRT",  $2)  ;
         sub("cell physical write", "CPW",  $2)  ;
         sub("physical write total", "PWT",  $2) ;
         events[$2] = $2                         ;
         tab[$1,$2] = $3                         ;
       }

       # Events
        LRFC="logical read bytes from cache"                           ;    LRFC_descr="logical read from cache (bytes)"        ;
        PRTB="PRT bytes"                                               ;    PRTB_descr="Physical read (bytes)"                  ;
       PRTBO="PRT bytes optimized"                                     ;   PRTBO_descr="Physical read optimized"                ;
       CPIOP="CPIO bytes eligible for predicate offload"               ;   CPIOP_descr="Eligible for Smart Scans (bytes)"       ;
      CPIOSI="CPIO bytes saved by storage index"                       ;  CPIOSI_descr="% saved by Storage Index"               ;
     CPIOSCC="CPIO bytes saved by columnar cache"                      ; CPIOSCC_descr="% saved by Columnar Cache"              ;
      CPIOSC="CPIO interconnect bytes returned by smart scan"          ;  CPIOSC_descr="% returned by Smart Scans"              ;
       CPIOI="CPIO interconnect bytes"                                 ;                                                        # IN + OUT Traffic + count ASM mirrorring
      CPIOFC="CPIO bytes saved during optimized file creation"         ;  CPIOFC_descr="% saved during file creation"           ;
    CPIOBCPU="CPIO bytes sent directly to DB node to balance CPU"      ;CPIOBCPU_descr="When cells are overloaded"              ;
         UNC="cell IO uncompressed bytes"                              ;     UNC_descr="cell IO uncompressed (bytes)"           ;
         PWT="PWT bytes"                                               ;     PWT_descr="Physical writes"                        ;
        PWTO="PWT bytes optimized"                                     ;    PWTO_descr="Physical writes optimized"              ;
        CWFC="cell writes to flash cache"                              ;    CWFC_descr="Writes to Flash Cache"                  ;
     HCCCUNC="HCC scan cell bytes decompressed"                        ; HCCCUNC_descr="HCC decompressed on cell (bytes)"       ;
     HCCBUNC="HCC scan rdbms bytes decompressed"                       ; HCCBUNC_descr="% decompressed on rdbms"                ;
          PW="physical writes"                                         ;      PW_descr="Nb of physical writes"                  ;       # Includes ASM mirorring so unusable

 }
 #
 # A function to center the outputs with colors
 #
 function center( str, n, color, sep)
 {
   right = int((n - length(str)) / 2)                                                                    ;
   left  = n - length(str) - right                                                                       ;
   return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END sep, "", str, "" )               ;
 }
#
# A function that just print a "---" white line
#
function print_a_line(size)
{
  if ( ! size)
  {
     size = COL_DB+COL_VER+(COL_NODE*n)+COL_TYPE+n+3                 ;
  }
   printf("%s", COLOR_BEGIN WHITE)                                         ;
   for (k=1; k<=size; k++) {printf("%s", "-");}                            ;
   printf("%s", COLOR_END"\n")                                             ;
}
#
# Calculate and print a ratio as a line of the output table
#
function print_ratio(event, event_descr, eventtodivideby, threshold)
{
  if (! threshold)
  {
     threshold  = "80|95"  ;
  }
  if (event_descr)        # If there is a description, we print it as it is usually more friendly
  {
     to_print=event_descr    				;
  } 
  else
  {
  to_print=event          				;
}
if (! eventtodivideby)
{
  if (! FIRST)
  {
     printf ("%s\n", center("", line_size, WHITE, "|"))			;
  }
  printf (COLOR_BEGIN BACK_LIGHTBLUE"%-" COL_EVENT"s"COLOR_END"|", to_print)	;
  FIRST=0									;
  } 
  else
  {
  printf ("  %-"COL_EVENT-2"s|", to_print)       			;	# -2 as I put 2 spaces before to "indent"
}

for(i=1; i<=nb_inst; i++)
{
  value_event = tab[instances[i],events[event]]                  	 	# Value of the event for this instance
  sum_event += value_event                             				# For the overall value
  if (eventtodivideby)                                 			        # If an event to divide, we calculate a %
  {	
    divider  = tab[instances[i],events[eventtodivideby]]     			# Value of the event to divide by to get a %
    sum_divider += divider                          			;       # For the overall value
    if (divider != 0)
    {
      value  = (value_event/divider*100)             			;
    }
    printf ("%s", center(sprintf("%.2f%%", value), COL_NODE, NORMAL, "|"))	;
  }
  else
  {                                                        			# Nothing to divide with, we just print the event value
    printf ("%s", center(sprintf("%.2e", value_event), COL_NODE, NORMAL, "|"));
  }
}
# Print the overall value
if (eventtodivideby)
{
  if (sum_divider != 0)
  {
    printf ("%s", center(sprintf("%.2f%%", sum_event/sum_divider*100), COL_NODE, WHITE, "|"))   ;
  }
  else
  {
  printf ("%s", center(sprintf("%s", "n/a"), COL_NODE, WHITE, "|"))   ;
  } 
}
else
{
  printf ("%s", center(sprintf("%.2e", sum_event), COL_NODE, WHITE, "|"))	;
}
# # Print the description outside on the right of the table
# printf ("%s", event_descr)      ;
eventtodivideby = ""    							;
      sum_event = 0     							;
    sum_divider = 0     							;
printf ("\n")									;
}
END
{
  nb_inst = asorti(instances)     					;
  line_size=COL_EVENT+COL_NODE*(nb_inst+1)+nb_inst+1			;

 # Header
  printf("\n");
  print_a_line(line_size)                                                 ;
  printf ("%s", center("Event" , COL_EVENT, BLUE, "|"))                   ;
  for(i=1; i<=nb_inst; i++)
  {
    printf ("%s", center(instances[i], COL_NODE, BLUE, "|"))        ;
  }
  printf ("%s", center("Overall", COL_NODE, BLUE, "|"))                   ;
  printf ("\n");
  print_a_line(line_size)                                                 ;

  # Print the events we want
  print_ratio(events[LRFC], LRFC_descr)                                   ;
  print_ratio(events[PRTB], "% Physical read", events[LRFC])              ;
  print_ratio(events[PWT], "% Physical write", events[LRFC])              ;
  print_ratio(events[PRTB], PRTB_descr)                                   ;
  print_ratio(events[PRTBO], PRTBO_descr, events[PRTB])                   ;
  print_ratio(events[CPIOP], "% eligible for Smart Scans", events[PRTB])  ;
  print_ratio(events[CPIOP], CPIOP_descr)                                 ;
  print_ratio(events[CPIOSI], CPIOSI_descr, events[CPIOP])                ;
  print_ratio(events[CPIOFC], CPIOFC_descr, events[CPIOP])                ;
  print_ratio(events[CPIOSCC], CPIOSCC_descr, events[CPIOP])              ;
  print_ratio(events[CPIOBCPU], CPIOBCPU_descr, events[CPIOP])            ;
  print_ratio(events[UNC], UNC_descr)                                     ;
  print_ratio(events[CPIOSC], CPIOSC_descr, events[UNC])                  ;
  # Physical writes includes ASM mirorring so useless here
  #print_ratio(events[PW], PW_descr)                                      ;
  #print_ratio(events[CWFC], CWFC_descr, events[PW])                      ;
  # HCC events have all changed in 12.2
  if (events[HCCBUNC])
  {
    print_ratio(events[HCCCUNC], HCCCUNC_descr)                     ;
    print_ratio(events[HCCBUNC], "% decompressd on DB Server", events[HCCCUNC])          ;
  }
  print_a_line(line_size)                                                 ;
  printf ("\n")                                                           ;
}
'  ${TMP} | sed s'/^/  /'

if [[ -f ${TMP} ]]
then
  rm -f ${TMP}
fi
}
#
#########################################################################################################
# Exadata Rack Layout
#########################################################################################################
#
function func_exa_rack_layout()
{
# Fred Denis -- Jan 2019 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# Show what's on an Exadata based on the /opt/oracle.SupportTools/onecommand/databasemachine.xml file
# The output shows each Exadata component, their IP, ILOM and ILOM IP on the form of an Exadata Rack layout
#
# Please have a look at https://goo.gl/wv2z5m for more information on this script
#
# The current version of the script is 20190222
#
# 20190222 - Fred Denis - Option -s to not show the empty U slots
#			  Option -f to specify a non default databasemachine.xml file
# 20190128 - Fred Denis - Added PDUs
# 20190126 - Fred Denis - Some dbmachine files may not have the info in the same order -- fixed this
# 20190125 - Fred Denis - Moved Blue to Lightblue and Red to Lightred to have a more pastel output
# 20190124 - Fred Denis - Initial Release
#
#
# Variables
#
SHOW_EMPTY_U="YES"              # Set SHOW_EMPTY_U="NO" here to always not show the empty U by default
          IN=""			        # If a file is specified with the -f option

#
# Function usage
#
usage()
{
printf "\033[1;37m%-8s\033[m\n" "NAME"                ;
cat << END
  `basename $0` - Show an Exadata Rack Layout based on the databasemachine.xml file
END

printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS"            ;
cat << END
  $0 [-f] [-s] [-h]
END

printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS"             ;
cat << END
	-f	Specify a non default databasemachine.xml file
	        $0 -f /tmp/mydatabasemachine.xml
        -s      Show a short form of the Rack Layout by hiding the empty U slots
                You can set SHOW_EMPTY_U="NO" on top of the script to always show the short form
        -h      Show this help
END
printf "\n"
exit 123
}

#
# Options management
#
while getopts "shf:" OPT; do
        case ${OPT} in
        s)         SHOW_EMPTY_U="NO"                                                   ;;
	f)	             IN=${OPTARG}					       ;;
        h)         usage                                                               ;;
        \?)        echo "Invalid option: -$OPTARG" >&2; usage                          ;;
        esac
done

#
# The databasemachine.xml file we base our report on
#
if [[ -z "${IN}" ]]
then
  DBMACHINE=/opt/oracle.SupportTools/onecommand/databasemachine.xml
else
  DBMACHINE=${IN}
fi

if [ ! -f ${DBMACHINE} ] || [ ! -r ${DBMACHINE} ]
then
  cat << !
  The ${DBMACHINE} cannot be found or is not readable, cannot continue.
!
  exit 123
fi
printf "\n"

awk -v SHOW_EMPTY_U="$SHOW_EMPTY_U" 'BEGIN\
        {       FS="<|>"                                                                ;
                # some colors
             COLOR_BEGIN =       "\033[1;"                                              ;
               COLOR_END =       "\033[m"                                               ;
                # Foreground colors code
                   WHITE =       "37m"                                                  ;
                  NORMAL =       "0m"                                                   ;
                # Background colors code
                    BLUE =       "44m"                                                  ;
                    BLUE =       "104m"                                                 ;       # Lightblue
                   GREEN =       "42m"                                                  ;
                  YELLOW =       "43m"                                                  ;
                    GREY =       "100m"
                     RED =       "41m"                                                  ;
                     RED =       "101m"                                                 ;       # Lightred
                   COL_U =       3                                                      ;       # Size of the "U" column
        }
        #
        # A function to center the outputs with colors
        #
        function center( str, n, color, sep)
        {       right = int((n - length(str)) / 2)                                      ;
                left  = n - length(str) - right                                         ;
                return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END sep, "", str, "" )        ;
        }
        #
        # A function that just print a "---" white line
        #
        function print_a_line(size)
        {
                if ( ! size)
                {       size = COL_DB+COL_VER+(COL_NODE*n)+COL_TYPE+n+3                 ;
                }
                printf("%s", COLOR_BEGIN WHITE)                                         ;
                for (k=1; k<=size; k++) {printf("%s", "-");}                            ;
                printf("%s", COLOR_END"\n")                                             ;
        }
        {       if ($2 == "RACKS")
                {       while (getline)
                        {       if ($2 == "MACHINETYPES")       {MODEL=$3       ;}
                                if ($2 == "MACHINEUSIZE")       { NB_U=$3       ;}
                                if ($2 == "ITEMS")              {ITEMS=$3       ; break ;}
                        }
                }
                if ($2 ~ /ITEM ID/)
                {       ADMINNAME=""; ADMINIP=""; ILOMNAME=""; ILOMIP=""        ;
                        while (getline)
                        {       if ($2 == "TYPE")               {TYPE=$3        ;}
                                if ($2 == "ADMINNAME")          { ADMINNAME=$3  ; if (length($3) > MAX_COL1) {MAX_COL1 = length($3)}}
                                if ($2 == "ADMINIP")            {   ADMINIP=$3  ; if (length($3) > MAX_COL2) {MAX_COL2 = length($3)}}
                                if ($2 == "ILOMNAME")           {  ILOMNAME=$3  ; if (length($3) > MAX_COL3) {MAX_COL3 = length($3)}}
                                if ($2 == "ILOMIP")             {    ILOMIP=$3  ; if (length($3) > MAX_COL4) {MAX_COL4 = length($3)}}
                                if ($2 == "ULOCATION")          {ULOC=$3        ;}
                                if ($2 == "/ITEM")              {       if (TYPE == "pdu")
                                                                        {       if (tab[ULOC] == "")
                                                                                {       tab[ULOC]=TYPE";"ADMINNAME";"ADMINIP;
                                                                                } else {tab[ULOC]=tab[ULOC]";"ADMINNAME";"ADMINIP;
                                                                                }
                                                                        } else {        tab[ULOC]=TYPE";"ADMINNAME";"ADMINIP";"ILOMNAME";"ILOMIP ;   }
                                                                        break   ;
                                                                }
                        }
                }
        }
        END\
        {       # To have a space with the right table separator
                COL_U++                                                                 ;
                MAX_COL1++                                                              ;
                MAX_COL2++                                                              ;
                MAX_COL3++                                                              ;
                MAX_COL4++                                                              ;
                line_size=COL_U+MAX_COL1+MAX_COL2+MAX_COL3+MAX_COL4+10                  ;       # Size of the "---" lines

                printf("%s\n\n", center(MODEL, line_size, WHITE))                       ;

                #Header
                printf("%s|", center("U" ,  COL_U+1, WHITE))                            ;
                printf("%s|", center("Hostname", MAX_COL1+1, WHITE))                    ;
                printf("%s|", center("Host IP", MAX_COL2+1, WHITE))                     ;
                printf("%s|", center("ILOM name", MAX_COL3+1, WHITE))                   ;
                printf("%s|", center("ILOM IP", MAX_COL4+1, WHITE))                     ;
                printf "\n"     ;
                print_a_line(line_size)                                                 ;

                for (i=NB_U; i>=0; i--)
                {
                        split (tab[i], to_print, ";")                                   ;
                        ui="U"i ;

                        color=NORMAL                                                    ;
                        if (to_print[2] != "")
                        {
                                if (to_print[1] == "computenode") {color=BLUE}          ;
                                if (to_print[1] == "cellnode")    {color=RED}           ;
                                if (to_print[1] == "ib")          {color=YELLOW}        ;
                                if (to_print[1] == "cisco")       {color=GREEN}         ;
                                if (to_print[1] == "pdu")         {color=GREY}          ;
                        }
                        if (to_print[1] == "")
                        {
                                if (tab[i-1] ~ /cellnode/)
                                {       split(tab[i-1], temp, ";")                      ;
                                        if (temp[2] != "") {color=RED}                  ;
                                }
                        }
			#if ((to_print[2] != "") || (toupper(SHOW_EMPTY_U) == "YES"))
                        if ((to_print[2] != "") || (toupper(SHOW_EMPTY_U) == "YES") || ((temp[2] != "") && (tab[i-1] ~ /cellnode/)))
			{
                           printf(COLOR_BEGIN color "%s", "")                           ;
                           printf(" %-"COL_U"s|", ui);                                  ;       # U
                           printf(" %-"MAX_COL1"s|", to_print[2])                       ;       # Hostname
                           printf(" %-"MAX_COL2"s|", to_print[3])                       ;       # Host IP
                           if ((to_print[1] ~ /node/) || (to_print[1] == "pdu"))
                           {
                                   to_print_col3 = to_print[4]                          ;
                                   to_print_col4 = to_print[5]                          ;
                           } else {
                                   to_print_col3 = ""                                   ;
                                   to_print_col4 = ""                                   ;
                           }
                           printf(" %-"MAX_COL3"s|", to_print_col3)                     ;       # ILOM name
                           printf(" %-"MAX_COL4"s|", to_print_col4)                     ;       # ILOM IP
                           printf(COLOR_END "%s", "")                                   ;
                           printf "\n"                                                  ;
			}
                }
                print_a_line(line_size)                                                 ;
                printf "\n"                                                             ;

                # A legend to explain the colors
                printf("%s", "   ")     ;
                printf(COLOR_BEGIN BLUE"%s"COLOR_END, "Database Servers")               ;
                printf("%s", "   ")     ;
                printf(COLOR_BEGIN RED"%s"COLOR_END, "Storage Servers")                 ;
                printf("%s", "   ")     ;
                printf(COLOR_BEGIN YELLOW"%s"COLOR_END, "IB Switches")                  ;
                printf("%s", "   ")     ;
                printf(COLOR_BEGIN GREEN"%s"COLOR_END, "Cisco Switch")                  ;
                printf "\n\n"                                                           ;
        }
' ${DBMACHINE} | sed s'/^/  /'
}
#
#########################################################################################################
# Exadata Many Rack Layout
#########################################################################################################
#
function func_exa_many_rack_layout()
{
# Fred Denis -- Jan 2019 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# A simple script to launch exa-racklayout.sh on many hosts
# - SSH keys deployed to these hosts are needed
# - Fill the "LIST" variable below with your hosts in the user@IP/HOST form
# - OPTION contains the option for exa-racklayout.sh (see https://goo.gl/wv2z5m for more info)
#
# The current version of the script is 20190225
#
# 20190225 - Fred Denis - Initial release
#

# The Exadatas you want to connect to (1 connection per line and form shold be user@IP or user@hostname)
#
LIST="oracle@AN_IP
oracle@ANOTHER_IP"

#
# Variables
#
RACKLAYOUT=exa-racklayout.sh
DBMACHINE=/opt/oracle.SupportTools/onecommand/databasemachine.xml
TMP=/tmp/temp$$.txt
OPTION=" -s "		# exa-racklayout.sh in its short form (empty U hidden)
#    OPTION=""			# exa-racklayout.sh in its whole form (empty U slots are shown)

#
# Check that exa-racklayout.sh is here
#
if [ ! -x ${RACKLAYOUT} ]
then
  cat << !
  ${RACKLAYOUT} does not exist or is not executable; to fix this issue you can:
  - Have a look at https://goo.gl/wv2z5m and download ${RACKLAYOUT}
  - Make it executable :
  $ chmod u+x ${RACKLAYOUT}
!
  exit 123
fi

for X in `echo $LIST`
do
printf "\033[1;37m%s\033[m" "Connecting to ... ${X} "
scp -q ${X}:${DBMACHINE} ${TMP}
if [ $? -eq 0 ]
then
  printf "\t\033[1;32m%-8s\033[m\n" "OK"          ;
  if [[ -f ${TMP} ]]
  then
    ./${RACKLAYOUT} ${OPTION} -f ${TMP}
    rm -f ${TMP}
  fi
else
  printf "\t\033[1;31m%-8s\033[m\n" "Error $?"          ;
fi
done
}
#
#########################################################################################################
# Set HugePages
#########################################################################################################
#
function func_set_hugepages()
{
# hugepages_settings.sh
#
# Linux bash script to compute values for the
# recommended HugePages/HugeTLB configuration
# on Oracle Linux
#
# Note: This script does calculation for all shared memory
# segments available when the script is run, no matter it
# is an Oracle RDBMS shared memory segment or not.
#
# This script is provided by Doc ID 401749.1 from My Oracle Support
# http://support.oracle.com

# Welcome text
echo "
This script is provided by Doc ID 401749.1 from My Oracle Support
(http://support.oracle.com) where it is intended to compute values for
the recommended HugePages/HugeTLB configuration for the current shared
memory segments on Oracle Linux. Before proceeding with the execution please note following:
 * For ASM instance, it needs to configure ASMM instead of AMM.
 * The 'pga_aggregate_target' is outside the SGA and
   you should accommodate this while calculating SGA size.
 * In case you changes the DB SGA size,
   as the new SGA will not fit in the previous HugePages configuration,
   it had better disable the whole HugePages,
   start the DB with new SGA size and run the script again.
And make sure that:
 * Oracle Database instance(s) are up and running
 * Oracle Database 11g Automatic Memory Management (AMM) is not setup
   (See Doc ID 749851.1)
 * The shared memory segments can be listed by command:
 # ipcs -m

Press Enter to proceed..."

read

# Check for the kernel version
KERN=`uname -r | awk -F. '{ printf("%d.%d\n",$1,$2); }'`

# Find out the HugePage size
HPG_SZ=`grep Hugepagesize /proc/meminfo | awk '{print $2}'`

if [ -z "$HPG_SZ" ]
then
  echo "The hugepages may not be supported in the system where the script is being executed."
  exit 1
fi

# Initialize the counter
NUM_PG=0

# Start Original code
## Cumulative number of pages required to handle the running shared memory segments
#for SEG_BYTES in `ipcs -m | cut -c44-300 | awk '{print $1}' | grep "[0-9][0-9]*"`
#do
#    MIN_PG=`echo "$SEG_BYTES/($HPG_SZ*1024)" | bc -q`
#    if [ $MIN_PG -gt 0 ]; then
#        NUM_PG=`echo "$NUM_PG+$MIN_PG+1" | bc -q`
#    fi
#done
# End Original code

# Start Fred
declare -A an_array
# Cumulative number of pages required to handle the running shared memory segments
for X in `ipcs -m | awk '{print $3"|"$5}' | grep "[0-9][0-9]*"`
do
  OWNER=`echo ${X} | awk -F "|" '{print $1}'`
  SEG_BYTES=`echo ${X} | awk -F "|" '{print $2}'`
  MIN_PG=`echo "$SEG_BYTES/($HPG_SZ*1024)" | bc -q`
  if [ $MIN_PG -gt 0 ]
  then
    NUM_PG=`echo "$NUM_PG+$MIN_PG+1" | bc -q`
    ((an_array[$OWNER] += $MIN_PG+1  ))
  fi
done

printf "\t%10s\t|%15s\t|%15s\n" "Owner" "Nb Huge Pages" "Size in GB"
printf "\t%10s\t|%15s\t|%15s\n" "--------" "--------" "--------"
for Y in "${!an_array[@]}"
do
  printf "\t%10s\t|%15s\t|%15s\n" $Y ${an_array[$Y]} `echo "${an_array[$Y]} * $HPG_SZ / 1024 / 1024" | bc -q`
  (( sum_pages += ${an_array[$Y]} ))
  ((    sum_gb += `echo "${an_array[$Y]} * $HPG_SZ / 1024 / 1024" | bc -q` ))
done
printf "\t%10s\t|%15s\t|%15s\n" "--------" "--------" "--------"
printf "\t%10s\t|%15s\t|%15s\n" "Total" $sum_pages $sum_gb
printf "\n"
# End Fred

RES_BYTES=`echo "$NUM_PG * $HPG_SZ * 1024" | bc -q`

# An SGA less than 100MB does not make sense
# Bail out if that is the case
if [ $RES_BYTES -lt 100000000 ]
then
  echo "***********"
  echo "** ERROR **"
  echo "***********"
  echo "Sorry! There are not enough total of shared memory segments allocated for HugePages configuration. HugePages can only be used for shared memory segments that you can list by command:

# ipcs -m

   Of a size that can match an Oracle Database SGA. Please make sure that:
 * Oracle Database instance is up and running
 * Oracle Database 11g Automatic Memory Management (AMM) is not configured"
  exit 1
fi

# Finish with results
case $KERN in
  '2.2')  echo "Kernel version $KERN is not supported. Exiting.";;
  '2.4')  HUGETLB_POOL=`echo "$NUM_PG*$HPG_SZ/1024" | bc -q`;
          echo "Recommended setting: vm.hugetlb_pool = $HUGETLB_POOL";;
  '2.6')  echo "Recommended setting: vm.nr_hugepages = $NUM_PG";;
  '3.8')  echo "Recommended setting: vm.nr_hugepages = $NUM_PG";;
  '3.10') echo "Recommended setting: vm.nr_hugepages = $NUM_PG";;
  '4.1')  echo "Recommended setting: vm.nr_hugepages = $NUM_PG";;
esac
# END
}
#
#########################################################################################################
# Exadata Version
#########################################################################################################
#
function func_exa_version()
{
# Fred Denis -- Nov 2017 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# An Exadata version summary (https://unknowndba.blogspot.com/2018/04/exa-versionssh-exadata-components.html):
# -- has to be run as root
# -- the server where this script is started should have the root ssh  keys deployed on all the other servers (DB Nodes, Cells and IB Swicthes)
# -- see the usage fonction and/or use the -h option for a complete description
# -- For Cells and DB servers (I found no equivalent for the IB swicthes), I also check the status of the image
#    from the imageinfo command as it can be "failure" even if the good version is shown;
#    I then use a piece of awk to format the "imageinfo -ver -status" output like this :
#      node1:12.2.1.1.3.171017:success
#      node2:12.2.1.1.3.171017:failure    <= a failure status when the good version shown
#      node3:12.2.1.1.3.171017:success
#      node4:12.2.1.1.3.171017:success
#    If a DB servers or cell has a status = failure returned by the imageinfo command, the host will appear
#    in red and a note about this will be shown at the end of the report
#
# The current version of the script is 20190528
#
# 20190528 - Fred Denis - Fixed a bug on the headers
# 20190524 - Fred Denis - Better management of the naming of the hosts, cells and IB
# 20180913 - Fred Denis - Add the status = failure information for the Cells and DB Servers
#
#
# Variables
#
DBMACHINE=/opt/oracle.SupportTools/onecommand/databasemachine.xml       # File where we should find the Exadata model
SHOW_ALL="Yes"
SHOW_DBS="No"
SHOW_CELLS="No"
SHOW_IBS="No"
NB_PER_LINE=$(bc <<< "`tput cols`/22")          # Number of element to print per line
                                                #       -- default adapts to the size of the screen (thanks to tput)
                                                #       -- can be changed at script execution with the -n option
#
# usage function
#

usage()
{
printf "\n\033[1;37m%-8s\033[m\n" "NAME";
cat << END
  exa_versions.sh - Show a nice summary of the versions of each component of an Exadata stack (DB servers, Cells and InfiniBand Switches)
END

printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS";
cat << END
  $0 [-d] [-c] [-i] [-n] [-h]
END

printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION";
cat << END
  $0 needs to be executed as root and the ssh keys to each Exadata component have to be deployed With no option $0 will show the versions of all the Exadata components (DB servers, Cells and IB)
  $0 relies on the ibhosts ad the ibswitches commands to find the list of nodes to look at, not on any static [dbs|cell|ib]_group file
END

printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS";
cat << END
  -d      Show the Database servers versions
  -c      Show the Cells (storage servers) versions
  -i      Show the Infiniband Switches versions
  -n      Number of nodes to show per line (default adapts the output to the current screen size)
  -h      Show this help
END
exit 123
}

#
# Options management
#
while getopts "dcin:h" OPT; do
case ${OPT} in
  d)  SHOW_ALL="No"; SHOW_DBS="Yes";;
  c)  SHOW_ALL="No"; SHOW_CELLS="Yes";;
  i)  SHOW_ALL="No"; SHOW_IBS="Yes";;
  n)  NB_PER_LINE=${OPTARG};;
  h)  usage;;
  \?) echo "Invalid option: -$OPTARG" >&2; usage;;
esac
done

#
# Few tempfiles
#
DBS_GROUP=/tmp/dbsgroup$$.tmp
CELL_GROUP=/tmp/cellgroup$$.tmp
IB_GROUP=/tmp/ibgroup$$.tmp

#
# Set the ASM env to be able to use some commands (future use)
#
ORACLE_SID=`ps -ef | grep pmon | grep asm | awk '{print $NF}' | sed s'/asm_pmon_//' | egrep "^[+]"`

export ORAENV_ASK=NO
. oraenv > /dev/null 2>&1

#
# Show the Exadata model if possible
#
if [ -f ${DBMACHINE} ] && [ -r ${DBMACHINE} ]
then
  cat << !
  Cluster is a `grep -i MACHINETYPES ${DBMACHINE} | sed s'/\t*//' | sed -e s':</*MACHINETYPES>::g' -e s'/^ *//' -e s'/ *$//'`
!
else
  printf "\n"
fi

#
# Fill the tempfiles
#
ibhosts | grep db | grep -v cel | sed s'/"//g' | awk '{print $6}'  > ${DBS_GROUP}
ibhosts | grep cel | sed s'/"//g' | awk '{print $6}'  > ${CELL_GROUP}
ibswitches | awk '{print $10}' > ${IB_GROUP}


( if [[ "$SHOW_DBS" == "Yes" ]] || [[ "$SHOW_ALL" == "Yes" ]]
  then
    dcli -g ${DBS_GROUP} -l root "imageinfo -ver -status" | sort | awk -F ": " '{if(node==""){node=$1}; if($2 != "") {status=$3; getline; printf ("%s:%s:%s:%s\n","db", node, $3, status);  node="" ;}}'
    echo ""
  fi
  if [[ "$SHOW_CELLS" == "Yes" ]] || [[ "$SHOW_ALL" == "Yes" ]]
  then
    dcli -g ${CELL_GROUP} -l root "imageinfo -ver -status" | grep "Active" | sort | awk -F ": " '{if(node==""){node=$1}; if($2 != "") {status=$3; getline; printf ("%s:%s:%s:%s\n","cel", node, $3, status);  node="" ;}}'
    echo ""
  fi
  if [[ "$SHOW_IBS" == "Yes" ]] || [[ "$SHOW_ALL" == "Yes" ]]
  then
    dcli -g ${IB_GROUP}  -l root version | grep -v BIOS | grep "version:" | awk '{print "ib:", $1, $NF}' | sort
    echo ""
  fi
)\
        | awk -v NB_PER_LINE="$NB_PER_LINE" ' BEGIN \
                {             FS=":"                                                                             ;
                  # some colors
                     COLOR_BEGIN="\033[1;"                                                                       ;
                       COLOR_END="\033[m"                                                                        ;
                             RED="31m"                                                                           ;
                           GREEN="32m"                                                                           ;
                          YELLOW="33m"                                                                           ;
                            BLUE="34m"                                                                           ;
                            TEAL="36m"                                                                           ;
                           WHITE="37m"                                                                           ;

                  # Columns size
                        COL_SIZE=20                                                                              ;

                  # Some variables
                         nb_node=0                                                                               ;
                        FAILURES=0                                                                               ;
                }
                function print_a_line(size)
                {
                        printf("%s", COLOR_BEGIN WHITE)                                                                 ;
                        for (k=1; k<=size;k++) {printf("%s", "-");}                                                     ;
                        printf("%s", COLOR_END"\n")                                                                     ;
                }
                #
                # A function to center the outputs with colors
                #
                function center(str, n, color)
                {       right = int((n - length(str)) / 2)                                                              ;
                         left = n - length(str) - right                                                                 ;
                        return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END, "", str, "" )             ;
                }
                {       if ($0 !~ /^$/)
                        {
                                            nb_node++                                                                   ;
                                               type = $1                                                                ;
                                   db_node[nb_node] = $2                                                                ;
                                db_version[nb_node] = $3                                                                ;
                                 db_status[nb_node] = $4                                                                ;

                                while (getline)
                                {
                                        if ($0 ~ /^$/)
                                        {
                                                # A Header
                                                if (type == "db")      {printf("%s\n", center("-- Database Servers",         40,RED))};
                                                if (type == "cel")     {printf("%s\n", center("-- Cells",                    30,RED))};
                                                if (type == "ib")      {printf("%s\n", center("-- Infiniband Switches",      40,RED))};
                                                printf("\n")                                                            ;
                                                version_ref = db_version[1]                                             ;

                                                for (a=0; a<nb_node; a+=NB_PER_LINE)
                                                {
                                                        nb_printed = 0                                                  ;

                                                        # Print the node names
                                                        for (i=a+1; i<=a+NB_PER_LINE; i++)
                                                        {
                                                                COLOR=WHITE                                             ;
                                                                if(db_status[i] == "failure") {COLOR=RED; FAILURES=1}   ;
                                                                if (length(db_node[i]) > 0)
                                                                {
                                                                        printf("%s", center(db_node[i],COL_SIZE,COLOR)) ;
                                                                        nb_printed++                                    ;
                                                                }
                                                        }

                                                        printf("\n")                                                    ;
                                                        print_a_line(COL_SIZE*nb_printed+NB_TO_SHOW)                    ;

                                                        # Print the nodes versions
                                                        for (i=a+1; i<=a+NB_PER_LINE; i++)
                                                        {
                                                                if (length(db_version[i]) > 0)
                                                                {
                                                                        if (db_version[i] == version_ref)
                                                                        {       A_COLOR=BLUE                            ;
                                                                        }
                                                                        else
                                                                        {
                                                                                A_COLOR=TEAL                            ;
                                                                        }
                                                                        printf("%s", center(db_version[i],COL_SIZE,A_COLOR));
                                                                }
                                                        }
                                                        printf("\n")                                                    ;
                                                        print_a_line(COL_SIZE*nb_printed+NB_TO_SHOW)                    ;
                                                        printf("\n\n")                                                  ;
                                                }       # END  for (a=0; a<nb_node; a+=NB_PER_LINE)

                                                nb_node = 0                                                             ;
                                                delete db_node                                                          ;
                                                delete db_version                                                       ;
                                                delete db_status                                                        ;
                                                break                                                                   ;
                                        }       # END if ($0 ~ /^$/)

                                                  nb_node++                                                             ;
                                           db_node[nb_node] = $2                                                        ;
                                        db_version[nb_node] = $3                                                        ;
                                         db_status[nb_node] = $4                                                        ;
                                }       # END while (getline)
                        }       # END  if ($0 !~ /^$/)
                } 
                END 
              { 
              if (FAILURES == 1)
                {       
                  printf("%s\n\n", "Note : Please investigate the hosts in red as they have a status = failure returned by the imageinfo command.")       ;
                }
            }'

# Delete tempfiles

if [ -f ${DBS_GROUP} ]  ; then rm -f ${DBS_GROUP}       ; fi
if [ -f ${CELL_GROUP} ] ; then rm -f ${CELL_GROUP}      ; fi
if [ -f ${IB_GROUP} ]   ; then rm -f ${IB_GROUP}        ; fi
}
#
#########################################################################################################
# Exadata LSPATCHES
#########################################################################################################
#
function func_exa_lspatches()
{
#!/bin/bash
# Fred Denis -- fred.denis3@gmail.com -- June 22nd 2018
#
# Please have a look at https://unknowndba.blogspot.com/2018/07/lspatchessh-oracle-patch-reporting-tool.html for detailed explanations
#
# Provide information on the installed and missing patches on ORACLE_HOMEs
#       $0 -h for more information
#
# The version of the script is 20191401
#
# 20191401 - Fred Denis - opatchauto report: show Homes with -s option properly, fixed GREP/UNGREP
#                       - Fixed issue with GI HOMe with no olsnodes (non-RAC)
# 20190401 - Fred Denis - Implement opatchauto report instead of lsinventory -all_nodes for versions > 1220112 or  for 11g
# 20180809 - Fred Denis - Add the desription of a patch if available
# 20180704 - Fred Denis - GREP and UNGREP now works when a file is specified
#                       - A new -o option to only get the opatch output on a file
#                       - The -s option is now compatible with the -f one
# 20180626 - Fred Denis - Started the opatch version management by showing a warning when the special 12.2.0.1.13 and 11.2.0.3.18 versions are used
#                       - see https://unknowndba.blogspot.com/2018/06/deprecation-of-opatch-command-option.html for more information
#                       - Shows an error when opatch raises an error (when another user owns the ORACLE_HOME for example)
# 20180625 - Fred Denis - Different OS support : (the script is developed under Linux)
#                       --- Solaris :
#                         -  grep "^[Aa-Zz|+]" does not work on Solaris so I moved to grep -v "^#" | grep -v "^$" when reading oratab
#                         -  default Solaris awk is the original awk and nawk lacks features from gawk (the script definitely does not work with nawk due to array management features)
#                         -  gawk is installed by default with Solaris 11 and is available for Solaris < 11, the script then expects gawk to be here for Solaris and if not it cannot continue
#                       --- HP-UX and AIX :
#                         - The "case" to support other OS is also HP-UX and AIX ready but I have not tested it as I have no such OS handy
# 20180622 - Fred Denis - Initial release
#

#
# Default values
#

 ALL_NODES="Yes"                                         # RAC system
      GREP="."                                           # What we grep                  -- default is everything
    UNGREP="nothing_to_ungrep_unless_v_option_is_used$$" # What we don't grep (grep -v)  -- default is nothing
      FILE=""                                            # No input file
       OUT=""                                            # No output file
       TMP=/tmp/fictemplspatches$$                       # A tempfile
      TMP2=/tmp/fictemplspatches2$$                      # Another tempfile
SHOW_HOMES="NO"                                          # YES or NO we want to show the Homes from /etc/oratab or the input file $FILE ONLY

#
# An usage function
#
usage()
{
printf "\n\033[1;37m%-8s\033[m\n" "NAME"                        ;
cat << END
        $0 -- Provide information on the installed and missing patches on ORACLE_HOMEs
END

printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS"                    ;
cat << END
        $0 [-f] [-o] [-g] [-l] [-v] [-s] [-h]
END

printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION"                 ;
cat << END
        $0 relies on the content of the /etc/oratab file to look at the installed patch on the ORACLE_HOMEs
        It uses the opatch installed on each Home to list the installed patches and find the missing ones in case of RAC system
        A file containing some opatch outputs can also be provided to $0; it will then not use opatch but rely on the input file
            oraenv has to work as it is used to check if it is a RAC installation with olsnodes
            If olsnodes from the ASM Home returns no rows then we go with local opatch
END

printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS"                     ;
cat << END
        -f      A file containing one or more opatch outputs (no opatch command is performed in this mode)
                        - not compatible with the -o option
                        - compatible with the -g and -v options

        -o      An output file if you just want to generate the opatch output (no patch analysis shown)
                        - not compatible with the -f option
                        - compatible with the -g and -v options

        -l      Run opatch as Local only (default is opatch is run using the -all_nodes option)

        -g      Act as a grep command to grep the Homes you want to have the patches information
                Examples :
                  $0 -g 12                                              # Will only consider the Homes that contain "12" in their name
                  $0 -g /u01/app/oracle/product/12.1.0.2/dbhome_dr2     # Will only consider this home
                  $0 -g dbhome_1                                        # Will only consider the Homes containing "dbhome_1"
                                  $0 -g dbhome_1 -f /tmp/opatchoutput                                   # Will only consider the Homes containing "dbhome_1"in the /tmp/opatchoutput file

        -v      Act as a grep -v comnmand when selecting the Homes you want the patches information from; it can be combined with the -g option
                Examples :
                  $0 -v 12                                              # Will NOT consider the Homes which have"12" in their name
                  $0 -g dbhome_1 -v 12                          # Will consider the "dbhome_1" Homes BUT those containing "12" in their name
                  $0 -v grid                                    # All the Homes but the "grid" ones

        -s      Show the ORACLE_HOMEs that would be considered by the script, it can be used in conjunction with the -g and -v options
                You can then test your -g and -v combination here
                Examples :
                  $0 -s                                         # Show all Homes from /etc/oratab
                  $0 -g 12 -v oa -s                             # Show all "12" Homes BUT the "oa" ones
                                  $0 -f /tmp/opatchoutput -g 12 -s                              # Show the Homes from an opatch output file for the "12" Homes only

        -h      Show this help

END
exit 123
}

#
# Parameters management
#
while getopts "lg:v:f:o:hs" OPT; do
        case ${OPT} in
                f)               FILE=${OPTARG}                                 ;;
                o)                OUT=${OPTARG}                                 ;;
                g)               GREP=${OPTARG}                                 ;;
                l)          ALL_NODES=""                                        ;;
                v)             UNGREP=${OPTARG}                                 ;;
                s)         SHOW_HOMES="YES"                                     ;;
                h)              usage                                           ;;
                \?) echo "Invalid option: -$OPTARG" >&2; usage                  ;;
        esac
done

#
# Different OS support
#

OS=`uname`
case ${OS} 
in
  SunOS)
    ORATAB=/var/opt/oracle/oratab
    AWK=/usr/bin/gawk                        ;;
  Linux)
    ORATAB=/etc/oratab
    AWK=`which awk`                          ;;
  HP-UX)
    ORATAB=/etc/oratab
    AWK=`which awk`                          ;;
  AIX)
    ORATAB=/etc/oratab
    AWK=`which awk`                          ;;
  *) echo "Unsupported OS, cannot continue."
exit 666                                    ;;
esac

if [ ! -f ${ORATAB} ]
then
cat << !
  Unable to find oratab file in ${ORATAB}, cannot continue.
!
  exit 667
fi
if [ ! -f ${AWK} ]
then
cat << !
  Cannot find a modern version of awk in ${AWK}, cannot continue.
!
  exit 668
fi

if [[ -n ${FILE} && -n ${OUT} ]]
then
  cat << END
  The -f and -o options cannot be used together; cannot continue.
  $0 -h for help
END
  exit 669
fi

#
# Show Homes only if -s option specified
#
if [ ${SHOW_HOMES} = "YES" ]
then
  if [[ -f ${FILE} ]]
  then
    printf "\n\033[1;37m%-8s\033[m\n\n" "ORACLE_HOMEs that would be considered (${FILE}) :"                    ;
    cat ${FILE} | grep "^Oracle Home" | awk 'BEGIN {FS=":"} { printf("\t%s\n", $NF)}' | grep ${GREP} | grep -v ${UNGREP} | sort | uniq
    cat ${FILE} | grep "homes path=" | uniq | sed s'/" .*$//' | sed s'/.*"//' | sort | grep ${GREP} | grep -v ${UNGREP}
  else
    printf "\n\033[1;37m%-8s\033[m\n\n" "ORACLE_HOMEs that would be considered (${ORATAB}) :"                    ;
    cat ${ORATAB} | grep -v "^#" | grep -v "^$" | grep -v agent | awk 'BEGIN {FS=":"} { printf("\t%s\n", $2)}' | grep ${GREP} | grep -v ${UNGREP} | sort | uniq
  fi
printf "\n"
exit 0
fi

#
# Check that the file in parameter exists
#
if [ ! -f ${FILE} ]
then
cat << !
 File ${FILE} does not exist, cannot proceed.
!
exit 123
fi

#
# Check if we could write in the out file
#
if [[ -n ${OUT} ]]
then
  if [ -d ${OUT} ]
    then  
      echo "${OUT} is a directory, please specify a regular file; cannot continue."
    exit 670
    fi
  if [ ! -w `dirname ${OUT}` ]
  then 
    echo "`dirname ${OUT}` is not writable; cannot continue."
  exit 671
  fi
fi

#
# Set the ASM env to be able to use crsctl commands as well as olsnodes
#
ORACLE_SID=`ps -ef | grep pmon | grep asm | awk '{print $NF}' | sed s'/asm_pmon_//' | egrep "^[+]"`

#
# No ASM then we go local (I would need a RAC config with FS to test)
#
if [ -z ${ORACLE_SID} ]
then
  ALL_NODES=""
else
  export ORAENV_ASK=NO
 . oraenv > /dev/null 2>&1

 #
 # Check if it is a RAC installtion, if not we go Local with opatch
 #
 if [ ! -f ${ORACLE_HOME}/bin/olsnodes ]
 then
   ALL_NODES=""
 else
   if [[ $(olsnodes | wc -l) -eq "0" ]]    # No RAC installed so we go local only
   then
     ALL_NODES=""
   fi
 fi
fi

if [ -z ${FILE} ]       # If a file as parameter we do not do the opatch
then
        cat /dev/null > ${TMP}

        for OH in `cat ${ORATAB} | grep -v "^#" | grep -v "^$" | grep -v agent | awk 'BEGIN {FS=":"} { print $2}' | grep ${GREP} | grep -v ${UNGREP} | sort | uniq`
        do
                printf "%-80s" "Proceeding with ${OH} . . ."
                if [ -f $OH/OPatch/opatch ] && [ -x $OH/OPatch/opatch ]
                then
                        OPATCH_DOTTED_VERSION=`$OH/OPatch/opatch version | grep Version | awk '{print $NF}'`
                        ERR=$?
                        if [ ${ERR} -eq 0 ]
                        then
                                OPATCH_VERSION=`echo ${OPATCH_DOTTED_VERSION} | sed s'/\.//g'`
                                if [[ "${OPATCH_VERSION:0:2}" -eq "12" && "${OPATCH_VERSION}" -gt 1220112 ]] ||
                                   [[ "${OPATCH_VERSION:0:2}" -eq "11" && "${OPATCH_VERSION}" -gt 1120318 ]]
                                then    # remote
                                        if [ "${ALL_NODES}" = "Yes" ]
                                        then
                                                ALL_NODES_OPTION=" -remote "
                                        else
                                                ALL_NODES_OPTION=""
                                        fi
                                        echo "Oracle Interim Patch Installer version "$OPATCH_DOTTED_VERSION               >> ${TMP}
                                        $OH/OPatch/opatchauto report -type patches -format xml ${ALL_NODES_OPTION}         >> ${TMP} 2>${TMP2}
                                        ERR=$?
                                else    # lsinventory
                                        if [ "${ALL_NODES}" = "Yes" ]
                                        then
                                                ALL_NODES_OPTION=" -all_nodes "
                                        else
                                                ALL_NODES_OPTION=""
                                        fi

                                        $OH/OPatch/opatch lsinventory ${ALL_NODES_OPTION} -oh ${OH}                        >> ${TMP} 2>${TMP2}
                                        ERR=$?
                                fi
                                if [ ${ERR} -eq 0 ]
                                then
                                       printf "\t\033[1;32m%-8s\033[m\n" "OK"          ;
                                else
                                       printf "\t\033[1;31m%-8s" "Error $ERR"          ;
                                       cat ${TMP2}                                     ;
                                       printf "\033[m\n" ""                            ;
                                fi
                        else
                                printf "\t\033[1;31m%-8s" "Error "              ;

                        fi
                                #if (((substr(OPATCH_VERSION_NUMERIC,1,2) == 12) && (OPATCH_VERSION_NUMERIC > 1220112)) ||
                                #       ((substr(OPATCH_VERSION_NUMERIC,1,2) == 11) && (OPATCH_VERSION_NUMERIC > 1120318)))

                        #$OH/OPatch/opatch lsinventory ${ALL_NODES} -oh ${OH}  >> ${TMP} 2>${TMP2}
                        #ERR=$?
                        #if [ ${ERR} -eq 0 ]
                        #then
                        #               printf "\t\033[1;32m%-8s\033[m\n" "OK"          ;
                        #else
                        #               printf "\t\033[1;31m%-8s" "Error "              ;
                        #               cat ${TMP2}                                     ;
                        #               printf "\033[m\n" ""                            ;
                        #fi
                else            #if [ -f $OH/OPatch/opatch ] && [ -x $OH/OPatch/opatch ]
                        printf "\t\033[1;31m%-8s" "Cannot find $OH/OPatch/opatch "      ;
                        printf "\033[m\n" ""                                            ;
                fi
        done
else
        cp ${FILE} ${TMP}
fi

#echo $TMP
#exit

#
# An output file is specified, we just want the opatch output so we exit before analyzing the opatch output
#
if [[ -n ${OUT} ]]
then
if [ -f ${TMP} ]
  then
    cp ${TMP} ${OUT}
    if [ $? -ne 0 ]
    then
      cat << END
      Could not copy the tempfile into ${OUT}; the opatch output should be in ${TMP};
END
    fi
    rm -f ${TMP}
    exit $?
  fi
fi

printf "\n"                                                     ;

${AWK}  -v GREP="$GREP" -v UNGREP="$UNGREP" -v OPATCH_DOTTED_VERSION="$OPATCH_DOTTED_VERSION"\
        'BEGIN {              FS =       ":"                    ;
                        # some colors
                     COLOR_BEGIN =       "\033[1;"              ;
                       COLOR_END =       "\033[m"               ;
                             RED =       "31m"                  ;
                           GREEN =       "32m"                  ;
                          YELLOW =       "33m"                  ;
                            BLUE =       "34m"                  ;
                            TEAL =       "36m"                  ;
                           WHITE =       "37m"                  ;

                         UNKNOWN =       "-"                    ;       # Something to print when the status is unknown

                        # Default columns size
                        COL_NODE =       16                     ;
                       COL_PATCH =       12                     ;
                         COL_VER =       14                     ;
}

#
# A function to center the outputs with colors
#
function center( str, n, color, sep)
{       right = int((n - length(str)) / 2)                                                                      ;
        left  = n - length(str) - right                                                                         ;
        return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END sep, "", str, "" )                 ;
}

#
# A function that just print a "---" white line
#
function print_a_line()
{
        printf("%s", COLOR_BEGIN WHITE)                                                                         ;
        for (k=1; k<=WIDTH; k++) {printf("%s", "-");}                                                           ;       # n = number of nodes
        printf("%s", COLOR_END"\n")                                                                             ;
}
#
# The function that prints the output in nice tables
#
function print_output()
{
        WIDTH = COL_PATCH+COL_NODE*n+n+1                                                ;
        printf(COLOR_BEGIN BLUE"  %s"COLOR_END, OH)                                     ;       # OH as a title
        if (OPATCH_VERSION == "")
        {       OPATCH_VERSION="unknown; opatchauto report does not provide the opatch version";
        }
        printf("  %s\n", "(opatch version " OPATCH_VERSION")")                          ;       # Opatch version
        # A header
        print_a_line()                                                                  ;
        printf("%s", center("Patch ID", COL_PATCH, WHITE, "|"))                         ;
        for (i = 1; i <= n; i++)
        {
               printf("%s", center(nodes[i], COL_NODE, WHITE, "|"))                     ;       # Hostname / nodes
        }
        printf("\n")                                                                    ;
        print_a_line()                                                                  ;

        some_patches=0                                                                  ;
        p=asort(all_patches)                                                            ;
        for (i = 1; i <= p; i++)
        {
                some_patches=1                                                          ;
                printf("%s", center(all_patches[i], COL_PATCH, WHITE, "|"))             ;

                for (j = 1; j <= n; j++)                # for each node
                {
                        if (patch_tab[nodes[j], all_patches[i]] == all_patches[i])      # Patch is here
                        {       printf("%s", center("-", COL_NODE, GREEN, "|"))         ;
                        }
                        else                                                            # Patch is missing
                        {
                                printf("%s", center("Missing", COL_NODE, RED, "|"))     ;
                        }
                }
                printf ("%s", descr[all_patches[i]])                                    ;       # Patch description
                printf "\n"                                                             ;
        }
        if (some_patches == 0)
        {       printf("%s\n", center("No patch installed ", WIDTH-1, TEAL, "|"))       ;
        }

        delete all_patches                                                              ;
        delete patch_tab                                                                ;
        delete nodes                                                                    ;
        delete descr                                                                    ;
        NB_PATCHES_INSTALLED=0                                                          ;
        print_a_line()                                                                  ;
        printf "\n"                                                                     ;
}
#
# Main awk
#
{       if ($0 ~ /^Oracle Interim Patch Installer version/)
        {       gsub(/([aA-zZ])| /, "", $0)                                                                     ;
                OPATCH_VERSION=$0                                                                               ;
                gsub(/\./, "", $0)                                                                              ;
                OPATCH_VERSION_NUMERIC=$0                                                                       ;
        }
        if ($1 ~ /^Oracle Home/)        # opatch lsinventory output
        {
                gsub(" ", "", $2)                                                                               ;
                OH=$2                                                                                           ;
                oh_tab[oh_nb++]=OH                                                                              ;
                if ((OH !~ GREP) || (OH ~ UNGREP))
                {
                        next                                                                                    ;
                }

                while (getline)
                {
                        if ($1 ~ /^Hostname/)                                                                           # The hostname in case it is a local opatch
                        {
                                gsub(" ", "", $2)                                                               ;
                                sub(/\..*$/, "", $2)                                                            ;
                                  SERVER = $2                                                                   ;
                                nodes[1] = $2                                                                   ;
                                       n = 1                                                                    ;
                        }
                        if (($1 ~ /^Rac system comprising/) && (! NB_PATCHES_INSTALLED))                                # RAC Home
                        {
                                cpt=1                                                                           ;
                                while(getline)
                                {       if ($0 ~ /^$/)
                                        {       break                                                           ;
                                        }
                                        gsub(" ", "", $0)                                                       ;
                                        gsub(/^.*=/, "", $0)                                                    ;
                                        nodes[cpt] = $0                                                         ;
                                        cpt++                                                                   ;
                                }
                                n=asort(nodes)                                                                  ;       # sort array nodes

                        }
                        if (($1 ~ /^Patch level status of Cluster node/) && (! NB_PATCHES_INSTALLED))                   # Grid Homes
                        {       getline; getline; getline;
                                nodes_list = ""                                                                 ;
                                while(getline)
                                {
                                        if ($0 ~ /^$/)
                                        {
                                                split(nodes_list, nodes, ",")                                   ;
                                                n=asort(nodes)                                                  ;       # sort array nodes
                                                break                                                           ;
                                        }
                                        if ($1 ~ /^ *[0-9]* /)
                                        {
                                                sub(/^ *[0-9]* /, "", $1);
                                                gsub(" ", "", $1)                                               ;
                                                gsub("\t", "", $1)                                              ;
                                                if (nodes_list == "")
                                                {       nodes_list = $1                                         ;
                                                } else {
                                                        nodes_list=nodes_list","$1                              ;
                                                }
                                        }
                                }
                        }
                        if ($1 ~ /^Node Name/)
                        {
                                gsub(" ", "", $2)                                                               ;
                                SERVER=$2                                                                       ;
                        }
                        if ($1 ~ /^Interim patches/)
                        {
                                gsub(/^.*\(/, "", $1)                                                           ;
                                gsub(/\).*$/, "", $1)                                                           ;
                                NB_PATCHES_INSTALLED = $1                                                       ;
                                    NB_PATCHES_FOUND = 0                                                        ;

                                while(getline)
                                {
                                        if (($1 ~ /^Patch/) && ($0 ~ /applied on/))     # Patch id
                                        {       NB_PATCHES_FOUND++                                              ;
                                                patch_id = $1                                                   ;
                                                sub("Patch", "", patch_id)                                      ;
                                                gsub(" ", "", patch_id)                                         ;
                                                patch_tab[SERVER, patch_id]=patch_id                            ;       # Patches per server
                                                if (patch_id in all_patches)
                                                { cpt++; } else {
                                                        all_patches[patch_id] = patch_id                        ;       # All patches accross all nodes
                                                }
                                                getline; getline ;
                                                if ($1 ~ /^Patch description/)                                          # Get the patch descr if available
                                                {
                                                        sub("Patch description: ", "", $0)                      ;
                                                        gsub("\"", "", $0)                                      ;
                                                        descr[patch_id] = $0                                    ;
                                                }
                                        }
                                        if (NB_PATCHES_FOUND == NB_PATCHES_INSTALLED)
                                        {       break                                                           ;
                                        }
                                }
                        }
                        if (($1 ~ /^OPatch succeeded/) || ($1 ~ /^OPatch completed with warnings/))
                        {
                                print_output()  ;
                                break                                                                           ;
                        }
                }

        }                       # End if ($1 ~ /^Oracle Home/)
        if ($0 ~ /OPatchAuto report result/)            # opatchauto report output
        {
                n=0                                                             ;       # Number of nodes
                while (getline)
                {       if ($0 ~ /host name=/)
                        {       sub(/^.*name="/, "", $0)                        ;
                                sub(/".*$/, "", $0)                             ;
                                SERVER=$0                                       ;
                                n++                                             ;
                                nodes[n]=SERVER                                 ;
                        }
                        if ($0 ~ /homes path/)
                        {       sub(/^.*path="/, "", $0)                        ;
                                sub(/".*$/, "", $0)                             ;
                                OH=$0                                           ;
                                if ((OH !~ GREP) || (OH ~ UNGREP))
                                {
                                        next                                    ;
                                }
                        }
                        if($0 ~ /patch id/)
                        {
                                patch_id = $0                                   ;
                                sub(/^ *<patch id="/, "", patch_id)             ;
                                sub(/".*$/, "", patch_id)                       ;
                                patch_tab[SERVER, patch_id]=patch_id            ;       # Patches per server
                                if (patch_id in all_patches)
                                { cpt++; } else {
                                        all_patches[patch_id] = patch_id        ;       # All patches accross all nodes
                                }

                        }
                        if ($0 ~ /OPatchAuto report end of result/)
                        {       print_output()                                  ;
                                break                                           ;
                        }
                }
        }
} ' ${TMP}

for F in ${TMP} ${TMP2}
do
  if [ -f ${F} ]
  then
    rm -f ${F}
  fi
done
}
#
#########################################################################################################
# Exadata Many LSPATCHES
#########################################################################################################
#
function func_exa_many_lspatches()
{
# Fred Denis -- March 2019
#

LSPATCHES=/tmp/lspatches.sh
OH_LIST=/tmp/oh_list

for X in `cat $OH_LIST | awk '{print $3"|"$4}'`
do
  OH=`echo $X | awk -F "|" '{print $1}'`
  PREV_OWNER=$OWNER
  OWNER=`echo $X | awk -F "|" '{print $2}'`

  if [[ "$OWNER" = "''" ]]
  then
    OWNER=$PREV_OWNER
  fi
# printf "%s%s%s\n" $OH, $OWNER $PREV_OWNER

sudo su - $OWNER << END_SU
$LSPATCHES -g $OH
END_SU
done
}
#
#########################################################################################################
# Exadata NBFILES
#########################################################################################################
#
function func_exa_nbfiles()
{
# Fred Denis -- March 2018
# Show number of files and size per day in a directory
#

    DIR="/u01/app/oracle/admin/floltp/adump"
    DIR="/opt/oracle/admin/mov001/adump"
    DIR="/opt/oranfs/export/diskonly"
PATTERN="*.aud"
PATTERN="*"
  EMAIL="denis@pythian.com"
    OUT="nbfilesout$$.png"
echo $OUT

 TMP=/tmp/nbfilestemp$$
TMP2=/tmp/nbfilestemp2$$

GNUPLOT=`which gnuplot`
#GNUPLOT=""

find ${DIR} -type f -name "${PATTERN}" -printf '%TY-%Tm-%Td %s\n' |\
        awk ' {         tab[$1]+=$2                                                     ;
                        tab2[$1]++                                                      ;
              }
             END {      n=asorti(tab, tab_sorted)                                       ;
                        for (i=1; i<=n; i++)
                        {
                                          x =tab_sorted[i]                              ;       # For code visibility
                                        sum+=tab[x]/1024/1024                           ;
                                total_files+=tab2[x]                                    ;

                                printf("%12s%8d%12d\n", x, tab[x]/1024/1024, tab2[x])   ;

                        }
                        printf("%12s%8d%12d\n", "Total", sum, total_files)              ;
                }
            ' > ${TMP}

if [[ -n ${GNUPLOT} ]]
then
  echo "lets graph"
  cat ${TMP} | grep -v "Total" > ${TMP2}
  cat $TMP2
  gnuplot << END
  set term png
  set output "${OUT}"
  set timefmt "%Y-%m-%d"
  set xdata time
  set ytics
  set ylabel 'MB'
  set y2tics
  set y2label 'Nb files'
  plot '${TMP2}' using 1:2 axes x1y1 with lines title 'MB' smooth cspline,\
  '' using 1:3 axes x1y2 with lines title 'Nb files' smooth cspline
END
else
  printf "%-12s%8s%12s\n" "   Date" "   MB" "     Nb Files "                              ;
  cat ${TMP}
fi

#,goryunov@pythian.com
sendmail -t <<EOT
TO:denis@pythian.com
FROM:root@tamans124.com
Subject:${DIR}|${PATTERN}
MIME-Version: 1.0
Content-Type: multipart/related;boundary="XYZ"

--XYZ
Content-Type: text/html; charset=ISO-8859-15
Content-Transfer-Encoding: 7bit

<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-15">
</head>
<body bgcolor="#ffffff" text="#000000">
<img src="cid:part1.06090408.01060107" alt="">
</body>
</html>

--XYZ
Content-Type: image/png;name="${OUT}"
Content-Transfer-Encoding: base64
Content-ID: <part1.06090408.01060107>
Content-Disposition: inline; filename="${OUT}"

$(base64 ${OUT})
--XYZ
EOT

# <img src="cid:part1.06090408.01060107" alt="">

for F in ${TMP} ${OUT} ${TMP2}
do
if [[ -f ${F} ]]
then
  rm -f ${F}
fi
done
}
#
#########################################################################################################
# Exadata RAC Status
#########################################################################################################
#
function func_exa_rac_status()
{
# Fred Denis -- Jan 2016 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# Quickly shows a status of all running instances accross a 12c cluster
# The script just needs to have a working oraenv, if rac-status.sh hangs, you may suffer from http://bit.ly/2IODPJo (alternatively ,see the -e option)
#
# Please have a look at http://bit.ly/2MFkzDw  for some details and screenshots
# The latest version of the script can be downloaded here : http://bit.ly/2XEXa6j
#
# The current script version is 20190626
#
# History :
#
# 20190626 - Fred Denis - Better sorting, better recently restarted legend
# 20190621 - Fred Denis - Fixed a bug on the sorting when version was different as other (12.1 instead of 12.1.0.0)
#                       - Option -w now also supports d for day, w for week, m for month and y for year to specify the delay
# 20190620 - Fred Denis - Fixed an issue with the sorting when there was recently restarted instances
# 20190617 - Fred Denis - New -c option to sort the databases output
# 20190606 - Fred Denis - Show a yellow background when a resource has been restarted less than DIFF_HOURS hours
#                         A new -w option can be use to specify a number of hours through the command line
#                         Owners and groups which contained numbers were ignored, this is fixed
# 20190524 - Fred Denis - Fixed a bug when hostnames had more than 1 "db" pattern in their names
# 20190508 - Fred Denis - Show the whole service name and not only part of it when it contains "."
# 20190426 - Fred Denis - which gawk for AIX
# 20190104 - Fred Denis - A new -r option to Reverse the colors (useful for clear terminal backgrounds)
#                         A new -u option to show an Uncolored output
# 20190325 - Fred Denis - Solaris sed does not support sed -i, use gsed instead
#                         New -e option to NOT use oraenv to set the ASM environment but to use the current manually set environment
#                               (USE_ORAENV="NO" on top of the script to have this permanently)
# 20190318 - Fred Denis - Dont show the owner:group legend about '' menaing same as above if only 1 Home
# 20190307 - Fred Denis - Added owner:group behind the ORACLE_HOME (useful when owner are different) -- thanks Andrey for the feature idea !
#                         Also removed the P for Primary and S for Stanby legend; it looks self explanatory enough already
# 20190204 - Fred Denis - Oracle Restart support
# 20190130 - Fred Denis - 11g support (BREAK_HERE); 11g and 12c crsctl outputs are quite different
#                                               - A new -o option to specify a file to save the crsctl commands output
#                                               - A new -f option to specify an input file (a file generated by the -o option for example)
# 20190122 - Fred Denis - Multi OS support for AWK (especially for Solaris)
# 20190115 - Fred Denis - Fixed minor alignement issues
#                         Add grep (-g) and ungrep (-v) feature
# 20181110 - Fred Denis - Show short names in the tables instead of the whole hostnames if possible for better visibility
#                       - Col 1 and col 2 now align dynamically depending on the largest element to keep all the tables well aligned
#                       - Dynamic calculation of an offser for the status column size depending on the number of nodes
#                       - This can also be fixed by setting a non 0 value to COL_NODE_OFFSET on top of the script
#                       - Better alignements, centered databases and service were not nice, they are now left aligned which is more clear
# 20181010 - Fred Denis - Added the services
#                         Added default value and options to show and hide some resources (./rac-status.sh -h for more information)
# 20181009 - Fred Denis - Show the usual blue "-" when a target is offline on purpose instead of a red "Offline" which was confusing
# 20180921 - Fred Denis - Added the listeners
# 20180227 - Fred Denis - Make the the size of the DB column dynamic to handle very long database names (Thanks Michael)
#                       - Added a (P) for Primary databases and a (S) for Stanby for color blind people who
#                         may not see the difference between white and red (Thanks Michael)
# 20180225 - Fred Denis - Make the multi status like "Mounted (Closed),Readonly,Open Initiated" clear in the table by showing only the first one
# 20180205 - Fred Denis - There was a version alignement issue with more than 10 different ORACLE_HOMEs
#                       - Better colors for the label "White for PRIMARY, Red for STANBY"
# 20171218 - Fred Denis - Modify the regexp to better accomodate how the version can be in the path (cannot get it from crsctl)
# 20170620 - Fred Denis - Parameters for the size of the columns and some formatting
# 20170619 - Fred Denis - Add a column type (RAC / RacOneNode / Single Instance) and color it depending on the role of the database
#                         (WHITE for a PRIMARY database and RED for a STANDBY database)
# 20170616 - Fred Denis - Shows an ORACLE_HOME reference in the Version column and an ORACLE_HOME list below the table
# 20170606 - Fred Denis - A new 12cR2 GI feature now shows the ORACLE_HOME in the STATE_DETAILS column from "crsctl -v"
#                       - Example :     STATE_DETAILS=Open,HOME=/u01/app/oracle/product/11.2.0.3/dbdev_1 instead of STATE_DETAILS=Open in 12cR1
# 20170518 - Fred Denis - Add  a readable check on the ${DBMACHINE} file - it happens that it exists but is only root readable
# 20170501 - Fred Denis - First release
#
#
# Variables
#
        TMP=/tmp/status$$.tmp                                             # A tempfile
       TMP2=/tmp/status2$$.tmp                                            # Another tempfile
  DBMACHINE=/opt/oracle.SupportTools/onecommand/databasemachine.xml       # File where we should find the Exadata model as oracle user
       GREP="."                                                           # What we grep                  -- default is everything
     UNGREP="nothing_to_ungrep_unless_v_option_is_used$$"                 # What we don't grep (grep -v)  -- default is nothing
 USE_ORAENV="YES"                                                         # Use oraenv to set the ASM env (-e changes this to NO)
    REVERSE="NO"                                                          # Revert the colors to make them visible, useful for clear terminal backgrounds
WITH_COLORS="YES"                                                         # Output with colors, (-b changes this to NO); set to NO for permanent no colored output
      WHITE="37m"                                                         # White color code
 DIFF_HOURS="24"                                                          # Nb of hours the instance has been restarted
    SORT_BY=""                                                            # Column to sort by (see the help for possible values)

# Choose the information what you want to see -- the last uncommented value wins
# ./rac-status.sh -h for more information
  SHOW_DB="YES"                 # Databases
 #SHOW_DB="NO"
SHOW_LSNR="YES"                 # Listeners
#SHOW_LSNR="NO"
 SHOW_SVC="YES"                 # Services
 SHOW_SVC="NO"

# Number of spaces between the status and the "|" of the column - this applies before and after the status
# A value of 2 would print 2 spaces before and after the status and like |  Open  |
# A value of 8 would print |        Open         |
# A value of 99 means that this parameter is dynamically calculated depending on the number of nodes
# A non 99 value is applied regardless of the number of nodes
COL_NODE_OFFSET=99

#
# Different OS support
#
OS=`uname`
case ${OS} in
  SunOS)
    AWK=`which gawk`
    SED=`which gsed`
    ;;
  Linux)
    AWK=`which awk`
    SED=`which sed`
    ;;
  HP-UX)
    AWK=`which awk`
    SED=`which sed`
    ;;
  AIX)
    AWK=`which gawk`
    SED=`which sed`
    ;;
  *) printf "\n\t\033[1;31m%s\033[m\n\n" "Unsupported OS, cannot continue."
    ;;
esac
# Check if we have an AWK and a SED to continue
if [[ ! -f ${AWK} ]]
then
  printf "\n\t\033[1;31m%s" "No awk found on your system, cannot continue, if you run Solaris, please ensure that gawk is in your path"
  printf "\t%s\033[m\n\n" ${AWK}
  exit 678
fi
if [[ ! -f ${SED} ]]
then
  printf "\n\t\033[1;31m%s" "No sed found on your system, cannot continue, if you run Solaris, please ensure that gsed is in your path"
  printf "\t%s\033[m\n\n" ${SED}
  exit 679
fi

#
# An usage function
#
usage()
{
printf "\n\033[1;37m%-8s\033[m\n" "NAME";
cat << END
  `basename $0` - A nice overview of databases, listeners and services running across a GI 12c
END

printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS";
cat << END
        $0 [-a] [-n] [-d] [-l] [-s] [-o] [-f] [-r] [-u] [-h]
END

printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION";
cat << END
  `basename $0` needs to be executed with a user allowed to query GI using crsctl; oraenv also has to be working
  `basename $0` will show what is running or not running accross all the nodes of a GI 12c :
                - The databases instances (and the ORACLE_HOME they are running against)
                - The type of database : Primary, Standby, RAC One node, Single
                - The listeners (SCAN Listener and regular listeners)
                - The services
                With no option, `basename $0` will show what is defined by the variables :
                - SHOW_DB       # To show the databases instances
                - SHOW_LSNR     # To show the listeners
                - SHOW_SVC      # To show the services
                These variables can be modified in the script itself or you can use command line option to revert their value (see below)

END

printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS";
cat << END
        -a        Show everything regardless of the default behavior defined with SHOW_DB, SHOW_LSNR and SHOW_SVC
        -n        Show nothing  regardless of the default behavior defined with SHOW_DB, SHOW_LSNR and SHOW_SVC
        -a and -n are handy to erase the defaults values:
                  $ ./rac-status.sh -n -d                         # Show the databases output only
                  $ ./rac-status.sh -a -s                         # Show everything but the services (then the listeners and the databases)

        -d        Revert the behavior defined by SHOW_DB  ; if SHOW_DB   is set to YES to show the databases by default, then the -d option will hide the databases
        -l        Revert the behavior defined by SHOW_LSNR; if SHOW_LSNR is set to YES to show the listeners by default, then the -l option will hide the listeners
        -s        Revert the behavior defined by SHOW_SVC ; if SHOW_SVC  is set to YES to show the services  by default, then the -s option will hide the services

        -g        Act as a grep command to grep a pattern from the output (key sensitive)
        -v        Act as "grep -v" to ungrep from the output
        -g and -v examples :
                  $ ./rac-status.sh -g Open                       # Show only the lines with "Open" on it
                  $ ./rac-status.sh -g Open                       # Show only the lines with "Open" on it
                  $ ./rac-status.sh -g "Open|Online"              # Show only the lines with "Open" or "Online" on it
                  $ ./rac-status.sh -g "Open|Online" -v 12        # Show only the lines with "Open" or "Online" on it but no those containing 12

        -c      Column to sort by, please have a look at "Sort the database output" in http://bit.ly/2MFkzDw for more details on this -c option

        -o      Specify a file to save the crsctl commands output
                $ ./rac-status.sh -o /tmp/rac-status_output.log
        -f      A file to use as input file (one generated by the -o option for example)
                $ ./rac-status.sh -f /tmp/rac-status_output.log

        -e      Do not use oraenv to set the ASM environment but relies on the current environment
                Set USE_ORAENV="NO" on top of the script to have a permanent -e option

        -r      Reverse the colors (useful for clear terminal backgrounds)

        -u      Shows the Uncolored output (no colors); set WITH_COLORS="NO" on top of the script to have it permanently

        -w      Show a yellow background when a resource has been restarted less than the number of hours in parameter (default is $DIFF_HOURS)
                h for hours (default) d for day, w for week, m for month and y for year can be used to specify the delay:
                $ ./rac-status.sh -w 24         # 24 hours
                $ ./rac-status.sh -w 24h        # 24 hours
                $ ./rac-status.sh -w 2d         # 2 days
                $ ./rac-status.sh -w 3m         # 3 months

        -h      Shows this help

        Note : the options are cumulative and can be combined with a "the last one wins" behavior :
                $ $0 -a -l              # Show everything but the listeners (-a will force show everything then -l will hide the listeners)
                $ $0 -n -d              # Show only the databases           (-n will force hide everything then -d with show the databases)

                Experiment and enjoy  !

END
exit 123
}

# Options
while getopts "andslhg:v:o:f:eruw:c:" OPT; do
        case ${OPT} in
        a)         SHOW_DB="YES"        ; SHOW_LSNR="YES"       ; SHOW_SVC="YES"                ;;
        n)         SHOW_DB="NO"         ; SHOW_LSNR="NO"        ; SHOW_SVC="NO"                 ;;
        d)         if [ "$SHOW_DB"   = "YES" ]; then   SHOW_DB="NO"; else   SHOW_DB="YES"; fi   ;;
        s)         if [ "$SHOW_SVC"  = "YES" ]; then  SHOW_SVC="NO"; else  SHOW_SVC="YES"; fi   ;;
        l)         if [ "$SHOW_LSNR" = "YES" ]; then SHOW_LSNR="NO"; else SHOW_LSNR="YES"; fi   ;;
        g)           GREP=${OPTARG}                                                             ;;
        c)        SORT_BY=${OPTARG}                                                             ;;
        v)         UNGREP=${OPTARG}                                                             ;;
        f)           FILE=${OPTARG}                                                             ;;
        o)            OUT=${OPTARG}                                                             ;;
        e)     USE_ORAENV="NO"                                                                  ;;
        r)        REVERSE="YES"                                                                 ;;
        w)     DIFF_HOURS=${OPTARG}                                                             ;;
        u)    WITH_COLORS="NO"                                                                  ;;
        h)         usage                                                                        ;;
        \?)        echo "Invalid option: -$OPTARG" >&2; usage                                   ;;
        esac
done


#
# Manage the diff hours depending on the unit in the -w option
#
DIFF_HOURS_UNIT=${DIFF_HOURS: -1}

if [[ ! "${DIFF_HOURS_UNIT}" =~ [0-9] ]]
then
        HOURS=`echo ${DIFF_HOURS} | sed s'/.$//'`

        case ${DIFF_HOURS_UNIT} in
        h)      NB_HOURS=1                                                                      ;;
        d)      NB_HOURS=24                                                                     ;;
        w)      NB_HOURS=$((24*7))                                                              ;;
        m)      NB_HOURS=$((24*7*31))                                                           ;;
        y)      NB_HOURS=$((24*7*31*365))                                                       ;;
        esac

        DIFF_HOURS=$(($HOURS * $NB_HOURS))
else
	DIFF_HOURS_UNIT="h"
	          HOURS=${DIFF_HOURS}
fi

#
# Check that the input file is here if specified
#
if [[ "${REVERSE}" == "YES" ]]
then
        WHITE="30m"     ;        # Black
fi
if [ -n "$FILE" ]       # Input file specified, we wont run any crsctl command and rely on the file as input
then
    if  [ ! -f ${FILE} ]
    then
        printf "\n\t\033[1;31m%s\033[m\n\n" "Cannot find the ${FILE} input file; cannot continue"
        exit 222
    else    # we use $FILE as input
        printf "\n\t\033[1;34m%s\033[m\n\n" "Proceeding with the ${FILE} file as input file"
    fi
fi

if [ -z "$FILE" ]     # This is not needed when using an input file
then
        if [[ "${USE_ORAENV}" == "YES" ]]
        then
                #
                # Set the ASM env to be able to use crsctl commands
                #
                ORACLE_SID=`ps -ef | grep pmon | grep asm | ${AWK} '{print $NF}' | sed s'/asm_pmon_//' | egrep "^[+]"`

                export ORAENV_ASK=NO
                . oraenv > /dev/null 2>&1
        fi
        if ! type crsctl > /dev/null 2>&1
        then
                printf "\n\t\033[1;31m%s\033[m\n\n" "Cannot find crsctl, cannot continue, please check if oraenv works or set your environment manually and use the -e option."          ;
                exit 777
        fi

        #
        # List of the nodes of the cluster
        #
        # Try to find if there is "db" in the hostname, if yes we can delete the common "<clustername>" pattern from the hosts for visibility
        SHORT_NAMES="NO"
        if [[ `olsnodes | head -1 | sed s'/,.*$//g' | tr '[:upper:]' '[:lower:]'` == *"db"* ]]
        then
                       NODES=`olsnodes | sed s'/^.*db/db/g' | ${AWK} '{if (NR<2){txt=$0} else{txt=txt","$0}} END {print txt}'`
        #       CLUSTER_NAME=`olsnodes | head -1 | sed s'/db.*$//g'`
                CLUSTER_NAME=`olsnodes | head -1 | sed s'/\(^.*\)db.*/\1/'`
                 SHORT_NAMES="YES"
        else
                       NODES=`olsnodes | ${AWK} '{if (NR<2){txt=$0} else{txt=txt","$0}} END {print txt}'`
                CLUSTER_NAME=`olsnodes -c`
        fi
        # if oracle restart, olsnodes is here but returns nothing, we then set the NODES with the current hostname
        if [ -z "${NODES}" ]
        then
                NODES=`hostname -s`
        fi

        if [[ "$WITH_COLORS" == "YES" ]]
        then
                COLOR_FOR_CLUSTER="\e[1;"${WHITE}
        else
                COLOR_FOR_CLUSTER=""
        fi
        printf "\n\t\t%s"${COLOR_FOR_CLUSTER}"%s\e[m" "Cluster " "$CLUSTER_NAME"

        #
        # Show the Exadata model if possible (if this cluster is an Exadata)
        #
        if [ -f ${DBMACHINE} ] && [ -r ${DBMACHINE} ]
        then
                        MODEL=`grep -i MACHINETYPES ${DBMACHINE} | sed -e s':</*MACHINETYPES>::g' -e s'/^ *//' -e s'/ *$//'`
                        printf "%s"${COLOR_FOR_CLUSTER}"%s\e[m\n" " is a " "$MODEL"
        else
                        printf "\n"
        fi
        printf "\n"

        # Get the info we want
        cat /dev/null                                                   >  $TMP
        if [ "$SHOW_DB" = "YES" ]
        then
                        crsctl stat res -p -w "TYPE = ora.database.type"                >> $TMP
                        crsctl stat res -v -w "TYPE = ora.database.type"                >> $TMP
        fi
        if [ "$SHOW_LSNR" = "YES" ]
        then
                        crsctl stat res -v -w "TYPE = ora.listener.type"                >> $TMP
                        crsctl stat res -p -w "TYPE = ora.listener.type"        >> $TMP
                        crsctl stat res -v -w "TYPE = ora.scan_listener.type"   >> $TMP
                        crsctl stat res -p -w "TYPE = ora.scan_listener.type"   >> $TMP
        fi
        if [ "$SHOW_SVC" = "YES" ]
        then
                        crsctl stat res -v -w "TYPE = ora.service.type"                 >> $TMP
                        #crsctl stat res -p -w "TYPE = ora.service.type"                >> $TMP         # not used, in case we need it one day
        fi

        # Easiest way to manage the different versions of crsctl outputs
        awk '{if ($1 ~ /^NAME=/) {print "BREAK_HERE"; print  $0} else {print $0}}' $TMP > $TMP2
        cp ${TMP2} ${TMP}

        if [ "$SHORT_NAMES" = "YES" ]
        then
                        ${SED} -i "s/$CLUSTER_NAME//g" $TMP
        fi
        NB_NODES=`olsnodes | wc -l`
else            # If we use an input file
        cp ${FILE} ${TMP}
           NODES=`grep LAST_SERVER $TMP | awk -F"=" '{print $2}' | sort | uniq | grep -v "^$" | awk '{if (NR<2){txt=$0} else{txt=txt","$0}} END {print txt}'`
        NB_NODES=`grep LAST_SERVER $TMP | awk -F"=" '{print $2}' | sort | uniq | wc -l`
fi      # End if [ -z "$FILE" ]


#
# Define the offset to apply to the status column depending on the number of nodes to make the tables visible for big implementations
#
if [ "$COL_NODE_OFFSET" = "99" ]
then
  COL_NODE_OFFSET=3;
  if [ "$NB_NODES" -eq "2" ]; then COL_NODE_OFFSET=6; fi ;
  if [ "$NB_NODES" -eq "4" ]; then COL_NODE_OFFSET=5; fi ;
  if [ "$NB_NODES" -gt "4" ]; then COL_NODE_OFFSET=3; fi ;
fi
  ${AWK} -v NODES="$NODES" -v col_node_offset="$COL_NODE_OFFSET" \
         -v         REVERSE="$REVERSE"		\
	 -v      DIFF_HOURS="$DIFF_HOURS"	\
	 -v           HOURS="$HOURS" 		\
	 -v DIFF_HOURS_UNIT="$DIFF_HOURS_UNIT"  \
	'BEGIN\
        { FS = "=";
           n = split(NODES, nodes, ",");       # Make a table with the nodes of the cluster
           # some colors
           COLOR_BEGIN="\033[1;";
           #COLOR_BEGIN="\033[";
           COLOR_END="\033[m";
           RED="31m";
           GREEN="32m";
           YELLOW="33m";
           BLUE="34m";
           TEAL="36m";
           WHITE="37m";
           WITH_BACK="43m";
           if (REVERSE == "YES")
             {
               WHITE="30m";           # Black
               TEAL="34m";            # Blue
               COLOR_BEGIN="\033[2;"; # Bold
                }
           UNKNOWN="-";               # Something to print when the status is unknown
           # Default columns size
                COL_NODE=0                     ;
         COL_NODE_OFFSET=col_node_offset * 2   ;       # Defined on top the script, have a look for explanations on this
                  COL_DB=12                    ;
                 COL_VER=15                    ;
                COL_TYPE=14                    ;
                  COL_OH=24                    ;       # to print the ORACLE_HOMEs
               COL_OWNER=6                     ;       # to print owner:group
               COL_GROUP=3                     ;       # to print owner:group
             COL_DEFAULT=BLUE                  ;       # for the "-"
        RECENT_RESTARTED=0                     ;       # To show a legend if we found a recent restarted
        }

        #
        # A function to center the outputs with colors
        #
        function center( str, n, color)
        {       right = int((n - length(str)) / 2)                                                              ;
                left  = n - length(str) - right                                                                 ;
                return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END "|", "", str, "" )         ;
        }
        #
        # Get a date in format MM/DD/YYYY HH24:MI:SS and return the rounded number hours difference
        # between this date and the current date
        function diff_hours(a_date)
        {       split(a_date, temp, /[\/ :]/)                                                                   ;
                #return sprintf("%d",(systime()-mktime (temp[3]" "temp[1]" "temp[2]" "temp[4]" "temp[5]" "temp[6]))/(60*60))     ;
                return (systime()-mktime (temp[3]" "temp[1]" "temp[2]" "temp[4]" "temp[5]" "temp[6]))/(60*60)     ;
        }
        #
        # Print a legend for the recent restarted instances, listeners and services
        #
        function print_legend_recent_restarted()
        {
                if (RECENT_RESTARTED == 1)
                {       #IN_DAYS=sprintf("%.2f", DIFF_HOURS/24)                                  ;       # Round nb of days
                        printf ("\n")                                                           ;
                        printf(COLOR_BEGIN WITH_BACK " %-"3"s" COLOR_END, " ")                  ;
                        #printf(COLOR_BEGIN WHITE " %-"12"s\n " COLOR_END, ": Has been restarted less than "DIFF_HOURS" hours ago ("IN_DAYS" days ago)")              ;
			if (DIFF_HOURS_UNIT == "h")	{ UNIT="hour"		}
			if (DIFF_HOURS_UNIT == "d")	{ UNIT="day"		}	
			if (DIFF_HOURS_UNIT == "w")	{ UNIT="week"		}	
			if (DIFF_HOURS_UNIT == "m")	{ UNIT="month"		}	
			if (DIFF_HOURS_UNIT == "y")	{ UNIT="year"		}	
			if (HOURS > 1)			{ UNIT=UNIT"s"		}	
                        printf(COLOR_BEGIN WHITE " %-"12"s\n " COLOR_END, ": Has been restarted less than "HOURS" "UNIT" ago.")             ;
                }
        }
        #
        # A function that just print a "---" white line
        #
        function print_a_line(size)
        {
                if ( ! size)
                {       size = COL_DB+COL_VER+(COL_NODE*n)+COL_TYPE+n+3                                         ;
                }
                printf("%s", COLOR_BEGIN WHITE)                                                                 ;
                for (k=1; k<=size; k++) {printf("%s", "-");}                                                    ;       # n = number of nodes
                printf("%s", COLOR_END"\n")                                                                     ;
        }
        {
               # Fill 2 tables with the OH and the version from "crsctl stat res -p -w "TYPE = ora.database.type""
               if ($1 == "NAME")
               {
                        sub("^ora.", "", $2)                                                                    ;
                        sub(".db$",  "", $2)                                                                    ;
                        if ($2 ~ ".lsnr"){sub(".lsnr$", "", $2); tab_lsnr[$2] = $2;}                            ;       # Listeners
                        if ($2 ~ ".svc")                                                                                # Services
                        {       sub(".svc$", "", $2)                                                            ;
                                tab_svc[$2]=$2                                                                  ;
                                    service=$2                                                                  ;
                                sub(/^[^.]*\./, "", service)                                                    ;       # Remove the DB name
                                if (length(service) > COL_VER-1)                                                        # To adapt the column size
                                {     COL_VER = length(service) +1                                              ;
                                }
                        }
                        DB=$2                                                                                   ;
                        split($2, temp, ".")                                                                    ;
                        if (length(temp[1]) > COL_DB-1)                                                                   # To adapt the 1st column size
                        {     COL_DB = length(temp[1]) +1                                                       ;
                        }

                        getline; getline                                                                        ;
                        if ($1 == "ACL")                        # crsctl stat res -p output
                        {
                                if ((DB in version == 0) && (DB in tab_lsnr == 0) && (DB in tab_svc == 0))
                                {
                                        # Get the owner and the group
                                        match($2, /owner:([[:alnum:]]*):.*/, OWNER)                             ;
                                        match($2, /^.*pgrp:([[:alnum:]]*):.*/, GROUP)                           ;

                                        while (getline)
                                        {
                                                if ($1 == "ORACLE_HOME")
                                                {                    OH = $2                                    ;
                                                        match($2, /1[0-9]\.[0-9]\.?[0-9]?\.?[0-9]?/)            ;       # Grab the version from the OH path)
                                                                VERSION = substr($2,RSTART,RLENGTH)             ;
                                                }
                                                if ($1 == "DATABASE_TYPE")                                              # RAC / RACOneNode / Single Instance are expected here
                                                {
                                                             dbtype[DB] = $2                                    ;
                                                }
                                                if ($1 == "ROLE")                                                       # Primary / Standby expected here
                                                {              role[DB] = $2                                    ;
                                                }
                                                if ($0 ~ /^$/)
                                                {           version[DB] = VERSION                               ;
                                                                 oh[DB] = OH                                    ;

                                                        if (!(OH in oh_list))
                                                        {
                                                                oh_ref++                                        ;
                                                            oh_list[OH] = oh_ref                                ;
                                                            o_list[OH] = OWNER[1]                               ;
                                                            g_list[OH] = GROUP[1]                               ;
                                                                if (length(OH)       > COL_OH)    {        COL_OH = length(OH)                  ; }
                                                                if (length(OWNER[1]) > COL_OWNER) {     COL_OWNER = length(OWNER[1])            ; }
                                                                if (length(GROUP[1]) > COL_GROUP) {     COL_GROUP = length(GROUP[1])            ; }
                                                        }
                                                        break                                                   ;
                                                }
                                        }
                                }
                                if (DB in tab_lsnr == 1)
                                {
                                        while(getline)
                                        {
                                                if ($1 == "ENDPOINTS")
                                                {
                                                        port[DB] = $2                                           ;
                                                        break                                                   ;
                                                }
                                        }
                                }
                        }
                        if ($1 == "LAST_SERVER")        # crsctl stat res -v output
                        {           NB = 0      ;       # Number of instance as CARDINALITY_ID is sometimes irrelevant
                                SERVER = $2     ;
                                if (length(SERVER) > COL_NODE)
                                {       COL_NODE = length(SERVER) + COL_NODE_OFFSET     ;
                                }
                                while (getline)
                                {
                                        if ($1 == "LAST_SERVER")        {       SERVER = $2                             ; }
                                        if ($1 == "STATE")              {       gsub(" on .*$", "", $2)                 ;
                                                                                if ($2 ~ /ONLINE/ ) {STATE="Online"     ;
                                                                                                     if (length(STATE) > COL_NODE) { COL_NODE = length(STATE) + COL_NODE_OFFSET;}
                                                                                                    }
                                                                                if ($2 ~ /OFFLINE/) {STATE=""           ;}
                                                                        }
                                        if ($1 == "TARGET")             {       TARGET = $2                             ;}
                                        if ($1 == "LAST_RESTART")       {       started[DB,SERVER]=diff_hours($2" "$3)  ;}
                                        if ($1 == "STATE_DETAILS")      {       NB++                                    ;       # Number of instances we came through
                                                                                sub("STATE_DETAILS=", "", $0)           ;
                                                                                sub(",HOME=.*$", "", $0)                ;       # Manage the 12cR2 new feature, check 20170606 for more details
                                                                                sub("),.*$", ")", $0)                   ;       # To make clear multi status like "Mounted (Closed),Readonly,Open Initiated"
                                                                                if ($0 == "")
                                                                                {       status[DB,SERVER] = STATE       ;}
                                                                                else {
                                                                                        if ($0 == "Instance Shutdown")  {  status[DB,SERVER] = "Shutdown"       ;       } else
                                                                                        if ($0 ~  "Readonly")           {  status[DB,SERVER] = "Readonly"       ;       } else
                                                                                        if ($0 ~  /Mount/)              {  status[DB,SERVER] = "Mounted"        ;       } else
                                                                                                                        {  status[DB,SERVER] = $0               ;       }
                                                                                        if (length(status[DB,SERVER]) > COL_NODE)
                                                                                        {       COL_NODE = length(status[DB,SERVER]) + COL_NODE_OFFSET  ;
                                                                                        }
                                                                                }
                                                                        }
                                                                        if ($1 == "BREAK_HERE") { break;}
                                }
                        }
                }       # End of if ($1 ~ /^NAME/)
            }
            END {       if (length(tab_lsnr) > 0)                # We print only if we have something to show
                        {
                                # A header for the listeners
                                printf("%s", center("Listener" ,  COL_DB, WHITE))                               ;
                                printf("%s", center("Port"     , COL_VER, WHITE))                               ;
                                n=asort(nodes)                                                                  ;       # sort array nodes
                                for (i = 1; i <= n; i++) {
                                        printf("%s", center(nodes[i], COL_NODE, WHITE))                         ;
                                }
                                printf("%s", center("Type"    , COL_TYPE, WHITE))                               ;
                                printf("\n")                                                                    ;

                                # a "---" line under the header
                                print_a_line()                                                                  ;

                                # print the listeners
                                x=asorti(tab_lsnr, lsnr_sorted)                                                 ;
                                for (j = 1; j <= x; j++)
                                {
                                        printf(COLOR_BEGIN WHITE " %-"COL_DB-1"s" COLOR_END"|", lsnr_sorted[j], WHITE);     # Listener name
                                        # It may happen that listeners listen on many ports then it wont fit this column
                                        # We then print it outside of the table after the last column
                                        if (length(port[lsnr_sorted[j]]) > COL_VER)
                                        {
                                                printf(COLOR_BEGIN WHITE " %-"COL_VER-1"s" COLOR_END"|", "See -->", WHITE);       # "See -->"
                                                print_port_later = 1                                            ;
                                        } else {
                                                printf(COLOR_BEGIN WHITE " %-"COL_VER-1"s" COLOR_END"|", port[lsnr_sorted[j]], WHITE);      # Port
                                        }

                                        for (i = 1; i <= n; i++)
                                        {
                                                dbstatus = status[lsnr_sorted[j],nodes[i]]                      ;
                                                if ((started[lsnr_sorted[j],nodes[i]] < DIFF_HOURS) && (started[lsnr_sorted[j],nodes[i]]))
                                                {         COL_ONLINE=WITH_BACK                          ;
                                                           COL_OTHER=WITH_BACK                          ;
                                                    RECENT_RESTARTED=1                                  ;
                                                } else {
                                                          COL_ONLINE=GREEN                              ;
                                                           COL_OTHER=RED                                ;
                                                }
                                                if (dbstatus == "")             {printf("%s", center(UNKNOWN , COL_NODE, COL_DEFAULT    ))      ;}      else
                                                if (dbstatus == "Online")       {printf("%s", center(dbstatus, COL_NODE, COL_ONLINE     ))      ;}
                                                else                            {printf("%s", center(dbstatus, COL_NODE, COL_OTHER      ))      ;}
                                        }
                                        if (toupper(lsnr_sorted[j]) ~ /SCAN/)
                                        {       LSNR_TYPE = "SCAN"                                              ;
                                        } else {
                                                LSNR_TYPE = "Listener"                                          ;
                                        }
                                        printf("%s", center(LSNR_TYPE, COL_TYPE, WHITE))                        ;
                                        if (print_port_later)
                                        {       print_port_later = 0                                            ;
                                                printf(COLOR_BEGIN WHITE " %-"COL_VER-1"s" COLOR_END, port[lsnr_sorted[j]], WHITE);      # Port
                                        }
                                        printf("\n")                                                            ;
                                }
                                # a "---" line under the header
                                print_a_line()                                                                  ;
                                printf("\n")                                                                    ;
                        }

                        if (length(tab_svc) > 0)                # We print only if we have something to show
                        {
                                # A header for the services
                                printf("%s", center("DB"      ,  COL_DB, WHITE))                                ;
                                printf("%s", center("Service" ,  COL_VER, WHITE))                               ;
                                n=asort(nodes)                                                                  ;       # sort array nodes
                                for (i = 1; i <= n; i++) {
                                        printf("%s", center(nodes[i], COL_NODE, WHITE))                         ;
                                }
                                printf("\n")

                                # a "---" line under the header
                                print_a_line(COL_DB+COL_NODE*n+COL_VER+n+2)                                    ;

                                # Print the Services
                                x=asorti(tab_svc, svc_sorted)                                                   ;
                                for (j = 1; j <= x; j++)
                                {       split(svc_sorted[j], to_print, ".")                                     ;       # The service we have is <db_name>.<service_name>
                                        service = svc_sorted[j]                                                 ;
                                        sub(/^[^.]*\./, "", service)                                            ;       # Remove the DB name only
                                        if (previous_db != to_print[1])                                                 # Do not duplicate the DB names on the output
                                        {
                                                printf(COLOR_BEGIN WHITE " %-"COL_DB-1"s" COLOR_END"|", to_print[1], WHITE);     # Database
                                                previous_db = to_print[1]                                       ;
                                        }else {
                                                printf("%s", center("",  COL_DB, WHITE))                        ;
                                        }
                                        #printf(COLOR_BEGIN WHITE " %-"COL_VER-1"s" COLOR_END"|", to_print[2], WHITE);     # Service
                                        printf(COLOR_BEGIN WHITE " %-"COL_VER-1"s" COLOR_END"|", service, WHITE);     # Service

                                        for (i = 1; i <= n; i++)
                                        {
                                                dbstatus = status[svc_sorted[j],nodes[i]]               ;
                                                if ((started[svc_sorted[j],nodes[i]] < DIFF_HOURS) && (started[svc_sorted[j],nodes[i]] < DIFF_HOURS))
                                                {         COL_ONLINE=WITH_BACK                          ;
                                                           COL_OTHER=WITH_BACK                          ;
                                                    RECENT_RESTARTED=1                                  ;
                                                } else {
                                                          COL_ONLINE=GREEN                              ;
                                                           COL_OTHER=RED                                ;
                                                }
                                                if (dbstatus == "")             {printf("%s", center(UNKNOWN , COL_NODE, COL_DEFAULT   ))      ;}      else
                                                if (dbstatus == "Online")       {printf("%s", center(dbstatus, COL_NODE, COL_ONLINE    ))      ;}
                                                else                            {printf("%s", center(dbstatus, COL_NODE, COL_OTHER     ))      ;}
                                        }
                                        printf("\n")                                                             ;
                                }
                                # a "---" line under the header
                                print_a_line(COL_DB+COL_NODE*n+COL_VER+n+2)                                      ;
                                printf("\n")                                                                     ;
                        }

                        if (length(version) > 0)                # We print only if we have something to show
                        {
                                # A header for the databases
                                printf("%s", center("DB"        , COL_DB, WHITE))                                ;
                                printf("%s", center("Version"   , COL_VER, WHITE))                               ;
                                n=asort(nodes)                                                                   ;       # sort array nodes
                                for (i = 1; i <= n; i++) {
                                        printf("%s", center(nodes[i], COL_NODE, WHITE))                          ;
                                }
                                printf("%s", center("DB Type"    , COL_TYPE, WHITE))                             ;
                                printf("\n")                                                                     ;

                                # a "---" line under the header
                                print_a_line()                                                                   ;

                                # Print the databases
                                m=asorti(version, version_sorted)                                                ;
                                for (j = 1; j <= m; j++)
                                {
                                        printf(COLOR_BEGIN WHITE " %-"COL_DB-1"s" COLOR_END"|", version_sorted[j], WHITE);     # Database
                                        #printf(COLOR_BEGIN WHITE " %-"COL_VER-7"s" COLOR_END, version[version_sorted[j]], COL_VER, WHITE)         ;       # Version
                                        #printf(COLOR_BEGIN WHITE "%6s" COLOR_END"|"," ("oh_list[oh[version_sorted[j]]] ") ")            ;       # OH id
                                        printf(COLOR_BEGIN WHITE " %-"COL_VER-6"s" COLOR_END, version[version_sorted[j]], COL_VER, WHITE)         ;       # Version
                                        printf(COLOR_BEGIN WHITE "%6s" COLOR_END"|"," ("oh_list[oh[version_sorted[j]]] ") ")            ;       # OH id

                                        for (i = 1; i <= n; i++) {
                                                dbstatus = status[version_sorted[j],nodes[i]]                    ;
                                                #
                                                # Print the status here, all that are not listed in that if ladder will appear in RED
                                                #
                                                if ((started[version_sorted[j],nodes[i]] < DIFF_HOURS) && (started[version_sorted[j],nodes[i]]))
                                                {           COL_OPEN=WITH_BACK                          ;
                                                        COL_READONLY=WITH_BACK                          ;
                                                            COL_SHUT=WITH_BACK                          ;
                                                           COL_OTHER=WITH_BACK                          ;
                                                    RECENT_RESTARTED=1                                  ;
                                                } else {
                                                            COL_OPEN=GREEN                              ;
                                                        COL_READONLY=WHITE                              ;
                                                            COL_SHUT=YELLOW                             ;
                                                           COL_OTHER=RED                                ;
                                                }
                                                if (dbstatus == "")                     {printf("%s", center(UNKNOWN , COL_NODE, COL_DEFAULT ))  ;}      else
                                                if (dbstatus == "Open")                 {printf("%s", center(dbstatus, COL_NODE, COL_OPEN    ))  ;}      else
                                                if (dbstatus ~  /Readonly/)             {printf("%s", center(dbstatus, COL_NODE, COL_READONLY))  ;}      else
                                                if (dbstatus ~  /Shut/)                 {printf("%s", center(dbstatus, COL_NODE, COL_SHUT    ))  ;}      else
                                                                                        {printf("%s", center(dbstatus, COL_NODE, COL_OTHER   ))  ;}

                                        }
                                        #
                                        # Color the DB Type column depending on the ROLE of the database (20170619)
                                        #
                                        if (role[version_sorted[j]] == "PRIMARY") { ROLE_COLOR=WHITE ; ROLE_SHORT=" (P)"; } else { ROLE_COLOR=RED ; ROLE_SHORT=" (S)" }
                                        printf("%s", center(dbtype[version_sorted[j]] ROLE_SHORT, COL_TYPE, ROLE_COLOR))           ;

                                        printf("\n")                                                            ;
                                }

                                # a "---" line as a footer
                                print_a_line()                                                                  ;

                                # Print the OH list and a legend for the DB Type colors underneath the table
                                printf ("%s", "ORACLE_HOME references listed in the Version column ")         ;
                                if (oh_ref > 1)
                                {
                                        printf ("(%s)", "\"" sprintf(COLOR_BEGIN TEAL "%s" COLOR_END, "\47\47") "\" means \"same as above\"")     ;
                                }
                                printf ("\n\n")                                                                 ;

                                previous_group = ""                     ;
                                previous_owner = ""                     ;
                                if (COL_OWNER%2) { COL_OWNER++  }
                                if (COL_GROUP%2) { COL_GROUP++  }
                                g_same_as_above=sprintf(COLOR_BEGIN TEAL "%"(COL_GROUP/2)-1"s%s" COLOR_END, "", "\47\47");
                                o_same_as_above=sprintf(COLOR_BEGIN TEAL "%"(COL_OWNER/2)-1"s%s%"(COL_OWNER/2)-1"s" COLOR_END, "", "\47\47", "");

                                # to ease the ORACLE_HOME sorting
                                for (x in oh_list)
                                {
                                        to_print[oh_list[x]] = x        ;
                                }
                                for (i=1; i<=oh_ref; i++)
                                {
                                        # to ease the naming
                                        the_oh=to_print[i]              ;
                                         owner=o_list[to_print[i]]      ;
                                         group=g_list[to_print[i]]      ;
                                        if (group == previous_group) {  group_to_print = g_same_as_above        ;       } else {        group_to_print = group  ;       }
                                        if (owner == previous_owner) {  owner_to_print = o_same_as_above        ;       } else {        owner_to_print = owner  ;       }

                                        printf("\t%2d : %-"COL_OH"s\t%-"COL_OWNER"s %s\n", i, the_oh, owner_to_print, group_to_print) ;
                                        previous_group = group          ;
                                        previous_owner = owner          ;
                                }
                        }
        }
        END {   print_legend_recent_restarted();
        } ' $TMP | ${AWK} -v GREP="$GREP" -v UNGREP="$UNGREP" ' BEGIN {FS="|"}                                              # AWK used to grep and ungrep
                      {         if ((NF >= 3) && ($(NF-1) !~ /Type/) && ($2 !~ /Service/))
                                {       if (($0 ~ GREP) && ($0 !~ UNGREP))
                                        {
                                                print $0                                                          ;
                                        }
                                } else {
                                        print  $0                                                                 ;
                                }
                        }' | sed s'/^/  /'              > ${TMP2}                       # We can reuse TMP2 here

        #
        # Special sort order (option -c)
        #
        if [[ -n ${SORT_BY} ]]                                                          # Special sort order
        then
                  SORT_COL="${SORT_BY:0:1}"                                             # First character
                 SORT_NODE="${SORT_BY:1:1}"                                             # Second character
                SORT_ORDER="${SORT_BY: -1}"                                             # Last character

		if [[ "${SORT_COL}" =~ [1-9] ]]
		then	SORT_NODE=${SORT_COL}
			 SORT_COL="c"
		fi

                # Sort order can only be "r" for reverse or "" for normal
                if [[ "${SORT_ORDER}" != "r" ]]
                then    SORT_ORDER=""
                else    SORT_ORDER="r"
                fi

                # Column or node number
                if [[ ! "${SORT_NODE}" =~ [1-9] ]]
                then    SORT_NODE=1
                fi


                # Assign the column  number depending of what we want to sort by
                 SORT_NUM=1
                SORT_NUM2=2                                                                                                    # Second column to sort by
                SORT_NUM3=2                                                                                                    # Third column to sort by
                case ${SORT_COL} in
                c )     if [[ "${SORT_NODE}" -gt "2" ]]
                        then
                                SORT_NUM=$(((${SORT_NODE}*2)+2))
                                SORT_NUM2=$((${SORT_NUM}-1))
                        else    SORT_NUM=$(( ${SORT_NODE}*2   ))
                        fi                                                                                      ;;              # Sort by column number
                d )     SORT_NUM=2                                                                              ;;              # Sort by DB name
                v )     SORT_NUM=4                                                                              ;;              # Sort by version
                s )     SORT_NUM=$(((${SORT_NODE}*2)+6))                                                        ;               # Sort by status (Shutdown, Open)
                        SORT_NUM2=$((${SORT_NUM}-1))                                                            ;;
                t )     TYPE_COL=`cat ${TMP2} | awk 'BEGIN {FS="|"}{if ($2 ~ "Version"){print (NF-1); exit}}'`  ;
                        SORT_NUM=$(((${TYPE_COL}*2)+1))                                                         ;;              # Sort by Type
                esac

		SORT_K_1=" -k"${SORT_NUM}${SORT_ORDER}" "
                SORT_K_2=" -k"${SORT_NUM2}" "
                SORT_K_3=" -k"${SORT_NUM3}" "

                cat ${TMP2} | awk 'BEGIN {FS="|"} {print $0; if ($2 ~ "Version"){getline; print $0; exit;}}' > ${TMP}
                cat ${TMP2} | awk 'BEGIN {FS="|"}{if ($2 ~ "Version"){getline; while(getline){if ($0 ~ /---------------/){break}; print $0; }}}' | sort -i ${SORT_K_1} ${SORT_K_2} ${SORT_K_3} >> ${TMP}
                tac ${TMP2} | awk '{print $0; if ($0 ~ /---------------/){exit;}}' | tac >> ${TMP}

                cp ${TMP} ${TMP2}
        fi

        if [[ "$WITH_COLORS" == "YES" ]]
        then
                cat ${TMP2}
        else
                cat ${TMP2} | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"      # Remove the colors
        fi

        printf "\n"

if [ -f ${TMP} ]
then
  if [ -n "$OUT" ]
  then
    cp $TMP $OUT
    printf "\n\t\033[1;34m%s\033[m\n\n" "Output file $OUT has been generated"
  fi
rm -f ${TMP}
fi
if [ -f ${TMP2} ]
then
  rm -f ${TMP2}
fi
}
#
#########################################################################################################
# Exadata RAC Monitor
#########################################################################################################
#
function func_exa_rac_monitor()
{
# Fred Denis -- Jan 2019 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# A script to monitor a RAC / GI 12c using rac-status.sh (https://goo.gl/LwQC1N)
# More information on the script on https://goo.gl/EwDeKn
# See the usage function or use the -h option for more details
#
# The current version of the script is 20190118
#
# 20190118 - Fred Denis - Initial Release
#

#
# Variables
#
       REFERENCE=~/rac-status_reference                 # The reference file where is saved the good status of your cluster
       RACSTATUS=~/rac-status.sh                        # The rac-status.sh script location
             TMP="/tmp/racmontempfile$$"                # A tempfile
            TMP2="/tmp/racmontempfile2$$"               # Another tempfile
 AUTO_CREATE_REF="Yes"                                  # If yes, create the reference file if it does not exist (for first execution)
                                                        # If not yes, prompt about this and exit
#
# Email alerting
#
         EMAILTO="youremail@company.com"                # The email to send the alert to
EMAIL_ON_FAILURE="No"                                   # Default behavior to send an email if an error is detected (-e option) - put Yes to always send emails
EMAIL_ON_SUCCESS="No"                                   # Default behavior to send an email even if no error is detected (-s option) - put Yes to always send emails
FAILURE_SUBJECT="Error : Cluster status at "`date`      # Subject of the email sent
SUCCESS_SUBJECT="OK : Cluster status at "`date`         # Subject of the email sent

#
# usage function
#
usage()
{
printf "\n\033[1;37m%-8s\033[m\n" "NAME"                ;
cat << END
  `basename $0` - A quick and efficient RAC/GI 12c monitoring tool based on rac-status.sh (https://goo.gl/LwQC1N)
END

printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS"            ;
cat << END
  $0 [-e] [-s] [-h]
END

printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION"         ;
cat << END
  `basename $0` needs the rac-status.sh script to be downloaded and working (https://goo.gl/LwQC1N)

  `basename $0` executes rac-status.sh -a and compares its output with a previously saved good status of your cluster
  If no reference file exists, `basename $0` will create it for you at the location pointed by the REFERENCE variable.

  If `basename $0` finds differences betwen the current status of the cluster and the good status from the reference file,
  you will be prompted about it and `basename $0` will exit 1. If no difference found, you will be prompted about it and `basename $0` will exit 0.

  `basename $0` can also send emails about this depending on the -e and -s option as well as the EMAIL_ON_FAILURE and EMAIL_ON_SUCCESS variables.
END

printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS"             ;
cat << END
  -e      Sends an email to the email(s) defined in the EMAILTO parameter if an issue has been detected in the cluster
  -s      Sends an email to the email(s) defined in the EMAILTO parameter on success (even if no error has been detected)

  If you want to modify the script default to always send emails and not have to specify -e or -s,
  just change the values of these parameters on top of the script like this:
    EMAIL_ON_FAILURE="Yes"
    EMAIL_ON_SUCCESS="Yes"

  -h      Show this help

END

exit 567
}

#
# Command line options
#
while getopts "esh" OPT; do
        case ${OPT} in
        e)         EMAIL_ON_FAILURE="Yes"                               ;;
        s)         EMAIL_ON_SUCCESS="Yes"                               ;;
        h)         usage                                                ;;
        \?)        echo "Invalid option: -$OPTARG" >&2; usage           ;;
        esac
done

#
# Variables verification
#
if [ ! -x ${RACSTATUS} ]
then
  cat << !
  Cannot find $RACSTATUS or $RACSTATUS is not executable; the rac-status.sh script is needed and needs to be executable to run this script, to fix this issue:
  - Please have a look at https://goo.gl/LwQC1N and downloada rac-status.sh
  - Adjust the RACSTATUS variable on top of this script to point to the location you saved rac-status.sh
  - Make $RACSTATUS executable:
  $ chmod u+x $RACSTATUS
!
  exit 456
fi
if [ ! -f ${REFERENCE} ]                                                                # No reference file, we cannot continue
then
        if [ "${AUTO_CREATE_REF}" = "Yes" ]
        then    # Reference file does not exist, we create it
                printf "\t%s" "No reference file found at $REFERENCE, creating it . . ."
                $RACSTATUS -a > $REFERENCE
                if [ $? -eq 0 ]
                then
                        printf "\t\033[1;32m%-8s\033[m\n" "OK"          ;
                else
                        printf "\t\033[1;31m%-8s\n" "Error $ERR"          ;
                        printf "%s\033[m\n" "Could not create $REFERENCE using $RACSTATUS -a > $REFERENCE; cannot continue."
                        exit 444
                fi
        else
        cat << !
                Cannot find the ${REFERENCE} file. A status reference file is needed to be able to compare the current status of the cluster with
                Please initialize this reference file as below:
                $ $RACSTATUS -a > $REFERENCE
!
                exit 123
        fi
fi

#
# Check the current status of the cluster
#
${RACSTATUS} -a > ${TMP}
if [ $? -ne 0 ]
then
        cat << !
        There was an error executing ${RACSTATUS}, please try executing it manually first and reach out to the author if it doesn't work.
!
fi

#
# Check for any difference between the reference file $REFERENCE and the current status from $TMP
#
diff ${REFERENCE} ${TMP} > ${TMP2} 2>&1
if [ $? -eq 0 ]
then                            # All good
        cat << !
        No change has been identified across the cluster, all good !
!
        if [ "${EMAIL_ON_SUCCESS}" = "Yes" ]
        then
                printf "\t%s" "Sending en email to " ${EMAILTO} " . . ."
                echo "No change has been identified across the cluster, all good !" | mailx -s "${SUCCESS_SUBJECT}" ${EMAILTO}
                if [ $? -eq 0 ]
                then
                        printf "\t\033[1;32m%-8s\033[m\n" "OK"          ;
                else
                        printf "\t\033[1;31m%-8s\n" "Error $ERR"          ;
                        printf "%s\033[m\n" "There was an issue sending an email using mailx -s ${SUCCESS_SUBJECT} ${EMAILTO}"
                        exit 555
                fi
        fi
        RET=0
else                            # Something is wrong, we send an email about it
        cat << !
        The below changes have been identified across the cluster:
!
        cat ${TMP2}
        if [ "${EMAIL_ON_FAILURE}" = "Yes" ]
        then
                printf "\t%s" "Sending en email to " ${EMAILTO} " . . ."
                # Remove colors from the file before sending the email
                cat ${TMP2} | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | mailx -s "${FAILURE_SUBJECT}" ${EMAILTO}
                if [ $? -eq 0 ]
                then
                        printf "\t\033[1;32m%-8s\033[m\n" "OK"          ;
                else
                        printf "\t\033[1;31m%-8s\n" "Error $ERR"          ;
                        printf "%s\033[m\n" "There was an issue sending an email using mailx -s ${FAILURE_SUBJECT} ${EMAILTO}"
                        exit 666
                fi
        fi
        RET=1
fi

#
# Delete the tempfiles
#
for F in ${TMP} ${TMP2}
do
  if [ -f ${F} ]
  then
    rm -f ${F}
  fi
done
exit ${RET}
}
#
#########################################################################################################
# Exadata Rac on All DB
#########################################################################################################
#
function func_exa_rac_on_all_db()
{
#
# Fred Denis -- Nov 2017 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# Execute a SQL command on all databases wherever they have an instance opened
# -- The node where this script is executed should have ssh key deployed to all the other database nodes
# -- oraenv should be working on every server
# -- Look for "Query customization" to customize your query
#
# More information here : https://unknowndba.blogspot.com.au/2018/04/rac-onalldbsh-easily-execute-query-on.html
#
# Version of the script is 20180318
#

#
# Set the default output to 90% of the screen size
#
COLS=$(printf %.f $(bc <<< "`tput cols`*.9"))

#
# If for any reason we couldn't get the number of cols, we set it to 120
#
if ! [[ $COLS =~ ^[0-9]+$ ]]
then
        COLS=120         # Size of the output
fi

COLS=120        # Not sure the above dynamic output is useful here, set COLS to 120 for now
                # Comment this line if you want the output to be dynamic

#
# Set the ASM env to be able to use crsctl commands
#
ORACLE_SID=`ps -ef | grep pmon | grep asm | awk '{print $NF}' | sed s'/asm_pmon_//' | egrep "^[+]"`

export ORAENV_ASK=NO
. oraenv > /dev/null 2>&1


for X in `crsctl stat res -v -w "TYPE = ora.database.type" | awk ' BEGIN {FS="="}
             {
                if (($1 ~ /^NAME/) && ($0 ~ //))
                {
                        sub("^ora.", "", $2)                                                            ;
                        sub(".db$" , "", $2)                                                            ;
                        DB=$2                                                                           ;
                        while(getline)
                        {
                                if (($1 ~ /STATE/) && ($2 ~/ONLINE/))
                                {
                                        gsub (".*on ",  "", $2)                                         ;
                                        print DB"|"$2                                                   ;
                                        next                                                            ;
                                }
                        }
                }
            }'`
do
              DB=`echo $X | awk -F "|" '{print $1}'`
          SERVER=`echo $X | awk -F "|" '{print $2}'`
        INSTANCE=${DB}`echo "${SERVER: -1}"`

        printf "\n\n\t\t\033[1;37m%30s\033[m\n" "Query Result on $INSTANCE@$SERVER"

        (ssh -q -o batchmode=yes oracle@${SERVER}  << END_SSH 2> /dev/null
                . oraenv <<< ${DB} > /dev/null 2>&1
                export ORACLE_SID=${INSTANCE}
                sqlplus -S / as sysdba << END_SQL
                set lines       $COLS                                                                   ;

                --------------------------------
                -- Query customization        --
                --------------------------------

                set echo        off                                                                     ;
                set term        off                                                                     ;
                set wrap        on                                                                      ;
                col name        for a50                                                                 ;
                col value       for a60                                                                 ;
                col host_name   for a26                                                                 ;
                col instance_name for a18                                                               ;
                set pages       5000                                                                    ;
                alter session set nls_date_format='DD/MM/YYYY HH24:MI:SS'                               ;
                select instance_name, host_name, version, sysdate from v\\\$instance                    ;
                -- select name, value from v\\\$parameter where name like '%exafusion%'                 ;
                select name, value from v\\\$parameter order by name                                    ;

                --------------------------------
                -- End of query customization --
                --------------------------------
END_SQL
END_SSH
) | grep -v logout | grep -v altered | grep -v profile | tail -n +3 | awk -v COLS="$COLS"    ' BEGIN\
                                  {     # some colors
                                     COLOR_BEGIN =       "\033[1;"                                      ;
                                       COLOR_END =       "\033[m"                                       ;
                                             RED =       "31m"                                          ;
                                           GREEN =       "32m"                                          ;
                                          YELLOW =       "33m"                                          ;
                                            BLUE =       "34m"                                          ;
                                            TEAL =       "36m"                                          ;
                                           WHITE =       "37m"                                          ;

                                        print_a_line()                                                  ;
                                  }
                                  function print_a_line()
                                  {
                                        printf("%s", COLOR_BEGIN BLUE)                                  ;
                                        for (k=1; k<3    ; k++) {printf("%s", " ")}                     ;
                                        for (k=3; k<=COLS; k++) {printf("%s", "-")}                     ;
                                        printf("%s\n", COLOR_END)                                       ;
                                  }
                                  {
                                        printf(COLOR_BEGIN BLUE " %1s" COLOR_END "%-118s\n", "|\t", $0) ;
                                  }
                                  END\
                                  {     print_a_line()                                                  ;
                                  }
                                '
done
}
#
#########################################################################################################
# Exadata Redefine Table ONLINE 
#########################################################################################################
#
function func_exa_redef_online_table() {
# Fred DENIS -- January 2013
# Redef online of a table (the objective to compress the table online)
#
# some default values
#
        TMP=/tmp/redef$$.sql
   cat /dev/null > $TMP
   PARALLEL=16                  # Parallelism for the redefinition
COMPRESSION=" compress for archive high "
      DEBUG="NO"
      DEBUG=""                  # comment to not debug

#
# Usage function
#
usage() {
        cat << !
        $0 -o OWNER -t TABLE -d DESTINATION_TABLESPACE
!
        exit 1
}

#
# Manage the options
#
while getopts "o:t:d:" OPTION
do
        case $OPTION in
        o )     OWNER=`echo ${OPTARG} | tr '[a-z]' '[A-Z]'`      ;;
        t )     TABLE=`echo ${OPTARG} | tr '[a-z]' '[A-Z]'`      ;;
        d )       TBS=`echo ${OPTARG} | tr '[a-z]' '[A-Z]'`      ;;
        :) echo " l'option -$OPTARG need a value "              ; usage         ;;
        \?) echo "Option -$OPTARG inconnue"                     ; usage         ;;
        esac
done

if [[ -z $DEBUG ]]
then
        echo "owner             : "     $OWNER
        echo "table             : "     $TABLE
        echo "dest tablespace   : "     $TBS
fi

if [[ -z $OWNER ]] || [[ -z $TABLE ]] || [[ -z $TBS ]]
then
        usage
fi

#
# Check if the table exists
#
RESULT=`sqlplus -S '/ as sysdba' << END_SQL
        set pages 999   ;
        set head off    ;
        set feed off    ;
        select count(*) from dba_tables where table_name = '${TABLE}' and owner = '${OWNER}'    ;
END_SQL`
if [[ -z $DEBUG ]]
then
        echo "result SQL table : " $RESULT
fi
if [ $RESULT -eq "0" ]
then
        cat << !
        The table ${OWNER}.${TABLE} does not exists.
!
        exit 3
fi

#
# Check if the destination tablespace exists
#
RESULT=`sqlplus -S '/ as sysdba' << END_SQL
        set pages 999   ;
        set head off    ;
        set feed off    ;
        select count(*) from dba_tablespaces where tablespace_name = '${TBS}' ;
END_SQL`
if [[ -z $DEBUG ]]
then
        echo "Result SQL tablespaces : " $RESULT
fi

if [ $RESULT -eq "0" ]
then
        cat << !
        The tablespace ${TBS} does not exists.
!
        exit 4
fi

INTERIM=I${TABLE}               # Name of the interim table

cat << END_SQL >> $TMP
set pages 999                   ;
set lines 200                   ;
set timing on                   ;
whenever sqlerror exit failure  ;
set serveroutput on             ;

alter session force parallel dml parallel $PARALLEL             ;
alter session force parallel query parallel $PARALLEL           ;

prompt -- Size of the table and index before redef
select tablespace_name, segment_name, round(bytes/1024/1024) "MB" from dba_segments where owner = '${OWNER}' and segment_name = '${TABLE}' ;
select tablespace_name, segment_name, round(bytes/1024/1024) "MB" from dba_segments where owner = '${OWNER}' and segment_name in (select index_name from dba_indexes where owner = '${OWNER}' and table_name = '${TABLE}') ;
select count(*) from ${OWNER}.${TABLE}  ;

prompt -- Can redef table ?
exec DBMS_REDEFINITION.CAN_REDEF_TABLE('${OWNER}', '${TABLE}', DBMS_REDEFINITION.CONS_USE_ROWID);

prompt -- Creation of the interim table ${INTERIM}
-- for inittranscreate table ${OWNER}.${INTERIM} ${COMPRESSION} tablespace ${TBS} as select * from ${OWNER}.${TABLE} where 1 = 2 ;
create table ${OWNER}.${INTERIM} tablespace ${TBS} as select * from ${OWNER}.${TABLE} where 1 = 2 ;
alter table ${OWNER}.${INTERIM} initrans 100 maxtrans 255 ;
select ini_trans, max_trans from dba_tables where table_name = '${TABLE}' and  owner = '${OWNER}' ;

prompt -- check constraint before redef
select table_name, constraint_type, constraint_name, status from dba_constraints where owner = '${OWNER}' and table_name = '${TABLE}' ;
select table_name, constraint_type, constraint_name, status from dba_constraints where owner = '${OWNER}' and table_name = '${INTERIM}' ;

prompt -- Drop constraint of the interim table (to avoid ORA-01442 error)
begin
        for i in (select owner, table_name, constraint_name from dba_constraints where owner = '${OWNER}' and table_name = '${INTERIM}')
        loop
                execute immediate 'alter table ' || i.owner || '.' || i.table_name || ' drop constraint ' || i.constraint_name  ;
        end loop ;
end ;
/

prompt -- redef table
BEGIN
DBMS_REDEFINITION.START_REDEF_TABLE(
        uname           => '${OWNER}',
        orig_table      => '${TABLE}',
        int_table       => '${INTERIM}',
        options_flag    => DBMS_REDEFINITION.CONS_USE_ROWID);
END ;
/

prompt  -- copy table dependents
DECLARE
        error_count pls_integer := 0;
BEGIN
        DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS('${OWNER}', '${TABLE}', '${INTERIM}', dbms_redefinition.cons_orig_params, TRUE,TRUE,TRUE,FALSE,error_count);
        DBMS_OUTPUT.PUT_LINE('errors := ' || TO_CHAR(error_count));
end ;
/

prompt -- check for errors
select object_name, base_table_name, ddl_txt from DBA_REDEFINITION_ERRORS;

prompt -- sync interim table
exec DBMS_REDEFINITION.SYNC_INTERIM_TABLE('${OWNER}', '${TABLE}', '${INTERIM}') ;

prompt -- finish redef
exec DBMS_REDEFINITION.FINISH_REDEF_TABLE('${OWNER}', '${TABLE}', '${INTERIM}') ;

prompt -- move the index of the table to the new tablespace
begin
        for i in (select owner, index_name from dba_indexes where owner = '${OWNER}' and table_name = '${TABLE}')
        loop
                execute immediate 'alter index ' || i.owner || '.' || i.index_name || ' rebuild tablespace ${TBS} online ' ;
        end loop ;
end ;
/

prompt -- Size of the table and index before redef
select tablespace_name, segment_name, round(bytes/1024/1024) "MB" from dba_segments where owner = '${OWNER}' and segment_name = '${TABLE}' ;
select tablespace_name, segment_name, round(bytes/1024/1024) "MB" from dba_segments where owner = '${OWNER}' and segment_name in (select index_name from dba_indexes where owner = '${OWNER}' and table_name = '${TABLE}') ;
select count(*) from ${OWNER}.${TABLE}  ;

prompt -- check constraint after redef
select table_name, constraint_type, constraint_name, status from dba_constraints where owner = '${OWNER}' and table_name = '${TABLE}' ;
exit ;

prompt -- drop interim table
drop table ${OWNER}.${INTERIM} ;
END_SQL

#sqlplus / as sysdba << !
#       @${TMP}
#!

#cat $TMP
echo $TMP
#rm $TMP
}
#
#########################################################################################################
# Show Contents of The Patches (BP/PSU)
#########################################################################################################
#
function func_autoup_001() {
if [ ${DBVERSION} -ge "12" ]; then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set "_exclude_seed_cdb_view"=FALSE;
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
COLUMN action_time FORMAT A12
COLUMN action FORMAT A10
COLUMN patch_type FORMAT A10
COLUMN description FORMAT A50
COLUMN status FORMAT A10
COLUMN version FORMAT A10
select CON_ID
  , TO_CHAR(action_time, 'DD/MM/YYYY') AS action_time
  , PATCH_ID
  , PATCH_TYPE
  , ACTION
  , DESCRIPTION
  , SOURCE_VERSION
  , TARGET_VERSION
from CDB_REGISTRY_SQLPATCH
order by CON_ID, action_time, patch_id;
quit;
EOF
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- YOUR DATABASE DOES NOT SUPPORT THAT SCRIPT --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
fi
}
#
#########################################################################################################
# 
#########################################################################################################
#
function func_autoup_002() {
if [ ${DBVERSION} -ge "12" ]; then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'

quit;
EOF
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- YOUR DATABASE DOES NOT SUPPORT THAT SCRIPT --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
fi
}
#
#########################################################################################################
# 
#########################################################################################################
#
function func_autoup_003()
{
if [ ${DBVERSION} -ge "12" ]
then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'

quit;
EOF
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- YOUR DATABASE DOES NOT SUPPORT THAT SCRIPT --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
fi
}
#
#########################################################################################################
# 
#########################################################################################################
#
function func_autoup_004()
{
if [ ${DBVERSION} -ge "12" ]
then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'

quit;
EOF
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- YOUR DATABASE DOES NOT SUPPORT THAT SCRIPT --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
fi
}
#
#########################################################################################################
# 
#########################################################################################################
#
function func_autoup_005()
{
if [ ${DBVERSION} -ge "12" ]
then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'

quit;
EOF
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
  echo ${ECHO} " -- YOUR DATABASE DOES NOT SUPPORT THAT SCRIPT --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
fi
}
#
#########################################################################################################
# Verify RAC/GRID INFRASTRUCTURE on The Environment
#########################################################################################################
#
# 11g
function func_rac_11_001() {
  func_rac_001
}
# 12c
function func_rac_12_001() {
  func_rac_001
}
# 18c
function func_rac_18_001() {
  func_rac_001
}
# 19c
function func_rac_19_001() {
  func_rac_001
}
# 20c
function func_rac_20_001() {
  func_rac_001
}
# ####
function func_rac_001() {
#!/bin/bash
# Fred Denis -- Jan 2016 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# Quickly shows a status of all running instances accross a 11g, 12c, 18c+ cluster
# The script just needs to have a working oraenv, if rac-status.sh hangs, you may suffer from http://bit.ly/2IODPJo (alternatively ,see the -e option)
# Ultimately, feel free to contact me
#
# Please have a look at http://bit.ly/2MFkzDw  for some details and screenshots
# The latest version of the script can be downloaded here : http://bit.ly/2XEXa6j
#
# The current script version is 20190906
#
# History :
#
# 20190906 - Fred Denis - A new -V option to show the version of the script
# 20190830 - Fred Denis - Show a red "x" also when instances and listeners are disabled
# 20190829 - Fred Denis - Show a red "x" if a service is disabled as well as a legend below the services table
# 20190828 - Fred Denis - Option -L to always show full hostnames; also fixed a bug with the name of the cluster shown
# 20190725 - Fred Denis - When STATUS and TARGET are different, shows with a WITH_BACK2 background color and a legend
#                         Fixed a bug where the recently restarted legend was shown when it should not
# 20190701 - Fred Denis - Minor fixes, alignements issues with the sorting
# 20190626 - Fred Denis - Better sorting, better recently restarted legend
# 20190621 - Fred Denis - Fixed a bug on the sorting when version was different as other (12.1 instead of 12.1.0.0)
#                       - Option -w now also supports d for day, w for week, m for month and y for year to specify the delay
# 20190620 - Fred Denis - Fixed an issue with the sorting when there was recently restarted instances
# 20190617 - Fred Denis - New -c option to sort the databases output
# 20190606 - Fred Denis - Show a yellow background when a resource has been restarted less than DIFF_HOURS hours
#                         A new -w option can be use to specify a number of hours through the command line
#                         Owners and groups which contained numbers were ignored, this is fixed
# 20190524 - Fred Denis - Fixed a bug when hostnames had more than 1 "db" pattern in their names
# 20190508 - Fred Denis - Show the whole service name and not only part of it when it contains "."
# 20190426 - Fred Denis - which gawk for AIX
# 20190104 - Fred Denis - A new -r option to Reverse the colors (useful for clear terminal backgrounds)
#                         A new -u option to show an Uncolored output
# 20190325 - Fred Denis - Solaris sed does not support sed -i, use gsed instead
#                         New -e option to NOT use oraenv to set the ASM environment but to use the current manually set environment
#                               (USE_ORAENV="NO" on top of the script to have this permanently)
# 20190318 - Fred Denis - Dont show the owner:group legend about '' menaing same as above if only 1 Home
# 20190307 - Fred Denis - Added owner:group behind the ORACLE_HOME (useful when owner are different) -- thanks Andrey for the feature idea !
#                         Also removed the P for Primary and S for Stanby legend; it looks self explanatory enough already
# 20190204 - Fred Denis - Oracle Restart support
# 20190130 - Fred Denis - 11g support (BREAK_HERE); 11g and 12c crsctl outputs are quite different
#                       - A new -o option to specify a file to save the crsctl commands output
#                       - A new -f option to specify an input file (a file generated by the -o option for example)
# 20190122 - Fred Denis - Multi OS support for AWK (especially for Solaris)
# 20190115 - Fred Denis - Fixed minor alignement issues
#                         Add grep (-g) and ungrep (-v) feature
# 20181110 - Fred Denis - Show short names in the tables instead of the whole hostnames if possible for better visibility
#                       - Col 1 and col 2 now align dynamically depending on the largest element to keep all the tables well aligned
#                       - Dynamic calculation of an offser for the status column size depending on the number of nodes
#                       - This can also be fixed by setting a non 0 value to COL_NODE_OFFSET on top of the script
#                       - Better alignements, centered databases and service were not nice, they are now left aligned which is more clear
# 20181010 - Fred Denis - Added the services
#                         Added default value and options to show and hide some resources (./rac-status.sh -h for more information)
# 20181009 - Fred Denis - Show the usual blue "-" when a target is offline on purpose instead of a red "Offline" which was confusing
# 20180921 - Fred Denis - Added the listeners
# 20180227 - Fred Denis - Make the the size of the DB column dynamic to handle very long database names (Thanks Michael)
#                       - Added a (P) for Primary databases and a (S) for Stanby for color blind people who
#                         may not see the difference between white and red (Thanks Michael)
# 20180225 - Fred Denis - Make the multi status like "Mounted (Closed),Readonly,Open Initiated" clear in the table by showing only the first one
# 20180205 - Fred Denis - There was a version alignement issue with more than 10 different ORACLE_HOMEs
#                       - Better colors for the label "White for PRIMARY, Red for STANBY"
# 20171218 - Fred Denis - Modify the regexp to better accomodate how the version can be in the path (cannot get it from crsctl)
# 20170620 - Fred Denis - Parameters for the size of the columns and some formatting
# 20170619 - Fred Denis - Add a column type (RAC / RacOneNode / Single Instance) and color it depending on the role of the database
#                         (WHITE for a PRIMARY database and RED for a STANDBY database)
# 20170616 - Fred Denis - Shows an ORACLE_HOME reference in the Version column and an ORACLE_HOME list below the table
# 20170606 - Fred Denis - A new 12cR2 GI feature now shows the ORACLE_HOME in the STATE_DETAILS column from "crsctl -v"
#                       - Example :     STATE_DETAILS=Open,HOME=/u01/app/oracle/product/11.2.0.3/dbdev_1 instead of STATE_DETAILS=Open in 12cR1
# 20170518 - Fred Denis - Add  a readable check on the ${DBMACHINE} file - it happens that it exists but is only root readable
# 20170501 - Fred Denis - First release
#
#
# Variables
#
        TMP=/tmp/status$$.tmp                                             # A tempfile
       TMP2=/tmp/status2$$.tmp                                            # Another tempfile
  DBMACHINE=/opt/oracle.SupportTools/onecommand/databasemachine.xml       # File where we should find the Exadata model as oracle user
       GREP="."                                                           # What we grep                  -- default is everything
     UNGREP="nothing_to_ungrep_unless_v_option_is_used$$"                 # What we don't grep (grep -v)  -- default is nothing
 USE_ORAENV="YES"                                                         # Use oraenv to set the ASM env (-e changes this to NO)
    REVERSE="NO"                                                          # Revert the colors to make them visible, useful for clear terminal backgrounds
WITH_COLORS="YES"                                                         # Output with colors, (-b changes this to NO); set to NO for permanent no colored output
      WHITE="37m"                                                         # White color code
 DIFF_HOURS="24"                                                          # Nb of hours the instance has been restarted
    SORT_BY=""                                                            # Column to sort by (see the help for possible values)
 LONG_NAMES="NO"                                                          # If we try to shorten the host names in the tables or not

# Choose the information what you want to see -- the last uncommented value wins
# ./rac-status.sh -h for more information
  SHOW_DB="YES"                 # Databases
 #SHOW_DB="NO"
SHOW_LSNR="YES"                 # Listeners
#SHOW_LSNR="NO"
 SHOW_SVC="YES"                 # Services
 SHOW_SVC="NO"

# Number of spaces between the status and the "|" of the column - this applies before and after the status
# A value of 2 would print 2 spaces before and after the status and like |  Open  |
# A value of 8 would print |        Open         |
# A value of 99 means that this parameter is dynamically calculated depending on the number of nodes
# A non 99 value is applied regardless of the number of nodes
COL_NODE_OFFSET=99

#
# Different OS support
#
OS=`uname`
case ${OS} 
in
  SunOS)
    AWK=`which gawk`  ;
    SED=`which gsed`
	;;
  Linux)
    AWK=`which awk`   ;
    SED=`which sed`
	;;
  HP-UX)
    AWK=`which awk`  ;
    SED=`which sed`
	;;
  AIX)
    AWK=`which gawk`  ;
    SED=`which sed`
	;;
  *)  printf "\n\t\033[1;31m%s\033[m\n\n" "Unsupported OS, cannot continue."  ;
exit 666
;;
esac
# Check if we have an AWK and a SED to continue
if [[ ! -f ${AWK} ]]
then
  printf "\n\t\033[1;31m%s" "No awk found on your system, cannot continue, if you run Solaris, please ensure that gawk is in your path"
  printf "\t%s\033[m\n\n" ${AWK}
  exit 678
fi
if [[ ! -f ${SED} ]]
then
  printf "\n\t\033[1;31m%s" "No sed found on your system, cannot continue, if you run Solaris, please ensure that gsed is in your path"
  printf "\t%s\033[m\n\n" ${SED}
  exit 679
fi
#
# Show the version of the script (-V)
#
show_version()
{
  VERSION=`${AWK} '{if ($0 ~ /^# 20[0-9][0-9][0-1][0-9]/) {print $2; exit}}' $0`
  printf "\n\t\033[1;36m%s\033[m\n" "The current version of "`basename $0`" is "$VERSION"."   ;
}
#
# An usage function
#
usage()
{
printf "\n\033[1;37m%-8s\033[m\n" "NAME"   ;
cat << END
  `basename $0` - A nice overview of databases, listeners and services running across a GI 12c
END

printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS"   ;
cat << END
  $0 [-a] [-n] [-d] [-l] [-s] [-o] [-f] [-r] [-u] [-h]
END

printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION"   ;
cat << END
  `basename $0` needs to be executed with a user allowed to query GI using crsctl; oraenv also has to be working
  `basename $0` will show what is running or not running accross all the nodes of a GI 12c :
    - The databases instances (and the ORACLE_HOME they are running against)
    - The type of database : Primary, Standby, RAC One node, Single
    - The listeners (SCAN Listener and regular listeners)
    - The services
    With no option, `basename $0` will show what is defined by the variables :
    - SHOW_DB       # To show the databases instances
    - SHOW_LSNR     # To show the listeners
    - SHOW_SVC      # To show the services
    These variables can be modified in the script itself or you can use command line option to revert their value (see below)
END

printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS"             ;
cat << END
  -a        Show everything regardless of the default behavior defined with SHOW_DB, SHOW_LSNR and SHOW_SVC
  -n        Show nothing  regardless of the default behavior defined with SHOW_DB, SHOW_LSNR and SHOW_SVC
  -a and -n are handy to erase the defaults values:
  $ ./rac-status.sh -n -d       # Show the databases output only
  $ ./rac-status.sh -a -s       # Show everything but the services (then the listeners and the databases)
  -d        Revert the behavior defined by SHOW_DB  ; if SHOW_DB   is set to YES to show the databases by default, then the -d option will hide the databases
  -l        Revert the behavior defined by SHOW_LSNR; if SHOW_LSNR is set to YES to show the listeners by default, then the -l option will hide the listeners
  -s        Revert the behavior defined by SHOW_SVC ; if SHOW_SVC  is set to YES to show the services  by default, then the -s option will hide the services
  -g        Act as a grep command to grep a pattern from the output (key sensitive)
  -v        Act as "grep -v" to ungrep from the output
  -g and -v examples :
  $ ./rac-status.sh -g Open                       # Show only the lines with "Open" on it
  $ ./rac-status.sh -g Open                       # Show only the lines with "Open" on it
  $ ./rac-status.sh -g "Open|Online"              # Show only the lines with "Open" or "Online" on it
  $ ./rac-status.sh -g "Open|Online" -v 12        # Show only the lines with "Open" or "Online" on it but no those containing 12
  -c        Column to sort by, please have a look at "Sort the database output" in http://bit.ly/2MFkzDw for more details on this -c option
  -o        Specify a file to save the crsctl commands output
  $ ./rac-status.sh -o /tmp/rac-status_output.log
  -f        A file to use as input file (one generated by the -o option for example)
  $ ./rac-status.sh -f /tmp/rac-status_output.log
  -e        Do not use oraenv to set the ASM environment but relies on the current environment
            Set USE_ORAENV="NO" on top of the script to have a permanent -e option
  -L        Do not try to shorten the host names, show the entire host names
  -r        Reverse the colors (useful for clear terminal backgrounds)
  -u        Shows the Uncolored output (no colors); set WITH_COLORS="NO" on top of the script to have it permanently
  -w        Shows a yellow background when a resource has been restarted less than the number of hours in parameter (default is $DIFF_HOURS)
  h for hours (default) d for day, w for week, m for month and y for year can be used to specify the delay:
  $ ./rac-status.sh -w 24         # 24 hours
  $ ./rac-status.sh -w 24h        # 24 hours
  $ ./rac-status.sh -w 2d         # 2 days
  $ ./rac-status.sh -w 3m         # 3 months
  -V        Shows the version of the script
  -h        Shows this help
  Note : the options are cumulative and can be combined with a "the last one wins" behavior :
  $ $0 -a -l              # Show everything but the listeners (-a will force show everything then -l will hide the listeners)
  $ $0 -n -d              # Show only the databases           (-n will force hide everything then -d with show the databases)
  Experiment and enjoy  !
END
exit 123
}
# Options
while getopts "andslLhg:v:o:f:eruw:c:V" OPT; do
        case ${OPT} in
        a)         SHOW_DB="YES"        ; SHOW_LSNR="YES"       ; SHOW_SVC="YES"                ;;
        n)         SHOW_DB="NO"         ; SHOW_LSNR="NO"        ; SHOW_SVC="NO"                 ;;
        d)         if [ "$SHOW_DB"   = "YES" ]; then   SHOW_DB="NO"; else   SHOW_DB="YES"; fi   ;;
        s)         if [ "$SHOW_SVC"  = "YES" ]; then  SHOW_SVC="NO"; else  SHOW_SVC="YES"; fi   ;;
        l)         if [ "$SHOW_LSNR" = "YES" ]; then SHOW_LSNR="NO"; else SHOW_LSNR="YES"; fi   ;;
        L)     LONG_NAMES="YES"                                                                 ;;
        g)           GREP=${OPTARG}                                                             ;;
        c)        SORT_BY=${OPTARG}                                                             ;;
        v)         UNGREP=${OPTARG}                                                             ;;
        f)           FILE=${OPTARG}                                                             ;;
        o)            OUT=${OPTARG}                                                             ;;
        e)     USE_ORAENV="NO"                                                                  ;;
        r)        REVERSE="YES"                                                                 ;;
        w)     DIFF_HOURS=${OPTARG}                                                             ;;
        u)    WITH_COLORS="NO"                                                                  ;;
        V)      show_version; exit 567                                                          ;;
        h)         usage                                                                        ;;
        \?)        echo "Invalid option: -$OPTARG" >&2; usage                                   ;;
        esac
done

#
# Manage the diff hours depending on the unit in the -w option
#
DIFF_HOURS_UNIT=${DIFF_HOURS: -1}

if [[ ! "${DIFF_HOURS_UNIT}" =~ [0-9] ]]
then
  HOURS=`echo ${DIFF_HOURS} | sed s'/.$//'`
  case ${DIFF_HOURS_UNIT} 
  in
    h)  NB_HOURS=1
	;;
    d)  NB_HOURS=24
	;;
    w)  NB_HOURS=$((24*7))
	;;
    m)  NB_HOURS=$((24*7*31))
	;;
    y)  NB_HOURS=$((24*7*31*365))
	;;
  esac
  DIFF_HOURS=$(($HOURS * $NB_HOURS))
else
  DIFF_HOURS_UNIT="h"
  HOURS=${DIFF_HOURS}
fi
#
# If we dont show the DB we dont need to sort
#
if [ "$SHOW_DB" = "NO" ]
then
  SORT_BY=""
fi
#
# Check that the input file is here if specified
#
if [[ "${REVERSE}" == "YES" ]]
then
  WHITE="30m";        # Black
fi
if [ -n "${FILE}" ]       # Input file specified, we wont run any crsctl command and rely on the file as input
then
  if  [ ! -f ${FILE} ]
  then
    printf "\n\t\033[1;31m%s\033[m\n\n" "Cannot find the ${FILE} input file; cannot continue"
    exit 222
  else    # we use $FILE as input
    printf "\n\t\033[1;34m%s\033[m\n\n" "Proceeding with the ${FILE} file as input file"
  fi
fi
###
if [ -z "$FILE" ]               # This is not needed when using an input file
then
  if [[ "${USE_ORAENV}" == "YES" ]]
  then
  #
  # Set the ASM env to be able to use crsctl commands
  #
    ORACLE_SID=`ps -ef | grep pmon | grep asm | ${AWK} '{print $NF}' | sed s'/asm_pmon_//' | egrep "^[+]"`
    export ORAENV_ASK=NO
    . oraenv > /dev/null 2>&1
    fi
    if ! type crsctl > /dev/null 2>&1
    then
      printf "\n\t\033[1;31m%s\033[m\n\n" "Cannot find crsctl, cannot continue, please check if oraenv works or set your environment manually and use the -e option."          ;
      exit 777
    fi
  #
  # List of the nodes of the cluster
  #
  # Try to find if there is "db" in the hostname, if yes we can delete the common "<clustername>" pattern from the hosts for visibility
  SHORT_NAMES="NO"
  if [[ `olsnodes | head -1 | sed s'/,.*$//g' | tr '[:upper:]' '[:lower:]'` == *"db"* && "${LONG_NAMES}" == "NO" ]]
  then
    NODES=`olsnodes | sed s'/^.*db/db/g' | ${AWK} '{if (NR<2){txt=$0} else{txt=txt","$0}} END {print txt}'`
    CLUSTER_NAME=`olsnodes | head -1 | sed s'/db.*$//g'`
    SHORT_NAMES="YES"
  else
    NODES=`olsnodes | ${AWK} '{if (NR<2){txt=$0} else{txt=txt","$0}} END {print txt}'`
    CLUSTER_NAME=`olsnodes -c`
  fi
  NAME_OF_THE_CLUSTER=`olsnodes -c`
  # if oracle restart, olsnodes is here but returns nothing, we then set the NODES with the current hostname
  if [ -z "${NODES}" ]
  then
    NODES=`hostname -s`
  fi
  if [[ "$WITH_COLORS" == "YES" ]]
  then
    COLOR_FOR_CLUSTER="\e[1;"${WHITE}
  else
    COLOR_FOR_CLUSTER=""
  fi
  printf "\n\t\t%s"${COLOR_FOR_CLUSTER}"%s\e[m" "Cluster " "$NAME_OF_THE_CLUSTER"
  #
  # Show the Exadata model if possible (if this cluster is an Exadata)
  #
  if [ -f ${DBMACHINE} ] && [ -r ${DBMACHINE} ]
  then
    MODEL=`grep -i MACHINETYPES ${DBMACHINE} | sed -e s':</*MACHINETYPES>::g' -e s'/^ *//' -e s'/ *$//'`
    printf "%s"${COLOR_FOR_CLUSTER}"%s\e[m\n" " is a " "$MODEL"
  else
    printf "\n"
  fi
  printf "\n"
  # Get the info we want
  cat /dev/null                                                           >  $TMP
  if [ "$SHOW_DB" = "YES" ]
  then
    crsctl stat res -p -w "TYPE = ora.database.type"        >> $TMP
    crsctl stat res -v -w "TYPE = ora.database.type"        >> $TMP
  fi
  if [ "$SHOW_LSNR" = "YES" ]
  then
    crsctl stat res -v -w "TYPE = ora.listener.type"        >> $TMP
    crsctl stat res -p -w "TYPE = ora.listener.type"        >> $TMP
    crsctl stat res -v -w "TYPE = ora.scan_listener.type"   >> $TMP
    crsctl stat res -p -w "TYPE = ora.scan_listener.type"   >> $TMP
  fi
  if [ "$SHOW_SVC" = "YES" ]
  then
    crsctl stat res -v -w "TYPE = ora.service.type"          >> $TMP
    crsctl stat res -p -w "TYPE = ora.service.type"          >> $TMP         # not used, in case we need it one day
  fi
  # Easiest way to manage the different versions of crsctl outputs
  awk '{if ($1 ~ /^NAME=/) {print "BREAK_HERE"; print  $0} else {print $0}}' $TMP > $TMP2
  cp ${TMP2} ${TMP}
  if [ "$SHORT_NAMES" = "YES" ]
  then
    ${SED} -i "s/$CLUSTER_NAME//g" $TMP
  fi
  NB_NODES=`olsnodes | wc -l`
else            # If we use an input file
  cp ${FILE} ${TMP}
  NODES=`grep LAST_SERVER $TMP | awk -F"=" '{print $2}' | sort | uniq | grep -v "^$" | awk '{if (NR<2){txt=$0} else{txt=txt","$0}} END {print txt}'`
  NB_NODES=`grep LAST_SERVER $TMP | awk -F"=" '{print $2}' | sort | uniq | wc -l`
fi      # End if [ -z "$FILE" ]
#
# Define the offset to apply to the status column depending on the number of nodes to make the tables visible for big implementations
#
if [ "$COL_NODE_OFFSET" = "99" ]
then
  COL_NODE_OFFSET=3       ;
  if [ "$NB_NODES" -eq "2" ]; then COL_NODE_OFFSET=6; fi;
  if [ "$NB_NODES" -eq "4" ]; then COL_NODE_OFFSET=5; fi;
  if [ "$NB_NODES" -gt "4" ]; then COL_NODE_OFFSET=3; fi;
fi
  ${AWK} -v NODES="$NODES" -v col_node_offset="$COL_NODE_OFFSET"  \
                           -v         REVERSE="$REVERSE"          \
                           -v      DIFF_HOURS="$DIFF_HOURS"       \
                           -v           HOURS="$HOURS"            \
                           -v DIFF_HOURS_UNIT="$DIFF_HOURS_UNIT"  \
  'BEGIN\
    {         FS="="                          ;
               n=split(NODES, nodes, ",")     ;       # Make a table with the nodes of the cluster
    # some colors
     COLOR_BEGIN="\033[1;"              ;
    #COLOR_BEGIN="\033["                ;
       COLOR_END="\033[m"               ;
             RED="31m"                  ;
           GREEN="32m"                  ;
          YELLOW="33m"                  ;
            BLUE="34m"                  ;
            TEAL="36m"                  ;
           WHITE="37m"                  ;
       WITH_BACK="43m"                  ;       # Yellow background
      WITH_BACK2="44m"                  ;       # Blue background
      WITH_BACK2="41m"                  ;       # Red background
    if (REVERSE=="YES")
      {
           WHITE="30m"                  ;       # Black
            TEAL="34m"                  ;       # Blue
     COLOR_BEGIN="\033[2;"              ;       # Bold
      }
         UNKNOWN="-"                          ;       # Something to print when the status is unknown
        DISABLED="x"                          ;       # Something disabled
    # Default columns size
        COL_NODE=0                            ;
 COL_NODE_OFFSET=col_node_offset * 2          ;       # Defined on top the script, have a look for explanations on this
          COL_DB=12                           ;
         COL_VER=15                           ;
        COL_TYPE=14                           ;
          COL_OH=24                           ;       # to print the ORACLE_HOMEs
       COL_OWNER=6                            ;       # to print owner:group
       COL_GROUP=3                            ;       # to print owner:group
     COL_DEFAULT=BLUE                         ;       # for the "-"
RECENT_RESTARTED=0                            ;       # To show a legend if we found a recent restarted
    STATUS_ISSUE=0                            ;       # To show a legend if we found an issue with the status
SERVICE_DISABLED=0                            ;       # To show a legend of a service is disabled
         COL_SEP="|"                          ;       # Column separator
    }

    #
    # A function to center the outputs with colors
    #
    function center(str, n, color, sep)
    {  
	  right = int((n - length(str)) / 2)                                                              ;
      left  = n - length(str) - right                                                                 ;
      return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END sep, "", str, "" )         ;
    }
    #
    # Colorize a string
    #
    function in_color(str, color)
    {
      return sprintf(COLOR_BEGIN color "%s" COLOR_END, str)                                           ;
    }
    #
    # Get a date in format MM/DD/YYYY HH24:MI:SS and return the rounded number hours difference between this date and the current date
    #
    function diff_hours(a_date)
    {
	  split(a_date, temp, /[\/ :]/)                                                                   ;
      return (systime()-mktime (temp[3]" "temp[1]" "temp[2]" "temp[4]" "temp[5]" "temp[6]))/(60*60)   ;
    }
    #
    # Get a string and return it with a nice case: first character in upper case ad the others in lower case (ABCD => Abcd)
    #
    function nice_case(str)
    {
      return sprintf("%s", toupper(substr(str,1,1)) tolower(substr(str,2,length(str))))               ;
    }
    #
    # Print a legend for the recent restarted instances, listeners and services
    #
    function print_legend_recent_restarted()
    {
      if (RECENT_RESTARTED == 1)
      {
        printf("%s", " ")                                                                       ;
        printf(COLOR_BEGIN WITH_BACK "%-3s" COLOR_END, " ")                                     ;
        if (DIFF_HOURS_UNIT == "h")     { UNIT="hour"           }
        if (DIFF_HOURS_UNIT == "d")     { UNIT="day"            }
        if (DIFF_HOURS_UNIT == "w")     { UNIT="week"           }
        if (DIFF_HOURS_UNIT == "m")     { UNIT="month"          }
        if (DIFF_HOURS_UNIT == "y")     { UNIT="year"           }
        if (HOURS > 1)                  { UNIT=UNIT"s"          }
        printf(COLOR_BEGIN WHITE " %-s\n " COLOR_END, ": Has been restarted less than "HOURS" "UNIT" ago")             ;
      }
    }
    #
    # Print a legend if we found an issue in the status (STATUS != TARGET)
    #
    function print_legend_status_issue()
    {
      if (STATUS_ISSUE == 1)
      {
        printf(COLOR_BEGIN WITH_BACK2 "%-3s" COLOR_END, " ")                                    ;
        printf(COLOR_BEGIN WHITE " %-s\n " COLOR_END, ": STATUS and TARGET are different")      ;
      }
    }
    #
    # Print a legend when something is disabled
    #
    function print_legend_disabled(a_variable, a_text)
    {
      if (a_variable == 1)
      {
	    printf("%s", " ")                                                                       ;
        printf("%s", center(DISABLED, 3, RED))                                                  ;
        printf("%-s\n", in_color(" : "a_text" is disabled", WHITE))                             ;
      }
    }
    #
    # A function that just print a "---" white line
    #
    function print_a_line(size)
    {
      if ( ! size)
      {
 	    size = COL_DB+COL_VER+(COL_NODE*n)+COL_TYPE+n+3                                         ;
      }
      printf("%s", COLOR_BEGIN WHITE)                                                                 ;
      for (k=1; k<=size; k++) {printf("%s", "-");}                                                    ;       # n = number of nodes
        printf("%s", COLOR_END"\n")                                                                     ;
      }
      {
      # Fill 2 tables with the OH and the version from "crsctl stat res -p -w "TYPE = ora.database.type""
      if ($1 == "NAME")
      {
  	    type = "DB"                                                                             ;
        sub("^ora.", "", $2)                                                                    ;
        sub(".db$",  "", $2)                                                                    ;
        if ($2 ~ ".lsnr")                                                                               # Listeners
        {       
		  sub(".lsnr$", "", $2)                                                           ;
          tab_lsnr[$2]    = $2                                                            ;
          type            =       "LISTENER"                                              ;
        }
        if ($2 ~ ".svc")                                                                                # Services
        {
		  sub(".svc$", "", $2)                                                            ;
          tab_svc[$2]=$2                                                                  ;
          service=$2                                                                  ;
          sub(/^[^.]*\./, "", service)                                                    ;       # Remove the DB name
          if (length(service) > COL_VER-1)                                                        # To adapt the column size
          {
		    COL_VER = length(service) +1                                              ;
          }
          type            =       "SERVICE"                                               ;
        }
        DB=$2                                                                                   ;
        split($2, temp, ".")                                                                    ;
        if (length(temp[1]) > COL_DB-1)                                                                  # To adapt the 1st column size
        {
		  COL_DB = length(temp[1]) +1                                                       ;
        }
        getline; getline                                                                        ;
        if ($1 == "ACL")                        # crsctl stat res -p output
        {
          if (type == "DB")
          {
            # Get the owner and the group
            match($2, /owner:([[:alnum:]]*):.*/, OWNER)                             ;
            match($2, /^.*pgrp:([[:alnum:]]*):.*/, GROUP)                           ;
            while (getline)
            {
              if ($1 == "ORACLE_HOME")
              {                    OH = $2                                    ;
                match($2, /1[0-9]\.[0-9]\.?[0-9]?\.?[0-9]?/)            ;       # Grab the version from the OH path)
                VERSION = substr($2,RSTART,RLENGTH)             ;
              }
              if ($1 == "DATABASE_TYPE")                                              # RAC / RACOneNode / Single Instance are expected here
              {
                dbtype[DB] = $2                                    ;
              }
              if ($1 == "ROLE")                                                       # Primary / Standby expected here
              {
                role[DB] = $2                                    ;
              }
              if ($1 == "ENABLED")                                                    # Instance is enabled (1) or disabled (0)
              {
			    for (i=1; i<=n; i++)                                            # n = number of nodes
                {
				  is_enabled[DB,nodes[i]]= $2                     ;
                }
                while(getline)
                {
				if ($1 ~ /ENABLED@SERVERNAME/ )
                {       
				  sub("ENABLED@SERVERNAME[(]", "", $1)    ;
                  sub(")", "", $1)                        ;
                  is_enabled[DB,$1] = $2                  ;
                }
			   else 
			   {
                 break                                   ;
               }
             }
            }
            if ($0 ~ /^$/)
            {          
			  version[DB] = VERSION                               ;
              oh[DB] = OH                                    ;
              if (!(OH in oh_list))
              {
                oh_ref++                                        ;
                oh_list[OH] = oh_ref                                ;
                o_list[OH] = OWNER[1]                               ;
                g_list[OH] = GROUP[1]                               ;
                if (length(OH)       > COL_OH)    {    COL_OH = length(OH)        ; }
                if (length(OWNER[1]) > COL_OWNER) { COL_OWNER = length(OWNER[1])  ; }
                if (length(GROUP[1]) > COL_GROUP) { COL_GROUP = length(GROUP[1])  ; }
              }
                break                                                   ;
              }
            }
        }       # End if (type == "DB")
        if (type == "SERVICE")
        {
		  while(getline)
          {
            if ($1 == "ENABLED")                                                    # Service is enabled (1) or disabled (0)
            {
			  for (i=1; i<=n; i++)                                            # n = number of nodes
              {
 			    is_enabled[DB,nodes[i]]= $2                     ;
              }
            while(getline)
            {
			  if ($1 ~ /ENABLED@SERVERNAME/ )
              {       
			    sub("ENABLED@SERVERNAME[(]", "", $1)    ;
                sub(")", "", $1)                        ;
                is_enabled[DB,$1] = $2                  ;
              }
			  else 
			  {
                break                                   ;
              }
            }
        }
        if ($0 ~ /^$/)
        {
		  break                                                   ;
        }
      }
    }   # End if (type == "SERVICE")
        # if (DB in tab_lsnr == 1)
    if (type == "LISTENER")
    {
      while(getline)
      {       
	    if ($1 == "ENABLED")                                                    # Listener is enabled (1) or disabled (0)
        {       
		  for (i=1; i<=n; i++)                                            # n = number of nodes
          {       
		    is_enabled[DB,nodes[i]]= $2                     ;
          }
        while(getline)
        {
		  if ($1 ~ /ENABLED@SERVERNAME/ )
          {       
		    sub("ENABLED@SERVERNAME[(]", "", $1)    ;
            sub(")", "", $1)                        ;
            is_enabled[DB,$1] = $2                  ;
          }
		  else 
		  {
            break                                   ;
          }
        }
      }
      if ($1 == "ENDPOINTS")
      {
        port[DB] = $2                                           ;
        break                                                   ;
      }
    }
  }
}       # End if ($1 == "ACL")
if ($1 == "LAST_SERVER")        # crsctl stat res -v output
{           
  NB = 0      ;       # Number of instance as CARDINALITY_ID is sometimes irrelevant
  SERVER = $2     ;
  if (length(SERVER) > COL_NODE)
  {
    COL_NODE = length(SERVER) + COL_NODE_OFFSET                             ;
  }
  while (getline)
  {
  if ($1 == "LAST_SERVER")        
  {
    SERVER = $2                             ; }
    if ($1 == "STATE")              
	{
      gsub(" on .*$", "", $2)                 ;
      status[DB,SERVER] = $2                  ;
      if (length(status[DB,SERVER]) > COL_NODE) { COL_NODE = length(status[DB,SERVER]) + COL_NODE_OFFSET;}
    }
    if ($1 == "TARGET")             {       target[DB,SERVER]=$2                    ;}
    if ($1 == "LAST_RESTART")       {       started[DB,SERVER]=diff_hours($2" "$3)  ;}
    if ($1 == "STATE_DETAILS")      {       NB++                                    ;       # Number of instances we came through
    sub("STATE_DETAILS=", "", $0)           ;
    sub(",HOME=.*$", "", $0)                ;       # Manage the 12cR2 new feature, check 20170606 for more details
    sub("),.*$", ")", $0)                   ;       # To make clear multi status like "Mounted (Closed),Readonly,Open Initiated"
    if ($0 == "Instance Shutdown")  {  status_details[DB,SERVER] = "Shutdown"       ;       } else
    if ($0 ~  "Readonly")           {  status_details[DB,SERVER] = "Readonly"       ;       } else
    if ($0 ~  /Mount/)              {  status_details[DB,SERVER] = "Mounted"        ;       } else
    if ($0 ~  /running from old/)   {  status_details[DB,SERVER] = "Open from old OH";      } else
                                    {  status_details[DB,SERVER] = $0               ;       }
    if (length(status_details[DB,SERVER]) > COL_NODE)
    {       
	  COL_NODE = length(status_details[DB,SERVER]) + COL_NODE_OFFSET  ;
    }
  }
  if ($1 == "BREAK_HERE") { break;}
  }
}
}       # End of if ($1 ~ /^NAME/)
}
END {       #
            # Listeners
            #
if (length(tab_lsnr) > 0)                # We print only if we have something to show
{
  # A header for the listeners
  printf("%s", center("Listener" ,  COL_DB, WHITE, COL_SEP))                      ;
  printf("%s", center("Port"     , COL_VER+1, WHITE, COL_SEP))                    ;
  n=asort(nodes)                                                                  ;       # sort array nodes
  for (i = 1; i <= n; i++) 
  {
    printf("%s", center(nodes[i], COL_NODE, WHITE, COL_SEP))                ;
  }
  printf("%s", center("Type"    , COL_TYPE, WHITE, COL_SEP))                      ;
  printf("\n")                                                                    ;
  # a "---" line under the header
  print_a_line()                                                                  ;
  # print the listeners
  x=asorti(tab_lsnr, lsnr_sorted)                                                 ;
  for (j = 1; j <= x; j++)
  {
    printf(COLOR_BEGIN WHITE " %-"COL_DB-1"s" COLOR_END"|", lsnr_sorted[j], WHITE);     # Listener name
    # It may happen that listeners listen on many ports then it wont fit this column
    # We then print it outside of the table after the last column
    if (length(port[lsnr_sorted[j]]) > COL_VER)
    {
      printf(COLOR_BEGIN WHITE " %-"COL_VER"s" COLOR_END"|", "See -->", WHITE);       # "See -->"
      print_port_later = 1                                            ;
    } 
    else 
    {
      printf(COLOR_BEGIN WHITE " %-"COL_VER"s" COLOR_END"|", port[lsnr_sorted[j]], WHITE);      # Port
    }
    for (i = 1; i <= n; i++)
    {
      dbstatus =         status[lsnr_sorted[j],nodes[i]]              ;
      dbtarget =         target[lsnr_sorted[j],nodes[i]]              ;
      dbdetail = status_details[lsnr_sorted[j],nodes[i]]              ;
      if ((started[lsnr_sorted[j],nodes[i]] < DIFF_HOURS) && (started[lsnr_sorted[j],nodes[i]]))
      {    
        COL_ONLINE=WITH_BACK                                  ;
        COL_OTHER=WITH_BACK                                  ;
        RECENT_RESTARTED=1                                          ;
      }
      else
      {
        COL_ONLINE=GREEN                                      ;
        COL_OTHER=RED                                        ;
      }
      if (dbstatus != dbtarget)
      {         
        COL_ONLINE=WITH_BACK2                                 ;
        COL_OTHER=WITH_BACK2                                 ;
        STATUS_ISSUE=1                                          ;
      }
      if (is_enabled[lsnr_sorted[j],nodes[i]] == 0)                            # Listener disabled
      {
        LISTENER_DISABLED = 1                                   ;
        right = int((COL_NODE - length(dbstatus)) / 2)          ;
        left  = COL_NODE - length(dbstatus) - right             ;
        if (dbstatus == "")             {printf("%s", center(DISABLED,           COL_NODE, RED, COL_SEP ))      ;} else
        if (dbstatus == "ONLINE")       {printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbstatus), COL_ONLINE), in_color(DISABLED, RED), COL_SEP);}
        else                            {printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbstatus), COL_OTHER ), in_color(DISABLED, RED), COL_SEP);}
      }
	  else
	  {
        if (dbstatus == "")             {printf("%s", center(UNKNOWN,             COL_NODE, COL_DEFAULT, COL_SEP    ))      ;}      else
        if (dbstatus == "ONLINE")       {printf("%s", center(nice_case(dbstatus), COL_NODE, COL_ONLINE,  COL_SEP    ))      ;}
        else                            {printf("%s", center(nice_case(dbstatus), COL_NODE, COL_OTHER,   COL_SEP    ))      ;}
      }
    }
    if (toupper(lsnr_sorted[j]) ~ /SCAN/)
    {
	  LSNR_TYPE = "SCAN"                                              ;
    }
	else
	{
      LSNR_TYPE = "Listener"                                          ;
    }
    printf("%s", center(LSNR_TYPE, COL_TYPE, WHITE, COL_SEP))               ;
    if (print_port_later)
    {
	  print_port_later = 0                                            ;
      printf(COLOR_BEGIN WHITE " %-"COL_VER-1"s" COLOR_END, port[lsnr_sorted[j]], WHITE);      # Port
    }
    printf("\n")                                                            ;
  }
  # a "---" line under the header
  print_a_line()                                                                  ;
  print_legend_disabled(LISTENER_DISABLED, "Listener")                            ;
  printf("\n")                                                                    ;
}
#
# Services
#
if (length(tab_svc) > 0)                # We print only if we have something to show
{
  # A header for the services
  printf("%s", center("DB"      ,  COL_DB, WHITE, COL_SEP))                       ;
  printf("%s", center("Service" ,  COL_VER+1, WHITE, COL_SEP))                    ;
  n=asort(nodes)                                                                  ;       # sort array nodes
  for (i = 1; i <= n; i++) 
  {
    printf("%s", center(nodes[i], COL_NODE, WHITE, COL_SEP))                ;
  }
  printf("\n")
  # a "---" line under the header
  print_a_line(COL_DB+COL_NODE*n+COL_VER+n+2)                                     ;
  # Print the Services
  x=asorti(tab_svc, svc_sorted)                                                   ;
  for (j = 1; j <= x; j++)
  {      
    split(svc_sorted[j], to_print, ".")                                     ;       # The service we have is <db_name>.<service_name>
    service = svc_sorted[j]                                                 ;
    sub(/^[^.]*\./, "", service)                                            ;       # Remove the DB name only
    if (previous_db != to_print[1])                                                 # Do not duplicate the DB names on the output
    {
      printf(COLOR_BEGIN WHITE " %-"COL_DB-1"s" COLOR_END COL_SEP, to_print[1], WHITE);     # Database
      previous_db = to_print[1]                                       ;
    }
	else
	{
      printf("%s", center("",  COL_DB, WHITE, COL_SEP))               ;
    }
    printf(COLOR_BEGIN WHITE " %-"COL_VER"s" COLOR_END"|", service, WHITE);     # Service
    for (i = 1; i <= n; i++)
    {
      dbstatus =           status[svc_sorted[j],nodes[i]]             ;
      dbtarget =           target[svc_sorted[j],nodes[i]]             ;
      dbdetail =   status_details[svc_sorted[j],nodes[i]]             ;
      if ((started[svc_sorted[j],nodes[i]] < DIFF_HOURS) && (started[svc_sorted[j],nodes[i]]))
      {         
	    COL_ONLINE=WITH_BACK                                  ;
        COL_OTHER=WITH_BACK                                  ;
        RECENT_RESTARTED=1                                          ;
      } 
	  else
	  {
        COL_ONLINE=GREEN                                      ;
        COL_OTHER=RED                                        ;
      }
      if (dbstatus != dbtarget)
      {
        COL_ONLINE=WITH_BACK2                                 ;
        COL_OTHER=WITH_BACK2                                 ;
        STATUS_ISSUE=1                                          ;
      }
      if (is_enabled[svc_sorted[j],nodes[i]] == 0)                            # Service disabled
      {
        SERVICE_DISABLED = 1                                    ;
        right = int((COL_NODE - length(dbstatus)) / 2)          ;
        left  = COL_NODE - length(dbstatus) - right             ;
        if (dbstatus == "")             {printf("%s", center(DISABLED, COL_NODE, RED, COL_SEP ))      ;} else
        if (dbstatus == "ONLINE")       {printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbstatus), COL_ONLINE), in_color(DISABLED, RED), COL_SEP);}
      else                            {printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbstatus), COL_OTHER ), in_color(DISABLED, RED), COL_SEP);}
      } 
	  else 
	  {
        if (dbstatus == "")             {printf("%s", center(UNKNOWN,             COL_NODE, COL_DEFAULT, COL_SEP   ))      ;} else
        if (dbstatus == "ONLINE")       {printf("%s", center(nice_case(dbstatus), COL_NODE, COL_ONLINE,  COL_SEP   ))      ;}
        else                            {printf("%s", center(nice_case(dbstatus), COL_NODE, COL_OTHER,   COL_SEP   ))      ;}
      }
    }
    printf("\n")                                                             ;
  }
  # a "---" line under the header
  print_a_line(COL_DB+COL_NODE*n+COL_VER+n+2)                                      ;
  print_legend_disabled(SERVICE_DISABLED, "Service")                               ;
  printf("\n")                                                                     ;
}
#
# Databases
#
if (length(version) > 0)                # We print only if we have something to show
{
  # A header for the databases
  printf("%s", center("DB"        , COL_DB, WHITE, COL_SEP))                       ;
  printf("%s", center("Version"   , COL_VER+1, WHITE, COL_SEP))                    ;
  n=asort(nodes)                                                                   ;       # sort array nodes
  for (i = 1; i <= n; i++) {
    printf("%s", center(nodes[i], COL_NODE, WHITE, COL_SEP))                 ;
  }
  printf("%s", center("DB Type"    , COL_TYPE, WHITE, COL_SEP))                    ;
  printf("\n")                                                                     ;
  # a "---" line under the header
  print_a_line()                                                                   ;
  # Print the databases
  m=asorti(version, version_sorted)                                                ;
  for (j = 1; j <= m; j++)
  {
    printf(COLOR_BEGIN WHITE " %-"COL_DB-1"s" COLOR_END"|", version_sorted[j], WHITE)                ;     # Database
    printf(COLOR_BEGIN WHITE " %-"COL_VER-6"s" COLOR_END, version[version_sorted[j]], COL_VER, WHITE);     # Version
    printf(COLOR_BEGIN WHITE "%6s" COLOR_END"|"," ("oh_list[oh[version_sorted[j]]] ") ")             ;     # OH id
    for (i = 1; i <= n; i++)
    {
      dbstatus =           status[version_sorted[j],nodes[i]]         ;
      dbtarget =           target[version_sorted[j],nodes[i]]         ;
      dbdetail =   status_details[version_sorted[j],nodes[i]]         ;
      #
      # Print the status here, all that are not listed in that if ladder will appear in RED
      #
      if ((started[version_sorted[j],nodes[i]] < DIFF_HOURS) && (started[version_sorted[j],nodes[i]]))
      {           
	    COL_OPEN=WITH_BACK                                  ;
        COL_READONLY=WITH_BACK                                  ;
        COL_SHUT=WITH_BACK                                  ;
        COL_OTHER=WITH_BACK                                  ;
        RECENT_RESTARTED=1                                          ;
      }
	  else
	  {
        COL_OPEN=GREEN                                      ;
        COL_READONLY=WHITE                                      ;
        COL_SHUT=YELLOW                                     ;
        COL_OTHER=RED                                        ;
      }
      if (dbstatus != dbtarget)
      {
        COL_OPEN=WITH_BACK2                                 ;
        COL_READONLY=WITH_BACK2                                 ;
        COL_SHUT=WITH_BACK2                                 ;
        COL_OTHER=WITH_BACK2                                 ;
        STATUS_ISSUE=1                                          ;
      }
      if (is_enabled[version_sorted[j],nodes[i]] == 0)                            # Instance disabled
      {
        INSTANCE_DISABLED = 1                                   ;
        right = int((COL_NODE - length(dbdetail)) / 2)          ;
        left  = COL_NODE - length(dbdetail) - right             ;
        if (dbdetail == "")             {printf("%s",                           center(DISABLED, COL_NODE, RED, COL_SEP ))                                    ;} else
        if (dbdetail == "Open")         {printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbdetail), COL_ONLINE),   in_color(DISABLED, RED), COL_SEP);} else
        if (dbdetail ~  /Readonly/)     {printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbdetail), COL_READONLY), in_color(DISABLED, RED), COL_SEP);} else
        if (dbdetail ~  /Shut/)         {printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbdetail), COL_SHUT),     in_color(DISABLED, RED), COL_SEP);} else
        {
		  printf("%"left"s%s %s%"right-1"s", "", in_color(nice_case(dbdetail), COL_OTHER),    in_color(DISABLED, RED), COL_SEP);
		}
        }
		else
		{
          if (dbdetail == "")             {printf("%s", center(UNKNOWN,             COL_NODE, COL_DEFAULT, COL_SEP ))  ;}      else
          if (dbdetail == "Open")         {printf("%s", center(nice_case(dbdetail), COL_NODE, COL_OPEN,    COL_SEP ))  ;}      else
          if (dbdetail ~  /Readonly/)     {printf("%s", center(nice_case(dbdetail), COL_NODE, COL_READONLY,COL_SEP ))  ;}      else
          if (dbdetail ~  /Shut/)         {printf("%s", center(nice_case(dbdetail), COL_NODE, COL_SHUT,    COL_SEP ))  ;}      else
          {
		    printf("%s", center(nice_case(dbdetail), COL_NODE, COL_OTHER,   COL_SEP ))  ;}
          }
        }
        #
        # Color the DB Type column depending on the ROLE of the database (20170619)
        #
        if (role[version_sorted[j]] == "PRIMARY") { ROLE_COLOR=WHITE ; ROLE_SHORT=" (P)"; } else { ROLE_COLOR=RED ; ROLE_SHORT=" (S)" }
        printf("%s", center(dbtype[version_sorted[j]] ROLE_SHORT, COL_TYPE, ROLE_COLOR, COL_SEP))           ;
        printf("\n")                                                            ; }
        # a "---" line as a footer
        print_a_line()                                                                  ;
        # Print the OH list and a legend for the DB Type colors underneath the table
        printf ("%s", "ORACLE_HOME references listed in the Version column ")           ;
        if (oh_ref > 1)
        {
          printf ("(%s)", "\"" sprintf(COLOR_BEGIN TEAL "%s" COLOR_END, "\47\47") "\" means \"same as above\"")           ;
        }
        printf ("\n\n")                                                                 ;
        previous_group = ""                                                             ;
        previous_owner = ""                                                             ;
        if (COL_OWNER%2) { COL_OWNER++  }
        if (COL_GROUP%2) { COL_GROUP++  }
        g_same_as_above=sprintf(COLOR_BEGIN TEAL "%"(COL_GROUP/2)-1"s%s" COLOR_END, "", "\47\47")                               ;
        o_same_as_above=sprintf(COLOR_BEGIN TEAL "%"(COL_OWNER/2)-1"s%s%"(COL_OWNER/2)-1"s" COLOR_END, "", "\47\47", "")        ;
        # to ease the ORACLE_HOME sorting
        for (x in oh_list)
        {
          to_print[oh_list[x]] = x                                                ;
        }
        for (i=1; i<=oh_ref; i++)
        {
          # to ease the naming
          the_oh=to_print[i]                                                      ;
          owner=o_list[to_print[i]]                                              ;
          group=g_list[to_print[i]]                                              ;
          if (group == previous_group) {  group_to_print = g_same_as_above        ;       } else {        group_to_print = group  ;       }
          if (owner == previous_owner) {  owner_to_print = o_same_as_above        ;       } else {        owner_to_print = owner  ;       }
          printf("\t%2d : %-"COL_OH"s\t%-"COL_OWNER"s %s\n", i, the_oh, owner_to_print, group_to_print) ;
          previous_group = group                                                  ;
          previous_owner = owner                                                  ;
        }
  }
  printf ("\n")                                                                           ;
  print_legend_disabled(INSTANCE_DISABLED, "Instance")                                    ;
  print_legend_recent_restarted()                                                         ;
  print_legend_status_issue()                                                             ;
  } ' $TMP | ${AWK} -v GREP="$GREP" -v UNGREP="$UNGREP" ' BEGIN {FS="|"}                  # AWK used to grep and ungrep
  {
    if ((NF >= 3) && ($(NF-1) !~ /Type/) && ($2 !~ /Service/))
    {
	  if (($0 ~ GREP) && ($0 !~ UNGREP))
      {
        print $0                                                        ;
      }
      }
	  else
	  {
        print  $0                                                               ;
      }
    } ' | sed s'/^/  /'  > ${TMP2}  # We can reuse TMP2 here
    #
    # Special sort order (option -c)
    #
    if [[ -n ${SORT_BY} ]]                                                          # Special sort order
    then
      SORT_COL="${SORT_BY:0:1}"                                             # First character
      SORT_NODE="${SORT_BY:1:1}"                                             # Second character
      SORT_ORDER="${SORT_BY: -1}"                                             # Last character
      if [[ "${SORT_COL}" =~ [1-9] ]]
      then    
	    SORT_NODE=${SORT_COL}
        SORT_COL="c"
      fi
      # Sort order can only be "r" for reverse or "" for normal
      if [[ "${SORT_ORDER}" != "r" ]]
      then    
	    SORT_ORDER=""
      else
  	    SORT_ORDER="r"
      fi
      # Column or node number
      if [[ ! "${SORT_NODE}" =~ [1-9] ]]
      then
	    SORT_NODE=1
      fi
      # Assign the column  number depending of what we want to sort by
      SORT_NUM=1
      SORT_NUM2=2                                                                                                    # Second column to sort by
      SORT_NUM3=2                                                                                                    # Third column to sort by
      case ${SORT_COL} 
	  in
        c)     
		if [[ "${SORT_NODE}" -gt "2" ]]
        then
          SORT_NUM=$(((${SORT_NODE}*2)+2))
          SORT_NUM2=$((${SORT_NUM}-1))
        else
		  SORT_NUM=$(( ${SORT_NODE}*2))
        fi                                                                                      ;;              # Sort by column number
        d)     
		  SORT_NUM=2                                                                              ;;              # Sort by DB name
        v)
		  SORT_NUM=4                                                                              ;;              # Sort by version
        s)
		  SORT_NUM=$(((${SORT_NODE}*2)+6))                                                        ;               # Sort by status (Shutdown, Open)
          SORT_NUM2=$((${SORT_NUM}-1))                                                            ;;
        t)
		  TYPE_COL=`cat ${TMP2} | awk 'BEGIN {FS="|"}{if ($2 ~ "Version"){print (NF-1); exit}}'`  ;
          SORT_NUM=$(((${TYPE_COL}*2)+1))                                                         ;;              # Sort by Type
      esac
        SORT_K_1=" -k"${SORT_NUM}${SORT_ORDER}" "
        SORT_K_2=" -k"${SORT_NUM2}" "
        SORT_K_3=" -k"${SORT_NUM3}" "
        cat ${TMP2} | awk 'BEGIN {FS="|"} {print $0; if ($2 ~ "Version"){getline; print $0; exit;}}' > ${TMP}
        cat ${TMP2} | awk 'BEGIN {FS="|"}{if ($2 ~ "Version"){getline; while(getline){if ($0 ~ /---------------/){break}; print $0; }}}' | sort -i ${SORT_K_1} ${SORT_K_2} ${SORT_K_3} >> ${TMP}
        tac ${TMP2} | awk '{print $0; if ($0 ~ /---------------/){exit;}}' | tac >> ${TMP}
        cp ${TMP} ${TMP2}
      fi
      if [[ "$WITH_COLORS" == "YES" ]]
      then
        cat ${TMP2}
      else
        cat ${TMP2} | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"      # Remove the colors
      fi
      printf "\n"

if [ -f ${TMP} ]
then
  if [ -n "${OUT}" ]
  then
    cp $TMP $OUT
    printf "\n\t\033[1;34m%s\033[m\n\n" "Output file ${OUT} has been generated"
  fi
  rm -f ${TMP}
fi
if [ -f ${TMP2} ]
then
  rm -f ${TMP2}
fi
}
#
#########################################################################################################
# 
#########################################################################################################
#
# 11g
function func_rac_11_002()
{
  func_rac_002
}
# 12c
function func_rac_12_002()
{
  func_rac_002
}
# 18c
function func_rac_18_002()
{
  func_rac_002
}
# 19c
function func_rac_19_002()
{
  func_rac_002
}
# 20c
function func_rac_20_002()
{
  func_rac_002
}
#
function func_rac_002()
{
  echo ""
}
#
#########################################################################################################
# 
#########################################################################################################
#
# 11g
function func_rac_11_003()
{
  echo ""
}
# 12c
function func_rac_12_003()
{
  echo ""
}
# 18c
function func_rac_18_003()
{
  echo ""
}
# 19c
function func_rac_19_003()
{
  echo ""
}
# 20c
function func_rac_20_003()
{
  echo ""
}
#
#########################################################################################################
# 
#########################################################################################################
#
# 11g
function func_rac_11_004()
{
  echo ""
}
# 12c
function func_rac_12_004()
{
  echo ""
}
# 18c
function func_rac_18_004()
{
  echo ""
}
# 19c
function func_rac_19_004()
{
  echo ""
}
# 20c
function func_rac_20_004()
{
  echo ""
}
#
#########################################################################################################
# 
#########################################################################################################
#
# 11g
function func_rac_11_005()
{
  echo ""
}
# 12c
function func_rac_12_005()
{
  echo ""
}
# 18c
function func_rac_18_005()
{
  echo ""
}
# 19c
function func_rac_19_005()
{
  echo ""
}
# 20c
function func_rac_20_005()
{
  echo ""
}
#
###
#
#########################################################################################################
# SQL ID
#########################################################################################################
#
# 11g
function func_dba_11_sql_id()
{
  echo ""
}
# 12c
function func_dba_12_sql_id()
{
  echo ""
}
# 18c
function func_dba_18_sql_id()
{
  echo ""
}
# 19c
function func_dba_19_sql_id()
{
  echo ""
}
# 20c
function func_dba_20_sql_id()
{
  echo ""
}
#
function func_dba_sql_id()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
clear col bre comp
set pages 700 lines 700 long 9999999 numwidth 20 echo off verify off feedback off colsep '|'
col elapsed_time_in_sec format 9999.99
col first_load_time format a19
col last_load_time format a19
col SQL_FULLTEXT format a150
col child_number format 999 heading "CHLD|NUM"
col executions format 99999999 heading "EXECS"
col END_OF_FETCH_COUNT heading "FULL|EXECS"
col disk_reads heading "DISK|READS"
col buffer_gets heading "BUFFER|GETS"
col DIRECT_WRITES heading "DIRECT|WRITES"
col APPLICATION_WAIT_TIME heading "APP|WAIT|TIME"
col CONCURRENCY_WAIT_TIME heading "CONC|WAIT|TIME"
col CLUSTER_WAIT_TIME heading "CLUS|WAIT|TIME"
col USER_IO_WAIT_TIME heading "IO|WAIT|TIME"
col PLSQL_EXEC_TIME heading "PLSQL|EXEC|TIME"
col JAVA_EXEC_TIME heading "JAVA|EXEC|TIME"
col rows_processed format 999999999999 heading "ROWS|PROCESSED"
col optimizer_cost format 99999990 heading "COST"
col cpu_sec format 9999990.00 heading "CPU_TIME|SEC"
col elap_sec format 9999990.00 heading "ELAPSED|SEC"
col module format a50
col action format a50
col SHARABLE_MEM heading "SHARE|MEM"
col PERSISTENT_MEM heading "PERST|MEM"
col RUNTIME_MEM heading "RUN|MEM"
col LOADED_VERSIONS format 9999 heading "LOADED|VERS"
col KEPT_VERSIONS format 999 heading "KEPT|VERS"
col OPEN_VERSIONS format 999 heading "OPEN|VERS"
col loads format 9999
col INVALIDATIONS format 99999 heading "INVL"
col PARSE_CALLS format 99999999 heading "PARSE|CALLS"
col PARSING_USER_ID format 999999 heading "PARSING|USER|ID"
col PARSING_SCHEMA_ID format 999999 heading "PARSING|SCHEMA|ID"
prompt
prompt ##############################################################
prompt # CHECK MODULE AND ACTION                                    #
prompt ##############################################################
select child_number
  , MODULE
  , ACTION
  , PROGRAM_ID
  , PROGRAM_LINE#
from v\$sql
where sql_id='${SQL_ID}'
/
prompt
prompt ##############################################################
prompt # CHECK MEMORY                                               #
prompt ##############################################################
select child_number
  , SHARABLE_MEM
  , PERSISTENT_MEM
  , RUNTIME_MEM
  , LOADED_VERSIONS
  , KEPT_VERSIONS
  , OPEN_VERSIONS
  , LOADS
  , INVALIDATIONS
  , PARSE_CALLS
  , FIRST_LOAD_TIME
  , LAST_LOAD_TIME
  , PARSING_USER_ID
  , PARSING_SCHEMA_ID
from v\$sql
where sql_id='${SQL_ID}'
/
prompt
prompt ##############################################################
prompt # CHECK EXECS                                                #
prompt ##############################################################
select CHILD_NUMBER
  , EXECUTIONS
  , END_OF_FETCH_COUNT
  , DISK_READS
  , BUFFER_GETS
  , sorts
  , DIRECT_WRITES
  , FETCHES
  , ROWS_PROCESSED
  , OPTIMIZER_COST
from v\$sql
where sql_id='${SQL_ID}'
/
prompt
prompt ##############################################################
prompt # CHECK CPU TIME                                             #
prompt ##############################################################
select CHILD_NUMBER
  , round(cpu_time/1000000,2) CPU_SEC
  , round(elapsed_time/1000000,2) elap_sec
  , APPLICATION_WAIT_TIME
  , CONCURRENCY_WAIT_TIME
  , CLUSTER_WAIT_TIME
  , USER_IO_WAIT_TIME
  , PLSQL_EXEC_TIME
  , JAVA_EXEC_TIME
from v\$sql
where sql_id='${SQL_ID}'
/
prompt
prompt ##############################################################
prompt # CHECK SQL FULL TEXT OF STATEMENT                           #
prompt ##############################################################
select SQL_FULLTEXT
from v\$sql
where sql_id='${SQL_ID}'
/
prompt
prompt ##############################################################
prompt # CHECK OBJECT LOB OF THE STATEMENT                          #
prompt ##############################################################
select distinct object_name LOB_NAME
from sys.x\$kglob, dba_objects
where kglobt03 = '${SQL_ID}'
and KGLNAOBJ like 'table%'
and object_id = to_number(regexp_substr(KGLNAOBJ, '[^_]+', 1, 4),'xxxx')
/
prompt
prompt ##############################################################
prompt # CHECK CPU COSTS OF THE STATEMENT                           #
prompt ##############################################################
select SQL_ID
  , PLAN_HASH_VALUE
  , sum(EXECUTIONS_DELTA) EXECUTIONS
  , sum(ROWS_PROCESSED_DELTA) CROWS
  , trunc(sum(CPU_TIME_DELTA)/1000000/60) CPU_MINS
  , trunc(sum(ELAPSED_TIME_DELTA)/1000000/60) ELA_MINS
from DBA_HIST_SQLSTAT
where SQL_ID in ('${SQL_ID}')
group by SQL_ID , PLAN_HASH_VALUE
order by SQL_ID, CPU_MINS
/
prompt
prompt ##############################################################
prompt # CHECK XPLAN FROM AWR REPORT                                #
prompt ##############################################################
select * FROM table(DBMS_XPLAN.DISPLAY_AWR('${SQL_ID}'))
/
prompt
prompt ##############################################################
prompt # CHECK SQL BASELINE FOR DIFFERENT EXECUTION PLAN PER TIME   #
prompt ##############################################################
select
-- q.snap_id,
to_char(s.begin_interval_time,'dd/mm/yyyy hh24:mi:ss') begin_interval_time,
-- to_char(s.end_interval_time,'dd/mm/yyyy hh24:mi:ss') end_interval_time,
PLAN_HASH_VALUE,
-- ROWS_PROCESSED_DELTA,
round(ROWS_PROCESSED_DELTA/executions_delta,0) rows_processed,
executions_delta executions_per_report,
round(executions_delta/900,0) executions_per_sec,
-- buffer_gets_delta,
round(buffer_gets_DELTA/executions_delta,0) buffer_gets,
round(DISK_READS_DELTA/executions_delta,0) disk_read,
round(ELAPSED_TIME_DELTA/executions_delta/1000000,3) elapsed_time_in_sec
from dba_hist_sqlstat q, dba_hist_snapshot s
where q.snap_id = s.snap_id
and  sql_id='${SQL_ID}'
and  executions_delta > 0
order by q.snap_id
/
prompt
prompt ##############################################################
prompt # CHECK SQL BASELINE FOR EXECUTION PLAN                      #
prompt ##############################################################
col execs for 999,999,999
col avg_etime for 999,999.999
col avg_lio for 999,999,999.9
col begin_interval_time for a20
col node for 99999
break on plan_hash_value on startup_time skip 1
select ss.snap_id
  , ss.instance_number node
  , to_char(begin_interval_time, 'dd/mm/yyyy HH24:mm:ss') as begin_interval_time
  , sql_id
  , plan_hash_value
  , nvl(executions_delta,0) execs
  , (elapsed_time_delta/decode(nvl(executions_delta,0),0,1,executions_delta))/1000000 avg_etime
  , (buffer_gets_delta/decode(nvl(buffer_gets_delta,0),0,1,executions_delta)) avg_lio
from DBA_HIST_SQLSTAT S, DBA_HIST_SNAPSHOT SS
where sql_id = '${SQL_ID}'
and ss.snap_id = S.snap_id
and ss.instance_number = S.instance_number
and executions_delta > 0
order by 1, 2, 3;
undefine SQL_ID
set echo on verify on feedback on
quit;
EOF
}
#
#########################################################################################################
# Verify Cross Plattform
#########################################################################################################
#
# 11g
function func_dba_11_cross_platform()
{
  echo ""
}
# 12c
function func_dba_12_cross_platform()
{
  echo ""
}
# 18c
function func_dba_18_cross_platform()
{
  echo ""
}
# 19c
function func_dba_19_cross_platform()
{
  echo ""
}
# 20c
function func_dba_20_cross_platform()
{
  echo ""
}
#
function func_dba_cross_platform()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]; then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}; do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col PLATFORM_NAME for a40
col ENDIAN_FORMAT for a15
col FILE_NAME for a80
prompt ##############################################################
prompt # All Supportable Platforms                                  #
prompt ##############################################################
select PLATFORM_ID
  , PLATFORM_NAME
  , ENDIAN_FORMAT
from v\$transportable_platform
order by 1,2,3;
prompt
prompt ##############################################################
prompt # Your Platform and Endian Format                            #
prompt ##############################################################
select d.name
  , d.platform_name
  , endian_format
from v\$transportable_platform tp, v\$database d
where tp.platform_name = d.platform_name;
prompt
prompt ##############################################################
prompt # Files You Need to Convert                                  #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt # Files You DO NOT Need to Convert                           #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name not in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt #IDENTIFY EXTERNAL STUFF in your source database that may need extra care
prompt ##############################################################
set serveroutput on
declare
x boolean;
begin
  x := sys.dbms_tdb.check_external;
end;
/
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col PLATFORM_NAME for a40
col ENDIAN_FORMAT for a15
col FILE_NAME for a80
prompt ##############################################################
prompt # All Supportable Platforms                                  #
prompt ##############################################################
select PLATFORM_ID
  , PLATFORM_NAME
  , ENDIAN_FORMAT
from v\$transportable_platform
order by 1,2,3;
prompt
prompt ##############################################################
prompt # Your Platform and Endian Format                            #
prompt ##############################################################
select d.name
  , d.platform_name
  , endian_format
from v\$transportable_platform tp, v\$database d
where tp.platform_name = d.platform_name;
prompt
prompt ##############################################################
prompt # Files You Need to Convert                                  #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt # Files You DO NOT Need to Convert                           #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name not in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt #IDENTIFY EXTERNAL STUFF in your source database that may need extra care
prompt ##############################################################
set serveroutput on
declare
x boolean;
begin
  x := sys.dbms_tdb.check_external;
end;
/
quit;
EOF
fi
}
#
#########################################################################################################
# Verify Cross Plattform B
#########################################################################################################
#
# 11g
function func_dba_11_cross_platform_b()
{
  echo ""
}
# 12c
function func_dba_12_cross_platform_b()
{
  echo ""
}
# 18c
function func_dba_18_cross_platform_b()
{
  echo ""
}
# 19c
function func_dba_19_cross_platform_b()
{
  echo ""
}
# 20c
function func_dba_20_cross_platform_b()
{
  echo ""
}
#
function func_dba_cross_platform_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]; then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col PLATFORM_NAME for a40
col ENDIAN_FORMAT for a15
col FILE_NAME for a80
prompt ##############################################################
prompt # All Supportable Platforms                                  #
prompt ##############################################################
select PLATFORM_ID
  , PLATFORM_NAME
  , ENDIAN_FORMAT
from v\$transportable_platform
order by 1,2,3;
prompt
prompt ##############################################################
prompt # Your Platform and Endian Format                            #
prompt ##############################################################
select d.name
  , d.platform_name
  , endian_format
from v\$transportable_platform tp, v\$database d
where tp.platform_name = d.platform_name;
prompt
prompt ##############################################################
prompt # Files You Need to Convert                                  #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt # Files You DO NOT Need to Convert                           #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name not in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt #IDENTIFY EXTERNAL STUFF in your source database that may need extra care
prompt ##############################################################
set serveroutput on
declare
x boolean;
begin
  x := sys.dbms_tdb.check_external;
end;
/
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col PLATFORM_NAME for a40
col ENDIAN_FORMAT for a15
col FILE_NAME for a80
prompt ##############################################################
prompt # All Supportable Platforms                                  #
prompt ##############################################################
select PLATFORM_ID
  , PLATFORM_NAME
  , ENDIAN_FORMAT
from v\$transportable_platform
order by 1,2,3;
prompt
prompt ##############################################################
prompt # Your Platform and Endian Format                            #
prompt ##############################################################
select d.name
  , d.platform_name
  , endian_format
from v\$transportable_platform tp, v\$database d
where tp.platform_name = d.platform_name;
prompt
prompt ##############################################################
prompt # Files You Need to Convert                                  #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt # Files You DO NOT Need to Convert                           #
prompt ##############################################################
select file_name
from dba_data_files
where tablespace_name not in (select distinct tablespace_name from dba_rollback_segs);
prompt
prompt ##############################################################
prompt #IDENTIFY EXTERNAL STUFF in your source database that may need extra care
prompt ##############################################################
set serveroutput on
declare
x boolean;
begin
  x := sys.dbms_tdb.check_external;
end;
/
quit;
EOF
fi
}
#
#########################################################################################################
# Validate Objects Owner
#########################################################################################################
#
# 11g
function func_dba_11_val_obj_user()
{
  echo ""
}
# 12c
function func_dba_12_val_obj_user()
{
  echo ""
}
# 18c
function func_dba_18_val_obj_user()
{
  echo ""
}
# 19c
function func_dba_19_val_obj_user()
{
  echo ""
}
# 20c
function func_dba_20_val_obj_user()
{
  echo ""
}
#
function func_dba_val_obj_user()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 1000 timing on numwidth 20 SERVEROUTPUT ON FEEDBACK OFF colsep '|'
  execute dbms_utility.compile_schema('${OWNER}',false);
quit;
EOF
}
#
#########################################################################################################
# Verify JOBS Scheduled
#########################################################################################################
#
# 11g
function func_dba_11_jobs_db_sched()
{
  echo ""
}
# 12c
function func_dba_12_jobs_db_sched()
{
  echo ""
}
# 18c
function func_dba_18_jobs_db_sched()
{
  echo ""
}
# 19c
function func_dba_19_jobs_db_sched()
{
  echo ""
}
# 20c
function func_dba_20_jobs_db_sched()
{
  echo ""
}
#
function func_dba_jobs_db_sched()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on numwidth 20 SERVEROUTPUT ON LINESIZE 1000 FEEDBACK OFF colsep '|'
col COMMENTS for a75
col JOB_NAME for a30
col owner for a10
col state for a12
col SCHEDULE_TYPE for a16
col LAST_EXEC for a12
col enabled for a8
select JOB_NAME
  , STATE
  , ENABLED
  , PROGRAM_OWNER as OWNER
  , SCHEDULE_TYPE
  , RUN_COUNT as EXEC
  , to_char(LAST_START_DATE, 'dd/mm/yyyy') as LAST_EXEC
  , COMMENTS
FROM DBA_SCHEDULER_JOBS
WHERE JOB_NAME LIKE ('%${JOB}%');
quit;
EOF
}
#
#########################################################################################################
# Kill Session
#########################################################################################################
#
# 11g
function func_dba_11_kill_session()
{
  echo ""
}
# 12c
function func_dba_12_kill_session()
{
  echo ""
}
# 18c
function func_dba_18_kill_session()
{
  echo ""
}
# 19c
function func_dba_19_kill_session()
{
  echo ""
}
# 20c
function func_dba_20_kill_session()
{
  echo ""
}
#
function func_dba_kill_session()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on numwidth 20 SERVEROUTPUT ON LINESIZE 1000 FEEDBACK OFF colsep '|'
alter system kill session '${SESSION}' immediate;
quit;
EOF
}
#
#########################################################################################################
# Verify Sessions
#########################################################################################################
#
# 11g
function func_dba_11_verify_sessions()
{
  echo ""
}
# 12c
function func_dba_12_verify_sessions()
{
  echo ""
}
# 18c
function func_dba_18_verify_sessions()
{
  echo ""
}
# 19c
function func_dba_19_verify_sessions()
{
  echo ""
}
# 20c
function func_dba_20_verify_sessions()
{
  echo ""
}
#
function func_dba_verify_sessions()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 2000 lines 700 timing on numwidth 20 SERVEROUTPUT ON LINESIZE 1000 FEEDBACK OFF colsep '|'
col MACHINE for a30
col OSUSER for a20
col username for a20
col PROGRAM for a60
select MACHINE
  , OSUSER
  , SID
  , SERIAL#
  , USERNAME
  , PROGRAM
  , PROCESS
from v\$session
where username = ('${SCHEMA}')
order by 1,2,5,6;
quit;
EOF
}
#
#########################################################################################################
# Verify Collection Statistics of TABLE
#########################################################################################################
#
# 11g
function func_dba_11_verify_statistics_table()
{
  echo ""
}
# 12c
function func_dba_12_verify_statistics_table()
{
  echo ""
}
# 18c
function func_dba_18_verify_statistics_table()
{
  echo ""
}
# 19c
function func_dba_19_verify_statistics_table()
{
  echo ""
}
# 20c
function func_dba_20_verify_statistics_table()
{
  echo ""
}
#
function func_dba_verify_statistics_table()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 10000 lines 500 timing on colsep '|'
col schema for a20
col object for a50
select S.Owner As "Schema"
  , S.Table_Name As "Object"
  , S.Object_Type As "Object Type"
  , S.Num_Rows As "Qtd. of Lines"
  , to_char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') As "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate -30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_tab_statistics S
WHERE S.Owner = ('${SCHEMA}')
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
quit;
EOF
}
#
#########################################################################################################
# Verify Collection Statistics of INDEX
#########################################################################################################
#
# 11g
function func_dba_11_verify_statistics_index()
{
  echo ""
}
# 12c
function func_dba_12_verify_statistics_index()
{
  echo ""
}
# 18c
function func_dba_18_verify_statistics_index()
{
  echo ""
}
# 19c
function func_dba_19_verify_statistics_index()
{
  echo ""
}
# 20c
function func_dba_20_verify_statistics_index()
{
  echo ""
}
#
function func_dba_verify_statistics_index()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 10000 lines 500 timing on colsep '|'
col schema for a20
col object for a50
select S.Owner As "Schema"
  , S.Table_Name As "Object"
  , S.Object_Type As "Object Type"
  , S.Num_Rows As "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') As "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate -30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_ind_statistics S
WHERE S.Owner = ('${SCHEMA}')
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
quit;
EOF
}
#
#########################################################################################################
# Collect Owner Statistics
#########################################################################################################
#
# 11g
function func_dba_11_collect_owner_statistic()
{
  echo ""
}
# 12c
function func_dba_12_collect_owner_statistic()
{
  echo ""
}
# 18c
function func_dba_18_collect_owner_statistic()
{
  echo ""
}
# 19c
function func_dba_19_collect_owner_statistic()
{
  echo ""
}
# 20c
function func_dba_20_collect_owner_statistic()
{
  echo ""
}
#
function func_dba_collect_owner_statistic()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
begin
  dbms_stats.gather_schema_stats('${OWNER}', estimate_percent => dbms_stats.auto_sample_size, cascade => true);
end;
/
quit;
EOF
}
#
#########################################################################################################
# Rezise Datafile
#########################################################################################################
#
# 11g
function func_dba_11_resize_datafile()
{
  echo ""
}
# 12c
function func_dba_12_resize_datafile()
{
  echo ""
}
# 18c
function func_dba_18_resize_datafile()
{
  echo ""
}
# 19c
function func_dba_19_resize_datafile()
{
  echo ""
}
# 20c
function func_dba_20_resize_datafile()
{
  echo ""
}
#
function func_dba_resize_datafile()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
${DATAFILE}
quit;
EOF
}
#
# ???
#
#########################################################################################################
# Tablespaces DDLs
#########################################################################################################
#
# 11g
function func_dba_11_tablespace_ddl()
{
  echo ""
}
# 12c
function func_dba_12_tablespace_ddl()
{
  echo ""
}
# 18c
function func_dba_18_tablespace_ddl()
{
  echo ""
}
# 19c
function func_dba_19_tablespace_ddl()
{
  echo ""
}
# 20c
function func_dba_20_tablespace_ddl()
{
  echo ""
}
#
function func_dba_tablespace_ddl()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
set heading off; 
set echo off; 
Set pages 999; 
set long 90000; 
select dbms_metadata.get_ddl('TABLESPACE',tb.tablespace_name) from dba_tablespaces tb; 
quit;
EOF
}
#
#########################################################################################################
# DDL of Privileges Granted to User
#########################################################################################################
#
# 11g
function func_dba_11_tablespace_ddl()
{
  echo ""
}
# 12c
function func_dba_12_tablespace_ddl()
{
  echo ""
}
# 18c
function func_dba_18_tablespace_ddl()
{
  echo ""
}
# 19c
function func_dba_19_tablespace_ddl()
{
  echo ""
}
# 20c
function func_dba_20_tablespace_ddl()
{
  echo ""
}
#
function func_dba_tablespace_ddl()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
set feedback off pages 0 long 900000 lines 20000 pagesize 20000 serveroutput on 
accept USERNAME prompt "Enter username :" 
--This line add a semicolon at the end of each statement 
execute dbms_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'SQLTERMINATOR',true); 
-- This will generate the DDL for the user and add his objects,system and role grants 
select DBMS_METADATA.GET_DDL('USER',username) as script from DBA_USERS where username='&username' 
UNION ALL 
select DBMS_METADATA.GET_GRANTED_DDL('SYSTEM_GRANT',grantee)as script from DBA_SYS_PRIVS where grantee='&username' and rownum=1 
UNION ALL 
select DBMS_METADATA.GET_GRANTED_DDL('ROLE_GRANT',grantee)as script from DBA_ROLE_PRIVS where grantee='&username' and rownum=1 
UNION ALL 
select DBMS_METADATA.GET_GRANTED_DDL('OBJECT_GRANT',grantee)as script from DBA_TAB_PRIVS where grantee='&username' and rownum=1;
quit;
EOF
}
#
#########################################################################################################
# Check Encryption Wallet Status
#########################################################################################################
#
# 11g
function func_dba_11_check_wallet_status()
{
  echo ""
}
# 12c
function func_dba_12_check_wallet_status()
{
  echo ""
}
# 18c
function func_dba_18_check_wallet_status()
{
  echo ""
}
# 19c
function func_dba_19_check_wallet_status()
{
  echo ""
}
# 20c
function func_dba_20_check_wallet_status()
{
  echo ""
}
#
function func_dba_check_wallet_status()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col wrl_parameter for a40
select * FROM gv\$encryption_wallet;
quit;
EOF
}
#
# ???
#
#########################################################################################################
# Verify Status User
#########################################################################################################
#
# 11g
function func_dba_11_verify_status_user()
{
  echo ""
}
# 12c
function func_dba_12_verify_status_user()
{
  echo ""
}
# 18c
function func_dba_18_verify_status_user()
{
  echo ""
}
# 19c
function func_dba_19_verify_status_user()
{
  echo ""
}
# 20c
function func_dba_20_verify_status_user()
{
  echo ""
}
#
function func_dba_verify_status_user()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col username for a30
col profile for a30
select user_id
  , username
  , account_status
  , default_tablespace
  , profile
from dba_users
where username = '${OWNER}';
quit;
EOF
}
#
#########################################################################################################
# Unlock User
#########################################################################################################
#
# 11g
function func_dba_11_unlock_user()
{
  echo ""
}
# 12c
function func_dba_12_unlock_user()
{
  echo ""
}
# 18c
function func_dba_18_unlock_user()
{
  echo ""
}
# 19c
function func_dba_19_unlock_user()
{
  echo ""
}
# 20c
function func_dba_20_unlock_user()
{
  echo ""
}
#
function func_dba_unlock_user()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
alter user ${OWNER} account unlock;
quit;
EOF
}
#
#########################################################################################################
# Lock User
#########################################################################################################
#
# 11g
function func_dba_11_lock_user()
{
  echo ""
}
# 12c
function func_dba_12_lock_user()
{
  echo ""
}
# 18c
function func_dba_18_lock_user()
{
  echo ""
}
# 19c
function func_dba_19_lock_user()
{
  echo ""
}
# 20c
function func_dba_20_lock_user()
{
  echo ""
}
#
function func_dba_lock_user()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
alter user ${OWNER} account lock;
quit;
EOF
}
#
#########################################################################################################
# Clone User
#########################################################################################################
#
# 11g
function func_dba_11_clone_user()
{
  echo ""
}
# 12c
function func_dba_12_clone_user()
{
  echo ""
}
# 18c
function func_dba_18_clone_user()
{
  echo ""
}
# 19c
function func_dba_19_clone_user()
{
  echo ""
}
# 20c
function func_dba_20_clone_user()
{
  echo ""
}
#
function func_dba_clone_user()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]; then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}; do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF 
conn / as sysdba 
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off 
alter session set container=${PPDB}; 
prompt ############################################################## 
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME; 
prompt ############################################################## 
prompt 
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|' 
col command for a150 
prompt ############################################################## 
Prompt # Create User Command                                        # 
prompt ############################################################## 
select 'create user ${DEST_USER} identified by ' || ' " YOUR_PASSWORD_HERE " ' || ' default tablespace ' || default_tablespace || ' temporary tablespace ' || temporary_tablespace || ' profile ' || profile || ';' as command from sys.dba_users where username = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Alter User Command                                         # 
prompt ############################################################## 
select 'alter user ' || username || ' quota ' || decode(MAX_BYTES,-1,'UNLIMITED', to_char(MAX_BYTES/(1024*1024),'9999') || 'M') || ' on ' || tablespace_name || ';' as command from sys.dba_ts_quotas where username = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || granted_role || ' to ${DEST_USER}' || decode(ADMIN_OPTION, 'YES', ' WITH ADMIN OPTION')||';' as command from sys.dba_role_privs where grantee = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || privilege || ' on '|| owner || '.' || table_name || ' to ${DEST_USER};' as command from sys.dba_tab_privs where grantee = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || privilege || ' on '|| owner || '.' || table_name || '(' || column_name || ') to ${DEST_USER};' as command from sys.dba_col_privs where grantee = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || privilege || ' to ${DEST_USER}' || decode(ADMIN_OPTION, 'YES', ' WITH ADMIN OPTION') || ';' as command from sys.dba_sys_privs where grantee = upper('${FROM_USER}');
quit;
EOF
else
sqlplus -S /nolog <<EOF 
conn / as sysdba 
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|' 
col command for a150 
prompt ############################################################## 
Prompt # Create User Command                                        # 
prompt ############################################################## 
select 'create user ${DEST_USER} identified by ' || ' " YOUR_PASSWORD_HERE " ' || ' default tablespace ' || default_tablespace || ' temporary tablespace ' || temporary_tablespace || ' profile ' || profile || ';' as command from sys.dba_users where username = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Alter User Command                                         # 
prompt ############################################################## 
select 'alter user ' || username || ' quota ' || decode(MAX_BYTES,-1,'UNLIMITED', to_char(MAX_BYTES/(1024*1024),'9999') || 'M') || ' on ' || tablespace_name || ';' as command from sys.dba_ts_quotas where username = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || granted_role || ' to ${DEST_USER}' || decode(ADMIN_OPTION, 'YES', ' WITH ADMIN OPTION')||';' as command from sys.dba_role_privs where grantee = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || privilege || ' on '|| owner || '.' || table_name || ' to ${DEST_USER};' as command from sys.dba_tab_privs where grantee = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || privilege || ' on '|| owner || '.' || table_name || '(' || column_name || ') to ${DEST_USER};' as command from sys.dba_col_privs where grantee = upper('${FROM_USER}'); 
prompt 
prompt ############################################################## 
prompt # Grant User Command                                         # 
prompt ############################################################## 
select 'grant ' || privilege || ' to ${DEST_USER}' || decode(ADMIN_OPTION, 'YES', ' WITH ADMIN OPTION') || ';' as command from sys.dba_sys_privs where grantee = upper('${FROM_USER}');
quit;
EOF
fi
}
#
#########################################################################################################
# Function CHECK With Report File
#########################################################################################################
#
# 11g
function func_dba_11_check_with_report_file()
{
  echo ""
}
# 12c
function func_dba_12_check_with_report_file()
{
  echo ""
}
# 18c
function func_dba_18_check_with_report_file()
{
  echo ""
}
# 19c
function func_dba_19_check_with_report_file()
{
  echo ""
}
# 20c
function func_dba_20_check_with_report_file()
{
  echo ""
}
#
function func_dba_check_with_report_file()
{
DATE=`date +%Y%m%d`
TIME=`date +%H%M`
FOLDER="/tmp"
REPORT_FILE="${FOLDER}/${DATE}${TIME}_${ORACLE_SID}_report.txt"
COMPRESS_FILE="${REPORT_FILE}.bz2"
echo ">--------------------------------------------------------------------------------------------------[ HW ]"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0 ] SERVER HARDWARE LEVEL"                                                                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0 ] SERVER HARDWARE LEVEL"
echo ">--------------------------------------------------------------------------------------------------[ HW ]"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.01 ] SERVER_HOST_NAME....................................: ${HOST}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.01 ] SERVER_HOST_NAME....................................: ${HOST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.02 ] SERVER_IP_ADDR......................................: ${IPADDR}"                                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.02 ] SERVER_IP_ADDR......................................: ${IPADDR}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.03 ] SERVER_OPERATION_SYSTEM.............................: ${OS}"                                                                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.03 ] SERVER_OPERATION_SYSTEM.............................: ${OS}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.04 ] OPERATION_SYSTEM_DISTRIBUTION.......................: ${OSDISTRO}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.04 ] OPERATION_SYSTEM_DISTRIBUTION.......................: ${OSDISTRO}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.05 ] SERVER_KERNEL_VERSION...............................: ${KKERNEL}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.05 ] SERVER_KERNEL_VERSION...............................: ${KKERNEL}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.06 ] SERVER_PROCESSES_FAMILY.............................: ${PFAMILY}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.06 ] SERVER_PROCESSES_FAMILY.............................: ${PFAMILY}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.07 ] SERVER_PROCESSES_TYPE...............................: ${PFPU_TYPE}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.07 ] SERVER_PROCESSES_TYPE...............................: ${PFPU_TYPE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.08 ] SERVER_PHYSICAL_PROCESSES...........................: ${PCPU}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.08 ] SERVER_PHYSICAL_PROCESSES...........................: ${PCPU}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.09 ] SERVER_PROCESSES....................................: ${CCPU}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.09 ] SERVER_PROCESSES....................................: ${CCPU}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.10 ] SERVER_DISK_SPACE_WARNING...........................: ${WARNING_SPACE}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.10 ] SERVER_DISK_SPACE_WARNING...........................: ${WARNING_SPACE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.11 ] SERVER_DISK_SPACE_CRITICAL..........................: ${CRITICAL_SPACE}"                                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.11 ] SERVER_DISK_SPACE_CRITICAL..........................: ${CRITICAL_SPACE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.12 ] SERVER_MEMORY.......................................: ${TMEM}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.12 ] SERVER_MEMORY.......................................: ${TMEM}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.13 ] SERVER_MEMORY_USED..................................: ${UMEN}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.13 ] SERVER_MEMORY_USED..................................: ${UMEN}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.14 ] SERVER_MEMORY_FREE..................................: ${FMEM}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.14 ] SERVER_MEMORY_FREE..................................: ${FMEM}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.15 ] SERVER_SWAP.........................................: ${STMEM}"                                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.15 ] SERVER_SWAP.........................................: ${STMEM}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.16 ] SERVER_SWAP_USED....................................: ${SUMEM}"                                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.16 ] SERVER_SWAP_USED....................................: ${SUMEM}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.17 ] SERVER_SWAP_FREE....................................: ${SFMEM}"                                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.17 ] SERVER_SWAP_FREE....................................: ${SFMEM}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.18 ] SERVER_UPTIME.......................................: ${UUPTIME}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.18 ] SERVER_UPTIME.......................................: ${UUPTIME}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.19 ] SERVER_TEMPERATURE..................................: ${SRVTEMPERATURE}"                                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.19 ] SERVER_TEMPERATURE..................................: ${SRVTEMPERATURE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.20 ] SERVER_MEMORY_BANKS.................................: ${SRVMEMBANK}"                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.20 ] SERVER_MEMORY_BANKS.................................: ${SRVMEMBANK}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.21 ] SERVER_DISKS_BANKS..................................: ${SRVDISKS}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 0.21 ] SERVER_DISKS_BANKS..................................: ${SRVDISKS}"
echo ">--------------------------------------------------------------------------------------------------[ DB ]"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1 ] SERVER DATABASE LEVEL"                                                                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1 ] SERVER DATABASE LEVEL"
echo ">--------------------------------------------------------------------------------------------------[ DB ]"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.001 ] ORACLE_VERSION.....................................: ${DBVERSION}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.001 ] ORACLE_VERSION.....................................: ${DBVERSION}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.002 ] ORACLE_RELEASE.....................................: ${ODBRELEASE}"                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.002 ] ORACLE_RELEASE.....................................: ${ODBRELEASE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.003 ] ORACLE_EDITION.....................................: ${EEDITION}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.003 ] ORACLE_EDITION.....................................: ${EEDITION}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.004 ] ORACLE_HOME........................................: ${ORACLE_HOME}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.004 ] ORACLE_HOME........................................: ${ORACLE_HOME}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.005 ] DATABASE_UPTIME....................................: ${DDBUPTIME} ${DDBUPTIMED} Day(s) UP"                                     >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.005 ] DATABASE_UPTIME....................................: ${DDBUPTIME} ${DDBUPTIMED} Day(s) UP"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.006 ] DATABASE_WAS_UPDATED_ON............................: ${VVERSIONTIME} ${VVERSIONTIMED} Day(s) AGO"                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.006 ] DATABASE_WAS_UPDATED_ON............................: ${VVERSIONTIME} ${VVERSIONTIMED} Day(s) AGO"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.007 ] ORA-00600_LASTS_30_DAY(S)..........................: ${OORA600}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.007 ] ORA-00600_LASTS_30_DAY(S)..........................: ${OORA600}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.008 ] ERRORS_ON_ALERTLOG_LASTS_15_DAY(S).................: ${EERRORS}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.008 ] ERRORS_ON_ALERTLOG_LASTS_15_DAY(S).................: ${EERRORS}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.009 ] DATABASE_OPEN_MODE.................................: ${DDBMODE}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.009 ] DATABASE_OPEN_MODE.................................: ${DDBMODE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.010 ] DATABASE_ACTIVE_STATE..............................: ${AACTSTATE}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.010 ] DATABASE_ACTIVE_STATE..............................: ${AACTSTATE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.011 ] DATABASE_ROLE......................................: ${DDBROLE}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.011 ] DATABASE_ROLE......................................: ${DDBROLE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.012 ] DATABASE_NAME......................................: ${ORACLE_SID}"                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.012 ] DATABASE_NAME......................................: ${ORACLE_SID}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.013 ] DATABASE_UNIQUE_NAME...............................: ${DBUNNAME}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.013 ] DATABASE_UNIQUE_NAME...............................: ${DBUNNAME}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.014 ] DATABASE_SERVICE_NAME..............................: ${DBSERVNAME}"                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.014 ] DATABASE_SERVICE_NAME..............................: ${DBSERVNAME}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.015 ] DATABASE_BUFFER_CACHE..............................: ${DDBBUFFERK}(K)"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.015 ] DATABASE_BUFFER_CACHE..............................: ${DDBBUFFERK}(K)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.016 ] DATABASE_BLOCK_SIZE................................: ${DDBSIZEK}(K) ${DDBSIZEM}(M)"                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.016 ] DATABASE_BLOCK_SIZE................................: ${DDBSIZEK}(K) ${DDBSIZEM}(M)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.017 ] DATABASE_SIZE......................................: ${DDB_SIZEM}(M) ${DDB_SIZEG}(G) ${DDB_SIZET}(T)"                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.017 ] DATABASE_SIZE......................................: ${DDB_SIZEM}(M) ${DDB_SIZEG}(G) ${DDB_SIZET}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.018 ] DATABASE_CACHE_SIZE................................: ${DDBCACHESIZEK}(K) ${DDBCACHESIZEM}(M) ${DDBCACHESIZEG}(G)"              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.018 ] DATABASE_CACHE_SIZE................................: ${DDBCACHESIZEK}(K) ${DDBCACHESIZEM}(M) ${DDBCACHESIZEG}(G)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.019 ] TABLESPACE_SIZE_WARNING............................: ${TTBS_WARNING}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.019 ] TABLESPACE_SIZE_WARNING............................: ${TTBS_WARNING}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.020 ] TABLESPACE_SIZE_CRITICAL...........................: ${TTBS_CRITICAL}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.020 ] TABLESPACE_SIZE_CRITICAL...........................: ${TTBS_CRITICAL}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.021 ] INSTANCE_SCN.......................................: ${DDBSCN}"                                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.021 ] INSTANCE_SCN.......................................: ${DDBSCN}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.022 ] INSTANCE_MEM_MAX_TARGET............................: ${MMEMMAXM}(M) ${MMEMMAXG}(G) ${MMEMMAXT}(T)"                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.022 ] INSTANCE_MEM_MAX_TARGET............................: ${MMEMMAXM}(M) ${MMEMMAXG}(G) ${MMEMMAXT}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.023 ] INSTANCE_MEM_TARGET................................: ${MMENTARGETM}(M) ${MMENTARGETG}(G) ${MMENTARGETT}(T)"                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.023 ] INSTANCE_MEM_TARGET................................: ${MMENTARGETM}(M) ${MMENTARGETG}(G) ${MMENTARGETT}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.024 ] INSTANCE_SGA_MAX_SIZE..............................: ${SSGAMAXM}(M) ${SSGAMAXG}(G) ${SSGAMAXT}(T)"                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.024 ] INSTANCE_SGA_MAX_SIZE..............................: ${SSGAMAXM}(M) ${SSGAMAXG}(G) ${SSGAMAXT}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.025 ] INSTANCE_SGA_TARGET................................: ${SSGATARGETM}(M) ${SSGATARGETG}(G) ${SSGATARGETT}(T)"                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.025 ] INSTANCE_SGA_TARGET................................: ${SSGATARGETM}(M) ${SSGATARGETG}(G) ${SSGATARGETT}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.026 ] INSTANCE_PGA_AGGREGATE_TARGET......................: ${PPGATARGETK}(K) ${PPGATARGETM}(M) ${PPGATARGETG}(G)"                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.026 ] INSTANCE_PGA_AGGREGATE_TARGET......................: ${PPGATARGETK}(K) ${PPGATARGETM}(M) ${PPGATARGETG}(G)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.027 ] INSTANCE_PGA_AGGREGATE_LIMIT.......................: ${PPGALIMITK}(K) ${PPGALIMITM}(M) ${PPGALIMITG}(G)"                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.027 ] INSTANCE_PGA_AGGREGATE_LIMIT.......................: ${PPGALIMITK}(K) ${PPGALIMITM}(M) ${PPGALIMITG}(G)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.028 ] INSTANCE_SHARED_POOL_SIZE..........................: ${SSHAREDPOOLK}(K) ${SSHAREDPOOLM}(M) ${SSHAREDPOOLG}(G)"                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.028 ] INSTANCE_SHARED_POOL_SIZE..........................: ${SSHAREDPOOLK}(K) ${SSHAREDPOOLM}(M) ${SSHAREDPOOLG}(G)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.029 ] ASM / RAC..........................................: ASM: ${ISASMOK} # RAC: ${ISRACDB}"                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.029 ] ASM / RAC..........................................: ASM: ${ISASMOK} # RAC: ${ISRACDB}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.030 ] ARCHIVE............................................: ${ARCH}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.030 ] ARCHIVE............................................: ${ARCH}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.031 ] ACTIVE_DATAGUARD...................................: ${ISDG_ACT}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.031 ] ACTIVE_DATAGUARD...................................: ${ISDG_ACT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.032 ] DATAGUARD..........................................: ${ISDGDB}"                                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.032 ] DATAGUARD..........................................: ${ISDGDB}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.033 ] EXADATA............................................: ${ISEXADATAOK}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.033 ] EXADATA............................................: ${ISEXADATAOK}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.034 ] GOLDENGATE.........................................: ${OOGG}"                                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.034 ] GOLDENGATE.........................................: ${OOGG}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.035 ] MULTIMEDIA_( < 19c )...............................: ${OORAMULTIMEDIA}"                                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.035 ] MULTIMEDIA_( < 19c )...............................: ${OORAMULTIMEDIA}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.036 ] ORACLE_VAULT.......................................: ${OVAULT}"                                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.036 ] ORACLE_VAULT.......................................: ${OVAULT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.037 ] PARTITIONING.......................................: ${DDBPART}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.037 ] PARTITIONING.......................................: ${DDBPART}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.038 ] CLUSTER_DATABASE...................................: ${ISRACDB}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.038 ] CLUSTER_DATABASE...................................: ${ISRACDB}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.039 ] SPATIAL............................................: ${DDBSPAT}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.039 ] SPATIAL............................................: ${DDBSPAT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.040 ] SQL_TUNING.........................................: ${SSQLTUN}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.040 ] SQL_TUNING.........................................: ${SSQLTUN}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.041 ] TEXT...............................................: ${OORATEXT}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.041 ] TEXT...............................................: ${OORATEXT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.042 ] INVALID_OBJECTS....................................: ${IINVOBJ}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.042 ] INVALID_OBJECTS....................................: ${IINVOBJ}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.043 ] TOTAL_LOG_GROUP....................................: ${LLOG_GROUPT}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.043 ] TOTAL_LOG_GROUP....................................: ${LLOG_GROUPT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.044 ] TOTAL_STANDBY_LOG_GROUP............................: ${LLOG_STB_GROUPT}"                                                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.044 ] TOTAL_STANDBY_LOG_GROUP............................: ${LLOG_STB_GROUPT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.045 ] LOG_GROUP_ACTIVE...................................: ${LLOG_GROUPA}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.045 ] LOG_GROUP_ACTIVE...................................: ${LLOG_GROUPA}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.046 ] LOG_GROUP_INACTIVE.................................: ${LLOG_GROUPI}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.046 ] LOG_GROUP_INACTIVE.................................: ${LLOG_GROUPI}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.047 ] ONLINE_REDOLOG.....................................: ${RREDO}"                                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.047 ] ONLINE_REDOLOG.....................................: ${RREDO}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.048 ] STANDBY_REDOLOG....................................: ${SSREDO}"                                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.048 ] STANDBY_REDOLOG....................................: ${SSREDO}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.049 ] ONLYNE_REDOLOG_SIZE................................: ${RREDOM}(M) ${RREDOG}(G)"                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.049 ] ONLYNE_REDOLOG_SIZE................................: ${RREDOM}(M) ${RREDOG}(G)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.050 ] STANDBY_REDOLOG_SIZE...............................: ${SSREDOM}(M) ${SSREDOG}(G)"                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.050 ] STANDBY_REDOLOG_SIZE...............................: ${SSREDOM}(M) ${SSREDOG}(G)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.051 ] PROTECTION_MODE....................................: ${PPROTMODE}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.051 ] PROTECTION_MODE....................................: ${PPROTMODE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.052 ] STBY_FILE_MANAGEMENT...............................: ${SSTBYFILEMAN}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.052 ] STBY_FILE_MANAGEMENT...............................: ${SSTBYFILEMAN}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.053 ] FORCE_LOGGING......................................: ${DDBFLOG}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.053 ] FORCE_LOGGING......................................: ${DDBFLOG}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.054 ] FLASHBACK..........................................: ${DDBFLASHB}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.054 ] FLASHBACK..........................................: ${DDBFLASHB}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.055 ] FLASHBACK_SIZE.....................................: ${FFLASHSIZEM}(M) ${FFLASHSIZEG}(G) ${FFLASHSIZET}(T)"                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.055 ] FLASHBACK_SIZE.....................................: ${FFLASHSIZEM}(M) ${FFLASHSIZEG}(G) ${FFLASHSIZET}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.056 ] FLASHBACK_RETENTION................................: ${FFLASHRETM}(M) ${FFLASHRETM}(H) ${FFLASHRETH}(D)"                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.056 ] FLASHBACK_RETENTION................................: ${FFLASHRETM}(M) ${FFLASHRETM}(H) ${FFLASHRETH}(D)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.057 ] UNDO_RETENTION.....................................: ${UUNDOS}(S) ${UUNDOM}(M) ${UUNDOH}(H)"                                   >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.057 ] UNDO_RETENTION.....................................: ${UUNDOS}(S) ${UUNDOM}(M) ${UUNDOH}(H)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.058 ] UNDO_MANAGEMENT....................................: ${UUNDO_MANAG}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.058 ] UNDO_MANAGEMENT....................................: ${UUNDO_MANAG}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.059 ] ARCH_LAG_TARGET....................................: ${AARCHLAG} ${AARCHLAGTIMEM}(M) ${AARCHLAGTIMEH}(H) ${AARCHLAGTIMED}(D)"  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.059 ] ARCH_LAG_TARGET....................................: ${AARCHLAG} ${AARCHLAGTIMEM}(M) ${AARCHLAGTIMEH}(H) ${AARCHLAGTIMED}(D)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.060 ] LOG_ARCH_FORMAT....................................: ${LLOGARCHFOR}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.060 ] LOG_ARCH_FORMAT....................................: ${LLOGARCHFOR}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.061 ] OPEN_CURSORS.......................................: ${OOPENCUR}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.061 ] OPEN_CURSORS.......................................: ${OOPENCUR}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.062 ] PROCESSES..........................................: ${PPROCESS}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.062 ] PROCESSES..........................................: ${PPROCESS}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.063 ] RECYCLEBIN.........................................: ${RRECYCLEBIN}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.063 ] RECYCLEBIN.........................................: ${RRECYCLEBIN}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.064 ] CONTROL_FILE.......................................: ${CCTRL}"                                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.064 ] CONTROL_FILE.......................................: ${CCTRL}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.065 ] CPU_COUNT:.........................................: ${CCPU_COUNT}"                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.065 ] CPU_COUNT:.........................................: ${CCPU_COUNT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.066 ] SPFILE.............................................: ${SSPFILE}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.066 ] SPFILE.............................................: ${SSPFILE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.067 ] COMPATIBLE.........................................: ${CCOMPATIBLE}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.067 ] COMPATIBLE.........................................: ${CCOMPATIBLE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.068 ] STBY_ARCH_DEST.....................................: ${SSTBY_ARCH_DEST}"                                                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.068 ] STBY_ARCH_DEST.....................................: ${SSTBY_ARCH_DEST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.069 ] FAL_CLIENT.........................................: ${FFAL_CLIENT}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.069 ] FAL_CLIENT.........................................: ${FFAL_CLIENT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.070 ] FAL_SERVER.........................................: ${FFAL_SERVER}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.070 ] FAL_SERVER.........................................: ${FFAL_SERVER}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.071 ] DB_FILES_TOTAL.....................................: ${DDB_FILES}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.071 ] DB_FILES_TOTAL.....................................: ${DDB_FILES}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.072 ] DB_FILES_NOW.......................................: ${DDB_FILES_NOW}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.072 ] DB_FILES_NOW.......................................: ${DDB_FILES_NOW}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.073 ] PARALLEL_SERVER....................................: ${PPARALLEL_SERV}"                                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.073 ] PARALLEL_SERVER....................................: ${PPARALLEL_SERV}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.074 ] DB_RECOVERY_FILE_DEST..............................: ${DDB_REC_FILE_DEST}"                                                     >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.074 ] DB_RECOVERY_FILE_DEST..............................: ${DDB_REC_FILE_DEST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.075 ] DB_RECOVERY_FILE_SIZE..............................: ${DDB_REC_FILE_SIZEG}(G) ${DDB_REC_FILE_SIZET}(T)"                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.075 ] DB_RECOVERY_FILE_SIZE..............................: ${DDB_REC_FILE_SIZEG}(G) ${DDB_REC_FILE_SIZET}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.076 ] DB_RECOVERY_DEST_SIZE..............................: ${DDBRECSIZEG}(G) ${DDBRECSIZET}(T)"                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.076 ] DB_RECOVERY_DEST_SIZE..............................: ${DDBRECSIZEG}(G) ${DDBRECSIZET}(T)"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.077 ] DB_RECOVERY_DEST_SIZE_USED.........................: ${DDBRECSIZEUM}(M) ${DDBRECSIZEUG}(G) ${DDBRECSIZEUP}%"                   >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.077 ] DB_RECOVERY_DEST_SIZE_USED.........................: ${DDBRECSIZEUM}(M) ${DDBRECSIZEUG}(G) ${DDBRECSIZEUP}%"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.078 ] FAST_START_MTTR....................................: ${FFAST_START_MTTR}"                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.078 ] FAST_START_MTTR....................................: ${FFAST_START_MTTR}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.079 ] PARALLEL_MIN_SERVER................................: ${PPARALLEL_MIN_SERV}"                                                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.079 ] PARALLEL_MIN_SERVER................................: ${PPARALLEL_MIN_SERV}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.080 ] PARALLEL_MAX_SERVER................................: ${PPARALLEL_MAX_SERV}"                                                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.080 ] PARALLEL_MAX_SERVER................................: ${PPARALLEL_MAX_SERV}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.081 ] AUDIT_FILE_DEST....................................: ${AAUDIT_FILE_DEST}"                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.081 ] AUDIT_FILE_DEST....................................: ${AAUDIT_FILE_DEST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.082 ] PARALLEL_DEG_POLICY................................: ${PPARALLEL_DEG_POL}"                                                     >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.082 ] PARALLEL_DEG_POLICY................................: ${PPARALLEL_DEG_POL}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.083 ] PARALLEL_ADAP_M....................................: ${PPARALLEL_ADAP_M}"                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.083 ] PARALLEL_ADAP_M....................................: ${PPARALLEL_ADAP_M}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.084 ] PARALLEL_THREAD_CPU................................: ${PPARALLEL_THREAD_CPU}"                                                  >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.084 ] PARALLEL_THREAD_CPU................................: ${PPARALLEL_THREAD_CPU}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.085 ] PARALLEL_AUTO_TUNING...............................: ${PPARALLEL_AUTO_TUNING}"                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.085 ] PARALLEL_AUTO_TUNING...............................: ${PPARALLEL_AUTO_TUNING}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.086 ] PARALLEL_IO_CAP....................................: ${PPARALLEL_IO_CAP}"                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.086 ] PARALLEL_IO_CAP....................................: ${PPARALLEL_IO_CAP}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.087 ] OPTIMIZER_INDEX_COST...............................: ${OOPTIMIZER_INDEX_COST}"                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.087 ] OPTIMIZER_INDEX_COST...............................: ${OOPTIMIZER_INDEX_COST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.088 ] OPTIMIZER_INDEX_COST_CACH..........................: ${OOPTIMIZER_INDEX_COST_CACH}"                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.088 ] OPTIMIZER_INDEX_COST_CACH..........................: ${OOPTIMIZER_INDEX_COST_CACH}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.089 ] PARALLEL_SERV_TARGET...............................: ${PPARALLEL_SERV_TARGET}"                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.089 ] PARALLEL_SERV_TARGET...............................: ${PPARALLEL_SERV_TARGET}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.090 ] DG_BROKER_1........................................: ${DDG_BROKER_1}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.090 ] DG_BROKER_1........................................: ${DDG_BROKER_1}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.091 ] DG_BROKER_2........................................: ${DDG_BROKER_2}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.091 ] DG_BROKER_2........................................: ${DDG_BROKER_2}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.092 ] RMAN_FULL_STATUS...................................: ${RMANFULL}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.092 ] RMAN_FULL_STATUS...................................: ${RMANFULL}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.093 ] RMAN_ARCHIVE_STATUS................................: ${RMANARCH}"                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.093 ] RMAN_ARCHIVE_STATUS................................: ${RMANARCH}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.094 ] RMAN_LAST_EXECUTION................................: ${RRMANLAST}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.094 ] RMAN_LAST_EXECUTION................................: ${RRMANLAST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.095 ] DATAGUARD_NAME.....................................: ${DG_NAME}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.095 ] DATAGUARD_NAME.....................................: ${DG_NAME}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.096 ] DATAGUARD_STATUS...................................: ${DG_STATUS}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.096 ] DATAGUARD_STATUS...................................: ${DG_STATUS}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.097 ] PROTECTION_MODE....................................: ${DG_PROTECT}"                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.097 ] PROTECTION_MODE....................................: ${DG_PROTECT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.098 ] FAST_START_FAILOVER................................: ${DG_FAST}"                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.098 ] FAST_START_FAILOVER................................: ${DG_FAST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.099 ] FAST_START_FAILOVER_THRESHOLD......................: ${DG_FAST_THRES}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.099 ] FAST_START_FAILOVER_THRESHOLD......................: ${DG_FAST_THRES}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.100 ] OPERATION_TIMEOUT..................................: ${DG_OPER_TIME}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.100 ] OPERATION_TIMEOUT..................................: ${DG_OPER_TIME}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.101 ] FAST_START_FAILOVER_LAG_LIMIT......................: ${DG_FAST_LIMIT}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.101 ] FAST_START_FAILOVER_LAG_LIMIT......................: ${DG_FAST_LIMIT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.102 ] COMMUNICATION_TIMEOUT..............................: ${DG_COMM_TIME}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.102 ] COMMUNICATION_TIMEOUT..............................: ${DG_COMM_TIME}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.103 ] OBSERVER_RECONNECT.................................: ${DG_OBSER_RECO}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.103 ] OBSERVER_RECONNECT.................................: ${DG_OBSER_RECO}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.104 ] FAST_START_FAILOVER_AUTO_REINSTATE.................: ${DG_FAST_A_R}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.104 ] FAST_START_FAILOVER_AUTO_REINSTATE.................: ${DG_FAST_A_R}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.105 ] FAST_START_FAILOVER_PMY_SHUTDOWN...................: ${DG_FAST_SHUT}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.105 ] FAST_START_FAILOVER_PMY_SHUTDOWN...................: ${DG_FAST_SHUT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.106 ] BY_STANDER_FOLLOW_ROLE_CHANGE......................: ${DG_BYST_CHANG}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.106 ] BY_STANDER_FOLLOW_ROLE_CHANGE......................: ${DG_BYST_CHANG}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.107 ] OBSERVER_OVERRIDE..................................: ${DG_OBSER_OVER}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.107 ] OBSERVER_OVERRIDE..................................: ${DG_OBSER_OVER}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.108 ] EXTERNAL_DESTINATION_1.............................: ${DG_EXT_DEST1}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.108 ] EXTERNAL_DESTINATION_1.............................: ${DG_EXT_DEST1}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.109 ] EXTERNAL_DESTINATION_2.............................: ${DG_EXT_DEST}"                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.109 ] EXTERNAL_DESTINATION_2.............................: ${DG_EXT_DEST}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.110 ] PRIMARY_LOST_WRITE_ACTION..........................: ${DG_PRIMARY_ACT}"                                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.110 ] PRIMARY_LOST_WRITE_ACTION..........................: ${DG_PRIMARY_ACT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.111 ] NLS_LANGUAGE_FORMAT................................: ${NLS_LANGUAGE}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.111 ] NLS_LANGUAGE_FORMAT................................: ${NLS_LANGUAGE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.112 ] NLS_DATE_LANGUAGE..................................: ${NLS_DATE_LANGUAGE}"                                                     >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.112 ] NLS_DATE_LANGUAGE..................................: ${NLS_DATE_LANGUAGE}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.113 ] NLS_CHARACTERSET...................................: ${NLS_CHARACTERSET}"                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.113 ] NLS_CHARACTERSET...................................: ${NLS_CHARACTERSET}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.114 ] NLS_TERRITORY......................................: ${NNLS_TERRITORY}"                                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.114 ] NLS_TERRITORY......................................: ${NNLS_TERRITORY}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.115 ] NLS_ISO_CURRENCY...................................: ${NNLS_ISO_CURRENCY}"                                                     >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.115 ] NLS_ISO_CURRENCY...................................: ${NNLS_ISO_CURRENCY}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.116 ] NLS_COMP...........................................: ${NNLS_COMP}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.116 ] NLS_COMP...........................................: ${NNLS_COMP}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.117 ] NLS_SORT...........................................: ${NNLS_SORT}"                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.117 ] NLS_SORT...........................................: ${NNLS_SORT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.118 ] NLS_CURRENCY.......................................: ${NNLS_CURRENCY}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.118 ] NLS_CURRENCY.......................................: ${NNLS_CURRENCY}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.119 ] NLS_DUAL_CURRENCY..................................: ${NNLS_DUAL_CURRENCY}"                                                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.119 ] NLS_DUAL_CURRENCY..................................: ${NNLS_DUAL_CURRENCY}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.120 ] NLS_NUM_CHAR.......................................: ${NNLS_NUM_CHAR}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.120 ] NLS_NUM_CHAR.......................................: ${NNLS_NUM_CHAR}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.121 ] NLS_CALENDAR.......................................: ${NNLS_CALENDAR}"                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.121 ] NLS_CALENDAR.......................................: ${NNLS_CALENDAR}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.122 ] NLS_DATE_FORMAT....................................: ${NLS_DATE_FORMAT}"                                                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.122 ] NLS_DATE_FORMAT....................................: ${NLS_DATE_FORMAT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.123 ] NLS_TIME_FORMAT....................................: ${NNLS_TIME_FORMAT}"                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.123 ] NLS_TIME_FORMAT....................................: ${NNLS_TIME_FORMAT}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.124 ] NLS_TIMESTAMP_FOR..................................: ${NNLS_TIMESTAMP_FOR}"                                                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.124 ] NLS_TIMESTAMP_FOR..................................: ${NNLS_TIMESTAMP_FOR}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.125 ] NLS_TIME_TZ........................................: ${NNLS_TIME_TZ}"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.125 ] NLS_TIME_TZ........................................: ${NNLS_TIME_TZ}"
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.126 ] NLS_TIMESTAMP_TZ...................................: ${NNLS_TIMESTAMP_TZ}"                                                     >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 1.126 ] NLS_TIMESTAMP_TZ...................................: ${NNLS_TIMESTAMP_TZ}"
echo ">--------------------------------------------------------------------------------------------------[ DB ]"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2 ] DATABASE LEVEL"                                                                                                                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2 ] DATABASE LEVEL"
echo ">--------------------------------------------------------------------------------------------------[ DB ]"                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.01 ] DATABASE VERSION....................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.01 ] DATABASE VERSION....................................:"
func_dba_001                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.02 ] VERIFY INSTALLED PATCHES............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.02 ] VERIFY INSTALLED PATCHES............................:"
func_dba_002                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.03 ] INSTANCE INFORMATION................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.03 ] INSTANCE INFORMATION................................:"
func_dba_003                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.04 ] VERIFY DISKS SPACE AND MEMORY [ SO ]................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.04 ] VERIFY DISKS SPACE AND MEMORY [ SO ]................:"
func_dba_004_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.04 ] UPTIME SERVER + LOAD AVERAGE + OS USERS.............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.04 ] UPTIME SERVER + LOAD AVERAGE + OS USERS.............:"
func_dba_005                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.06 ] GENERAL TUNING VIEW.................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.06 ] GENERAL TUNING VIEW.................................:"
func_dba_006                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.07 ] DATABASE GROWN ON LASTS MONTHS......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.07 ] DATABASE GROWN ON LASTS MONTHS......................:"
func_dba_007_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.08 ] CONNECTIONS AVARAGE PER HOUR........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.08 ] CONNECTIONS AVARAGE PER HOUR........................:"
func_dba_008_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.09 ] TOP 10 DB-CPU ACTIVITY..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.09 ] TOP 10 DB-CPU ACTIVITY..............................:"
func_dba_009                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.10 ] VERIFY SESSIONS PER MEMORY..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.10 ] VERIFY SESSIONS PER MEMORY..........................:"
func_dba_010_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.11 ] DATABASE SIZE.......................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.11 ] DATABASE SIZE.......................................:"
func_dba_011_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.12 ] VERIFY SESSIONS PER I/O.............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.12 ] VERIFY SESSIONS PER I/O.............................:"
func_dba_012_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.13 ] HIT RATIO THE LASTS 30 DAYS.........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.13 ] HIT RATIO THE LASTS 30 DAYS.........................:"
func_dba_013                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.14 ] VERIFY LONG OPERATIONS..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.14 ] VERIFY LONG OPERATIONS..............................:"
func_dba_014_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.15 ] LOAD LASTS 1/5/10 MINUTES...........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.15 ] LOAD LASTS 1/5/10 MINUTES...........................:"
func_dba_015                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.16 ] INVALIDS OBJECTS [ @ ]..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.16 ] INVALIDS OBJECTS [ @ ]..............................:"
func_dba_016_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.17 ] JOBS CONTROL OF THE CLIENT [ @ ]....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.17 ] JOBS CONTROL OF THE CLIENT [ @ ]....................:"
func_dba_017_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.18 ] MATERIALIZEDS VIEWS DISABLEDS.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.18 ] MATERIALIZEDS VIEWS DISABLEDS.......................:"
func_dba_018                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.19 ] VERIFY RUNNING JOBS.................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.19 ] VERIFY RUNNING JOBS.................................:"
func_dba_019_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.20 ] KILL A RUNNING SESSION..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.20 ] KILL A RUNNING SESSION..............................:"
func_dba_020_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.21 ] VERIFY PROFILE INFORMATION..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.21 ] VERIFY PROFILE INFORMATION..........................:"
func_dba_021_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.22 ] BACKUP STATISTICS...................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.22 ] BACKUP STATISTICS...................................:"
func_dba_022_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.23 ] QTD OF ARCHIVES PER HOUR............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.23 ] QTD OF ARCHIVES PER HOUR............................:"
func_dba_023                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.24 ] LAST FILE OF LAST BACKUP ARCH - RMAN................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.24 ] LAST FILE OF LAST BACKUP ARCH - RMAN................:"
func_dba_024                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.25 ] LAST FILE OF LAST BACKUP FULL - RMAN................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.25 ] LAST FILE OF LAST BACKUP FULL - RMAN................:"
func_dba_025                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.26 ] ARCHIVES GENERATED PER DAY..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.26 ] ARCHIVES GENERATED PER DAY..........................:"
func_dba_026                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.27 ] BACKUP LOG OF LAST BACKUP FULL - RMAN...............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.27 ] BACKUP LOG OF LAST BACKUP FULL - RMAN...............:"
func_dba_027                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.28 ] BACKUP LOG OF LASTS ARCHIVES - RMAN.................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.28 ] BACKUP LOG OF LASTS ARCHIVES - RMAN.................:"
func_dba_028                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.29 ] ERRORS ON ALERT LOG FILE............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.29 ] ERRORS ON ALERT LOG FILE............................:"
func_dba_029                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.30 ] OEM ALERT...........................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.30 ] OEM ALERT...........................................:"
func_dba_030                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.31 ] CAPTURE STATISTICS OF DATA DICTIONARY...............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.31 ] CAPTURE STATISTICS OF DATA DICTIONARY...............:"
# func_dba_031                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.32 ] CAPTURE STATISTICS ALL DATABASE.....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.32 ] CAPTURE STATISTICS ALL DATABASE.....................:"
# func_dba_032                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.33 ] BLOCKING LOCKS......................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.33 ] BLOCKING LOCKS......................................:"
func_dba_033                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.34 ] LOCKED OBJECTS......................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.34 ] LOCKED OBJECTS......................................:"
func_dba_034                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.35 ] BLOCKING LOCKS [ SUMARY ]...........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.35 ] BLOCKING LOCKS [ SUMARY ]...........................:"
func_dba_035                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.36 ] BLOCKING LOCKS [ USER DETAILS ].....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.36 ] BLOCKING LOCKS [ USER DETAILS ].....................:"
func_dba_036                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.37 ] BLOCKING LOCKS [ WAITING SQL ]......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.37 ] BLOCKING LOCKS [ WAITING SQL ]......................:"
func_dba_037                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.38 ] LOCKED OBJECTS [ DETAILS ]..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.38 ] LOCKED OBJECTS [ DETAILS ]..........................:"
func_dba_038                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.39 ] DML AND DDL LOCKS...................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.39 ] DML AND DDL LOCKS...................................:"
func_dba_039                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.40 ] DML TABLE LOCKS TIME................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.40 ] DML TABLE LOCKS TIME................................:"
func_dba_040                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.41 ] VERIFY SESSIONS [ @ ]...............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.41 ] VERIFY SESSIONS [ @ ]...............................:"
func_dba_041_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.42 ] TOP 20 DATABASE SESSIONS............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.42 ] TOP 20 DATABASE SESSIONS............................:"
func_dba_042_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.43 ] VERIFY TABLESPACES..................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.43 ] VERIFY TABLESPACES..................................:"
func_dba_043_b                                                                                                                                                            >> ${REPORT_FILE}
if [ "${GRID_HOME}" = "" ]
then
  echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.44 ] VERIFY ASM..........................................:"                                                                        >> ${REPORT_FILE}
  echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.44 ] VERIFY ASM..........................................:"
  echo ">--------------------------------------------------------------------------------------------------"                                                              >> ${REPORT_FILE}
  echo " -- THE GRID_HOME WAS NOT CONFIGURED YET OR YOU ARE NOT USING GRID INFRASTRUCTURE --"                                                                             >> ${REPORT_FILE}
  echo " -- THE GRID_HOME WAS NOT CONFIGURED YET OR YOU ARE NOT USING GRID INFRASTRUCTURE --"
  echo ">--------------------------------------------------------------------------------------------------"                                                              >> ${REPORT_FILE}
else
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.44 ] VERIFY ASM..........................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.44 ] VERIFY ASM..........................................:"
func_dba_044                                                                                                                                                              >> ${REPORT_FILE}
fi
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.45 ] VERIFY STATISTICS - TABLES [ @ ]....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.45 ] VERIFY STATISTICS - TABLES [ @ ]....................:"
func_dba_045_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.46 ] VERIFY STATISTICS - INDEXES [ @ ]...................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.46 ] VERIFY STATISTICS - INDEXES [ @ ]...................:"
func_dba_046_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.47 ] CAPTURE STATISTICS - OWNER [ @ ]....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.47 ] CAPTURE STATISTICS - OWNER [ @ ]....................:"
func_dba_047                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.48 ] VALIDATE OBJECTS FROM ONE OWNER [ @ ]...............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.48 ] VALIDATE OBJECTS FROM ONE OWNER [ @ ]...............:"
func_dba_048                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.49 ] VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS [ @ ].....:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.49 ] VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS [ @ ].....:"
func_dba_049_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.50 ] VERIFY INSTANCE CHARACTERSET........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.50 ] VERIFY INSTANCE CHARACTERSET........................:"
func_dba_050                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.51 ] CACHE HIT RATIO [ GOOD: > 90% ].....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.51 ] CACHE HIT RATIO [ GOOD: > 90% ].....................:"
func_dba_051                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.52 ] VERIFY INSTANCE INSTALLED PRODUCTS..................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.52 ] VERIFY INSTANCE INSTALLED PRODUCTS..................:"
func_dba_052                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.53 ] INSTANCE PROPERTIES.................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.53 ] INSTANCE PROPERTIES.................................:"
func_dba_053                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.54 ] INSTANCE OPTIONS....................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.54 ] INSTANCE OPTIONS....................................:"
func_dba_054                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.55 ] INSTANCE DIFERENTS PARAMETERS.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.55 ] INSTANCE DIFERENTS PARAMETERS.......................:"
func_dba_055                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.56 ] INSTANCE MODIFICABLES PARAMETERS....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.56 ] INSTANCE MODIFICABLES PARAMETERS....................:"
func_dba_056                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.57 ] VERIFY DEAD LOCKS...................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.57 ] VERIFY DEAD LOCKS...................................:"
func_dba_057_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.58 ] VERIFY SESSIONS PER I/O CONSUME.....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.58 ] VERIFY SESSIONS PER I/O CONSUME.....................:"
func_dba_058_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.59 ] VERIFY FREE SEGMENTS ON DATAFILES...................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.59 ] VERIFY FREE SEGMENTS ON DATAFILES...................:"
# func_dba_059                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.60 ] VERIFY WHICH DATAFILES CAN BE RESIZED...............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.60 ] VERIFY WHICH DATAFILES CAN BE RESIZED...............:"
func_dba_060_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.61 ] VERIFY RECYCLEBIN...................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.61 ] VERIFY RECYCLEBIN...................................:"
func_dba_061                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.62 ] CLEAR REYICLEBIN....................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.62 ] CLEAR REYICLEBIN....................................:"
func_dba_062                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.63 ] VERIFY DATABASE SESSIONS............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.63 ] VERIFY DATABASE SESSIONS............................:"
func_dba_063_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.64 ] VERIFY ACTIVES SESSIONS PER OWNER...................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.64 ] VERIFY ACTIVES SESSIONS PER OWNER...................:"
func_dba_064_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.65 ] UNLOCKING A USUER...................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.65 ] UNLOCKING A USUER...................................:"
func_dba_065                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.66 ] LOCKING A USER......................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.66 ] LOCKING A USER......................................:"
func_dba_066                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.67 ] REDO GROUPS INFORMATIONS............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.67 ] REDO GROUPS INFORMATIONS............................:"
func_dba_067                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.68 ] VERIFY ALL GRID INFRASTRUTURE SERVICES..............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.68 ] VERIFY ALL GRID INFRASTRUTURE SERVICES..............:"
# func_os_068                                                                                                                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.69 ] VERIFY SPACE OF FLASH RECOVERY AREA.................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.69 ] VERIFY SPACE OF FLASH RECOVERY AREA.................:"
func_dba_069_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.70 ] VERIFY PLUGGABLE DATABASES..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.70 ] VERIFY PLUGGABLE DATABASES..........................:"
func_dba_070                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.71 ] VERIFY CONTROLFILES.................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.71 ] VERIFY CONTROLFILES.................................:"
func_dba_071                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.72 ] VERIFY DATAGUARD STATUS.............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.72 ] VERIFY DATAGUARD STATUS.............................:"
func_dba_072                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.73 ] VERIFY DATAGUARD PARAMETERS.........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.73 ] VERIFY DATAGUARD PARAMETERS.........................:"
func_dba_073                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.74 ] DATAGUARD STATUS APPLYING...........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.74 ] DATAGUARD STATUS APPLYING...........................:"
func_dba_074                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.75 ] VERIFY CONSUME PER CPU..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.75 ] VERIFY CONSUME PER CPU..............................:"
func_dba_075                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.76 ] QUICK TUNE..........................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.76 ] QUICK TUNE..........................................:"
func_dba_076                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.77 ] VERIFY RECOMENDATIONS TUNING TOP 20.................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.77 ] VERIFY RECOMENDATIONS TUNING TOP 20.................:"
func_dba_077                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.78 ] VERIFY TOP 20 TUNING HISTORY........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.78 ] VERIFY TOP 20 TUNING HISTORY........................:"
func_dba_078_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.79 ] VERIFY BACKGROUND PROCESSESS........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.79 ] VERIFY BACKGROUND PROCESSESS........................:"
func_dba_079                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.80 ] TOP 100 QUERY RECOMENDATIONS........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.80 ] TOP 100 QUERY RECOMENDATIONS........................:"
# func_dba_080                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.81 ] VERIFY GOLDENGATE CONFIGURATION.....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.81 ] VERIFY GOLDENGATE CONFIGURATION.....................:"
func_dba_081                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.82 ] VERIFY GOLDENGATE STATUS............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.82 ] VERIFY GOLDENGATE STATUS............................:"
func_dba_082                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.83 ] VERIFY DINAMICS PARAMETERS ( SPFILE )...............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.83 ] VERIFY DINAMICS PARAMETERS ( SPFILE )...............:"
func_dba_083                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.84 ] VERIFY DBA FEATURES USAGE STATISTICS................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.84 ] VERIFY DBA FEATURES USAGE STATISTICS................:"
func_dba_084                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.85 ] CALCULATE HUGE PAGES................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.85 ] CALCULATE HUGE PAGES................................:"
func_dba_085                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.86 ] VERIFY DBA HIGH WATER MARK STATISTICS...............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.86 ] VERIFY DBA HIGH WATER MARK STATISTICS...............:"
func_dba_086                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.87 ] GLOBAL INFORMATION ABOUT I/O........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.87 ] GLOBAL INFORMATION ABOUT I/O........................:"
func_dba_087                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.88 ] WHICH SEGMENTS HAVE TOP LOGICAL I/O & PHYSICAL I/O..:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.88 ] WHICH SEGMENTS HAVE TOP LOGICAL I/O & PHYSICAL I/O..:"
func_dba_088                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.89 ] VERIFY DBLINKS & FOLDERS INFO.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.89 ] VERIFY DBLINKS & FOLDERS INFO.......................:"
func_dba_089                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.90 ] OWNER X OBJECTS X TYPE X QTD........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.90 ] OWNER X OBJECTS X TYPE X QTD........................:"
func_dba_090_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.91 ] IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED........:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.91 ] IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED........:"
func_dba_091_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.92 ] VERIFY UNDO SEGMENTS................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.92 ] VERIFY UNDO SEGMENTS................................:"
func_dba_092                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.93 ] VERIFY DATAGUARD HEALTH CHECK.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.93 ] VERIFY DATAGUARD HEALTH CHECK.......................:"
func_dba_093                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.94 ] VERIFY ALL SQL STATEMENTS...........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.94 ] VERIFY ALL SQL STATEMENTS...........................:"
func_dba_094_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.95 ] CLONE USER COMMANDS [ @ ]...........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.95 ] CLONE USER COMMANDS [ @ ]...........................:"
# func_dba_095_b                                                                                                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.96 ] VERIFY ALL INFOS ABOUT SYSAUX.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.96 ] VERIFY ALL INFOS ABOUT SYSAUX.......................:"
func_dba_096                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.97 ] VERIFY ALL INFOS ABOUT I/O & LATENCY................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.97 ] VERIFY ALL INFOS ABOUT I/O & LATENCY................:"
func_dba_097                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.98 ] VERIFY MAIN TOP WAIT EVENTS PER WEEK................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.98 ] VERIFY MAIN TOP WAIT EVENTS PER WEEK................:"
func_dba_098                                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.99 ] VERIFY SCHEMAS SIZE.................................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.99 ] VERIFY SCHEMAS SIZE.................................:"
func_dba_099_b                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.100 ] VERIFY GENERAL INFOS...............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.100 ] VERIFY GENERAL INFOS...............................:"
func_dba_general_infos                                                                                                                                                    >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.101 ] VERIFY DATABASE PERFORMANCE........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.101 ] VERIFY DATABASE PERFORMANCE........................:"
func_dba_perform_001                                                                                                                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.102 ] VERIFY DATABASE PERFORMANCE........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.102 ] VERIFY DATABASE PERFORMANCE........................:"
func_dba_perform_002                                                                                                                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.103 ] VERIFY DATABASE PERFORMANCE........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.103 ] VERIFY DATABASE PERFORMANCE........................:"
func_dba_perform_003                                                                                                                                                      >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.104 ] VERIFY CORRUPTED OBJECTS...........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.104 ] VERIFY CORRUPTED OBJECTS...........................:"
func_corrupted                                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.105 ] VERIFY LOGIN ATTEMPT...............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.105 ] VERIFY LOGIN ATTEMPT...............................:"
func_verify_login_attempt                                                                                                                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.106 ] VERIY SNIPED SESSIONS..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.106 ] VERIY SNIPED SESSIONS..............................:"
func_verify_sniped_sessions                                                                                                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.107 ] CREATE CUSTOM REPORT OEM...........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.107 ] CREATE CUSTOM REPORT OEM...........................:"
# func_create_custom_report_oem                                                                                                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.108 ] VERIFY PARALLEL QUERIES............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.108 ] VERIFY PARALLEL QUERIES............................:"
func_verify_parallel_queries                                                                                                                                              >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.109 ] VERIFY PENDING DISTRIBUTED TRANSACTION.............:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.109 ] VERIFY PENDING DISTRIBUTED TRANSACTION.............:"
func_verify_pending_distributed_transaction                                                                                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.110 ] VERIFY EXECUTIONS HISTORY..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.110 ] VERIFY EXECUTIONS HISTORY..........................:"
func_verify_executions_history                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.111 ] VERIFY CPU USAGE WAIT..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.111 ] VERIFY CPU USAGE WAIT..............................:"
func_verify_cpu_usage_wait                                                                                                                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.112 ] VERIFY CPU MEMORY INFO.............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.112 ] VERIFY CPU MEMORY INFO.............................:"
func_verify_cpu_memory_info                                                                                                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.113 ] VERIFY USER COMMITS PER MINUTE.....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.113 ] VERIFY USER COMMITS PER MINUTE.....................:"
func_verify_user_commits_per_minute                                                                                                                                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.114 ] VERIFY SESSION CONSUMING CPU.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.114 ] VERIFY SESSION CONSUMING CPU.......................:"
func_verify_session_consuming_cpu                                                                                                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.115 ] VERIFY OS PID AND SID..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.115 ] VERIFY OS PID AND SID..............................:"
func_verify_ospid_sid                                                                                                                                                     >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.116 ] VERIFY REDO LOGS UTILIZATION.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.116 ] VERIFY REDO LOGS UTILIZATION.......................:"
func_verify_redo_logs_utilization                                                                                                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.117 ] VERIFY ALL PARTITIONS TABLES.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.117 ] VERIFY ALL PARTITIONS TABLES.......................:"
# func_verify_all_partition_tables                                                                                                                                        >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.118 ] VERIFY I/O USAGE TEMPFILES.........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.118 ] VERIFY I/O USAGE TEMPFILES.........................:"
func_verify_i_o_usage_tempfiles                                                                                                                                           >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.119 ] VERIFY HIGH WATER MARK TABLE.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.119 ] VERIFY HIGH WATER MARK TABLE.......................:"
# func_verify_high_water_mark_table                                                                                                                                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.120 ] VERIFY TABLESPACE MONITORING MULTITENANT...........:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.120 ] VERIFY TABLESPACE MONITORING MULTITENANT...........:"
func_verify_tablespace_monitoring_multitenant                                                                                                                             >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.121 ] VERIFY SESSION HOLDING LIBRARY CACHE LOCK..........:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.121 ] VERIFY SESSION HOLDING LIBRARY CACHE LOCK..........:"
func_verify_session_holding_lib_cache_lock                                                                                                                                >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.122 ] VERIFY TOP 5 CACHED SQL............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.122 ] VERIFY TOP 5 CACHED SQL............................:"
func_verify_top5_cached_sql                                                                                                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.123 ] VERIFY ACTIVE SESSIONS.............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.123 ] VERIFY ACTIVE SESSIONS.............................:"
func_verify_active_sessions                                                                                                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.124 ] VERIFY DDL TABLESPACES.............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.124 ] VERIFY DDL TABLESPACES.............................:"
func_verify_ddl_tablespaces                                                                                                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.125 ] VERIFY TABLESPACE FREE SPACE.......................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.125 ] VERIFY TABLESPACE FREE SPACE.......................:"
func_verify_tablespace_free_space                                                                                                                                         >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.126 ] VERIFY FREE SPACE UNDO.............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.126 ] VERIFY FREE SPACE UNDO.............................:"
func_verify_free_space_undo                                                                                                                                               >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.127 ] VERIFY RMAN PROGRESS...............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.127 ] VERIFY RMAN PROGRESS...............................:"
func_verify_rman_progress                                                                                                                                                 >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.128 ] VERIFY SESSION USING UNDO..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.128 ] VERIFY SESSION USING UNDO..........................:"
func_verify_session_using_undo                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.129 ] VERIFY SESSION USING TEMP..........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.129 ] VERIFY SESSION USING TEMP..........................:"
func_verify_session_using_temp                                                                                                                                            >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.130 ] VERIFY SESSION GENERATING LOGS.....................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.130 ] VERIFY SESSION GENERATING LOGS.....................:"
func_verify_session_generating_logs                                                                                                                                       >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.131 ] VERIFY LONG RUNNING QUERIES........................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.131 ] VERIFY LONG RUNNING QUERIES........................:"
func_verify_long_running_queries                                                                                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.132 ] VERIFY CROSS PLATFORM..............................:"                                                                          >> ${REPORT_FILE}
echo "`date +%Y%m%d_%H\:%M\:%S`: [ 2.132 ] VERIFY CROSS PLATFORM..............................:"
func_dba_cross_platform_b                                                                                                                                                 >> ${REPORT_FILE}
echo ">--------------------------------------------------------------------------------------------------"                                                                >> ${REPORT_FILE}
echo " -- CHECK LIST FINISHED --"                                                                                                                                         >> ${REPORT_FILE}
echo ">--------------------------------------------------------------------------------------------------"                                                                >> ${REPORT_FILE}
func_load 100
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- COMPRESSING THE REPORT FILE -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
bzip2 -9 ${REPORT_FILE}
du -sh ${REPORT_FILE}.bz2
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- SENDING REPORT FILE TO YOUR EMAIL -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
mail -s "${COMPRESS_FILE}" -a ${COMPRESS_FILE} ${EMAIL_1} < ${COMPRESS_FILE} ${EMAIL_1}
mail -s "${COMPRESS_FILE}" -a ${COMPRESS_FILE} ${EMAIL_2} < ${COMPRESS_FILE} ${EMAIL_2}
func_load 100
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- CHECK LIST FINISHED -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- The File Was Created on ${FOLDER} -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- ${COMPRESS_FILE} -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
}
#
#########################################################################################################
# Function CHECK Without Report File
#########################################################################################################
#
# 11g
function func_dba_11_check_without_report_file()
{
  echo ""
}
# 12c
function func_dba_12_check_without_report_file()
{
  echo ""
}
# 18c
function func_dba_18_check_without_report_file()
{
  echo ""
}
# 19c
function func_dba_19_check_without_report_file()
{
  echo ""
}
# 20c
function func_dba_20_check_without_report_file()
{
  echo ""
}
#
function func_dba_check_without_report_file()
{
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} HW ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0 ] ${RED} SERVER HARDWARE LEVEL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} HW ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.01 ] SERVER_HOST_NAME....................................: ${BLACK} ${GREEN} ${HOST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.02 ] SERVER_IP_ADDR......................................: ${BLACK} ${GREEN} ${IPADDR} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.03 ] SERVER_OPERATION_SYSTEM.............................: ${BLACK} ${GREEN} ${OS} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.04 ] OPERATION_SYSTEM_DISTRIBUTION.......................: ${BLACK} ${GREEN} ${OSDISTRO} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.05 ] SERVER_KERNEL_VERSION...............................: ${BLACK} ${GREEN} ${KKERNEL} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.06 ] SERVER_PROCESSES_FAMILY.............................: ${BLACK} ${GREEN} ${PFAMILY} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.07 ] SERVER_PROCESSES_TYPE...............................: ${BLACK} ${GREEN} ${PFPU_TYPE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.08 ] SERVER_PHYSICAL_PROCESSES...........................: ${BLACK} ${GREEN} ${PCPU} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.09 ] SERVER_PROCESSES....................................: ${BLACK} ${GREEN} ${CCPU} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.10 ] SERVER_DISK_SPACE_WARNING...........................: ${BLACK} ${RED} ${WARNING_SPACE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.11 ] SERVER_DISK_SPACE_CRITICAL..........................: ${BLACK} ${RED} ${CRITICAL_SPACE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.12 ] SERVER_MEMORY.......................................: ${BLACK} ${RED} ${TMEM} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.13 ] SERVER_MEMORY_USED..................................: ${BLACK} ${BLUE} ${UMEM} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.14 ] SERVER_MEMORY_FREE..................................: ${BLACK} ${GREEN} ${FMEM} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.15 ] SERVER_SWAP.........................................: ${BLACK} ${RED} ${STMEM} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.16 ] SERVER_SWAP_USED....................................: ${BLACK} ${BLUE} ${SUMEM} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.17 ] SERVER_SWAP_FREE....................................: ${BLACK} ${GREEN} ${SFMEM} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.18 ] SERVER_UPTIME.......................................: ${BLACK} ${GREEN} ${UUPTIME} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.19 ] SERVER_TEMPERATURE..................................: ${BLACK} ${GREEN} ${SRVTEMP} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.20 ] SERVER_MEMORY_BANKS.................................: ${BLACK} ${GREEN} ${SRVMEMBANK} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 0.21 ] SERVER_DISKS_BANKS..................................: ${BLACK} ${GREEN} ${SRVDISKS} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} DB ${BLACK}"
func_load 100
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} DB ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1 ] ${RED} SERVER DATABASE LEVEL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} DB ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.001 ] ORACLE_VERSION.....................................: ${BLACK} ${GREEN} ${DBVERSION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.002 ] ORACLE_RELEASE.....................................: ${BLACK} ${GREEN} ${ODBRELEASE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.003 ] ORACLE_EDITION.....................................: ${BLACK} ${GREEN} ${EEDITION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.004 ] ORACLE_HOME........................................: ${BLACK} ${GREEN} ${ORACLE_HOME} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.005 ] DATABASE_UPTIME....................................: ${BLACK} ${GREEN} ${DDBUPTIME} ${BLACK} ${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.006 ] DATABASE_WAS_UPDATED_ON............................: ${BLACK} ${GREEN} ${VVERSIONTIME} ${BLACK} ${BLUE} ${VVERSIONTIMED} Day(s) AGO ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.007 ] ORA-00600_LASTS_30_DAY(S)..........................: ${BLACK} ${RED} ${OORA600} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.008 ] ERRORS_ON_ALERTLOG_LASTS_15_DAY(S).................: ${BLACK} ${RED} ${EERRORS} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.009 ] DATABASE_OPEN_MODE.................................: ${BLACK} ${GREEN} ${DDBMODE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.010 ] DATABASE_ACTIVE_STATE..............................: ${BLACK} ${GREEN} ${AACTSTATE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.011 ] DATABASE_ROLE......................................: ${BLACK} ${GREEN} ${DDBROLE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.012 ] DATABASE_NAME......................................: ${BLACK} ${GREEN} ${ORACLE_SID} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.013 ] DATABASE_UNIQUE_NAME...............................: ${BLACK} ${GREEN} ${DBUNNAME} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.014 ] DATABASE_SERVICE_NAME..............................: ${BLACK} ${GREEN} ${DBSERVNAME} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.015 ] DATABASE_BUFFER_CACHE..............................: ${BLACK} ${GREEN} ${DDBBUFFERK}(K) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.016 ] DATABASE_BLOCK_SIZE................................: ${BLACK} ${GREEN} ${DDBSIZEK}(K) ${BLACK} ${BLUE} ${DDBSIZEM}(M) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.017 ] DATABASE_SIZE......................................: ${BLACK} ${GREEN} ${DDB_SIZEM}(M) ${BLACK} ${BLUE} ${DDB_SIZEG}(G) ${BLACK} ${YEL} ${DDB_SIZET}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.018 ] DATABASE_CACHE_SIZE................................: ${BLACK} ${GREEN} ${DDBCACHESIZEK}(K) ${BLACK} ${BLUE} ${DDBCACHESIZEM}(M) ${BLACK} ${YEL} ${DDBCACHESIZEG}(G) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.019 ] TABLESPACE_SIZE_WARNING............................: ${BLACK} ${RED} ${TTBS_WARNING} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.020 ] TABLESPACE_SIZE_CRITICAL...........................: ${BLACK} ${RED} ${TTBS_CRITICAL} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.021 ] INSTANCE_SCN.......................................: ${BLACK} ${GREEN} ${DDBSCN} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.022 ] INSTANCE_MEM_MAX_TARGET............................: ${BLACK} ${GREEN} ${MMEMMAXM}(M) ${BLACK} ${BLUE} ${MMEMMAXG}(G) ${BLACK} ${YEL} ${MMEMMAXT}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.023 ] INSTANCE_MEM_TARGET................................: ${BLACK} ${GREEN} ${MMENTARGETM}(M) ${BLACK} ${BLUE} ${MMENTARGETG}(G) ${BLACK} ${YEL} ${MMENTARGETT}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.024 ] INSTANCE_SGA_MAX_SIZE..............................: ${BLACK} ${GREEN} ${SSGAMAXM}(M) ${BLACK} ${BLUE} ${SSGAMAXG}(G) ${BLACK} ${YEL} ${SSGAMAXT}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.025 ] INSTANCE_SGA_TARGET................................: ${BLACK} ${GREEN} ${SSGATARGETM}(M) ${BLACK} ${BLUE} ${SSGATARGETG}(G) ${BLACK} ${YEL} ${SSGATARGETT}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.026 ] INSTANCE_PGA_AGGREGATE_TARGET......................: ${BLACK} ${GREEN} ${PPGATARGETK}(K) ${BLACK} ${BLUE} ${PPGATARGETM}(M) ${BLACK} ${YEL} ${PPGATARGETG}(G) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.027 ] INSTANCE_PGA_AGGREGATE_LIMIT.......................: ${BLACK} ${GREEN} ${PPGALIMITK}(K) ${BLACK} ${BLUE} ${PPGALIMITM}(M) ${BLACK} ${YEL} ${PPGALIMITG}(G) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.028 ] INSTANCE_SHARED_POOL_SIZE..........................: ${BLACK} ${GREEN} ${SSHAREDPOOLK}(K) ${BLACK} ${BLUE} ${SSHAREDPOOLM}(M) ${BLACK} ${YEL} ${SSHAREDPOOLG}(G) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.029 ] ASM / RAC..........................................: ${BLACK} ${GREEN} ASM: ${ISASM} ${BLACK}# ${BLUE} RAC: ${ISRACDB} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.030 ] ARCHIVE............................................: ${BLACK} ${GREEN} ${ARCH} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.031 ] ACTIVE_DATAGUARD...................................: ${BLACK} ${GREEN} ${ISDG_ACT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.032 ] DATAGUARD..........................................: ${BLACK} ${GREEN} ${ISDGDB} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.033 ] EXADATA............................................: ${BLACK} ${GREEN} ${ISEXADATAOK} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.034 ] GOLDENGATE.........................................: ${BLACK} ${GREEN} ${OOGG} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.035 ] MULTIMEDIA_( < 19c )...............................: ${BLACK} ${GREEN} ${OORAMULTIMEDIA} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.036 ] ORACLE_VAULT.......................................: ${BLACK} ${GREEN} ${OVAULT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.037 ] PARTITIONING.......................................: ${BLACK} ${GREEN} ${DDBPART} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.038 ] CLUSTER_DATABASE...................................: ${BLACK} ${GREEN} ${ISRACDB} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.039 ] SPATIAL............................................: ${BLACK} ${GREEN} ${DDBSPAT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.040 ] SQL_TUNING.........................................: ${BLACK} ${GREEN} ${SSQLTUN} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.041 ] TEXT...............................................: ${BLACK} ${GREEN} ${OORATEXT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.042 ] INVALID_OBJECTS....................................: ${BLACK} ${RED} ${IINVOBJ} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.043 ] TOTAL_LOG_GROUP....................................: ${BLACK} ${RED} ${LLOG_GROUPT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.044 ] TOTAL_STANDBY_LOG_GROUP............................: ${BLACK} ${RED} ${LLOG_STB_GROUPT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.045 ] LOG_GROUP_ACTIVE...................................: ${BLACK} ${RED} ${LLOG_GROUPA} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.046 ] LOG_GROUP_INACTIVE.................................: ${BLACK} ${RED} ${LLOG_GROUPI} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.047 ] ONLINE_REDOLOG.....................................: ${BLACK} ${GREEN} ${RREDO} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.048 ] STANDBY_REDOLOG....................................: ${BLACK} ${GREEN} ${SSREDO} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.049 ] ONLYNE_REDOLOG_SIZE................................: ${BLACK} ${GREEN} ${RREDOM}(M) ${BLACK} ${BLUE} ${RREDOG}(G) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.050 ] STANDBY_REDOLOG_SIZE...............................: ${BLACK} ${GREEN} ${SSREDOM}(M) ${BLACK} ${BLUE} ${SSREDOG}(G) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.051 ] PROTECTION_MODE....................................: ${BLACK} ${GREEN} ${PPROTMODE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.052 ] STBY_FILE_MANAGEMENT...............................: ${BLACK} ${GREEN} ${SSTBYFILEMAN} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.053 ] FORCE_LOGGING......................................: ${BLACK} ${GREEN} ${DDBFLOG} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.054 ] FLASHBACK..........................................: ${BLACK} ${GREEN} ${DDBFLASHB} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.055 ] FLASHBACK_SIZE.....................................: ${BLACK} ${GREEN} ${FFLASHSIZEM}(M) ${BLACK} ${BLUE} ${FFLASHSIZEG}(G) ${BLACK} ${YEL} ${FFLASHSIZET}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.056 ] FLASHBACK_RETENTION................................: ${BLACK} ${GREEN} ${FFLASHRETM}(M) ${BLACK} ${BLUE} ${FFLASHRETH}(H) ${BLACK} ${YEL} ${FFLASHRETD}(D) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.057 ] UNDO_RETENTION.....................................: ${BLACK} ${GREEN} ${UUNDOS}(S) ${BLACK} ${BLUE} ${UUNDOM}(M) ${BLACK} ${YEL} ${UUNDOH}(H) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.058 ] UNDO_MANAGEMENT....................................: ${BLACK} ${GREEN} ${UUNDO_MANAG} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.059 ] ARCH_LAG_TARGET....................................: ${BLACK} ${RED} ${AARCHLAG} ${BLACK} ${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK} ${YEL} ${AARCHLAGTIMEH}(H) ${BLACK} ${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.060 ] LOG_ARCH_FORMAT....................................: ${BLACK} ${GREEN} ${LLOGARCHFOR} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.061 ] OPEN_CURSORS.......................................: ${BLACK} ${GREEN} ${OOPENCUR} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.062 ] PROCESSES..........................................: ${BLACK} ${GREEN} ${PPROCESS} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.063 ] RECYCLEBIN.........................................: ${BLACK} ${GREEN} ${RRECYCLEBIN} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.064 ] CONTROL_FILE.......................................: ${BLACK} ${GREEN} ${CCTRL} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.065 ] CPU_COUNT:.........................................: ${BLACK} ${GREEN} ${CCPU_COUNT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.066 ] SPFILE.............................................: ${BLACK} ${GREEN} ${SSPFILE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.067 ] COMPATIBLE.........................................: ${BLACK} ${GREEN} ${CCOMPATIBLE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.068 ] STBY_ARCH_DEST.....................................: ${BLACK} ${GREEN} ${SSTBY_ARCH_DEST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.069 ] FAL_CLIENT.........................................: ${BLACK} ${GREEN} ${FFAL_CLIENT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.070 ] FAL_SERVER.........................................: ${BLACK} ${GREEN} ${FFAL_SERVER} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.071 ] DB_FILES_TOTAL.....................................: ${BLACK} ${GREEN} ${DDB_FILES} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.072 ] DB_FILES_NOW.......................................: ${BLACK} ${GREEN} ${DDB_FILES_NOW} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.073 ] PARALLEL_SERVER....................................: ${BLACK} ${GREEN} ${PPARALLEL_SERV} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.074 ] DB_RECOVERY_FILE_DEST..............................: ${BLACK} ${GREEN} ${DDB_REC_FILE_DEST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.075 ] DB_RECOVERY_FILE_SIZE..............................: ${BLACK} ${GREEN} ${DDB_REC_FILE_SIZEG}(G) ${BLACK} ${BLUE} ${DDB_REC_FILE_SIZET}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.076 ] DB_RECOVERY_DEST_SIZE..............................: ${BLACK} ${GREEN} ${DDBRECSIZEG}(G) ${BLACK} ${BLUE} ${DDBRECSIZET}(T) ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.077 ] DB_RECOVERY_DEST_SIZE_USED.........................: ${BLACK} ${GREEN} ${DDBRECSIZEUM}(M) ${BLACK} ${BLUE} ${DDBRECSIZEUG}(G) ${BLACK} ${RED} ${DDBRECSIZEUP}% ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.078 ] FAST_START_MTTR....................................: ${BLACK} ${GREEN} ${FFAST_START_MTTR} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.079 ] PARALLEL_MIN_SERVER................................: ${BLACK} ${GREEN} ${PPARALLEL_MIN_SERV} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.080 ] PARALLEL_MAX_SERVER................................: ${BLACK} ${GREEN} ${PPARALLEL_MAX_SERV} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.081 ] AUDIT_FILE_DEST....................................: ${BLACK} ${GREEN} ${AAUDIT_FILE_DEST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.082 ] PARALLEL_DEG_POLICY................................: ${BLACK} ${GREEN} ${PPARALLEL_DEG_POL} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.083 ] PARALLEL_ADAP_M....................................: ${BLACK} ${GREEN} ${PPARALLEL_ADAP_M} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.084 ] PARALLEL_THREAD_CPU................................: ${BLACK} ${GREEN} ${PPARALLEL_THREAD_CPU} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.085 ] PARALLEL_AUTO_TUNING...............................: ${BLACK} ${GREEN} ${PPARALLEL_AUTO_TUNING} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.086 ] PARALLEL_IO_CAP....................................: ${BLACK} ${GREEN} ${PPARALLEL_IO_CAP} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.087 ] OPTIMIZER_INDEX_COST...............................: ${BLACK} ${GREEN} ${OOPTIMIZER_INDEX_COST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.088 ] OPTIMIZER_INDEX_COST_CACH..........................: ${BLACK} ${GREEN} ${OOPTIMIZER_INDEX_COST_CACH} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.089 ] PARALLEL_SERV_TARGET...............................: ${BLACK} ${GREEN} ${PPARALLEL_SERV_TARGET} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.090 ] DG_BROKER_1........................................: ${BLACK} ${GREEN} ${DDG_BROKER_1} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.091 ] DG_BROKER_2........................................: ${BLACK} ${GREEN} ${DDG_BROKER_2} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.092 ] RMAN_FULL_STATUS...................................: ${BLACK} ${GREEN} ${RMANFULL} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.093 ] RMAN_ARCHIVE_STATUS................................: ${BLACK} ${GREEN} ${RMANARCH} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.094 ] RMAN_LAST_EXECUTION................................: ${BLACK} ${GREEN} ${RRMANLAST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.095 ] DATAGUARD_NAME.....................................: ${BLACK} ${GREEN} ${DG_NAME} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.096 ] DATAGUARD_STATUS...................................: ${BLACK} ${GREEN} ${DG_STATUS} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.097 ] PROTECTION_MODE....................................: ${BLACK} ${GREEN} ${DG_PROTECT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.098 ] FAST_START_FAILOVER................................: ${BLACK} ${GREEN} ${DG_FAST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.099 ] FAST_START_FAILOVER_THRESHOLD......................: ${BLACK} ${GREEN} ${DG_FAST_THRES} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.100 ] OPERATION_TIMEOUT..................................: ${BLACK} ${GREEN} ${DG_OPER_TIME} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.101 ] FAST_START_FAILOVER_LAG_LIMIT......................: ${BLACK} ${GREEN} ${DG_FAST_LIMIT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.102 ] COMMUNICATION_TIMEOUT..............................: ${BLACK} ${GREEN} ${DG_COMM_TIME} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.103 ] OBSERVER_RECONNECT.................................: ${BLACK} ${GREEN} ${DG_OBSER_RECO} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.104 ] FAST_START_FAILOVER_AUTO_REINSTATE.................: ${BLACK} ${GREEN} ${DG_FAST_A_R} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.105 ] FAST_START_FAILOVER_PMY_SHUTDOWN...................: ${BLACK} ${GREEN} ${DG_FAST_SHUT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.106 ] BY_STANDER_FOLLOW_ROLE_CHANGE......................: ${BLACK} ${GREEN} ${DG_BYST_CHANG} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.107 ] OBSERVER_OVERRIDE..................................: ${BLACK} ${GREEN} ${DG_OBSER_OVER} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.108 ] EXTERNAL_DESTINATION_1.............................: ${BLACK} ${GREEN} ${DG_EXT_DEST1} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.109 ] EXTERNAL_DESTINATION_2.............................: ${BLACK} ${GREEN} ${DG_EXT_DEST} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.110 ] PRIMARY_LOST_WRITE_ACTION..........................: ${BLACK} ${GREEN} ${DG_PRIMARY_ACT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.111 ] NLS_LANGUAGE_FORMAT................................: ${BLACK} ${GREEN} ${NLS_LANGUAGE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.112 ] NLS_DATE_LANGUAGE..................................: ${BLACK} ${GREEN} ${NLS_DATE_LANGUAGE} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.113 ] NLS_CHARACTERSET...................................: ${BLACK} ${GREEN} ${NLS_CHARACTERSET} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.114 ] NLS_TERRITORY......................................: ${BLACK} ${GREEN} ${NNLS_TERRITORY} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.115 ] NLS_ISO_CURRENCY...................................: ${BLACK} ${GREEN} ${NNLS_ISO_CURRENCY} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.116 ] NLS_COMP...........................................: ${BLACK} ${GREEN} ${NNLS_COMP} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.117 ] NLS_SORT...........................................: ${BLACK} ${GREEN} ${NNLS_SORT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.118 ] NLS_CURRENCY.......................................: ${BLACK} ${GREEN} ${NNLS_CURRENCY} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.119 ] NLS_DUAL_CURRENCY..................................: ${BLACK} ${GREEN} ${NNLS_DUAL_CURRENCY} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.120 ] NLS_NUM_CHAR.......................................: ${BLACK} ${GREEN} ${NNLS_NUM_CHAR} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.121 ] NLS_CALENDAR.......................................: ${BLACK} ${GREEN} ${NNLS_CALENDAR} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.122 ] NLS_DATE_FORMAT....................................: ${BLACK} ${GREEN} ${NLS_DATE_FORMAT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.123 ] NLS_TIME_FORMAT....................................: ${BLACK} ${GREEN} ${NNLS_TIME_FORMAT} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.124 ] NLS_TIMESTAMP_FOR..................................: ${BLACK} ${GREEN} ${NNLS_TIMESTAMP_FOR} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.125 ] NLS_TIME_TZ........................................: ${BLACK} ${GREEN} ${NNLS_TIME_TZ} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.126 ] NLS_TIMESTAMP_TZ...................................: ${BLACK} ${GREEN} ${NNLS_TIMESTAMP_TZ} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} DB ${BLACK}"
func_load 100
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} DB ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2 ] ${RED} DATABASE LEVEL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} DB ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.01 ] DATABASE VERSION....................................: ${BLACK}"
func_dba_001
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.02 ] VERIFY INSTALLED PATCHES............................: ${BLACK}"
func_dba_002
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.03 ] INSTANCE INFORMATION................................: ${BLACK}"
func_dba_003
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.04 ] VERIFY DISKS SPACE AND MEMORY [ SO ]................: ${BLACK}"
func_dba_004
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.05 ] UPTIME SERVER + LOAD AVERAGE + OS USERS.............: ${BLACK}"
func_dba_005
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.06 ] GENERAL TUNING VIEW.................................: ${BLACK}"
func_dba_006
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.07 ] DATABASE GROWN ON LASTS MONTHS......................: ${BLACK}"
func_dba_007_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.08 ] CONNECTIONS AVARAGE PER HOUR........................: ${BLACK}"
func_dba_008_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.09 ] TOP 10 DB-CPU ACTIVITY..............................: ${BLACK}"
func_dba_009
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.10 ] VERIFY SESSIONS PER MEMORY..........................: ${BLACK}"
func_dba_010_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.11 ] DATABASE SIZE.......................................: ${BLACK}"
func_dba_011_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.12 ] VERIFY SESSIONS PER I/O.............................: ${BLACK}"
func_dba_012_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.13 ] HIT RATIO THE LASTS 30 DAYS.........................: ${BLACK}"
func_dba_013
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.14 ] VERIFY LONG OPERATIONS..............................: ${BLACK}"
func_dba_014_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.15 ] LOAD LASTS 1/5/10 MINUTES...........................: ${BLACK}"
func_dba_015
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.16 ] INVALIDS OBJECTS [ @ ]..............................: ${BLACK}"
func_dba_016_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.17 ] JOBS CONTROL OF THE CLIENT [ @ ]....................: ${BLACK}"
func_dba_017_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.18 ] MATERIALIZEDS VIEWS DISABLEDS.......................: ${BLACK}"
func_dba_018
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.19 ] VERIFY RUNNING JOBS.................................: ${BLACK}"
func_dba_019_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.20 ] KILL A RUNNING SESSION..............................: ${BLACK}"
func_dba_020_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.21 ] VERIFY PROFILE INFORMATION..........................: ${BLACK}"
func_dba_021_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.22 ] BACKUP STATISTICS...................................: ${BLACK}"
func_dba_022_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.23 ] QTD OF ARCHIVES PER HOUR............................: ${BLACK}"
func_dba_023
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.24 ] LAST FILE OF LAST BACKUP ARCH - RMAN................: ${BLACK}"
func_dba_024
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.25 ] LAST FILE OF LAST BACKUP FULL - RMAN................: ${BLACK}"
func_dba_025
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.26 ] ARCHIVES GENERATED PER DAY..........................: ${BLACK}"
func_dba_026
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.27 ] BACKUP LOG OF LAST BACKUP FULL - RMAN...............: ${BLACK}"
func_dba_027
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.28 ] BACKUP LOG OF LASTS ARCHIVES - RMAN.................: ${BLACK}"
func_dba_028
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.29 ] ERRORS ON ALERT LOG FILE............................: ${BLACK}"
func_dba_029
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.30 ] OEM ALERT...........................................: ${BLACK}"
func_dba_030
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.31 ] CAPTURE STATISTICS OF DATA DICTIONARY...............: ${BLACK}"
# func_dba_031
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 1.32 ] CAPTURE STATISTICS ALL DATABASE.....................: ${BLACK}"
# func_dba_032
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.33 ] BLOCKING LOCKS......................................: ${BLACK}"
func_dba_033
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.34 ] LOCKED OBJECTS......................................: ${BLACK}"
func_dba_034
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.35 ] BLOCKING LOCKS [ SUMARY ]...........................: ${BLACK}"
func_dba_035
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.36 ] BLOCKING LOCKS [ USER DETAILS ].....................: ${BLACK}"
func_dba_036
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.37 ] BLOCKING LOCKS [ WAITING SQL ]......................: ${BLACK}"
func_dba_037
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.38 ] LOCKED OBJECTS [ DETAILS ]..........................: ${BLACK}"
func_dba_038
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.39 ] DML AND DDL LOCKS...................................: ${BLACK}"
func_dba_039
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.40 ] DML TABLE LOCKS TIME................................: ${BLACK}"
func_dba_040
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.41 ] VERIFY SESSIONS [ @ ]...............................: ${BLACK}"
func_dba_041_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.42 ] TOP 20 DATABASE SESSIONS............................: ${BLACK}"
func_dba_042_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.43 ] VERIFY TABLESPACES..................................: ${BLACK}"
func_dba_043_b
if [ "${GRID_HOME}" = "" ]
then
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.44 ] VERIFY ASM..........................................: ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} " -- THE GRID_HOME WAS NOT CONFIGURED YET OR YOU ARE NOT USING GRID INFRASTRUCTURE --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.44 ] VERIFY ASM..........................................: ${BLACK}"
func_dba_044
fi
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.45 ] VERIFY STATISTICS - TABLES [ @ ]....................: ${BLACK}"
func_dba_045_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.46 ] VERIFY STATISTICS - INDEXES [ @ ]...................: ${BLACK}"
func_dba_046_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.47 ] CAPTURE STATISTICS - OWNER [ @ ]....................: ${BLACK}"
func_dba_047
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.48 ] VALIDATE OBJECTS FROM ONE OWNER [ @ ]...............: ${BLACK}"
func_dba_048
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.49 ] VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS [ @ ].....: ${BLACK}"
func_dba_049_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.50 ] VERIFY INSTANCE CHARACTERSET........................: ${BLACK}"
func_dba_050
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.51 ] CACHE HIT RATIO [ GOOD: > 90% ].....................: ${BLACK}"
func_dba_051
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.52 ] VERIFY INSTANCE INSTALLED PRODUCTS..................: ${BLACK}"
func_dba_052
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.53 ] INSTANCE PROPERTIES.................................: ${BLACK}"
func_dba_053
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.54 ] INSTANCE OPTIONS....................................: ${BLACK}"
func_dba_054
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.55 ] INSTANCE DIFERENTS PARAMETERS.......................: ${BLACK}"
func_dba_055
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.56 ] INSTANCE MODIFICABLES PARAMETERS....................: ${BLACK}"
func_dba_056
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.57 ] VERIFY DEAD LOCKS...................................: ${BLACK}"
func_dba_057_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.58 ] VERIFY SESSIONS PER I/O CONSUME.....................: ${BLACK}"
func_dba_058_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.59 ] VERIFY FREE SEGMENTS ON DATAFILES...................: ${BLACK}"
# func_dba_059
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.60 ] VERIFY WHICH DATAFILES CAN BE RESIZED...............: ${BLACK}"
func_dba_060_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.61 ] VERIFY RECYCLEBIN...................................: ${BLACK}"
func_dba_061
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.62 ] CLEAR REYICLEBIN....................................: ${BLACK}"
func_dba_062
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.63 ] VERIFY DATABASE SESSIONS............................: ${BLACK}"
func_dba_063_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.64 ] VERIFY ACTIVES SESSIONS PER OWNER...................: ${BLACK}"
func_dba_064_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.65 ] UNLOCKING A USUER...................................: ${BLACK}"
func_dba_065
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.66 ] LOCKING A USER......................................: ${BLACK}"
func_dba_066
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.67 ] REDO GROUPS INFORMATIONS............................: ${BLACK}"
func_dba_067
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.68 ] VERIFY ALL GRID INFRASTRUTURE SERVICES..............: ${BLACK}"
# func_os_068
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.69 ] VERIFY SPACE OF FLASH RECOVERY AREA.................: ${BLACK}"
func_dba_069_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.70 ] VERIFY PLUGGABLE DATABASES..........................: ${BLACK}"
func_dba_070
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.71 ] VERIFY CONTROLFILES.................................: ${BLACK}"
func_dba_071
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.72 ] VERIFY DATAGUARD STATUS.............................: ${BLACK}"
func_dba_072
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.73 ] VERIFY DATAGUARD PARAMETERS.........................: ${BLACK}"
func_dba_073
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.74 ] DATAGUARD STATUS APPLYING...........................: ${BLACK}"
func_dba_074
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.75 ] VERIFY CONSUME PER CPU..............................: ${BLACK}"
func_dba_075
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.76 ] QUICK TUNE..........................................: ${BLACK}"
func_dba_076
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.77 ] VERIFY RECOMENDATIONS TUNING TOP 20.................: ${BLACK}"
func_dba_077
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.78 ] VERIFY TOP 20 TUNING HISTORY........................: ${BLACK}"
func_dba_078_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.79 ] VERIFY BACKGROUND PROCESSESS........................: ${BLACK}"
func_dba_079
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.80 ] TOP 100 QUERY RECOMENDATIONS........................: ${BLACK}"
# func_dba_080
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.81 ] VERIFY GOLDENGATE CONFIGURATION.....................: ${BLACK}"
func_dba_081
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.82 ] VERIFY GOLDENGATE STATUS............................: ${BLACK}"
func_dba_082
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.83 ] VERIFY DINAMICS PARAMETERS [ SPFILE ]...............: ${BLACK}"
func_dba_083
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.84 ] VERIFY DBA FEATURES USAGE STATISTICS................: ${BLACK}"
func_dba_084
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.85 ] CALCULATE HUGE PAGES................................: ${BLACK}"
func_dba_085
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.86 ] VERIFY DBA HIGH WATER MARK STATISTICS...............: ${BLACK}"
func_dba_086
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.87 ] GLOBAL INFORMATION ABOUT I/O........................: ${BLACK}"
func_dba_087
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.88 ] WHICH SEGMENTS HAVE TOP LOGICAL I/O & PHYSICAL I/O..: ${BLACK}"
func_dba_088
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.89 ] VERIFY DBLINKS & FOLDERS INFO.......................: ${BLACK}"
func_dba_089
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.90 ] OWNER X OBJECTS X TYPE X QTD........................: ${BLACK}"
func_dba_090_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.91 ] IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED........: ${BLACK}"
func_dba_091_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.92 ] VERIFY UNDO SEGMENTS................................: ${BLACK}"
func_dba_092
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.93 ] VERIFY DATAGUARD HEALTH CHECK.......................: ${BLACK}"
func_dba_093
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.94 ] VERIFY ALL SQL STATEMENTS...........................: ${BLACK}"
func_dba_094_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.95 ] CLONE USER COMMANDS [ @ ]...........................: ${BLACK}"
# func_dba_095_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.96 ] VERIFY ALL INFOS ABOUT SYSAUX.......................: ${BLACK}"
func_dba_096
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.97 ] VERIFY ALL INFOS ABOUT I/O & LATENCY................: ${BLACK}"
func_dba_097
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.98 ] VERIFY MAIN TOP WAIT EVENTS PER WEEK................: ${BLACK}"
func_dba_098
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.99 ] VERIFY SCHEMAS SIZE.................................: ${BLACK}"
func_dba_099_b
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.100 ] VERIFY GENERAL INFOS...............................: ${BLACK}"
func_dba_general_infos
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.101 ] VERIFY DATABASE PERFORMANCE........................: ${BLACK}"
func_dba_perform_001
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.102 ] VERIFY DATABASE PERFORMANCE........................: ${BLACK}"
func_dba_perform_002
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.103 ] VERIFY DATABASE PERFORMANCE........................: ${BLACK}"
func_dba_perform_003
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.104 ] VERIFY CORRUPTED OBJECTS...........................: ${BLACK}"
func_corrupted
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.105 ] VERIFY LOGIN ATTEMPT...............................: ${BLACK}"
func_verify_login_attempt
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.106 ] VERIY SNIPED SESSIONS..............................: ${BLACK}"
func_verify_sniped_sessions
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.107 ] CREATE CUSTOM REPORT OEM...........................: ${BLACK}"
# func_create_custom_report_oem
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.108 ] VERIFY PARALLEL QUERIES............................: ${BLACK}"
func_verify_parallel_queries
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.109 ] VERIFY PENDING DISTRIBUTED TRANSACTION.............: ${BLACK}"
func_verify_pending_distributed_transaction
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.110 ] VERIFY EXECUTIONS HISTORY..........................: ${BLACK}"
func_verify_executions_history
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.111 ] VERIFY CPU USAGE WAIT..............................: ${BLACK}"
func_verify_cpu_usage_wait
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.112 ] VERIFY CPU MEMORY INFO.............................: ${BLACK}"
func_verify_cpu_memory_info
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.113 ] VERIFY USER COMMITS PER MINUTE.....................: ${BLACK}"
func_verify_user_commits_per_minute
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.114 ] VERIFY SESSION CONSUMING CPU.......................: ${BLACK}"
func_verify_session_consuming_cpu
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.115 ] VERIFY OS PID AND SID..............................: ${BLACK}"
func_verify_ospid_sid
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.116 ] VERIFY REDO LOGS UTILIZATION.......................: ${BLACK}"
func_verify_redo_logs_utilization
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.117 ] VERIFY ALL PARTITIONS TABLES.......................: ${BLACK}"
# func_verify_all_partition_tables
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.118 ] VERIFY I/O USAGE TEMPFILES.........................: ${BLACK}"
func_verify_i_o_usage_tempfiles
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.119 ] VERIFY HIGH WATER MARK TABLE.......................: ${BLACK}"
# func_verify_high_water_mark_table
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.120 ] VERIFY TABLESPACE MONITORING MULTITENANT...........: ${BLACK}"
func_verify_tablespace_monitoring_multitenant
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.121 ] VERIFY SESSION HOLDING LIBRARY CACHE LOCK..........: ${BLACK}"
func_verify_session_holding_lib_cache_lock
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.122 ] VERIFY TOP 5 CACHED SQL............................: ${BLACK}"
func_verify_top5_cached_sql
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.123 ] VERIFY ACTIVE SESSIONS.............................: ${BLACK}"
func_verify_active_sessions
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.124 ] VERIFY DDL TABLESPACES.............................: ${BLACK}"
func_verify_ddl_tablespaces
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.125 ] VERIFY TABLESPACE FREE SPACE.......................: ${BLACK}"
func_verify_tablespace_free_space
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.126 ] VERIFY FREE SPACE UNDO.............................: ${BLACK}"
func_verify_free_space_undo
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.127 ] VERIFY RMAN PROGRESS...............................: ${BLACK}"
func_verify_rman_progress
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.128 ] VERIFY SESSION USING UNDO..........................: ${BLACK}"
func_verify_session_using_undo
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.129 ] VERIFY SESSION USING TEMP..........................: ${BLACK}"
func_verify_session_using_temp
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.130 ] VERIFY SESSION GENERATING LOGS.....................: ${BLACK}"
func_verify_session_generating_logs
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.131 ] VERIFY LONG RUNNING QUERIES........................: ${BLACK}"
func_verify_long_running_queries
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} [ 2.132 ] VERIFY CROSS PLATFORM..............................: ${BLACK}"
func_dba_cross_platform_b
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- CHECK LIST FINISHED -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- PRESS ENTER TO CONTINUE -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
}
#
#########################################################################################################
# Functions
#########################################################################################################
#
#########################################################################################################
# "DATABASE VERSION"
#########################################################################################################
#
# 11g
function func_dba_11_001()
{
  echo ""
}
# 12c
function func_dba_12_001()
{
  echo ""
}
# 18c
function func_dba_18_001()
{
  echo ""
}
# 19c
function func_dba_19_001()
{
  echo ""
}
# 20c
function func_dba_20_001()
{
  echo ""
}
#
function func_dba_001()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col INSTANCE for a10
col SERVER for a50
col VERSION for a20
col STATUS for a8
col active_state for a12
col "STARTUP TIME" for a20
select INSTANCE_NAME AS INSTANCE
  , HOST_NAME AS SERVER
  , VERSION
  , STATUS
  , active_state
  , to_char(startup_time,'dd/mm/yyyy hh24:mi') as "STARTUP TIME"
  , case when startup_time < sysdate then 'Status OK' when startup_time < sysdate - 7 then 'DB Restarted' else 'Verify Restarted DB' end as "Status DB"
from gv\$instance;
quit;
EOF
}
#
#########################################################################################################
# VERIFY INSTALLED PATCHES
#########################################################################################################
#
# 11g
function func_dba_11_002()
{
  echo ""
}
# 12c
function func_dba_12_002()
{
  echo ""
}
# 18c
function func_dba_18_002()
{
  echo ""
}
# 19c
function func_dba_19_002()
{
  echo ""
}
# 20c
function func_dba_20_002()
{
  echo ""
}
#
function func_dba_002()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
exec dbms_qopatch.get_sqlpatch_status;
set pages 700 lines 700 timing on feedback on colsep '|'
prompt ##############################################################
prompt # Patches Status                                             #
prompt ##############################################################
col time for a25
col "Target" for a30
col "Action" for a100
col action_time for a40
col product for a50
col version for a30
col status for a30
col comments for a30
prompt Registry History
select to_char(action_time,'dd/mm/yyyy HH24:MI:SS') time
  , namespace || ' ' || version as "Target"
  , action || ' ' || comments as "Action"
  , version
  , case when action_time < sysdate - 120 then 'Need Patch Apply' else 'Updated Recently' end as "Patch Info"
from dba_registry_history;
prompt ##############################################################
prompt # PSU History                                                #
prompt ##############################################################
col action for a100
col version for a15
select to_char(action_time,'dd/mm/yyyy HH24:MI:SS') as TIME
  , ACTION
  , NAMESPACE
  , VERSION
  , BUNDLE_SERIES
  , COMMENTS
from sys.registry\$history
where bundle_series = 'PSU'
order by action_time;
prompt ##############################################################
prompt # Product Components                                         #
prompt ##############################################################
select PRODUCT
  , VERSION
  , status
FROM SYS.PRODUCT_COMPONENT_VERSION;
quit;
EOF
}
#
#########################################################################################################
# INSTANCE INFORMATION
#########################################################################################################
#
# 11g
function func_dba_11_003()
{
  echo ""
}
# 12c
function func_dba_12_003()
{
  echo ""
}
# 18c
function func_dba_18_003()
{
  echo ""
}
# 19c
function func_dba_19_003()
{
  echo ""
}
# 20c
function func_dba_20_003()
{
  echo ""
}
#
function func_dba_003()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on numwidth 20 colsep '|'
prompt ##############################################################
Prompt # INSTANCE INFORMATION                                       #
prompt ##############################################################
col name for a60
col host_name for a30
col SERVER for a40
col "INSTANCE NAME" for a15
col version for a20
col "STARTUP TIME" for a20
col status for a15
select inst_id AS "INSTANCE ID"
   , a.instance_name AS "INSTANCE NAME"
   , a.host_name AS "SERVER"
   , a.version
   , a.status
   , a.instance_role as INST_ROLE
   , b.DATABASE_ROLE as DB_ROLE
   , a.active_state
   , to_char(a.startup_time,'dd/mm/yyyy hh24:mi') as "STARTUP TIME"
   , case when a.startup_time < sysdate then 'Status OK' when a.startup_time < sysdate - 7 then 'DB Restarted' else 'Verify Restarted DB' end as "Status DB"
from gv\$instance a, v\$database b
order by 1;
prompt
prompt ##############################################################
Prompt # PGA                                                        #
prompt ##############################################################
show parameter pga;
prompt
prompt ##############################################################
Prompt # SGA                                                        #
prompt ##############################################################
show parameter sga;
prompt
prompt ##############################################################
PROMPT # SHARED POOL                                                #
prompt ##############################################################
col name for a50
col SIZE_KB for a20
col SIZE_MB for a20
col SIZE_GB for a20
col SIZE_TB for a20
select name
  , to_char(bytes/1024, '999G999G999G999D999') as SIZE_KB
  , to_char(bytes/1024/1024, '999G999G999G999D999') as SIZE_MB
  , to_char(bytes/1024/1024/1024, '999G999G999G999D999') as SIZE_GB
  , to_char(bytes/1024/1024/1024/1024, '999G999G999G999D999') as SIZE_TB
  , RESIZEABLE
from v\$sgainfo
order by name;
prompt
prompt ##############################################################
Prompt # SUM SGA                                                    #
prompt ##############################################################
SET SERVEROUTPUT ON
SET PAGESIZE 1000
SET LINESIZE 500
SET FEEDBACK OFF
select round(tot.bytes/1024/1024 ,2) total_mb
  , round(used.bytes/1024/1024 ,2) used_mb
  , round(free.bytes/1024/1024 ,2) free_mb
  , round(tot.bytes/1024/1024/1024 ,2) total_GB
  , round(used.bytes/1024/1024/1024 ,2) used_GB
  , round(free.bytes/1024/1024/1024 ,2) free_GB
  , round(tot.bytes/1024/1024/1024/1024 ,2) total_TB
  , round(used.bytes/1024/1024/1024/1024 ,2) used_TB
  , round(free.bytes/1024/1024/1024/1024 ,2) free_TB
from (select sum(bytes) bytes from v\$sgastat where name != 'free memory') used
   , (select sum(bytes) bytes from v\$sgastat where name = 'free memory') free
   , (select sum(bytes) bytes from v\$sgastat) tot;
prompt
prompt ##############################################################
Prompt # CPU and Memory Info                                        #
prompt ##############################################################
col name for a21 
col stat_name for a25 
col value for a15
col comments for a70
select STAT_NAME
  , to_char(VALUE) as VALUE 
  , comments 
from v\$osstat 
where stat_name IN ('NUM_CPUS','NUM_CPU_CORES','NUM_CPU_SOCKETS') 
union 
select STAT_NAME
  , round(VALUE/1024/1024/1024, 2) || ' GB' 
  , comments 
from v\$osstat 
where stat_name IN ('PHYSICAL_MEMORY_BYTES');
prompt
prompt ##############################################################
prompt # TOTAL USED MEMORY                                          #
prompt ##############################################################
select decode(grouping(nm), 1, 'total', nm) nm
  , round(sum(val/1024/1024)) mb
from (select 'sga' nm, sum(value) val from v\$sga union all select 'pga', sum(a.value) from v\$sesstat a, v\$statname b where b.name = 'session pga memory' and a.statistic# = b.statistic#)
group by rollup(nm);
prompt
quit;
EOF
}
#
#########################################################################################################
# VERIFY DISKS SPACE AND MEMORY (SO)
#########################################################################################################
#
# 11g
function func_dba_11_004()
{
  echo ""
}
# 12c
function func_dba_12_004()
{
  echo ""
}
# 18c
function func_dba_18_004()
{
  echo ""
}
# 19c
function func_dba_19_004()
{
  echo ""
}
# 20c
function func_dba_20_004()
{
  echo ""
}
#
function func_dba_004()
{
  disk_space
}
#
#########################################################################################################
# VERIFY DISKS SPACE AND MEMORY (SO)
#########################################################################################################
#
# 11g
function func_dba_11_004_b()
{
  echo ""
}
# 12c
function func_dba_12_004_b()
{
  echo ""
}
# 18c
function func_dba_18_004_b()
{
  echo ""
}
# 19c
function func_dba_19_004_b()
{
  echo ""
}
# 20c
function func_dba_20_004_b()
{
  echo ""
}
#
function func_dba_004_b()
{
  disk_space
}
#
#########################################################################################################
# UPTIME SERVER + LOAD AVERAGE + OS USERS
#########################################################################################################
#
# 11g
function func_dba_11_005()
{
  echo ""
}
# 12c
function func_dba_12_005()
{
  echo ""
}
# 18c
function func_dba_18_005()
{
  echo ""
}
# 19c
function func_dba_19_005()
{
  echo ""
}
# 20c
function func_dba_20_005()
{
  echo ""
}
#
function func_dba_005()
{
echo ${ECHO} "  NOW     UP TIME        QTD    USERS     LOAD AVERAGE  NOW, 5 min, 15 min"
uptime
echo ""
w
}
#
#########################################################################################################
# GENERAL TUNING VIEW
#########################################################################################################
#
# 11g
function func_dba_11_006()
{
  echo ""
}
# 12c
function func_dba_12_006()
{
  echo ""
}
# 18c
function func_dba_18_006()
{
  echo ""
}
# 19c
function func_dba_19_006()
{
  echo ""
}
# 20c
function func_dba_20_006()
{
  echo ""
}
#
function func_dba_006()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on numwidth 20 SERVEROUTPUT ON LINESIZE 1000 FEEDBACK OFF colsep '|'
prompt ##############################################################
prompt # GENERAL OVERVIEW                                           #
prompt ##############################################################
DECLARE
  v_value  NUMBER;
  FUNCTION Format(p_value  IN  NUMBER)
    RETURN VARCHAR2 IS
  BEGIN
    RETURN LPad(to_char(Round(p_value,2),'990.00') || '%',8,' ') || '  ';
  END;
BEGIN
  -- --------------------------
  -- Dictionary Cache Hit Ratio
  -- --------------------------
  select (1 - (Sum(getmisses)/(Sum(gets) + Sum(getmisses)))) * 100
  INTO   v_value
  FROM   v\$rowcache;
  DBMS_Output.Put('Dictionary Cache Hit Ratio       : ' || Format(v_value));
  IF v_value < 90 THEN
    DBMS_Output.Put_Line('Increase SHARED_POOL_SIZE parameter to bring value above 90%');
  ELSE
    DBMS_Output.Put_Line('Value Acceptable.');
  END IF;
  -- -----------------------
  -- Library Cache Hit Ratio
  -- -----------------------
  select (1 -(Sum(reloads)/(Sum(pins) + Sum(reloads)))) * 100
  INTO v_value
  FROM v\$librarycache;
  DBMS_Output.Put('Library Cache Hit Ratio          : ' || Format(v_value));
  IF v_value < 99 THEN
  DBMS_Output.Put_Line('Increase SHARED_POOL_SIZE parameter to bring value above 99%');
  ELSE
    DBMS_Output.Put_Line('Value Acceptable.');
  END IF;
  -- -------------------------------
  -- DB Block Buffer Cache Hit Ratio
  -- -------------------------------
  select (1 - (phys.value / (db.value + cons.value))) * 100
  INTO   v_value
  FROM   v\$sysstat phys,v\$sysstat db, v\$sysstat cons
  WHERE  phys.name = 'physical reads' AND db.name = 'db block gets' AND cons.name = 'consistent gets';
  DBMS_Output.Put('DB Block Buffer Cache Hit Ratio  : ' || Format(v_value));
  IF v_value < 89 THEN
    DBMS_Output.Put_Line('Increase DB_BLOCK_BUFFERS parameter to bring value above 89%');
  ELSE
    DBMS_Output.Put_Line('Value Acceptable.');
  END IF;
  -- ---------------
  -- Latch Hit Ratio
  -- ---------------
  select (1 - (Sum(misses) / Sum(gets))) * 100
  INTO   v_value
  FROM   v\$latch;
  DBMS_Output.Put('Latch Hit Ratio                  : ' || Format(v_value));
  IF v_value < 98 THEN
    DBMS_Output.Put_Line('Increase number of latches to bring the value above 98%');
  ELSE
    DBMS_Output.Put_Line('Value acceptable.');
  END IF;
  -- -----------------------
  -- Disk Sort Ratio
  -- -----------------------
  select (disk.value/mem.value) * 100
  INTO   v_value
  FROM   v\$sysstat disk, v\$sysstat mem
  WHERE  disk.name = 'sorts (disk)'
  AND    mem.name  = 'sorts (memory)';
  DBMS_Output.Put('Disk Sort Ratio                  : ' || Format(v_value));
  IF v_value > 5 THEN
    DBMS_Output.Put_Line('Increase SORT_AREA_SIZE parameter to bring value below 5%');
  ELSE
    DBMS_Output.Put_Line('Value Acceptable.');
  END IF;
  -- ----------------------
  -- Rollback Segment Waits
  -- ----------------------
  select (Sum(waits)/Sum(gets))*100
  INTO   v_value
  FROM   v\$rollstat;
  DBMS_Output.Put('Rollback Segment Waits           : ' || Format(v_value));
  IF v_value > 5 THEN
    DBMS_Output.Put_Line('Increase number of Rollback Segments to bring the value below 5%');
  ELSE
    DBMS_Output.Put_Line('Value acceptable.');
  END IF;
  -- -------------------
  -- Dispatcher Workload
  -- -------------------
  select NVL((Sum(busy)/(Sum(busy)+Sum(idle))) * 100,0)
  INTO v_value
  FROM v\$dispatcher;
  DBMS_Output.Put('Dispatcher Workload              : ' || Format(v_value));
  IF v_value > 50 THEN
    DBMS_Output.Put_Line('Increase MTS_DISPATCHERS to bring the value below 50%');
  ELSE
    DBMS_Output.Put_Line('Value acceptable.');
  END IF;
END;
/
SET FEEDBACK ON
prompt
prompt ##############################################################
prompt # Waits by Class                                             #
prompt ##############################################################
col waits for a50
select 'Waits by Class | ' || wait_class as Waits, time_waited
FROM v\$system_wait_class
WHERE wait_class != 'Idle'
ORDER BY time_waited DESC;
prompt ##############################################################
Prompt # Wait Class Breakdown                                       #
prompt ##############################################################
col waits for a50
select 'Wait Class Breakdown | ' || wait_class as Waits, ROUND(aas, 2)
FROM (select n.wait_class, m.time_waited/m.INTSIZE_CSEC AAS
FROM v\$waitclassmetric m, v\$system_wait_class n
WHERE m.wait_class_id = n.wait_class_id
AND n.wait_class != 'Idle'
UNION ALL
select 'CPU', value/100 AAS
FROM v\$sysmetric
WHERE metric_name = 'CPU Usage Per Sec'
AND group_id = 2);
prompt
prompt ##############################################################
prompt # High-Level View                                            #
prompt ##############################################################
select  wait_class
  , total_waits
  , round(100 * (total_waits / sum_waits),2) pct_waits
  , time_waited, round(100 * (time_waited / sum_time),2) pct_time
from (select wait_class, total_waits, time_waited from v\$system_wait_class where wait_class != 'idle'),
     (select sum(total_waits) sum_waits, sum(time_waited) sum_time from v\$system_wait_class where wait_class != 'idle')
order by 5 desc;
prompt
prompt ##############################################################
prompt # Top Wait Events                                            #
prompt ##############################################################
select h.event "wait event"
  , sum(h.wait_time + h.time_waited) "total wait time"
from v\$active_session_history h
  , v\$event_name e
where h.sample_time between sysdate - 1/24 and sysdate
and h.event_id = e.event_id
and e.wait_class = 'idle'
group by h.event
order by 2 desc;
prompt
prompt ##############################################################
prompt # Table Scans                                                #
prompt ##############################################################
select to_char(sn.begin_interval_time,'YYYYMMDD hh24:mi:ss') start_date
  , to_char(sn.end_interval_time,'YYYYMMDD hh24:mi:ss') end_date
  , newmem.value-oldmem.value fts
from dba_hist_sysstat oldmem
  , dba_hist_sysstat newmem
  , dba_hist_snapshot sn
where sn.snap_id = (select max(snap_id) from dba_hist_snapshot)
and newmem.snap_id = sn.snap_id
and oldmem.snap_id = sn.snap_id-1
and oldmem.stat_name = 'table scans (long tables)'
and newmem.stat_name = 'table scans (long tables)';
prompt
prompt ##############################################################
prompt # Top SQL                                                    #
prompt ##############################################################
select h.user_id
  , u.username
  , sql.sql_text
  , sum(h.wait_time + h.time_waited) "total wait time"
from v\$active_session_history h
  , v\$sqlarea sql
  , dba_users u
  , v\$event_name e
where h.sample_time between sysdate - 1/24 and sysdate
and h.sql_id = sql.sql_id
and h.user_id = u.user_id
and h.sql_id is not null
and e.event_id = h.event_id
and e.wait_class = 'idle'
group by h.user_id,sql.sql_text, u.username order by 4 desc;
quit;
EOF
}
#
#########################################################################################################
# DATABASE GROWN ON LASTS MONTHS
#########################################################################################################
#
# 11g
function func_dba_11_007_a()
{
  echo ""
}
# 12c
function func_dba_12_007_a()
{
  echo ""
}
# 18c
function func_dba_18_007_a()
{
  echo ""
}
# 19c
function func_dba_19_007_a()
{
  echo ""
}
# 20c
function func_dba_20_007_a()
{
  echo ""
}
#
function func_dba_007_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
col month for a20
col GROWTH_MB format 999,999,999,999,999
col GROWTH_GB format 999,999,999,999,999
col GROWTH_TB format 999,999,999,999,999
col GROWTH_MB for a25
col GROWTH_GB for a25
col GROWTH_TB for a25
exec dbms_application_info.set_action('DB growth');
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select trunc(creation_time, 'MM') month
  , to_char(round(sum(bytes/1024/1024)), '9G999G999') growth_mb
  , to_char(round(sum(bytes/1024/1024/1024)), '9G999G999') growth_gb
  , to_char(round(sum(bytes/1024/1024/1024/1024)), '9G999G999') growth_tb
FROM v\$datafile
GROUP BY trunc(creation_time, 'MM')
ORDER BY trunc(creation_time, 'MM');
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
col month for a20
col GROWTH_MB format 999,999,999,999,999
col GROWTH_GB format 999,999,999,999,999
col GROWTH_TB format 999,999,999,999,999
col GROWTH_MB for a25
col GROWTH_GB for a25
col GROWTH_TB for a25
exec dbms_application_info.set_action('DB growth');
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|'
select trunc(creation_time, 'MM') month
  , to_char(round(sum(bytes/1024/1024)), '9G999G999') growth_mb
  , to_char(round(sum(bytes/1024/1024/1024)), '9G999G999') growth_gb
  , to_char(round(sum(bytes/1024/1024/1024/1024)), '9G999G999') growth_tb
FROM v\$datafile
GROUP BY trunc(creation_time, 'MM')
ORDER BY trunc(creation_time, 'MM');
quit;
EOF
fi
}
#
#########################################################################################################
# DATABASE GROWN ON LASTS MONTHS
#########################################################################################################
#
# 11g
function func_dba_11_007_b()
{
  echo ""
}
# 12c
function func_dba_12_007_b()
{
  echo ""
}
# 18c
function func_dba_18_007_b()
{
  echo ""
}
# 19c
function func_dba_19_007_b()
{
  echo ""
}
# 20c
function func_dba_20_007_b()
{
  echo ""
}
#
function func_dba_007_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
col month for a20
col GROWTH_MB format 999,999,999,999,999
col GROWTH_GB format 999,999,999,999,999
col GROWTH_TB format 999,999,999,999,999
col GROWTH_MB for a25
col GROWTH_GB for a25
col GROWTH_TB for a25
exec dbms_application_info.set_action('DB growth');
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
select trunc(creation_time, 'MM') month
  , to_char(round(sum(bytes/1024/1024)), '9G999G999') growth_mb
  , to_char(round(sum(bytes/1024/1024/1024)), '9G999G999') growth_gb
  , to_char(round(sum(bytes/1024/1024/1024/1024)), '9G999G999') growth_tb
FROM v\$datafile
GROUP BY trunc(creation_time, 'MM')
ORDER BY trunc(creation_time, 'MM');
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
col month for a20
col GROWTH_MB format 999,999,999,999,999
col GROWTH_GB format 999,999,999,999,999
col GROWTH_TB format 999,999,999,999,999
col GROWTH_MB for a25
col GROWTH_GB for a25
col GROWTH_TB for a25
exec dbms_application_info.set_action('DB growth');
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on feedback on colsep '|'
prompt
select trunc(creation_time, 'MM') month
  , to_char(round(sum(bytes/1024/1024)), '9G999G999') growth_mb
  , to_char(round(sum(bytes/1024/1024/1024)), '9G999G999') growth_gb
  , to_char(round(sum(bytes/1024/1024/1024/1024)), '9G999G999') growth_tb
FROM v\$datafile
GROUP BY trunc(creation_time, 'MM')
ORDER BY trunc(creation_time, 'MM');
quit;
EOF
fi
}
#
#########################################################################################################
# CONNECTIONS AVARAGE PER HOUR
#########################################################################################################
#
# 11g
function func_dba_11_008_a()
{
  echo ""
}
# 12c
function func_dba_12_008_a()
{
  echo ""
}
# 18c
function func_dba_18_008_a()
{
  echo ""
}
# 19c
function func_dba_19_008_a()
{
  echo ""
}
# 20c
function func_dba_20_008_a()
{
  echo ""
}
#
function func_dba_008_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
select to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS') snap_begin, sum(r.current_utilization) sessions
FROM dba_hist_resource_limit r, dba_hist_snapshot s
WHERE (TRUNC(s.begin_interval_time,'HH24'), s.snap_id ) IN
(--select the Maximum of the Snapshot IDs within an hour if more than one snapshot IDs
--have the same number of sessions within that hour , so then picking one of the snapIds
select TRUNC(sn.begin_interval_time,'HH24'),MAX(rl.snap_id)
FROM dba_hist_resource_limit rl,dba_hist_snapshot sn
WHERE TRUNC(sn.begin_interval_time) >= TRUNC(sysdate-1)
AND rl.snap_id = sn.snap_id
AND rl.resource_name = 'sessions'
AND rl.instance_number = sn.instance_number
AND (TRUNC(sn.begin_interval_time,'HH24'),rl.CURRENT_UTILIZATION ) IN
(--select the Maximum no.of sessions for a given begin interval time
-- All the snapshots within a given hour will have the same begin interval time when TRUNC is used
-- for HH24 and we are selecting the Maximum sessions for a given one hour
select TRUNC(s.begin_interval_time,'HH24'),MAX(r.CURRENT_UTILIZATION) "no_of_sess"
FROM dba_hist_resource_limit r,dba_hist_snapshot s
WHERE r.snap_id = s.snap_id
AND TRUNC(s.begin_interval_time) >= TRUNC(sysdate-1)
AND r.instance_number=s.instance_number
AND r.resource_name = 'sessions'
GROUP BY TRUNC(s.begin_interval_time,'HH24'))
GROUP BY TRUNC(sn.begin_interval_time,'HH24'),CURRENT_UTILIZATION)
AND r.snap_id = s.snap_id
AND r.instance_number = s.instance_number
AND r.resource_name = 'sessions'
GROUP BY to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS')
ORDER BY snap_begin;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
select to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS') snap_begin, sum(r.current_utilization) sessions
FROM dba_hist_resource_limit r, dba_hist_snapshot s
WHERE (TRUNC(s.begin_interval_time,'HH24'), s.snap_id ) IN
(--select the Maximum of the Snapshot IDs within an hour if more than one snapshot IDs
--have the same number of sessions within that hour , so then picking one of the snapIds
select TRUNC(sn.begin_interval_time,'HH24'),MAX(rl.snap_id)
FROM dba_hist_resource_limit rl,dba_hist_snapshot sn
WHERE TRUNC(sn.begin_interval_time) >= TRUNC(sysdate-1)
AND rl.snap_id = sn.snap_id
AND rl.resource_name = 'sessions'
AND rl.instance_number = sn.instance_number
AND (TRUNC(sn.begin_interval_time,'HH24'),rl.CURRENT_UTILIZATION ) IN
(--select the Maximum no.of sessions for a given begin interval time
-- All the snapshots within a given hour will have the same begin interval time when TRUNC is used
-- for HH24 and we are selecting the Maximum sessions for a given one hour
select TRUNC(s.begin_interval_time,'HH24'),MAX(r.CURRENT_UTILIZATION) "no_of_sess"
FROM dba_hist_resource_limit r,dba_hist_snapshot s
WHERE r.snap_id = s.snap_id
AND TRUNC(s.begin_interval_time) >= TRUNC(sysdate-1)
AND r.instance_number=s.instance_number
AND r.resource_name = 'sessions'
GROUP BY TRUNC(s.begin_interval_time,'HH24'))
GROUP BY TRUNC(sn.begin_interval_time,'HH24'),CURRENT_UTILIZATION)
AND r.snap_id = s.snap_id
AND r.instance_number = s.instance_number
AND r.resource_name = 'sessions'
GROUP BY to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS')
ORDER BY snap_begin;
quit;
EOF
fi
}
#
#########################################################################################################
# CONNECTIONS AVARAGE PER HOUR
#########################################################################################################
#
# 11g
function func_dba_11_008_b()
{
  echo ""
}
# 12c
function func_dba_12_008_b()
{
  echo ""
}
# 18c
function func_dba_18_008_b()
{
  echo ""
}
# 19c
function func_dba_19_008_b()
{
  echo ""
}
# 20c
function func_dba_20_008_b()
{
  echo ""
}
#
function func_dba_008_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS') snap_begin
  , sum(r.current_utilization) sessions
FROM dba_hist_resource_limit r, dba_hist_snapshot s
WHERE (TRUNC(s.begin_interval_time,'HH24'), s.snap_id ) IN
(--select the Maximum of the Snapshot IDs within an hour if more than one snapshot IDs
--have the same number of sessions within that hour , so then picking one of the snapIds
select TRUNC(sn.begin_interval_time,'HH24'),MAX(rl.snap_id)
FROM dba_hist_resource_limit rl,dba_hist_snapshot sn
WHERE TRUNC(sn.begin_interval_time) >= TRUNC(sysdate-1)
AND rl.snap_id = sn.snap_id
AND rl.resource_name = 'sessions'
AND rl.instance_number = sn.instance_number
AND (TRUNC(sn.begin_interval_time,'HH24'),rl.CURRENT_UTILIZATION ) IN
(--select the Maximum no.of sessions for a given begin interval time
-- All the snapshots within a given hour will have the same begin interval time when TRUNC is used
-- for HH24 and we are selecting the Maximum sessions for a given one hour
select TRUNC(s.begin_interval_time,'HH24'),MAX(r.CURRENT_UTILIZATION) "no_of_sess"
FROM dba_hist_resource_limit r,dba_hist_snapshot s
WHERE r.snap_id = s.snap_id
AND TRUNC(s.begin_interval_time) >= TRUNC(sysdate-1)
AND r.instance_number=s.instance_number
AND r.resource_name = 'sessions'
GROUP BY TRUNC(s.begin_interval_time,'HH24'))
GROUP BY TRUNC(sn.begin_interval_time,'HH24'),CURRENT_UTILIZATION)
AND r.snap_id = s.snap_id
AND r.instance_number = s.instance_number
AND r.resource_name = 'sessions'
GROUP BY to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS')
ORDER BY snap_begin;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
select to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS') snap_begin, sum(r.current_utilization) sessions
FROM dba_hist_resource_limit r, dba_hist_snapshot s
WHERE (TRUNC(s.begin_interval_time,'HH24'), s.snap_id ) IN
(--select the Maximum of the Snapshot IDs within an hour if more than one snapshot IDs
--have the same number of sessions within that hour , so then picking one of the snapIds
select TRUNC(sn.begin_interval_time,'HH24'),MAX(rl.snap_id)
FROM dba_hist_resource_limit rl,dba_hist_snapshot sn
WHERE TRUNC(sn.begin_interval_time) >= TRUNC(sysdate-1)
AND rl.snap_id = sn.snap_id
AND rl.resource_name = 'sessions'
AND rl.instance_number = sn.instance_number
AND (TRUNC(sn.begin_interval_time,'HH24'),rl.CURRENT_UTILIZATION ) IN
(--select the Maximum no.of sessions for a given begin interval time
-- All the snapshots within a given hour will have the same begin interval time when TRUNC is used
-- for HH24 and we are selecting the Maximum sessions for a given one hour
select TRUNC(s.begin_interval_time,'HH24'),MAX(r.CURRENT_UTILIZATION) "no_of_sess"
FROM dba_hist_resource_limit r,dba_hist_snapshot s
WHERE r.snap_id = s.snap_id
AND TRUNC(s.begin_interval_time) >= TRUNC(sysdate-1)
AND r.instance_number=s.instance_number
AND r.resource_name = 'sessions'
GROUP BY TRUNC(s.begin_interval_time,'HH24'))
GROUP BY TRUNC(sn.begin_interval_time,'HH24'),CURRENT_UTILIZATION)
AND r.snap_id = s.snap_id
AND r.instance_number = s.instance_number
AND r.resource_name = 'sessions'
GROUP BY to_char(TRUNC(s.begin_interval_time,'HH24'),'DD/MM/YYYY HH24:MI:SS')
ORDER BY snap_begin;
quit;
EOF
fi
}
#
#########################################################################################################
# TOP 10 DB-CPU ACTIVITY
#########################################################################################################
#
# 11g
function func_dba_11_009()
{
  echo ""
}
# 12c
function func_dba_12_009()
{
  echo ""
}
# 18c
function func_dba_18_009()
{
  echo ""
}
# 19c
function func_dba_19_009()
{
  echo ""
}
# 20c
function func_dba_20_009()
{
  echo ""
}
#
function func_dba_009()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col STAT_NAME for a50
col "% PERC" for a10
select STAT_NAME
  , TIME_WAITED
  , case when pct_waited >= 0.5 then 'Critical' when pct_waited >= 0.2 then 'Warning' end as "Status"
  , to_char(round(pct_waited*100,1), '999D00') || '%' as "% PERC"
from (select STAT_NAME, time_waited, TIME_WAITED/sum(time_waited) over () pct_waited
from (select STAT_NAME, round(sum(VALUE)/(1000*1000)) AS time_waited
from GV\$SYS_TIME_MODEL
group by STAT_NAME)
order by 2 desc)
where rownum <= 20;
quit;
EOF
}
#
#########################################################################################################
# VERIFY SESSIONS PER MEMORY
#########################################################################################################
#
# 11g
function func_dba_11_010_a()
{
  echo ""
}
# 12c
function func_dba_12_010_a()
{
  echo ""
}
# 18c
function func_dba_18_010_a()
{
  echo ""
}
# 19c
function func_dba_19_010_a()
{
  echo ""
}
# 20c
function func_dba_20_010_a()
{
  echo ""
}
#
function func_dba_010_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 1000 lines 1000 timing on feedback on echo on heading on verify on colsep '|'
col name for a25
col program for a60
COL username for A20
COL module for A20
col machine for a50
select se.sid
  , n.name
  , s.program
  , s.machine
  , s.username
  , round(max(se.value)/(1024*1024),2) "MEM (MB)"
from v\$sesstat se, v\$statname n, v\$session s
where n.statistic# = se.statistic#
and s.sid = se.sid
and s.username != 'SYSTEM'
and n.name in ('session pga memory','session uga memory')
group by s.username, s.machine, se.sid,n.name, s.program
order by 6;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 1000 lines 1000 timing on feedback on colsep '|'
SET LINESIZE 500
col name for a25
col program for a60
COL username for A20
COL module for A20
col machine for a50
select se.sid
  , n.name
  , s.program
  , s.machine
  , s.username
  , round(max(se.value)/(1024*1024),2) "MEM (MB)"
from v\$sesstat se, v\$statname n, v\$session s
where n.statistic# = se.statistic#
and s.sid = se.sid
and s.username != 'SYSTEM'
and n.name in ('session pga memory','session uga memory')
group by s.username, s.machine, se.sid,n.name, s.program
order by 6;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY SESSIONS PER MEMORY
#########################################################################################################
#
# 11g
function func_dba_11_010_b()
{
  echo ""
}
# 12c
function func_dba_12_010_b()
{
  echo ""
}
# 18c
function func_dba_18_010_b()
{
  echo ""
}
# 19c
function func_dba_19_010_b()
{
  echo ""
}
# 20c
function func_dba_20_010_b()
{
  echo ""
}
#
function func_dba_010_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 1000 lines 1000 timing on feedback on echo on heading on verify on colsep '|'
col name for a25
col program for a60
COL username for A20
COL module for A20
col machine for a50
select se.sid
  , n.name
  , s.program
  , s.machine
  , s.username
  , round(max(se.value)/(1024*1024),2) "MEM (MB)"
from v\$sesstat se, v\$statname n, v\$session s
where n.statistic# = se.statistic#
and s.sid = se.sid
and s.username != 'SYSTEM'
and n.name in ('session pga memory','session uga memory')
group by s.username, s.machine, se.sid,n.name, s.program
order by 6;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 1000 lines 1000 timing on feedback on colsep '|'
SET LINESIZE 500
col name for a25
col program for a60
COL username for A20
COL module for A20
col machine for a50
select se.sid
  , n.name
  , s.program
  , s.machine
  , s.username
  , round(max(se.value)/(1024*1024),2) "MEM (MB)"
from v\$sesstat se, v\$statname n, v\$session s
where n.statistic# = se.statistic#
and s.sid = se.sid
and s.username != 'SYSTEM'
and n.name in ('session pga memory','session uga memory')
group by s.username, s.machine, se.sid,n.name, s.program
order by 6;
quit;
EOF
fi
}
#
#########################################################################################################
# DATABASE SIZE
#########################################################################################################
#
# 11g
function func_dba_11_011_a()
{
  echo ""
}
# 12c
function func_dba_12_011_a()
{
  echo ""
}
# 18c
function func_dba_18_011_a()
{
  echo ""
}
# 19c
function func_dba_19_011_a()
{
  echo ""
}
# 20c
function func_dba_20_011_a()
{
  echo ""
}
#
function func_dba_011_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt ##############################################################
PROMPT # DATABASE SIZE                                              #
prompt ##############################################################
col "SIZE MB" for a15
col "SIZE GB" for a15
col "SIZE TB" for a15
select to_char(sum(bytes)/1024/1024, '9G999G999D99') "SIZE MB"
  , to_char(sum(bytes)/1024/1024/1024, '9G999G999D99') "SIZE GB"
  , to_char(sum(bytes)/1024/1024/1024/1024, '9G999G999D999') "SIZE TB"
from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\$log
union all
select sum(block_size * file_size_blks) from v\$controlfile);
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
PROMPT # DATABASE SIZE                                              #
prompt ##############################################################
col "SIZE MB" for a15
col "SIZE GB" for a15
col "SIZE TB" for a15
select to_char(sum(bytes)/1024/1024, '9G999G999D99') "SIZE MB"
  , to_char(sum(bytes)/1024/1024/1024, '9G999G999D99') "SIZE GB"
  , to_char(sum(bytes)/1024/1024/1024/1024, '9G999G999D999') "SIZE TB"
from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\$log
union all
select sum(block_size * file_size_blks) from v\$controlfile);
quit;
EOF
fi
}
#
#########################################################################################################
# DATABASE SIZE
#########################################################################################################
#
# 11g
function func_dba_11_011_b()
{
  echo ""
}
# 12c
function func_dba_12_011_b()
{
  echo ""
}
# 18c
function func_dba_18_011_b()
{
  echo ""
}
# 19c
function func_dba_19_011_b()
{
  echo ""
}
# 20c
function func_dba_20_011_b()
{
  echo ""
}
#
function func_dba_011_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt ##############################################################
PROMPT # DATABASE SIZE                                              #
prompt ##############################################################
col "SIZE MB" for a15
col "SIZE GB" for a15
col "SIZE TB" for a15
select to_char(sum(bytes)/1024/1024, '9G999G999D99') "SIZE MB"
  , to_char(sum(bytes)/1024/1024/1024, '9G999G999D99') "SIZE GB"
  , to_char(sum(bytes)/1024/1024/1024/1024, '9G999G999D999') "SIZE TB"
from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\$log
union all
select sum(block_size * file_size_blks) from v\$controlfile);
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
PROMPT # DATABASE SIZE                                              #
prompt ##############################################################
col "SIZE MB" for a15
col "SIZE GB" for a15
col "SIZE TB" for a15
select to_char(sum(bytes)/1024/1024, '9G999G999D99') "SIZE MB"
  , to_char(sum(bytes)/1024/1024/1024, '9G999G999D99') "SIZE GB"
  , to_char(sum(bytes)/1024/1024/1024/1024, '9G999G999D999') "SIZE TB"
from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\$log
union all
select sum(block_size * file_size_blks) from v\$controlfile);
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY SESSIONS PER I/O
#########################################################################################################
#
# 11g
function func_dba_11_012_a()
{
  echo ""
}
# 12c
function func_dba_12_012_a()
{
  echo ""
}
# 18c
function func_dba_18_012_a()
{
  echo ""
}
# 19c
function func_dba_19_012_a()
{
  echo ""
}
# 20c
function func_dba_20_012_a()
{
  echo ""
}
#
function func_dba_012_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 2000 lines 2000 timing on feedback on echo on heading on verify on colsep '|'
prompt
COLUMN username FORMAT A25
col osuser for a25
select NVL(s.username, '(oracle)') AS username
  , s.osuser
  , s.sid
  , s.serial#
  , si.block_gets
  , si.consistent_gets
  , si.physical_reads
  , si.block_changes
  , si.consistent_changes
FROM v\$session s, v\$sess_io si
WHERE s.sid = si.sid
and s.osuser not in ('GRID','grid','ORACLE','oracle')
ORDER BY s.username, s.osuser, si.physical_reads;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 2000 lines 2000 timing on feedback on colsep '|'
COLUMN username FORMAT A25
col osuser for a25
select NVL(s.username, '(oracle)') AS username
  , s.osuser
  , s.sid
  , s.serial#
  , si.block_gets
  , si.consistent_gets
  , si.physical_reads
  , si.block_changes
  , si.consistent_changes
FROM v\$session s, v\$sess_io si
WHERE s.sid = si.sid
and s.osuser not in ('GRID','grid','ORACLE','oracle')
ORDER BY s.username, s.osuser, si.physical_reads;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY SESSIONS PER I/O
#########################################################################################################
#
# 11g
function func_dba_11_012_b()
{
  echo ""
}
# 12c
function func_dba_12_012_b()
{
  echo ""
}
# 18c
function func_dba_18_012_b()
{
  echo ""
}
# 19c
function func_dba_19_012_b()
{
  echo ""
}
# 20c
function func_dba_20_012_b()
{
  echo ""
}
#
function func_dba_012_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 2000 lines 2000 timing on feedback on echo on heading on verify on colsep '|'
COLUMN username FORMAT A25
col osuser for a25
select NVL(s.username, '(oracle)') AS username
  , s.osuser
  , s.sid
  , s.serial#
  , si.block_gets
  , si.consistent_gets
  , si.physical_reads
  , si.block_changes
  , si.consistent_changes
FROM v\$session s, v\$sess_io si
WHERE s.sid = si.sid
and s.osuser not in ('GRID','grid','ORACLE','oracle')
ORDER BY s.username, s.osuser, si.physical_reads;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 2000 lines 2000 timing on feedback on colsep '|'
COLUMN username FORMAT A25
col osuser for a25
select NVL(s.username, '(oracle)') AS username
  , s.osuser
  , s.sid
  , s.serial#
  , si.block_gets
  , si.consistent_gets
  , si.physical_reads
  , si.block_changes
  , si.consistent_changes
FROM v\$session s, v\$sess_io si
WHERE s.sid = si.sid
and s.osuser not in ('GRID','grid','ORACLE','oracle')
ORDER BY s.username, s.osuser, si.physical_reads;
quit;
EOF
fi
}
#
#########################################################################################################
# HIT RATIO THE LASTS 30 DAYS
#########################################################################################################
#
# 11g
function func_dba_11_013()
{
  echo ""
}
# 12c
function func_dba_12_013()
{
  echo ""
}
# 18c
function func_dba_18_013()
{
  echo ""
}
# 19c
function func_dba_19_013()
{
  echo ""
}
# 20c
function func_dba_20_013()
{
  echo ""
}
#
function func_dba_013()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
exec dbms_application_info.set_action('latches');
set pages 700 lines 700 timing on feedback on colsep '|'
col name for a40
col instance_name for a30
select instance_name
   , name
   , case when hit_ratio < 95 then 'Warning' when hit_ratio < 99 then 'Critical' end as hit_ratio
   , sleep_miss
from (select i.instance_name, l.name, round((gets-misses)/decode(gets,0,1,gets),3)*100 hit_ratio, round(sleeps/decode(misses,0,1,misses),3) sleep_miss
from gv\$latch l, gv\$instance i
where l.gets != 0
and l.inst_id = i.inst_id)
where hit_ratio < 100
order by hit_ratio;
quit;
EOF
}
#
#########################################################################################################
# VERIFY LONG OPERATIONS
#########################################################################################################
#
# 11g
function func_dba_11_014_a()
{
  echo ""
}
# 12c
function func_dba_12_014_a()
{
  echo ""
}
# 18c
function func_dba_18_014_a()
{
  echo ""
}
# 19c
function func_dba_19_014_a()
{
  echo ""
}
# 20c
function func_dba_20_014_a()
{
  echo ""
}
#
function func_dba_014_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
prompt ##############################################################
prompt # ACTIVE SESSIONS AND SQL STATEMENTS                         #
prompt ##############################################################
col USERNAME for a15
col SQL_TEXT for a90
col machine for a35
col osuser for a15
select S.USERNAME
  , s.sid
  , s.serial#
  , s.machine
  , s.osuser
  , s.seconds_in_wait as "waiting seg"
  , t.sql_id
  , sql_text
from v\$sqltext_with_newlines t, V\$SESSION s
where t.address = s.sql_address and t.hash_value = s.sql_hash_value and s.status = 'ACTIVE'
order by s.sid, t.piece;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OBJECT_NAME for a30
select object_name
  , object_type
  , session_id
  , type
  , lmode
  , request
  , block
  , ctime
from v\$locked_object, all_objects, v\$lock
where v\$locked_object.object_id = all_objects.object_id AND v\$lock.id1 = all_objects.object_id AND v\$lock.sid = v\$locked_object.session_id
order by session_id, ctime desc, object_name;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a35
col TARGET for a20
col UNITS for a10
col MESSAGE for a90
col sql_id for a15
select distinct * from (select opname, target, sofar, sql_id, totalwork, units, elapsed_seconds, message from v\$session_longops order by start_time desc) where rownum <= 10;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a35
col TARGET for a30
select opname
  , target
  , osuser
  , sl.sql_id
  , sl.sql_hash_value
  , elapsed_seconds
  , time_remaining
FROM v\$session_longops sl
inner join v\$session s ON sl.SID = s.SID AND sl.SERIAL# = s.SERIAL# WHERE time_remaining > 0;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col USERNAME for a15
col sql_fulltext for a75
col TARGET for a20
select s.username
  , sl.sid
  , sq.executions
  , sl.last_update_time
  , sl.sql_id
  , sl.sql_hash_value
  , opname
  , target
  , elapsed_seconds
  , time_remaining
  , sq.sql_fulltext
FROM v\$session_longops sl
INNER JOIN v\$sql sq ON sq.sql_id = sl.sql_id
INNER JOIN v\$session s ON sl.SID = s.SID AND sl.serial# = s.serial#
WHERE time_remaining > 0;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col sql_id for a15
col units for a15
col opname for a35
col started for a20
col now for a20
select sql_id
  , opname
  , to_char(start_time, 'DD/MM/YYYY HH24:MI:SS') as started
  , to_char(sysdate, 'DD/MM/YYYY HH24:MI:SS') as now
--  , trunc(((((86400*(sysdate-start_time))/60)/60)/24)/7) weeks
  , trunc((((86400*(sysdate-start_time))/60)/60)/24) days
  , trunc(((86400*(sysdate-start_time))/60)/60)-24*(trunc((((86400*(sysdate-start_time))/60)/60)/24)) hours
  , trunc((86400*(sysdate-start_time))/60)-60*(trunc(((86400*(sysdate-start_time))/60)/60)) minutes
  , trunc(86400*(sysdate-start_time))-60*(trunc((86400*(sysdate-start_time))/60)) seconds
  , sofar
  , totalwork
  , units
--  , round(elapsed_seconds/60/60,2) as seconds
  , round(time_remaining/60/60,2) as remaining
FROM v\$session_longops
WHERE sofar != totalwork;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
prompt # ACTIVE SESSIONS AND SQL STATEMENTS                         #
prompt ##############################################################
col USERNAME for a15
col SQL_TEXT for a90
col machine for a35
col osuser for a15
select S.USERNAME
  , s.sid
  , s.serial#
  , s.machine
  , s.osuser
  , s.seconds_in_wait as "waiting seg"
  , t.sql_id
  , sql_text
from v\$sqltext_with_newlines t, V\$SESSION s
where t.address = s.sql_address and t.hash_value = s.sql_hash_value and s.status = 'ACTIVE'
order by s.sid, t.piece;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OBJECT_NAME for a30
select object_name
  , object_type
  , session_id
  , type
  , lmode
  , request
  , block
  , ctime
from v\$locked_object, all_objects, v\$lock
where v\$locked_object.object_id = all_objects.object_id AND v\$lock.id1 = all_objects.object_id AND v\$lock.sid = v\$locked_object.session_id
order by session_id, ctime desc, object_name;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a35
col TARGET for a20
col UNITS for a10
col MESSAGE for a90
col sql_id for a15
select distinct * from (select opname, target, sofar, sql_id, totalwork, units, elapsed_seconds, message from v\$session_longops order by start_time desc) where rownum <= 10;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a35
col TARGET for a30
select opname
  , target
  , osuser
  , sl.sql_id
  , sl.sql_hash_value
  , elapsed_seconds
  , time_remaining
FROM v\$session_longops sl
inner join v\$session s ON sl.SID = s.SID AND sl.SERIAL# = s.SERIAL# WHERE time_remaining > 0;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col USERNAME for a15
col sql_fulltext for a75
col TARGET for a20
select s.username
  , sl.sid
  , sq.executions
  , sl.last_update_time
  , sl.sql_id
  , sl.sql_hash_value
  , opname
  , target
  , elapsed_seconds
  , time_remaining
  , sq.sql_fulltext
FROM v\$session_longops sl
INNER JOIN v\$sql sq ON sq.sql_id = sl.sql_id
INNER JOIN v\$session s ON sl.SID = s.SID AND sl.serial# = s.serial#
WHERE time_remaining > 0;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col sql_id for a15
col units for a15
col opname for a35
col started for a20
col now for a20
select sql_id
  , opname
  , to_char(start_time, 'DD/MM/YYYY HH24:MI:SS') as started
  , to_char(sysdate, 'DD/MM/YYYY HH24:MI:SS') as now
--  , trunc(((((86400*(sysdate-start_time))/60)/60)/24)/7) weeks
  , trunc((((86400*(sysdate-start_time))/60)/60)/24) days
  , trunc(((86400*(sysdate-start_time))/60)/60)-24*(trunc((((86400*(sysdate-start_time))/60)/60)/24)) hours
  , trunc((86400*(sysdate-start_time))/60)-60*(trunc(((86400*(sysdate-start_time))/60)/60)) minutes
  , trunc(86400*(sysdate-start_time))-60*(trunc((86400*(sysdate-start_time))/60)) seconds
  , sofar
  , totalwork
  , units
--  , round(elapsed_seconds/60/60,2) as seconds
  , round(time_remaining/60/60,2) as remaining
FROM v\$session_longops
WHERE sofar != totalwork;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY LONG OPERATIONS
#########################################################################################################
#
# 11g
function func_dba_11_014_b()
{
  echo ""
}
# 12c
function func_dba_12_014_b()
{
  echo ""
}
# 18c
function func_dba_18_014_b()
{
  echo ""
}
# 19c
function func_dba_19_014_b()
{
  echo ""
}
# 20c
function func_dba_20_014_b()
{
  echo ""
}
#
function func_dba_014_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt ##############################################################
prompt # ACTIVE SESSIONS AND SQL STATEMENTS                         #
prompt ##############################################################
prompt
col USERNAME for a15
col SQL_TEXT for a90
col machine for a35
col osuser for a15
select S.USERNAME
  , s.sid
  , s.serial#
  , s.machine
  , s.osuser
  , s.seconds_in_wait as "waiting seg"
  , t.sql_id
  , sql_text
from v\$sqltext_with_newlines t, V\$SESSION s
where t.address = s.sql_address and t.hash_value = s.sql_hash_value and s.status = 'ACTIVE'
order by s.sid, t.piece;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OBJECT_NAME for a30
select object_name
  , object_type
  , session_id
  , type
  , lmode
  , request
  , block
  , ctime
from v\$locked_object, all_objects, v\$lock
where v\$locked_object.object_id = all_objects.object_id AND v\$lock.id1 = all_objects.object_id AND v\$lock.sid = v\$locked_object.session_id
order by session_id, ctime desc, object_name;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a35
col TARGET for a20
col UNITS for a10
col MESSAGE for a90
col sql_id for a15
select distinct * from (select opname, target, sofar, sql_id, totalwork, units, elapsed_seconds, message from v\$session_longops order by start_time desc) where rownum <= 10;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a35
col TARGET for a30
select opname
  , target
  , osuser
  , sl.sql_id
  , sl.sql_hash_value
  , elapsed_seconds
  , time_remaining
FROM v\$session_longops sl
inner join v\$session s ON sl.SID = s.SID AND sl.SERIAL# = s.SERIAL# WHERE time_remaining > 0;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col USERNAME for a15
col sql_fulltext for a75
col TARGET for a20
select s.username
  , sl.sid
  , sq.executions
  , sl.last_update_time
  , sl.sql_id
  , sl.sql_hash_value
  , opname
  , target
  , elapsed_seconds
  , time_remaining
  , sq.sql_fulltext
FROM v\$session_longops sl
INNER JOIN v\$sql sq ON sq.sql_id = sl.sql_id
INNER JOIN v\$session s ON sl.SID = s.SID AND sl.serial# = s.serial#
WHERE time_remaining > 0;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col sql_id for a15
col units for a15
col opname for a35
col started for a20
col now for a20
select sql_id
  , opname
  , to_char(start_time, 'DD/MM/YYYY HH24:MI:SS') as started
  , to_char(sysdate, 'DD/MM/YYYY HH24:MI:SS') as now
--  , trunc(((((86400*(sysdate-start_time))/60)/60)/24)/7) weeks
  , trunc((((86400*(sysdate-start_time))/60)/60)/24) days
  , trunc(((86400*(sysdate-start_time))/60)/60)-24*(trunc((((86400*(sysdate-start_time))/60)/60)/24)) hours
  , trunc((86400*(sysdate-start_time))/60)-60*(trunc(((86400*(sysdate-start_time))/60)/60)) minutes
  , trunc(86400*(sysdate-start_time))-60*(trunc((86400*(sysdate-start_time))/60)) seconds
  , sofar
  , totalwork
  , units
--  , round(elapsed_seconds/60/60,2) as seconds
  , round(time_remaining/60/60,2) as remaining
FROM v\$session_longops
WHERE sofar != totalwork;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
prompt # ACTIVE SESSIONS AND SQL STATEMENTS                         #
prompt ##############################################################
col USERNAME for a15
col SQL_TEXT for a90
col machine for a35
col osuser for a15
select S.USERNAME
  , s.sid
  , s.serial#
  , s.machine
  , s.osuser
  , s.seconds_in_wait as "waiting seg"
  , t.sql_id
  , sql_text
from v\$sqltext_with_newlines t, V\$SESSION s
where t.address = s.sql_address and t.hash_value = s.sql_hash_value and s.status = 'ACTIVE'
order by s.sid, t.piece;
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OBJECT_NAME for a30
select object_name
  , object_type
  , session_id
  , type
  , lmode
  , request
  , block
  , ctime
from v\$locked_object, all_objects, v\$lock
where v\$locked_object.object_id = all_objects.object_id AND v\$lock.id1 = all_objects.object_id AND v\$lock.sid = v\$locked_object.session_id
order by session_id, ctime desc, object_name;
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a35
col TARGET for a20
col UNITS for a10
col MESSAGE for a90
col sql_id for a15
select distinct * from (select opname, target, sofar, sql_id, totalwork, units, elapsed_seconds, message from v\$session_longops order by start_time desc) where rownum <= 10;
prompt ##############################################################
prompt #  #
prompt ##############################################################
col OPNAME for a30
col TARGET for a20
select opname
  , target
  , osuser
  , sl.sql_id
  , sl.sql_hash_value
  , elapsed_seconds
  , time_remaining
FROM v\$session_longops sl
inner join v\$session s ON sl.SID = s.SID AND sl.SERIAL# = s.SERIAL# WHERE time_remaining > 0;
prompt ##############################################################
prompt #  #
prompt ##############################################################
col USERNAME for a15
col sql_fulltext for a75
col TARGET for a20
select s.username
  , sl.sid
  , sq.executions
  , sl.last_update_time
  , sl.sql_id
  , sl.sql_hash_value
  , opname
  , target
  , elapsed_seconds
  , time_remaining
  , sq.sql_fulltext
FROM v\$session_longops sl
INNER JOIN v\$sql sq ON sq.sql_id = sl.sql_id
INNER JOIN v\$session s ON sl.SID = s.SID AND sl.serial# = s.serial#
WHERE time_remaining > 0;
prompt ##############################################################
prompt #  #
prompt ##############################################################
col sql_id for a15
col units for a15
col opname for a35
col started for a20
col now for a20
select sql_id
  , opname
  , to_char(start_time, 'DD/MM/YYYY HH24:MI:SS') as started
  , to_char(sysdate, 'DD/MM/YYYY HH24:MI:SS') as now
--   , trunc(((((86400*(sysdate-start_time))/60)/60)/24)/7) weeks
  , trunc((((86400*(sysdate-start_time))/60)/60)/24) days
  , trunc(((86400*(sysdate-start_time))/60)/60)-24*(trunc((((86400*(sysdate-start_time))/60)/60)/24)) hours
  , trunc((86400*(sysdate-start_time))/60)-60*(trunc(((86400*(sysdate-start_time))/60)/60)) minutes
  , trunc(86400*(sysdate-start_time))-60*(trunc((86400*(sysdate-start_time))/60)) seconds
  , sofar
  , totalwork
  , units
--  , round(elapsed_seconds/60/60,2) as seconds
  , round(time_remaining/60/60,2) as remaining
FROM v\$session_longops
WHERE sofar != totalwork;
quit;
EOF
fi
}
#
#########################################################################################################
# LOAD LASTS 1/5/10 MINUTES
#########################################################################################################
#
# 11g
function func_dba_11_015()
{
  echo ""
}
# 12c
function func_dba_12_015()
{
  echo ""
}
# 18c
function func_dba_18_015()
{
  echo ""
}
# 19c
function func_dba_19_015()
{
  echo ""
}
# 20c
function func_dba_20_015()
{
  echo ""
}
#
function func_dba_015()
{
echo "---------------------------------------------------------------------------------------------------"
echo "LOAD LASTS 1/5/10 MINUTES"
if [ `uname` = "SunOS" ]
then
  echo "---------------------------------------------------------------------------------------------------"
  echo "NOW | 5min | 15min |"
  echo "---------------------------------------------------------------------------------------------------"
  uptime | awk '{print $(NF-2)"  "$(NF-1)"  "$(NF-0)}'
elif [ `uname` = "AIX" ]
then
  echo "---------------------------------------------------------------------------------------------------"
  echo "NOW | 5min | 15min |"
  echo "---------------------------------------------------------------------------------------------------"
  uptime | awk '{print $(NF-2)"  "$(NF-1)"  "$(NF-0)}'
elif [ `uname` = "Linux" ]
then
  echo "---------------------------------------------------------------------------------------------------"
  echo "NOW | 5min | 15min |"
  echo "---------------------------------------------------------------------------------------------------"
  cat /proc/loadavg
elif [ `uname` = "Darwin" ]
then
  echo "---------------------------------------------------------------------------------------------------"
  echo "NOW | 5min | 15min |"
  echo "---------------------------------------------------------------------------------------------------"
  uptime | awk '{print $(NF-2)"  "$(NF-1)"  "$(NF-0)}'
elif [ `uname` = "AIX" ]
then
  echo "---------------------------------------------------------------------------------------------------"
  echo "NOW | 5min | 15min |"
  echo "---------------------------------------------------------------------------------------------------"
  uptime | awk '{print $(NF-2)"  "$(NF-1)"  "$(NF-0)}'
elif [ `uname` = "HP-UX" ]
then
  echo "---------------------------------------------------------------------------------------------------"
  echo "NOW | 5min | 15min |"
  echo "---------------------------------------------------------------------------------------------------"
  uptime | awk '{print $(NF-2)"  "$(NF-1)"  "$(NF-0)}'
else
  echo "---------------------------------------------------------------------------------------------------"
  echo " -- This Operation System is Unknown --"
  echo "---------------------------------------------------------------------------------------------------"
fi
}
#
#########################################################################################################
# INVALIDS OBJECTS ( @ )
#########################################################################################################
#
# 11g
function func_dba_11_016_a()
{
  echo ""
}
# 12c
function func_dba_12_016_a()
{
  echo ""
}
# 18c
function func_dba_18_016_a()
{
  echo ""
}
# 19c
function func_dba_19_016_a()
{
  echo ""
}
# 20c
function func_dba_20_016_a()
{
  echo ""
}
#
function func_dba_016_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
col owner for a25
col OBJECT_TYPE for a25
col "Total of invalids objects." for a30
select owner
   , decode(object_type,null,'========================>', object_type) as "OBJECT_TYPE"
   , count(object_type) as "TOTAL"
   , decode(grouping(owner),0,null,1,'Total of invalids objects.') as " "
from dba_objects where status <> 'VALID'
group by rollup (owner, object_type)
order by owner, object_type desc;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col owner for a25
col OBJECT_TYPE for a25
col "Total of invalids objects." for a30
select owner
   , decode(object_type,null,'========================>', object_type) as "OBJECT_TYPE"
   , count(object_type) as "TOTAL"
   , decode(grouping(owner),0,null,1,'Total of invalids objects.') as " "
from dba_objects where status <> 'VALID'
group by rollup (owner, object_type)
order by owner, object_type desc;
quit;
EOF
fi
}
#
#########################################################################################################
# INVALIDS OBJECTS ( @ )
#########################################################################################################
#
# 11g
function func_dba_11_016_b()
{
  echo ""
}
# 12c
function func_dba_12_016_b()
{
  echo ""
}
# 18c
function func_dba_18_016_b()
{
  echo ""
}
# 19c
function func_dba_19_016_b()
{
  echo ""
}
# 20c
function func_dba_20_016_b()
{
  echo ""
}
#
function func_dba_016_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col owner for a25
col OBJECT_TYPE for a25
col "Total of invalids objects." for a30
select owner
  , decode(object_type,null,'========================>', object_type) as "OBJECT_TYPE"
  , count(object_type) as "TOTAL"
  , decode(grouping(owner),0,null,1,'Total of invalids objects.') as " "
from dba_objects where status <> 'VALID'
group by rollup (owner, object_type)
order by owner, object_type desc;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col owner for a25
col OBJECT_TYPE for a25
col "Total of invalids objects." for a30
select owner
  , decode(object_type,null,'========================>', object_type) as "OBJECT_TYPE"
  , count(object_type) as "TOTAL"
  , decode(grouping(owner),0,null,1,'Total of invalids objects.') as " "
from dba_objects where status <> 'VALID'
group by rollup (owner, object_type)
order by owner, object_type desc;
quit;
EOF
fi
}
#
#########################################################################################################
# JOBS CONTROL OF THE CLIENT [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_017_a()
{
  echo ""
}
# 12c
function func_dba_12_017_a()
{
  echo ""
}
# 18c
function func_dba_18_017_a()
{
  echo ""
}
# 19c
function func_dba_19_017_a()
{
  echo ""
}
# 20c
function func_dba_20_017_a()
{
  echo ""
}
#
function func_dba_017_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
col COMMENTS for a100
col JOB_NAME for a30
col owner for a10
col state for a12
col SCHEDULE_TYPE for a16
col LAST_EXEC for a20
col enabled for a8
select JOB_NAME
 , STATE
 , ENABLED
 , PROGRAM_OWNER as OWNER
 , SCHEDULE_TYPE
 , RUN_COUNT
 , to_char(LAST_START_DATE, 'dd/mm/yyyy HH:MM:SS') as LAST_EXEC
 , COMMENTS
FROM DBA_SCHEDULER_JOBS
ORDER BY 1,2,3,4,5,6,7;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col COMMENTS for a100
col JOB_NAME for a30
col owner for a10
col state for a12
col SCHEDULE_TYPE for a16
col LAST_EXEC for a20
col enabled for a8
select JOB_NAME
 , STATE
 , ENABLED
 , PROGRAM_OWNER as OWNER
 , SCHEDULE_TYPE
 , RUN_COUNT
 , to_char(LAST_START_DATE, 'dd/mm/yyyy HH:MM:SS') as LAST_EXEC
 , COMMENTS
FROM DBA_SCHEDULER_JOBS
ORDER BY 1,2,3,4,5,6,7;
quit;
EOF
fi
}
#
#########################################################################################################
# JOBS CONTROL OF THE CLIENT [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_017_b()
{
  echo ""
}
# 12c
function func_dba_12_017_b()
{
  echo ""
}
# 18c
function func_dba_18_017_b()
{
  echo ""
}
# 19c
function func_dba_19_017_b()
{
  echo ""
}
# 20c
function func_dba_20_017_b()
{
  echo ""
}
#
function func_dba_017_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col COMMENTS for a100
col JOB_NAME for a30
col owner for a10
col state for a12
col SCHEDULE_TYPE for a16
col LAST_EXEC for a20
col enabled for a8
select JOB_NAME
 , STATE
 , ENABLED
 , PROGRAM_OWNER as OWNER
 , SCHEDULE_TYPE
 , RUN_COUNT
 , to_char(LAST_START_DATE, 'dd/mm/yyyy HH:MM:SS') as LAST_EXEC
 , COMMENTS
FROM DBA_SCHEDULER_JOBS
ORDER BY 1,2,3,4,5,6,7;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col COMMENTS for a100
col JOB_NAME for a30
col owner for a10
col state for a12
col SCHEDULE_TYPE for a16
col LAST_EXEC for a20
col enabled for a8
select JOB_NAME
 , STATE
 , ENABLED
 , PROGRAM_OWNER as OWNER
 , SCHEDULE_TYPE
 , RUN_COUNT
 , to_char(LAST_START_DATE, 'dd/mm/yyyy HH:MM:SS') as LAST_EXEC
 , COMMENTS
FROM DBA_SCHEDULER_JOBS
ORDER BY 1,2,3,4,5,6,7;
quit;
EOF
fi
}
#
#########################################################################################################
# MATERIALISED VIEWS DISABLED
#########################################################################################################
#
# 11g
function func_dba_11_018()
{
  echo ""
}
# 12c
function func_dba_12_018()
{
  echo ""
}
# 18c
function func_dba_18_018()
{
  echo ""
}
# 19c
function func_dba_19_018()
{
  echo ""
}
# 20c
function func_dba_20_018()
{
  echo ""
}
#
function func_dba_018()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col owner for a20
col type for a20
select owner
   , type
   , tablespace_name
   , round(sum(mb)) as mb
from (select owner,'mview' as type, tablespace_name, round(sum(bytes)/1024/1024) as mb from dba_segments where (owner,segment_name) in
     (select owner, mview_name from dba_mviews) group by owner, segment_type, tablespace_name
union
select owner
  , 'mview_log' as type
  , tablespace_name
  , round(sum(bytes)/1024/1024) as mb
from dba_segments
where (owner, segment_name) in
(select log_owner, log_table from dba_snapshot_logs)
group by owner, segment_type, tablespace_name
union
select owner
  , 'mview_index' as type
  , tablespace_name
  , round(sum(bytes)/1024/1024) as mb
from dba_segments
where (owner,segment_name) in
(select owner, index_name from dba_indexes where (owner,table_name) in
(select owner, mview_name from dba_mviews))
group by owner, segment_type, tablespace_name) t1
group by owner,type,tablespace_name;
quit;
EOF
}
#
#########################################################################################################
# VERIFY RUNNING JOBS
#########################################################################################################
#
# 11g
function func_dba_11_019_a()
{
  echo ""
}
# 12c
function func_dba_12_019_a()
{
  echo ""
}
# 18c
function func_dba_18_019_a()
{
  echo ""
}
# 19c
function func_dba_19_019_a()
{
  echo ""
}
# 20c
function func_dba_20_019_a()
{
  echo ""
}
#
function func_dba_019_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 1000 lines 700 timing on feedback on echo on heading on verify off colsep '|'
prompt
col "Last Date" for a30
col "This Date" for a30
select a.job "Job"
  , a.sid
  , a.failures "Failures"
  , Substr(To_Char(a.last_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "Last Date"
  , Substr(To_Char(a.this_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "This Date"
FROM dba_jobs_running a;
SET VERIFY ON
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 1000 lines 500 timing on VERIFY OFF colsep '|'
col "Last Date" for a30
col "This Date" for a30
select a.job "Job"
  , a.sid
  , a.failures "Failures"
  , Substr(To_Char(a.last_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "Last Date"
  , Substr(To_Char(a.this_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "This Date"
FROM dba_jobs_running a;
SET VERIFY ON
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY RUNNING JOBS
#########################################################################################################
#
# 11g
function func_dba_11_019_b()
{
  echo ""
}
# 12c
function func_dba_12_019_b()
{
  echo ""
}
# 18c
function func_dba_18_019_b()
{
  echo ""
}
# 19c
function func_dba_19_019_b()
{
  echo ""
}
# 20c
function func_dba_20_019_b()
{
  echo ""
}
#
function func_dba_019_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 1000 lines 700 timing on feedback on echo on heading on verify off colsep '|'
col "Last Date" for a30
col "This Date" for a30
select a.job "Job"
  , a.sid
  , a.failures "Failures"
  , Substr(To_Char(a.last_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "Last Date"
  , Substr(To_Char(a.this_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "This Date"
FROM dba_jobs_running a;
SET VERIFY ON
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 1000 lines 500 timing on VERIFY OFF colsep '|'
col "Last Date" for a30
col "This Date" for a30
select a.job "Job"
  , a.sid
  , a.failures "Failures"
  , Substr(To_Char(a.last_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "Last Date"
  , Substr(To_Char(a.this_date,'DD/MM/YYYY HH24:MI:SS'),1,20) "This Date"
FROM dba_jobs_running a;
SET VERIFY ON
quit;
EOF
fi
}
#
#########################################################################################################
# KILL A RUNNING SESSION
#########################################################################################################
#
# 11g
function func_dba_11_020_a()
{
  echo ""
}
# 12c
function func_dba_12_020_a()
{
  echo ""
}
# 18c
function func_dba_18_020_a()
{
  echo ""
}
# 19c
function func_dba_19_020_a()
{
  echo ""
}
# 20c
function func_dba_20_020_a()
{
  echo ""
}
#
function func_dba_020_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
col MACHINE for a30
col username for a25
col OSUSER for a30
col PROGRAM for a60
col "SID,SERIAL,@INST" for a20
select OSUSER
  , MACHINE
  , SID || ',' || SERIAL# || ',@' || INST_ID as "SID,SERIAL,@INST"
  , USERNAME
  , PROGRAM
from gv\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,3,5;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col MACHINE for a30
col username for a25
col OSUSER for a30
col PROGRAM for a60
col "SID,SERIAL,@INST" for a20
select OSUSER
  , MACHINE
  , SID || ',' || SERIAL# || ',@' || INST_ID as "SID,SERIAL,@INST"
  , USERNAME
  , PROGRAM
from gv\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,3,5;
quit;
EOF
fi
}
#
#########################################################################################################
# KILL A RUNNING SESSION
#########################################################################################################
#
# 11g
function func_dba_11_020_b()
{
  echo ""
}
# 12c
function func_dba_12_020_b()
{
  echo ""
}
# 18c
function func_dba_18_020_b()
{
  echo ""
}
# 19c
function func_dba_19_020_b()
{
  echo ""
}
# 20c
function func_dba_20_020_b()
{
  echo ""
}
#
function func_dba_020_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col MACHINE for a30
col username for a25
col OSUSER for a30
col PROGRAM for a60
col "SID,SERIAL,@INST" for a20
select OSUSER
  , MACHINE
  , SID || ',' || SERIAL# || ',@' || INST_ID as "SID,SERIAL,@INST"
  , USERNAME
  , PROGRAM
from gv\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,3,5;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col MACHINE for a30
col username for a25
col OSUSER for a30
col PROGRAM for a60
col "SID,SERIAL,@INST" for a20
select OSUSER
  , MACHINE
  , SID || ',' || SERIAL# || ',@' || INST_ID as "SID,SERIAL,@INST"
  , USERNAME
  , PROGRAM
from gv\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,3,5;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY PROFILE INFORMATION
#########################################################################################################
#
# 11g
function func_dba_11_021_a()
{
  echo ""
}
# 12c
function func_dba_12_021_a()
{
  echo ""
}
# 18c
function func_dba_18_021_a()
{
  echo ""
}
# 19c
function func_dba_19_021_a()
{
  echo ""
}
# 20c
function func_dba_20_021_a()
{
  echo ""
}
#
function func_dba_021_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
prompt ##############################################################
prompt # VERIFY PROFILE INFORMATION
prompt ##############################################################
COL RESOURCE_NAME FOR A40
COL LIMIT FOR A40
select resource_name, limit
from dba_profiles
order by 1,2;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
prompt # VERIFY PROFILE INFORMATION
prompt ##############################################################
prompt
COL RESOURCE_NAME FOR A40
COL LIMIT FOR A40
select resource_name, limit
from dba_profiles
order by 1,2;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY PROFILE INFORMATION
#########################################################################################################
#
# 11g
function func_dba_11_021_b()
{
  echo ""
}
# 12c
function func_dba_12_021_b()
{
  echo ""
}
# 18c
function func_dba_18_021_b()
{
  echo ""
}
# 19c
function func_dba_19_021_b()
{
  echo ""
}
# 20c
function func_dba_20_021_b()
{
  echo ""
}
#
function func_dba_021_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
COL RESOURCE_NAME FOR A40
COL LIMIT FOR A40
select resource_name, limit
from dba_profiles
order by 1,2;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
COL RESOURCE_NAME FOR A40
COL LIMIT FOR A40
select resource_name, limit
from dba_profiles
order by 1,2;
quit;
EOF
fi
}
#
#########################################################################################################
# BACKUP STATISTICS A
#########################################################################################################
#
# 11g
function func_dba_11_022_a()
{
  echo ""
}
# 12c
function func_dba_12_022_a()
{
  echo ""
}
# 18c
function func_dba_18_022_a()
{
  echo ""
}
# 19c
function func_dba_19_022_a()
{
  echo ""
}
# 20c
function func_dba_20_022_a()
{
  echo ""
}
#
function func_dba_022_a()
{
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR RMAN TYPE ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_RMAN_TYPE in "DB FULL" "RECVR AREA" "DB INCR" "DATAFILE FULL" "DATAFILE INCR" "ARCHIVELOG" "CONTROLFILE" "SPFILE"
do
  SRMAN_TYPE=${SET_RMAN_TYPE}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR RMAN TYPE SELECTED IS: ${RED} ${SRMAN_TYPE} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col STATUS format a30
col DURATION format a10
col INPUT_TYPE for a20
col OPTIMIZED for a10
col BACKUP_SIZE for a15
col BEGIN for a20
col END for a20
select * from (select INPUT_TYPE
    , STATUS
    , to_char(START_TIME,'DD/MM/YYYY hh24:mi') as BEGIN
    , to_char(END_TIME,'DD/MM/YYYY hh24:mi') as END
    , TIME_TAKEN_DISPLAY as DURATION
    , OPTIMIZED
    , d.OUTPUT_BYTES_DISPLAY as BACKUP_SIZE
from V\$RMAN_BACKUP_JOB_DETAILS d
where START_TIME > sysdate-30
and INPUT_TYPE = '${SRMAN_TYPE}'
order by session_key, BEGIN desc);
quit;
EOF
}
#
# where rownum <= 50;
#
#
#########################################################################################################
# BACKUP STATISTICS B
#########################################################################################################
#
# 11g
function func_dba_11_022_b()
{
  echo ""
}
# 12c
function func_dba_12_022_b()
{
  echo ""
}
# 18c
function func_dba_18_022_b()
{
  echo ""
}
# 19c
function func_dba_19_022_b()
{
  echo ""
}
# 20c
function func_dba_20_022_b()
{
  echo ""
}
#
function func_dba_022_b()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col STATUS format a30
col DURATION format a10
col INPUT_TYPE for a20
col OPTIMIZED for a10
col BACKUP_SIZE for a15
col BEGIN for a20
col END for a20
select * from (select INPUT_TYPE
    , STATUS
    , to_char(START_TIME,'DD/MM/YYYY hh24:mi') as BEGIN
    , to_char(END_TIME,'DD/MM/YYYY hh24:mi') as END
    , TIME_TAKEN_DISPLAY as DURATION
    , OPTIMIZED
    , d.OUTPUT_BYTES_DISPLAY as BACKUP_SIZE
from V\$RMAN_BACKUP_JOB_DETAILS d
where START_TIME > sysdate-30
order by session_key, BEGIN desc);
quit;
EOF
}
#
# where rownum <= 50;
#
#########################################################################################################
# QTD OF ARCHIVES PER HOUR
#########################################################################################################
#
# 11g
function func_dba_11_023()
{
  echo ""
}
# 12c
function func_dba_12_023()
{
  echo ""
}
# 18c
function func_dba_18_023()
{
  echo ""
}
# 19c
function func_dba_19_023()
{
  echo ""
}
# 20c
function func_dba_20_023()
{
  echo ""
}
#
function func_dba_023()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 feedback off timing on colsep '|'
col 00 for a5
col 01 for a5
col 02 for a5
col 03 for a5
col 04 for a5
col 05 for a5
col 06 for a5
col 07 for a5
col 08 for a5
col 09 for a5
col 10 for a5
col 11 for a5
col 12 for a5
col 13 for a5
col 14 for a5
col 15 for a5
col 16 for a5
col 17 for a5
col 18 for a5
col 19 for a5
col 20 for a5
col 21 for a5
col 22 for a5
col 23 for a5
select trunc(first_time) day
  , to_char(sum(decode(to_char(first_time,'HH24'),'00',1,0)), '9999') "00"
  , to_char(sum(decode(to_char(first_time,'HH24'),'01',1,0)), '9999') "01"
  , to_char(sum(decode(to_char(first_time,'HH24'),'02',1,0)), '9999') "02"
  , to_char(sum(decode(to_char(first_time,'HH24'),'03',1,0)), '9999') "03"
  , to_char(sum(decode(to_char(first_time,'HH24'),'04',1,0)), '9999') "04"
  , to_char(sum(decode(to_char(first_time,'HH24'),'05',1,0)), '9999') "05"
  , to_char(sum(decode(to_char(first_time,'HH24'),'06',1,0)), '9999') "06"
  , to_char(sum(decode(to_char(first_time,'HH24'),'07',1,0)), '9999') "07"
  , to_char(sum(decode(to_char(first_time,'HH24'),'08',1,0)), '9999') "08"
  , to_char(sum(decode(to_char(first_time,'HH24'),'09',1,0)), '9999') "09"
  , to_char(sum(decode(to_char(first_time,'HH24'),'10',1,0)), '9999') "10"
  , to_char(sum(decode(to_char(first_time,'HH24'),'11',1,0)), '9999') "11"
  , to_char(sum(decode(to_char(first_time,'HH24'),'12',1,0)), '9999') "12"
  , to_char(sum(decode(to_char(first_time,'HH24'),'13',1,0)), '9999') "13"
  , to_char(sum(decode(to_char(first_time,'HH24'),'14',1,0)), '9999') "14"
  , to_char(sum(decode(to_char(first_time,'HH24'),'15',1,0)), '9999') "15"
  , to_char(sum(decode(to_char(first_time,'HH24'),'16',1,0)), '9999') "16"
  , to_char(sum(decode(to_char(first_time,'HH24'),'17',1,0)), '9999') "17"
  , to_char(sum(decode(to_char(first_time,'HH24'),'18',1,0)), '9999') "18"
  , to_char(sum(decode(to_char(first_time,'HH24'),'19',1,0)), '9999') "19"
  , to_char(sum(decode(to_char(first_time,'HH24'),'20',1,0)), '9999') "20"
  , to_char(sum(decode(to_char(first_time,'HH24'),'21',1,0)), '9999') "21"
  , to_char(sum(decode(to_char(first_time,'HH24'),'22',1,0)), '9999') "22"
  , to_char(sum(decode(to_char(first_time,'HH24'),'23',1,0)), '9999') "23"
from gv\$log_history
where first_time > trunc(sysdate - 30)
and first_time < sysdate + 1
group by trunc(first_time)
order by 1;
quit;
EOF
}
#
#########################################################################################################
# LAST FILE OF LAST BACKUP ARCH - RMAN
#########################################################################################################
#
# 11g
function func_dba_11_024()
{
  echo ""
}
# 12c
function func_dba_12_024()
{
  echo ""
}
# 18c
function func_dba_18_024()
{
  echo ""
}
# 19c
function func_dba_19_024()
{
  echo ""
}
# 20c
function func_dba_20_024()
{
  echo ""
}
#
function func_dba_024()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy hh24:mi';
set pages 700 lines 700 feedback off timing on colsep '|'
col PATH format a100
col tag format a25
col DEVICE format a10
col SIZE_BYTES_DISPLAY for a10
col BEGIN for a20
col END for a20
select /*+ rule */ tag
  , device_type as DEVICE
  , handle as PATH
  , START_TIME as BEGIN
  , COMPLETION_TIME as END
  , SIZE_BYTES_DISPLAY
from v\$backup_piece_details
where session_recid > (select max(session_recid) -10000 from V\$RMAN_BACKUP_JOB_DETAILS where START_TIME > sysdate-30 and input_type in('ARCHIVELOG') and status in ('COMPLETED','COMPLETED WITH WARNINGS'))
and START_TIME > sysdate-30
order by START_TIME;
quit;
EOF
}
#
#########################################################################################################
# LAST FILE OF LAST BACKUP FULL - RMAN
#########################################################################################################
#
# 11g
function func_dba_11_025()
{
  echo ""
}
# 12c
function func_dba_12_025()
{
  echo ""
}
# 18c
function func_dba_18_025()
{
  echo ""
}
# 19c
function func_dba_19_025()
{
  echo ""
}
# 20c
function func_dba_20_025()
{
  echo ""
}
#
function func_dba_025()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy hh24:mi';
set pages 700 lines 700 feedback off timing on colsep '|'
col PATH format a100
col tag format a25
col DEVICE format a10
col SIZE_BYTES_DISPLAY for a10
col BEGIN for a20
col END for a20
select /*+ rule */ tag
  , device_type as DEVICE
  , handle as PATH
  , START_TIME as BEGIN
  , COMPLETION_TIME as END
  , SIZE_BYTES_DISPLAY
from v\$backup_piece_details
where session_recid > (select max(session_recid) -10000 from V\$RMAN_BACKUP_JOB_DETAILS where START_TIME > sysdate-30 and input_type in('DB FULL', 'DB INCR') and status in ('COMPLETED','COMPLETED WITH WARNINGS'))
and START_TIME > sysdate-30
order by START_TIME;
quit;
EOF
}
#
#########################################################################################################
# ARCHIVES GENERATED PER DAY
#########################################################################################################
#
# 11g
function func_dba_11_026()
{
  echo ""
}
# 12c
function func_dba_12_026()
{
  echo ""
}
# 18c
function func_dba_18_026()
{
  echo ""
}
# 19c
function func_dba_19_026()
{
  echo ""
}
# 20c
function func_dba_20_026()
{
  echo ""
}
#
function func_dba_026()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 feedback on timing on colsep '|'
col day for a20
col SIZE_MB for a20
col SIZE_GB for a20
col SIZE_TB for a20
select trunc(first_time) as day
  , to_char(sum(blocks * block_size)/1024/1024,'9G999G999D999') SIZE_MB
  , to_char(sum(blocks * block_size)/1024/1024/1024,'9G999G999D999') SIZE_GB
  , to_char(sum(blocks * block_size)/1024/1024/1024/1024,'9G999G999D999') SIZE_TB
from gv\$archived_log
where trunc(first_time) > sysdate -30
and trunc(first_time) < sysdate +1
group by trunc(first_time)
order by 1;
quit;
EOF
}
#
#########################################################################################################
# BACKUP LOG OF LAST BACKUP FULL - RMAN
#########################################################################################################
#
# 11g
function func_dba_11_027()
{
  echo ""
}
# 12c
function func_dba_12_027()
{
  echo ""
}
# 18c
function func_dba_18_027()
{
  echo ""
}
# 19c
function func_dba_19_027()
{
  echo ""
}
# 20c
function func_dba_20_027()
{
  echo ""
}
#
function func_dba_027()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 feedback off timing on colsep '|'
select decode(status, 'COMPLETED', 0,1) as STATUS
  , case when decode(status, 'COMPLETED', 0,1) = 0 then 'Backup Not Running' else 'Backup Running' end as "Running Y/N"
from v\$RMAN_BACKUP_JOB_DETAILS
where session_key = (select max(session_key) from v\$RMAN_BACKUP_JOB_DETAILS where START_TIME > sysdate - 30 and input_type in('DB FULL', 'DB INCR','CONTROLFILE'));
quit;
EOF
echo -e ">------------------------------------------------------------------------------------------------------------"
echo -e "# RMAN PROCESSES"
echo -e ">------------------------------------------------------------------------------------------------------------"
ps -ef | grep rman | grep -v grep
}
#
#########################################################################################################
# BACKUP LOG OF LASTS ARCHIVES - RMAN
#########################################################################################################
#
# 11g
function func_dba_11_028()
{
  echo ""
}
# 12c
function func_dba_12_028()
{
  echo ""
}
# 18c
function func_dba_18_028()
{
  echo ""
}
# 19c
function func_dba_19_028()
{
  echo ""
}
# 20c
function func_dba_20_028()
{
  echo ""
}
#
function func_dba_028()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 feedback off timing on colsep '|'
select decode(status, 'COMPLETED', 0,1) as STATUS
  , case when decode(status, 'COMPLETED', 0,1) = 0 then 'Backup Not Running' else 'Backup Running' end as "Running Y/N"
from v\$RMAN_BACKUP_JOB_DETAILS
where session_key = (select max(session_key) from v\$RMAN_BACKUP_JOB_DETAILS where START_TIME > sysdate - 30 and input_type in('ARCHIVELOG','CONTROLEFILE'));
quit;
EOF
echo -e ">------------------------------------------------------------------------------------------------------------"
echo -e "# RMAN PROCESSES"
echo -e ">------------------------------------------------------------------------------------------------------------"
ps -ef | grep rman | grep -v grep
}
#
#########################################################################################################
# ERRORS ON ALERT LOG FILE
#########################################################################################################
#
# 11g
function func_dba_11_029()
{
  echo ""
}
# 12c
function func_dba_12_029()
{
  echo ""
}
# 18c
function func_dba_18_029()
{
  echo ""
}
# 19c
function func_dba_19_029()
{
  echo ""
}
# 20c
function func_dba_20_029()
{
  echo ""
}
#
function func_dba_029()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
var days_back number;
exec :days_back := 15;
set pages 3000 lines 3000 feedback off timing on colsep '|'
col "DATE_TIME" for a20
col host_address for a16
col MESSAGE_TEXT for a140
select to_char(ORIGINATING_TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') as "DATE_TIME", host_address, MESSAGE_TEXT
from sys.X\$DBGALERTEXT
where (lower(MESSAGE_TEXT) like '%ora-%' or lower(MESSAGE_TEXT) like '%error%' or lower(MESSAGE_TEXT) like '%checkpoint not complete%' or lower(MESSAGE_TEXT) like '%fail%')
and ORIGINATING_TIMESTAMP > sysdate-:days_back
order by ORIGINATING_TIMESTAMP;
col total for a80
prompt
prompt ##############################################################
select '[ GENERAL ERRORS ] Total of Occurrences on The Lasts ' || :days_back || ' Days: ' || count(*) as "Total"
from sys.X\$DBGALERTEXT
where (lower(MESSAGE_TEXT) like '%error%' or lower(MESSAGE_TEXT) like '%checkpoint not complete%' or lower(MESSAGE_TEXT) like '%fail%')
and ORIGINATING_TIMESTAMP > sysdate-:days_back;
prompt
prompt ##############################################################
select '[ ORACLE ERRORS ] Total of Occurrences on The Lasts ' || :days_back || ' Days: ' || count(*) as "Total"
from sys.X\$DBGALERTEXT
where (lower(MESSAGE_TEXT) like '%ora-%' or lower(MESSAGE_TEXT) like '%error%' or lower(MESSAGE_TEXT) like '%fail%')
and ORIGINATING_TIMESTAMP > sysdate-:days_back;
prompt
prompt ##############################################################
select '[ ORA-00600 ] Total of Occurrences on The Lasts ' || :days_back || ' Days: ' || count(*) as "Total"
from sys.X\$DBGALERTEXT
where MESSAGE_TEXT like '%ORA-00600%'
and ORIGINATING_TIMESTAMP > sysdate-:days_back;
prompt
prompt ##############################################################
select '[ ORA-00700 ] Total of Occurrences on The Lasts ' || :days_back || ' Days: ' || count(*) as "Total"
from sys.X\$DBGALERTEXT
where MESSAGE_TEXT like '%ORA-00700%'
and ORIGINATING_TIMESTAMP > sysdate-:days_back;
prompt
prompt ##############################################################
select '[ ORA-07445 ] Total of Occurrences on The Lasts ' || :days_back || ' Days: ' || count(*) as "Total"
from sys.X\$DBGALERTEXT
where MESSAGE_TEXT like '%ORA-07445%'
and ORIGINATING_TIMESTAMP > sysdate-:days_back;
prompt
prompt ##############################################################
quit;
EOF
}
#
#########################################################################################################
# OEM ALERT
#########################################################################################################
#
# 11g
function func_dba_11_030()
{
  echo ""
}
# 12c
function func_dba_12_030()
{
  echo ""
}
# 18c
function func_dba_18_030()
{
  echo ""
}
# 19c
function func_dba_19_030()
{
  echo ""
}
# 20c
function func_dba_20_030()
{
  echo ""
}
#
function func_dba_030()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 feedback off timing on colsep '|'
col message_type for a30
col reason for a110
col date_alert for a20
col SUGGESTED_ACTION for a30
select to_char(TIME_SUGGESTED, 'dd/mm/yyyy hh24:mi') DATE_ALERT
  , message_type
  , reason
  , SUGGESTED_ACTION
FROM dba_outstanding_alerts
order by DATE_ALERT;
quit;
EOF
}
#
#########################################################################################################
# CAPTURE STATISTICS OF DATA DICTIONARY
#########################################################################################################
#
# 11g
function func_dba_11_031()
{
  echo ""
}
# 12c
function func_dba_12_031()
{
  echo ""
}
# 18c
function func_dba_18_031()
{
  echo ""
}
# 19c
function func_dba_19_031()
{
  echo ""
}
# 20c
function func_dba_20_031()
{
  echo ""
}
#
function func_dba_031()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
Prompt # WAIT A MOMENT PLEASE, THE STATISTICS COLLECTION IS RUNNING #
prompt ##############################################################
prompt BEGIN
exec DBMS_STATS.GATHER_DICTIONARY_STATS;
prompt END;
prompt /
quit;
EOF
}
#
#########################################################################################################
# CAPTURE STATISTICS ALL DATABASE
#########################################################################################################
#
# 11g
function func_dba_11_032()
{
  echo ""
}
# 12c
function func_dba_12_032()
{
  echo ""
}
# 18c
function func_dba_18_032()
{
  echo ""
}
# 19c
function func_dba_19_032()
{
  echo ""
}
# 20c
function func_dba_20_032()
{
  echo ""
}
#
function func_dba_032()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
Prompt # WAIT A MOMENT PLEASE, THE STATISTICS COLLECTION IS RUNNING #
prompt ##############################################################
prompt BEGIN
exec DBMS_STATS.GATHER_DATABASE_STATS;
prompt END;
prompt /
quit;
EOF
}
#
#########################################################################################################
# BLOCKING LOCKS
#########################################################################################################
#
# 11g
function func_dba_11_033()
{
  echo ""
}
# 12c
function func_dba_12_033()
{
  echo ""
}
# 18c
function func_dba_18_033()
{
  echo ""
}
# 19c
function func_dba_19_033()
{
  echo ""
}
# 20c
function func_dba_20_033()
{
  echo ""
}
#
function func_dba_033()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
SET TERMOUT OFF TERMOUT ON ECHO OFF FEEDBACK 6 HEADING ON LINESIZE 180 PAGESIZE 50000 TRIMSPOOL ON VERIFY OFF serveroutput ON FORMAT WRAPPED feedback OFF timing on
prompt ##############################################################
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
DECLARE
  CURSOR cur_BlockingLocks IS
    select iw.instance_name AS waiting_instance
      , sw.status AS waiting_status
      , lw.sid AS waiting_sid
      , sw.serial# AS waiting_serial_num
      , sw.username AS waiting_oracle_username
      , sw.osuser AS waiting_os_username
      , sw.machine AS waiting_machine
      , pw.spid AS waiting_spid
      , SUBSTR(sw.terminal,0, 39) AS waiting_terminal
      , SUBSTR(sw.program,0, 39) AS waiting_program
      , ROUND(lw.ctime/60) AS waiting_lock_time_min
      , DECODE (lh.type, 'CF', 'Control File', 'DX', 'Distributed Transaction', 'FS', 'File Set', 'IR', 'Instance Recovery', 'IS', 'Instance State', 'IV', 'Libcache Invalidation', 'LS', 'Log Start or Log Switch', 'MR', 'Media Recovery', 'RT', 'Redo Thread', 'RW', 'Row Wait', 'SQ', 'Sequence Number', 'ST', 'Diskspace Transaction', 'TE', 'Extend Table', 'TT', 'Temp Table', 'TX', 'Transaction', 'TM', 'DML', 'UL', 'PLSQL User_lock', 'UN', 'User Name', 'Nothing-'  ) AS waiter_lock_type
      , DECODE (lw.request, 0, 'None' /* Mon Lock equivalent */ , 1, 'NoLock' /* N */, 2, 'Row-Share (SS)' /* L */ , 3, 'Row-Exclusive (SX)' /* R */ , 4, 'Share-Table' /* S */ , 5, 'Share-Row-Exclusive (SSX)' /* C */ , 6, 'Exclusive' /* X */ , '[Nothing]' ) AS waiter_mode_request
      , ih.instance_name AS locking_instance
      , sh.status AS locking_status
      , lh.sid AS locking_sid
      , sh.serial# AS locking_serial_num
      , sh.username AS locking_oracle_username
      , sh.osuser AS locking_os_username
      , sh.machine AS locking_machine
      , ph.spid AS locking_spid
      , SUBSTR(sh.terminal,0, 39) AS locking_terminal
      , SUBSTR(sh.program,0, 39) AS locking_program
      , ROUND(lh.ctime/60) AS locking_lock_time_min
      , aw.sql_text AS waiting_sql_text
    FROM gv\$lock     lw
      , gv\$lock     lh
      , gv\$instance iw
      , gv\$instance ih
      , gv\$session  sw
      , gv\$session  sh
      , gv\$process  pw
      , gv\$process  ph
      , gv\$sqlarea  aw
    WHERE iw.inst_id  = lw.inst_id
    AND ih.inst_id  = lh.inst_id
    AND sw.inst_id  = lw.inst_id
    AND sh.inst_id  = lh.inst_id
    AND pw.inst_id  = lw.inst_id
    AND ph.inst_id  = lh.inst_id
    AND aw.inst_id  = lw.inst_id
    AND sw.sid      = lw.sid
    AND sh.sid      = lh.sid
    AND lh.id1      = lw.id1
    AND lh.id2      = lw.id2
    AND lh.request  = 0
    AND lw.lmode    = 0
    AND (lh.id1, lh.id2) IN ( select id1, id2 FROM gv\$lock WHERE request = 0 INTERSECT select id1, id2 FROM gv\$lock WHERE  lmode = 0)
    AND sw.paddr  = pw.addr (+)
    AND sh.paddr  = ph.addr (+)
    AND sw.sql_address  = aw.address
    ORDER BY iw.instance_name, lw.sid;
    TYPE t_BlockingLockRecord IS RECORD (
        WaitingInstanceName       VARCHAR2(16)
      , WaitingStatus             VARCHAR2(8)
      , WaitingSid                NUMBER
      , WaitingSerialNum          NUMBER
      , WaitingOracleUsername     VARCHAR2(30)
      , WaitingOSUsername         VARCHAR2(30)
      , WaitingMachine            VARCHAR2(64)
      , WaitingSpid               VARCHAR2(12)
      , WaitingTerminal           VARCHAR2(30)
      , WaitingProgram            VARCHAR2(48)
      , WaitingLockTimeMinute     NUMBER
      , WaiterLockType            VARCHAR2(30)
      , WaiterModeRequest         VARCHAR2(30)
      , LockingInstanceName       VARCHAR2(16)
      , LockingStatus             VARCHAR2(8)
      , LockingSid                NUMBER
      , LockingSerialNum          NUMBER
      , LockingOracleUsername     VARCHAR2(30)
      , LockingOSUsername         VARCHAR2(30)
      , LockingMachine            VARCHAR2(64)
      , LockingSpid               VARCHAR2(12)
      , LockingTerminal           VARCHAR2(30)
      , LockingProgram            VARCHAR2(48)
      , LockingLockTimeMinute     NUMBER
      , SQLText                   VARCHAR2(1000));
    TYPE t_BlockingLockRecordTable IS TABLE OF t_BlockingLockRecord INDEX BY BINARY_INTEGER;
    v_BlockingLockArray             t_BlockingLockRecordTable;
    v_BlockingLockRec               cur_BlockingLocks%ROWTYPE;
    v_NumBlockingLocksIncidents     BINARY_INTEGER := 0;
BEGIN
    DBMS_OUTPUT.ENABLE(1000000);
    OPEN cur_BlockingLocks;
    LOOP
        FETCH cur_BlockingLocks INTO v_BlockingLockRec;
        EXIT WHEN cur_BlockingLocks%NOTFOUND;
        v_NumBlockingLocksIncidents := v_NumBlockingLocksIncidents + 1;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingInstanceName      := v_BlockingLockRec.waiting_instance;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingStatus            := v_BlockingLockRec.waiting_status;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingSid               := v_BlockingLockRec.waiting_sid;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingSerialNum         := v_BlockingLockRec.waiting_serial_num;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingOracleUsername    := v_BlockingLockRec.waiting_oracle_username;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingOSUsername        := v_BlockingLockRec.waiting_os_username;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingMachine           := v_BlockingLockRec.waiting_machine;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingSpid              := v_BlockingLockRec.waiting_spid;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingTerminal          := v_BlockingLockRec.waiting_terminal;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingProgram           := v_BlockingLockRec.waiting_program;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaitingLockTimeMinute    := v_BlockingLockRec.waiting_lock_time_min;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaiterLockType           := v_BlockingLockRec.waiter_lock_type;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).WaiterModeRequest        := v_BlockingLockRec.waiter_mode_request;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingInstanceName      := v_BlockingLockRec.locking_instance;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingStatus            := v_BlockingLockRec.locking_status;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingSid               := v_BlockingLockRec.locking_sid;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingSerialNum         := v_BlockingLockRec.locking_serial_num;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingOracleUsername    := v_BlockingLockRec.locking_oracle_username;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingOSUsername        := v_BlockingLockRec.locking_os_username;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingMachine           := v_BlockingLockRec.locking_machine;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingSpid              := v_BlockingLockRec.locking_spid;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingTerminal          := v_BlockingLockRec.locking_terminal;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingProgram           := v_BlockingLockRec.locking_program;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).LockingLockTimeMinute    := v_BlockingLockRec.locking_lock_time_min;
        v_BlockingLockArray(v_NumBlockingLocksIncidents).SQLText                  := v_BlockingLockRec.waiting_sql_text;
    END LOOP;
    CLOSE cur_BlockingLocks;
    DBMS_OUTPUT.PUT_LINE('Number of blocking lock incidents: ' || v_BlockingLockArray.COUNT);
    DBMS_OUTPUT.PUT(chr(10));
    FOR RowIndex IN 1 .. v_BlockingLockArray.COUNT
    LOOP
        DBMS_OUTPUT.PUT_LINE('Incident ' || RowIndex);
        DBMS_OUTPUT.PUT_LINE('---');
        DBMS_OUTPUT.PUT_LINE('                        WAITING                                  BLOCKING');
        DBMS_OUTPUT.PUT_LINE('                        ---------------------------------------- ----------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Instance Name         : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingInstanceName, 41)   || v_BlockingLockArray(RowIndex).LockingInstanceName);
        DBMS_OUTPUT.PUT_LINE('Oracle SID            : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingSid, 41)            || v_BlockingLockArray(RowIndex).LockingSid);
        DBMS_OUTPUT.PUT_LINE('Serial#               : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingSerialNum, 41)      || v_BlockingLockArray(RowIndex).LockingSerialNum);
        DBMS_OUTPUT.PUT_LINE('Oracle User           : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingOracleUsername, 41) || v_BlockingLockArray(RowIndex).LockingOracleUsername);
        DBMS_OUTPUT.PUT_LINE('O/S User              : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingOSUsername, 41)     || v_BlockingLockArray(RowIndex).LockingOSUsername);
        DBMS_OUTPUT.PUT_LINE('Machine               : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingMachine, 41)        || v_BlockingLockArray(RowIndex).LockingMachine);
        DBMS_OUTPUT.PUT_LINE('O/S PID               : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingSpid, 41)           || v_BlockingLockArray(RowIndex).LockingSpid);
        DBMS_OUTPUT.PUT_LINE('Terminal              : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingTerminal, 41)       || v_BlockingLockArray(RowIndex).LockingTerminal);
        DBMS_OUTPUT.PUT_LINE('Lock Time             : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingLockTimeMinute      || ' minutes', 41) || v_BlockingLockArray(RowIndex).LockingLockTimeMinute ||' minutes');
        DBMS_OUTPUT.PUT_LINE('Status                : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingStatus, 41)         || v_BlockingLockArray(RowIndex).LockingStatus);
        DBMS_OUTPUT.PUT_LINE('Program               : ' || RPAD(v_BlockingLockArray(RowIndex).WaitingProgram, 41)        || v_BlockingLockArray(RowIndex).LockingProgram);
        DBMS_OUTPUT.PUT_LINE('Waiter Lock Type      : ' || v_BlockingLockArray(RowIndex).WaiterLockType);
        DBMS_OUTPUT.PUT_LINE('Waiter Mode Request   : ' || v_BlockingLockArray(RowIndex).WaiterModeRequest);
        DBMS_OUTPUT.PUT_LINE('Waiting SQL           : ' || v_BlockingLockArray(RowIndex).SQLText);
        DBMS_OUTPUT.PUT(chr(10));
    END LOOP;
END;
/
quit;
EOF
}
#
#########################################################################################################
# LOCKED OBJECTS
#########################################################################################################
#
# 11g
function func_dba_11_034()
{
  echo ""
}
# 12c
function func_dba_12_034()
{
  echo ""
}
# 18c
function func_dba_18_034()
{
  echo ""
}
# 19c
function func_dba_19_034()
{
  echo ""
}
# 20c
function func_dba_20_034()
{
  echo ""
}
#
function func_dba_034()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
SET ECHO OFF FEEDBACK 6 HEADING ON LINESIZE 500 PAGESIZE 50000 TERMOUT ON TIMING OFF TRIMOUT ON TRIMSPOOL ON VERIFY OFF timing on
prompt ##############################################################
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
COLUMN instance_name                FORMAT a9           HEADING 'Instance'
COLUMN sid                          FORMAT 999999       HEADING 'SID'
COLUMN sid_serial                   FORMAT a20          HEADING 'SID / Serial#'
COLUMN session_status               FORMAT a9           HEADING 'Status'
COLUMN locking_oracle_user          FORMAT a20          HEADING 'Locking Oracle User'
COLUMN object_owner                 FORMAT a20          HEADING 'Object Owner'
COLUMN object_name                  FORMAT a30          HEADING 'Object Name'
COLUMN object_type                  FORMAT a25          HEADING 'Object Type'
COLUMN locked_mode                  FORMAT a35          HEADING 'Locked Mode'
CLEAR BREAKS
select i.instance_name                    instance_name
  , l.session_id || ' / ' || s.serial#    sid_serial
  , s.status                              session_status
  , l.oracle_username                     locking_oracle_user
  , o.owner                               object_owner
  , o.object_name                         object_name
  , o.object_type                         object_type
  , DECODE (   l.locked_mode
             , 0, 'None'                        /* Mon Lock equivalent */
             , 1, 'NoLock'                      /* N */
             , 2, 'Row-Share (SS)'              /* L */
             , 3, 'Row-Exclusive (SX)'          /* R */
             , 4, 'Share-Table'                 /* S */
             , 5, 'Share-Row-Exclusive (SSX)'   /* C */
             , 6, 'Exclusive'                   /* X */
             ,    '[Nothing]' )                 locked_mode
FROM dba_objects       o
  , gv\$session        s
  , gv\$locked_object  l
  , gv\$instance       i
WHERE i.inst_id     = l.inst_id
  AND s.inst_id     = l.inst_id
  AND s.sid         = l.session_id
  AND o.object_id   = l.object_id
ORDER BY i.instance_name, l.session_id;
quit;
EOF
}
#
#########################################################################################################
# BLOCKING LOCKS ( SUMARY )
#########################################################################################################
#
# 11g
function func_dba_11_035()
{
  echo ""
}
# 12c
function func_dba_12_035()
{
  echo ""
}
# 18c
function func_dba_18_035()
{
  echo ""
}
# 19c
function func_dba_19_035()
{
  echo ""
}
# 20c
function func_dba_20_035()
{
  echo ""
}
#
function func_dba_035()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
SET TERMOUT OFF TERMOUT ON ECHO OFF FEEDBACK 6 HEADING ON LINESIZE 256 PAGESIZE 50000 TERMOUT ON TIMING ON TRIMOUT ON TRIMSPOOL ON VERIFY OFF timing on
prompt ##############################################################
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
COLUMN waiting_instance_sid_serial  FORMAT a24          HEADING '[WAITING]|Instance - SID / Serial#'
COLUMN waiting_oracle_username      FORMAT a20          HEADING '[WAITING]|Oracle User'
COLUMN waiting_pid                  FORMAT a11          HEADING '[WAITING]|PID'
COLUMN waiting_machine              FORMAT a15          HEADING '[WAITING]|Machine'   TRUNC
COLUMN waiting_os_username          FORMAT a15          HEADING '[WAITING]|O/S User'
COLUMN waiter_lock_type_mode_req    FORMAT a35          HEADING 'Waiter Lock Type / Mode Requested'
COLUMN waiting_lock_time_min        FORMAT a10          HEADING '[WAITING]|Lock Time'
COLUMN waiting_instance_sid         FORMAT a15          HEADING '[WAITING]|Instance - SID'
COLUMN waiting_sql_text             FORMAT a105         HEADING '[WAITING]|SQL Text'    WRAP
COLUMN locking_instance_sid_serial  FORMAT a24          HEADING '[LOCKING]|Instance - SID / Serial#'
COLUMN locking_oracle_username      FORMAT a20          HEADING '[LOCKING]|Oracle User'
COLUMN locking_oracle_program       FORMAT a25          HEADING '[LOCKING]|Oracle Program'
COLUMN locking_pid                  FORMAT a11          HEADING '[LOCKING]|PID'
COLUMN locking_machine              FORMAT a15          HEADING '[LOCKING]|Machine'   TRUNC
COLUMN locking_os_username          FORMAT a15          HEADING '[LOCKING]|O/S User'
COLUMN locking_lock_time_min        FORMAT a10          HEADING '[LOCKING]|Lock Time'
COLUMN instance_name                FORMAT a8           HEADING 'Instance'
COLUMN sid                          FORMAT 999999       HEADING 'SID'
COLUMN session_status               FORMAT a9           HEADING 'Status'
COLUMN locking_oracle_user          FORMAT a20          HEADING 'Locking Oracle User'
COLUMN locking_os_user              FORMAT a20          HEADING 'Locking O/S User'
COLUMN locking_os_pid               FORMAT a11          HEADING 'Locking PID'
COLUMN locking_machine              FORMAT a15          HEADING 'Locking Machine'   TRUNC
COLUMN object_owner                 FORMAT a15          HEADING 'Object Owner'
COLUMN object_name                  FORMAT a25          HEADING 'Object Name'
COLUMN object_type                  FORMAT a15          HEADING 'Object Type'
COLUMN locked_mode                                      HEADING 'Locked Mode'
CLEAR BREAKS
select iw.instance_name || ' - ' || lw.sid || ' / ' || sw.serial#  waiting_instance_sid_serial
  , sw.username                                               waiting_oracle_username
  , ROUND(lw.ctime/60) || ' min.'                             waiting_lock_time_min
  , DECODE (   lh.type
             , 'CF', 'Control File'
             , 'DX', 'Distributed Transaction'
             , 'FS', 'File Set'
             , 'IR', 'Instance Recovery'
             , 'IS', 'Instance State'
             , 'IV', 'Libcache Invalidation'
             , 'LS', 'Log Start or Log Switch'
             , 'MR', 'Media Recovery'
             , 'RT', 'Redo Thread'
             , 'RW', 'Row Wait'
             , 'SQ', 'Sequence Number'
             , 'ST', 'Diskspace Transaction'
             , 'TE', 'Extend Table'
             , 'TT', 'Temp Table'
             , 'TX', 'Transaction'
             , 'TM', 'DML'
             , 'UL', 'PLSQL User_lock'
             , 'UN', 'User Name'
             , 'Nothing-' ) || ' / ' || DECODE ( lw.request
             , 0, 'None'                        /* Mon Lock equivalent */
             , 1, 'NoLock'                      /* N */
             , 2, 'Row-Share (SS)'              /* L */
             , 3, 'Row-Exclusive (SX)'          /* R */
             , 4, 'Share-Table'                 /* S */
             , 5, 'Share-Row-Exclusive (SSX)'   /* C */
             , 6, 'Exclusive'                   /* X */
             ,    '[Nothing]' )                                         waiter_lock_type_mode_req
  , ih.instance_name || ' - ' || lh.sid || ' / ' || sh.serial#          locking_instance_sid_serial
  , sh.username                                                         locking_oracle_username
  , sh.program                                                          locking_oracle_program
  , ROUND(lh.ctime/60) || ' min.'                                       locking_lock_time_min
FROM gv\$lock     lw
  , gv\$lock     lh
  , gv\$instance iw
  , gv\$instance ih
  , gv\$session  sw
  , gv\$session  sh
WHERE iw.inst_id  = lw.inst_id
  AND ih.inst_id  = lh.inst_id
  AND sw.inst_id  = lw.inst_id
  AND sh.inst_id  = lh.inst_id
  AND sw.sid      = lw.sid
  AND sh.sid      = lh.sid
  AND lh.id1      = lw.id1
  AND lh.id2      = lw.id2
  AND lh.request  = 0
  AND lw.lmode    = 0
  AND (lh.id1, lh.id2) IN (select id1, id2 FROM gv\$lock WHERE request = 0 INTERSECT select id1, id2 FROM gv\$lock WHERE lmode = 0)
ORDER BY iw.instance_name, lw.sid;
quit;
EOF
}
#
#########################################################################################################
# BLOCKING LOCKS ( USER DETAILS )
#########################################################################################################
#
# 11g
function func_dba_11_036()
{
  echo ""
}
# 12c
function func_dba_12_036()
{
  echo ""
}
# 18c
function func_dba_18_036()
{
  echo ""
}
# 19c
function func_dba_19_036()
{
  echo ""
}
# 20c
function func_dba_20_036()
{
  echo ""
}
#
function func_dba_036()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt
col waiting_instance_sid_serial for a30
col waiting_oracle_username for a15
col waiting_os_username for a15
col waiting_machine for a40
col waiting_pid for a10
col locking_instance_sid_serial for a30
col locking_oracle_username for a25
col locking_os_username for a20
col locking_machine for a20
col loocking_program for a20
col locking_pid for a10
select iw.instance_name || ' - ' || lw.sid || ' / ' || sw.serial#  waiting_instance_sid_serial
  , sw.username                                                    waiting_oracle_username
  , sw.osuser                                                      waiting_os_username
  , sw.machine                                                     waiting_machine
  , pw.spid                                                        waiting_pid
  , ih.instance_name || ' - ' || lh.sid || ' / ' || sh.serial#     locking_instance_sid_serial
  , sh.username                                                    locking_oracle_username
  , sh.osuser                                                      locking_os_username
  , sh.machine                                                     locking_machine
  , sh.program                                                     loocking_program
  , ph.spid                                                        locking_pid
FROM gv\$lock    lw
  , gv\$lock     lh
  , gv\$instance iw
  , gv\$instance ih
  , gv\$session  sw
  , gv\$session  sh
  , gv\$process  pw
  , gv\$process  ph
WHERE iw.inst_id  = lw.inst_id
  AND ih.inst_id  = lh.inst_id
  AND sw.inst_id  = lw.inst_id
  AND sh.inst_id  = lh.inst_id
  AND pw.inst_id  = lw.inst_id
  AND ph.inst_id  = lh.inst_id
  AND sw.sid      = lw.sid
  AND sh.sid      = lh.sid
  AND lh.id1      = lw.id1
  AND lh.id2      = lw.id2
  AND lh.request  = 0
  AND lw.lmode    = 0
  AND (lh.id1, lh.id2) IN (select id1, id2 FROM gv\$lock WHERE request = 0 INTERSECT select id1,id2 FROM gv\$lock WHERE lmode = 0)
  AND sw.paddr  = pw.addr (+)
  AND sh.paddr  = ph.addr (+)
ORDER BY iw.instance_name, lw.sid;
quit;
EOF
}
#
#########################################################################################################
# BLOCKING LOCKS ( WAITING SQL )
#########################################################################################################
#
# 11g
function func_dba_11_037()
{
  echo ""
}
# 12c
function func_dba_12_037()
{
  echo ""
}
# 18c
function func_dba_18_037()
{
  echo ""
}
# 19c
function func_dba_19_037()
{
  echo ""
}
# 20c
function func_dba_20_037()
{
  echo ""
}
#
function func_dba_037()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
select iw.instance_name || ' - ' || lw.sid || ' / ' || sw.serial#  waiting_instance_sid_serial
  , aw.sql_text                                                    waiting_sql_text
FROM gv\$lock     lw
  , gv\$lock     lh
  , gv\$instance iw
  , gv\$instance ih
  , gv\$session  sw
  , gv\$session  sh
  , gv\$sqlarea  aw
WHERE iw.inst_id  = lw.inst_id
  AND ih.inst_id  = lh.inst_id
  AND sw.inst_id  = lw.inst_id
  AND sh.inst_id  = lh.inst_id
  AND aw.inst_id  = lw.inst_id
  AND sw.sid      = lw.sid
  AND sh.sid      = lh.sid
  AND lh.id1      = lw.id1
  AND lh.id2      = lw.id2
  AND lh.request  = 0
  AND lw.lmode    = 0
  AND (lh.id1, lh.id2) IN (select id1, id2 FROM gv\$lock WHERE request = 0 INTERSECT select id1, id2 FROM gv\$lock WHERE lmode = 0)
  AND sw.sql_address  = aw.address
ORDER BY iw.instance_name, lw.sid;
quit;
EOF
}
#
#########################################################################################################
# LOCKED OBJECTS [ DETAILS ]
#########################################################################################################
#
# 11g
function func_dba_11_038()
{
  echo ""
}
# 12c
function func_dba_12_038()
{
  echo ""
}
# 18c
function func_dba_18_038()
{
  echo ""
}
# 19c
function func_dba_19_038()
{
  echo ""
}
# 20c
function func_dba_20_038()
{
  echo ""
}
#
function func_dba_038()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 1000 lines 1000 timing on
prompt ##############################################################
col INSTANCE for a10
col status for a10
col OBJECT_NAME for a30
col MACHINE for a30
col oracle_user for a15
col OS_USER for a15
col PROGRAM for a25
col USER for a10
col OWNER for a15
col OS_PID for a8
col LOCKED_MODE for a20
col OBJECT_TYPE for a15
col OBJECT_OWNER for a15
col LOCKING_OS_PID for a8
col LOCKING_OS_USER for a20
select i.instance_name        instance
  , l.session_id              sid
  , s.status                  status
  , l.oracle_username         oracle_user
  , o.owner                   owner
  , s.osuser                  os_user
  , s.machine                 machine
  , p.spid                    os_pid
  , o.object_name             object_name
  , o.object_type             object_type
  , s.program                 program
  , DECODE (   l.locked_mode
             , 0, 'None'                        /* Mon Lock equivalent */
             , 1, 'NoLock'                      /* N */
             , 2, 'Row-Share (SS)'              /* L */
             , 3, 'Row-Exclusive (SX)'          /* R */
             , 4, 'Share-Table'                 /* S */
             , 5, 'Share-Row-Exclusive (SSX)'   /* C */
             , 6, 'Exclusive'                   /* X */
             ,    '[Nothing]')                  locked_mode
FROM dba_objects       o
  , gv\$session        s
  , gv\$process        p
  , gv\$locked_object  l
  , gv\$instance       i
WHERE i.inst_id     = l.inst_id
  AND s.inst_id     = l.inst_id
  AND s.inst_id     = p.inst_id
  AND s.sid         = l.session_id
  AND o.object_id   = l.object_id
  AND s.paddr       = p.addr
ORDER BY i.instance_name, l.session_id;
quit;
EOF
}
#
#########################################################################################################
# DML AND DDL LOCKS
#########################################################################################################
#
# 11g
function func_dba_11_039()
{
  echo ""
}
# 12c
function func_dba_12_039()
{
  echo ""
}
# 18c
function func_dba_18_039()
{
  echo ""
}
# 19c
function func_dba_19_039()
{
  echo ""
}
# 20c
function func_dba_20_039()
{
  echo ""
}
#
function func_dba_039()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
SET TERMOUT OFF TERMOUT ON ECHO OFF FEEDBACK 6 HEADING ON LINESIZE 256 PAGESIZE 50000 TERMOUT ON TRIMOUT ON TRIMSPOOL ON VERIFY OFF timing on
prompt ##############################################################
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
COLUMN instance_name         FORMAT a9        HEADING 'Instance'
COLUMN sid_serial            FORMAT a15       HEADING 'SID / Serial#'
COLUMN session_status        FORMAT a9        HEADING 'Status'
COLUMN locking_oracle_user   FORMAT a20       HEADING 'Locking Oracle User'
COLUMN lock_type             FORMAT a9        HEADING 'Lock Type'
COLUMN mode_held             FORMAT a10       HEADING 'Mode Held'
COLUMN object                FORMAT a42       HEADING 'Object'
COLUMN program               FORMAT a20       HEADING 'Program'
COLUMN wait_time_sec         FORMAT 999,999   HEADING 'Wait Time (sec)'
COLUMN wait_time_min         FORMAT 999,999   HEADING 'Wait Time (min)'
COLUMN wait_time_hour        FORMAT 999,999   HEADING 'Wait Time (hour)'
CLEAR BREAKS
select i.instance_name                   instance_name
  , l.session_id || ' / ' || s.serial#   sid_serial
  , s.status                             session_status
  , s.username                           locking_oracle_user
  , l.lock_type                          lock_type
  , l.mode_held                          mode_held
  , o.owner || '.' || o.object_name      object
  , SUBSTR(s.program, 0, 20)             program
  , ROUND(w.seconds_in_wait, 2)          wait_time_sec
  , ROUND(w.seconds_in_wait/60, 2)       wait_time_min
  , ROUND(w.seconds_in_wait/60/60, 2)       wait_time_hour
FROM v\$instance      i
   , v\$session       s
   , dba_locks        l
   , dba_objects      o
   , v\$session_wait  w
WHERE s.sid = l.session_id
AND l.lock_type IN ('DML','DDL')
AND l.lock_id1 = o.object_id
AND l.session_id = w.sid
ORDER BY i.instance_name, l.session_id;
quit;
EOF
}
#
#########################################################################################################
# DML TABLE LOCKS TIME
#########################################################################################################
#
# 11g
function func_dba_11_040()
{
  echo ""
}
# 12c
function func_dba_12_040()
{
  echo ""
}
# 18c
function func_dba_18_040()
{
  echo ""
}
# 19c
function func_dba_19_040()
{
  echo ""
}
# 20c
function func_dba_20_040()
{
  echo ""
}
#
function func_dba_040()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
SET TERMOUT ON TERMOUT ON ECHO OFF FEEDBACK 6 HEADING ON LINESIZE 256 PAGESIZE 50000 TERMOUT ON TIMING ON TRIMOUT ON TRIMSPOOL ON VERIFY OFF timing on
prompt ##############################################################
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
COLUMN instance_name                FORMAT a9           HEADING 'Instance'
COLUMN locking_oracle_user          FORMAT a20          HEADING 'Locking Oracle User'
COLUMN sid_serial                   FORMAT a15          HEADING 'SID / Serial#'
COLUMN mode_held                    FORMAT a15          HEADING 'Mode Held'
COLUMN mode_requested               FORMAT a15          HEADING 'Mode Requested'
COLUMN lock_type                    FORMAT a15          HEADING 'Lock Type'
COLUMN object                       FORMAT a42          HEADING 'Object'
COLUMN program                      FORMAT a20          HEADING 'Program'
COLUMN lock_time_min                FORMAT 999,999      HEADING 'Lock Time (min)'
COLUMN lock_time_hours              FORMAT 999,999      HEADING 'Lock Time (hours)'
COLUMN lock_time_days               FORMAT 999,999      HEADING 'Lock Time (days)'
CLEAR BREAKS
select i.instance_name instance_name
  , l.sid || ' / ' || s.serial# sid_serial
  , s.username locking_oracle_user
  , DECODE(   l.lmode
            , 1, NULL
            , 2, 'Row Share'
            , 3, 'Row Exclusive'
            , 4, 'Share'
            , 5, 'Share Row Exclusive'
            , 6, 'Exclusive'
            ,    'None') mode_held
  , DECODE(   l.request
            , 1, NULL
            , 2, 'Row Share'
            , 3, 'Row Exclusive'
            , 4, 'Share'
            , 5, 'Share Row Exclusive'
            , 6, 'Exclusive'
            ,    'None') mode_requested
  , DECODE (   l.type
             , 'CF', 'Control File'
             , 'DX', 'Distributed Transaction'
             , 'FS', 'File Set'
             , 'IR', 'Instance Recovery'
             , 'IS', 'Instance State'
             , 'IV', 'Libcache Invalidation'
             , 'LS', 'Log Start or Log Switch'
             , 'MR', 'Media Recovery'
             , 'RT', 'Redo Thread'
             , 'RW', 'Row Wait'
             , 'SQ', 'Sequence Number'
             , 'ST', 'Diskspace Transaction'
             , 'TE', 'Extend Table'
             , 'TT', 'Temp Table'
             , 'TX', 'Transaction'
             , 'TM', 'DML'
             , 'UL', 'PLSQL User_lock'
             , 'UN', 'User Name'
             ,       'Nothing'
           ) lock_type
  , o.owner || '.' || o.object_name object
  , ROUND(l.ctime/60, 2) lock_time_min
  , ROUND(l.ctime/60/60, 2) lock_time_hours
  , ROUND(l.ctime/60/60/24, 2) lock_time_days
FROM v\$instance    i
   , v\$session     s
   , v\$lock        l
   , dba_objects    o
   , dba_tables     t
WHERE l.id1            =  o.object_id
  AND s.sid            =  l.sid
  AND o.owner          =  t.owner
  AND o.object_name    =  t.table_name
  AND o.owner          <> 'SYS'
  AND l.type           =  'TM'
ORDER BY i.instance_name, l.sid;
quit;
EOF
}
#
#########################################################################################################
# VERIFY SESSIONS [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_041_a()
{
  echo ""
}
# 12c
function func_dba_12_041_a()
{
  echo ""
}
# 18c
function func_dba_18_041_a()
{
  echo ""
}
# 19c
function func_dba_19_041_a()
{
  echo ""
}
# 20c
function func_dba_20_041_a()
{
  echo ""
}
#
function func_dba_041_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
col MACHINE for a45
col OSUSER for a25
col EVENT for a30
col PROGRAM for a60
col username for a20
select SERIAL#
  , USERNAME
  , MACHINE
  , OSUSER
  , SID
  , event
  , PROGRAM
from v\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,5,6;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 2000 lines 700 timing on feedback on colsep '|'
col MACHINE for a45
col OSUSER for a25
col EVENT for a30
col PROGRAM for a60
col username for a20
select SERIAL#
  , USERNAME
  , MACHINE
  , OSUSER
  , SID
  , event
  , PROGRAM
from v\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,5,6;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY SESSIONS [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_041_b()
{
  echo ""
}
# 12c
function func_dba_12_041_b()
{
  echo ""
}
# 18c
function func_dba_18_041_b()
{
  echo ""
}
# 19c
function func_dba_19_041_b()
{
  echo ""
}
# 20c
function func_dba_20_041_b()
{
  echo ""
}
#
function func_dba_041_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col MACHINE for a45
col OSUSER for a25
col EVENT for a50
col PROGRAM for a60
col username for a20
select SERIAL#
  , USERNAME
  , MACHINE
  , OSUSER
  , SID
  , event
  , PROGRAM
from v\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,5,6;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 2000 lines 700 timing on feedback on colsep '|'
col MACHINE for a45
col OSUSER for a25
col EVENT for a50
col PROGRAM for a60
col username for a20
select SERIAL#
  , USERNAME
  , MACHINE
  , OSUSER
  , SID
  , event
  , PROGRAM
from v\$session
where osuser not in ('GRID','grid','ORACLE','oracle')
order by 1,2,5,6;
quit;
EOF
fi
}
#
#########################################################################################################
# TOP 20 DATABASE SESSIONS
#########################################################################################################
#
# 11g
function func_dba_11_042_a()
{
  echo ""
}
# 12c
function func_dba_12_042_a()
{
  echo ""
}
# 18c
function func_dba_18_042_a()
{
  echo ""
}
# 19c
function func_dba_19_042_a()
{
  echo ""
}
# 20c
function func_dba_20_042_a()
{
  echo ""
}
#
function func_dba_042_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} select YOUR DATABASE [ CDB\$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
col rank form 99
col sql_id for a15
col MACHINE for a30
col event for a30
col username for a25
col OSUSER for a25
col PROGRAM for a40
select rownum as rank
  , a.sid
  , a.serial#
  , a.sql_id
  , a.username
  , a.osuser
  , a.machine
  , a.program
--  , a.event
  , a.CPUMins
  , a.CPUHours
  , a.CPUDays
from (select v.sid
        , serial#
	, sql_id
        , username
        , osuser
        , machine
        , program
--	, event
        , round(v.value/(100*60), 0) CPUMins
	, round(v.value/60/60)/100 CPUHours
	, round(v.value/60/60/24)/100 CPUDays
        FROM gv\$statname s, gv\$sesstat v, gv\$session sess
        WHERE s.name = 'CPU used by this session'
          and sess.sid = v.sid
          and v.statistic# = s.statistic#
          and v.value > 0
      ORDER BY v.value DESC) a
where rownum < 21
and osuser not in ('GRID','grid','ORACLE','oracle');
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col rank form 99
col sql_id for a15
col MACHINE for a30
col event for a30
col username for a25
col OSUSER for a25
col PROGRAM for a40
select rownum as rank
  , a.sid
  , a.serial#
  , a.sql_id
  , a.username
  , a.osuser
  , a.machine
  , a.program
--  , a.event
  , a.CPUMins
  , a.CPUHours
  , a.CPUDays
from (select v.sid
        , serial#
        , sql_id
        , username
        , osuser
        , machine
        , program
--      , event
        , round(v.value/(100*60), 0) CPUMins
        , round(v.value/60/60)/100 CPUHours
        , round(v.value/60/60/24)/100 CPUDays
        FROM gv\$statname s, gv\$sesstat v, gv\$session sess
        WHERE s.name = 'CPU used by this session'
          and sess.sid = v.sid
          and v.statistic# = s.statistic#
          and v.value > 0
      ORDER BY v.value DESC) a
where rownum < 21
and osuser not in ('GRID','grid','ORACLE','oracle');
quit;
EOF
fi
}
#
#########################################################################################################
# TOP 20 DATABASE SESSIONS
#########################################################################################################
#
# 11g
function func_dba_11_042_b()
{
  echo ""
}
# 12c
function func_dba_12_042_b()
{
  echo ""
}
# 18c
function func_dba_18_042_b()
{
  echo ""
}
# 19c
function func_dba_19_042_b()
{
  echo ""
}
# 20c
function func_dba_20_042_b()
{
  echo ""
}
#
function func_dba_042_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col rank form 99
col sql_id for a15
col MACHINE for a30
col event for a30
col username for a25
col OSUSER for a25
col PROGRAM for a40
select rownum as rank
  , a.sid
  , a.serial#
  , a.sql_id
  , a.username
  , a.osuser
  , a.machine
  , a.program
--  , a.event
  , a.CPUMins
  , a.CPUHours
  , a.CPUDays
from (select v.sid
        , serial#
		, sql_id
        , username
        , osuser
        , machine
        , program
--	, event
        , round(v.value/(100*60), 0) CPUMins
	, round(v.value/60/60)/100 CPUHours
	, round(v.value/60/60/24)/100 CPUDays
        FROM gv\$statname s, gv\$sesstat v, gv\$session sess
        WHERE s.name = 'CPU used by this session'
          and sess.sid = v.sid
          and v.statistic# = s.statistic#
          and v.value > 0
      ORDER BY v.value DESC) a
where rownum < 21
and osuser not in ('GRID','grid','ORACLE','oracle');
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col rank form 99
col sql_id for a15
col MACHINE for a30
col event for a30
col username for a25
col OSUSER for a25
col PROGRAM for a40
select rownum as rank
  , a.sid
  , a.serial#
  , a.sql_id
  , a.username
  , a.osuser
  , a.machine
  , a.program
--  , a.event
  , a.CPUMins
  , a.CPUHours
  , a.CPUDays
from (select v.sid
        , serial#
        , sql_id
        , username
        , osuser
        , machine
        , program
--      , event
        , round(v.value/(100*60), 0) CPUMins
        , round(v.value/60/60)/100 CPUHours
        , round(v.value/60/60/24)/100 CPUDays
        FROM gv\$statname s, gv\$sesstat v, gv\$session sess
        WHERE s.name = 'CPU used by this session'
          and sess.sid = v.sid
          and v.statistic# = s.statistic#
          and v.value > 0
      ORDER BY v.value DESC) a
where rownum < 21
and osuser not in ('GRID','grid','ORACLE','oracle');
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY TABLESPACES
#########################################################################################################
#
# 11g
function func_dba_11_043_a()
{
  echo ""
}
# 12c
function func_dba_12_043_a()
{
  echo ""
}
# 18c
function func_dba_18_043_a()
{
  echo ""
}
# 19c
function func_dba_19_043_a()
{
  echo ""
}
# 20c
function func_dba_20_043_a()
{
  echo ""
}
#
function func_dba_043_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} select YOUR DATABASE [ CDB\$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off colsep '|'
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
prompt
prompt ##############################################################
prompt # Tablespaces                                                #
prompt ##############################################################
col "USAGE (%)"          for a9
col "FREE (%)"           for a9
col Tablespace           for a30
col "Type"               for a12
col "USED USAGE"         for a12
col "FREE USAGE"         for a12
col "USED SIZE(MB)"      for a12
col "USED SIZE(GB)"      for a12
col "USED SIZE(TB)"      for a12
col "FREE SIZE(MB)"      for a12
col "FREE SIZE(GB)"      for a12
col "FREE SIZE(TB)"      for a12
col "MAX SIZE"           for a12
col "Status"             for a7
col "Status Size"        for a13
column "USED SIZE(MB)"   format 9g999g999g990 heading  'USED SIZE(MB)'
column "USED SIZE(GB)"   format 9g999g999g990 heading  'USED SIZE(GB)'
column "USED SIZE(TB)"   format 9g999g999g990 heading  'USED SIZE(TB)'
column "FREE SIZE(MB)"   format 9g999g999g990 heading  'FREE SIZE(MB)'
column "FREE SIZE(GB)"   format 9g999g999g990 heading  'FREE SIZE(GB)'
column "FREE SIZE(TB)"   format 9g999g999g990 heading  'FREE SIZE(TB)'
column "TOTAL SIZE(MB)"  format 9g999g999g990 heading  'TOTAL SIZE(MB)'
column "TOTAL SIZE(GB)"  format 9g999g999g990 heading  'TOTAL SIZE(GB)'
column "TOTAL SIZE(TB)"  format 9g999g999g990 heading  'TOTAL SIZE(TB)'
column "MAX SIZE(GB)"    format 9g999g999g990 heading  'MAX SIZE(GB)'
break on report
compute sum of "USED SIZE(MB)"   on report
compute sum of "USED SIZE(GB)"   on report
compute sum of "USED SIZE(TB)"   on report
compute sum of "FREE SIZE(MB)"   on report
compute sum of "FREE SIZE(GB)"   on report
compute sum of "FREE SIZE(TB)"   on report
compute sum of "TOTAL SIZE(MB)"  on report
compute sum of "TOTAL SIZE(GB)"  on report
compute sum of "TOTAL SIZE(TB)"  on report
compute sum of "MAX SIZE(GB)"    on report
select substr(A.tablespace_name,1,30) "Tablespace"
   , MAX(A.contents) "Type"
   , MAX(A.status) "Status"
-- , MAX(A.max_extents) "Max extents"
-- , MAX(A.pct_increase) "Pct_increase"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(MB)"
   , ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(MB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024 "TOTAL SIZE(MB)"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(GB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(GB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "TOTAL SIZE(GB)"
-- , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(TB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(TB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/2014 "TOTAL SIZE(TB)"
-- , (SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID))-(SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID)) "USED BLOCKS"
-- , SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID) "FREE BLOCKS"
   , TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "USAGE (%)"
   , TO_CHAR((SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "FREE (%)"
-- , SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID) "TOTAL BLOCKS"
   , SUM(B.MAXBYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "MAX SIZE(GB)"
   , case
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 80 then 'Size OK'
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 90 then 'Warning'
       else 'Critical' end as "Status Size"
from dba_tablespaces A, DBA_DATA_FILES B, DBA_FREE_SPACE C
WHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME
AND A.TABLESPACE_NAME=C.TABLESPACE_NAME
GROUP BY A.TABLESPACE_NAME
order by 1;
prompt
prompt ##############################################################
prompt # Datafiles                                                  #
prompt ##############################################################
TTITLE OFF
BTITLE OFF
SET FEEDBACK ON
column "Size (M)" format 9g999g999g990     heading 'Size (M)'
column "Size (G)" format 9g999g999g990     heading 'Size (G)'
column "Used (M)" format 9g999g999g990     heading 'Used (M)'
column "Used (G)" format 9g999g999g990     heading 'Used (G)'
column "Free (M)" format 9g999g999g990     heading 'Free (M)'
column "Free (G)" format 9g999g999g990     heading 'Free (G)'
column "MAX (G)"  format 9g999g999g990     heading 'MAX (G)'
col "FILE NAME"          for a75
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a30
col "Used (%)"           for a11
-- col "Size (M)"        for a11
-- col "Size (g)"        for a11
-- col "Used (M)"        for a15
-- col "Used (G)"        for a15
-- col "Free (M)"        for a15
-- col "Free (G)"        for a15
-- col "Max (G)"         for a15
select Substr(df.tablespace_name,1,30)           "Tablespace Name"
  , Substr(df.file_name,1,75)                    "File Name"
--  , AUTOEXTENSIBLE as                          "AUTOEXTENSIBLE"
  , status as                                    "Status"
  , round(df.bytes/1024/1024, 2)                 "Size (M)"
  , round(e.used_bytes/1024/1024, 2)             "Used (M)"
  , round(f.free_bytes/1024/1024, 2)             "Free (M)"
--  , case when round(df.bytes/1024/1024, 2) = round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2)            "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2)        "Used (G)"
  , round(f.free_bytes/1024/1024/1024, 2)        "Free (G)"
--  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as                "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') "Used (%)"
FROM DBA_DATA_FILES df,
   (select file_id, Sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select Max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
prompt
prompt ##############################################################
prompt # TempFiles                                                  #
prompt ##############################################################
column "Size (M)" format 9g999g999 heading 'Size (M)'
column "Used (M)" format 9g999g999 heading 'Used (M)'
column "Free (M)" format 9g999g999 heading 'Free (M)'
column "Size (G)" format 9g999g999 heading 'Size (G)'
column "Used (G)" format 9g999g999 heading 'Used (G)'
column "Free (G)" format 9g999g999 heading 'Free (G)'
column "MAX (G)"  format 9g999g999 heading 'MAX (G)'
col "FILE NAME"          for a90
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a20
col "Used (%)"           for a11
col "Free (M)"           for a9
col "Free (G)"           for a9
-- col "Max (G)"         for a15
select substr(df.tablespace_name,1,20) as    "Tablespace Name"
  , substr(df.file_name,1,90) as             "File Name"
  , AUTOEXTENSIBLE as                        "AUTOEXTENSIBLE"
  , status as                                "Status"
  , round(df.bytes/1024/1024, 2) as          "Size (M)"
  , round(e.used_bytes/1024/1024, 2) as      "Used (M)"
  , case when Round(df.bytes/1024/1024, 2) = Round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2) as     "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2) as "Used (G)"
  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as            "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') as "Used (%)"
FROM DBA_TEMP_FILES df,
   (select file_id, sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id  = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
prompt
prompt ##############################################################
prompt # Tablespaces                                                #
prompt ##############################################################
col "USAGE (%)"          for a9
col "FREE (%)"           for a9
col Tablespace           for a20
col "Type"               for a12
col "USED USAGE"         for a12
col "FREE USAGE"         for a12
col "USED SIZE(MB)"      for a12
col "USED SIZE(GB)"      for a12
col "USED SIZE(TB)"      for a12
col "FREE SIZE(MB)"      for a12
col "FREE SIZE(GB)"      for a12
col "FREE SIZE(TB)"      for a12
col "MAX SIZE"           for a12
col "Status"             for a7
col "Status Size"        for a13
column "USED SIZE(MB)"   format 9g999g999g990 heading  'USED SIZE(MB)'
column "USED SIZE(GB)"   format 9g999g999g990 heading  'USED SIZE(GB)'
column "USED SIZE(TB)"   format 9g999g999g990 heading  'USED SIZE(TB)'
column "FREE SIZE(MB)"   format 9g999g999g990 heading  'FREE SIZE(MB)'
column "FREE SIZE(GB)"   format 9g999g999g990 heading  'FREE SIZE(GB)'
column "FREE SIZE(TB)"   format 9g999g999g990 heading  'FREE SIZE(TB)'
column "TOTAL SIZE(MB)"  format 9g999g999g990 heading  'TOTAL SIZE(MB)'
column "TOTAL SIZE(GB)"  format 9g999g999g990 heading  'TOTAL SIZE(GB)'
column "TOTAL SIZE(TB)"  format 9g999g999g990 heading  'TOTAL SIZE(TB)'
column "MAX SIZE(GB)"    format 9g999g999g990 heading  'MAX SIZE(GB)'
break on report
compute sum of "USED SIZE(MB)"   on report
compute sum of "USED SIZE(GB)"   on report
compute sum of "USED SIZE(TB)"   on report
compute sum of "FREE SIZE(MB)"   on report
compute sum of "FREE SIZE(GB)"   on report
compute sum of "FREE SIZE(TB)"   on report
compute sum of "TOTAL SIZE(MB)"  on report
compute sum of "TOTAL SIZE(GB)"  on report
compute sum of "TOTAL SIZE(TB)"  on report
compute sum of "MAX SIZE(GB)"    on report
select substr(A.tablespace_name,1,20) "Tablespace"
   , MAX(A.contents) "Type"
   , MAX(A.status) "Status"
-- , MAX(A.max_extents) "Max extents"
-- , MAX(A.pct_increase) "Pct_increase"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(MB)"
   , ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(MB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024 "TOTAL SIZE(MB)"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(GB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(GB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "TOTAL SIZE(GB)"
-- , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(TB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(TB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/2014 "TOTAL SIZE(TB)"
-- , (SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID))-(SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID)) "USED BLOCKS"
-- , SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID) "FREE BLOCKS"
   , TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "USAGE (%)"
   , TO_CHAR((SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "FREE (%)"
-- , SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID) "TOTAL BLOCKS"
   , SUM(B.MAXBYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "MAX SIZE(GB)"
   , case
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 80 then 'Size OK'
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 90 then 'Warning'
       else 'Critical' end as "Status Size"
from dba_tablespaces A, DBA_DATA_FILES B, DBA_FREE_SPACE C
WHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME
AND A.TABLESPACE_NAME=C.TABLESPACE_NAME
GROUP BY A.TABLESPACE_NAME
order by 1;
prompt
prompt ##############################################################
prompt # Datafiles                                                  #
prompt ##############################################################
TTITLE OFF
BTITLE OFF
SET FEEDBACK ON
column "Size (M)" format 9g999g999g990     heading 'Size (M)'
column "Size (G)" format 9g999g999g990     heading 'Size (G)'
column "Used (M)" format 9g999g999g990     heading 'Used (M)'
column "Used (G)" format 9g999g999g990     heading 'Used (G)'
column "Free (M)" format 9g999g999g990     heading 'Free (M)'
column "Free (G)" format 9g999g999g990     heading 'Free (G)'
column "MAX (G)"  format 9g999g999g990     heading 'MAX (G)'
col "FILE NAME"          for a80
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a20
col "Used (%)"           for a11
-- col "Size (M)"        for a11
-- col "Size (g)"        for a11
-- col "Used (M)"        for a15
-- col "Used (G)"        for a15
-- col "Free (M)"        for a15
-- col "Free (G)"        for a15
-- col "Max (G)"         for a15
select Substr(df.tablespace_name,1,20)           "Tablespace Name"
  , Substr(df.file_name,1,90)                    "File Name"
--  , AUTOEXTENSIBLE as                          "AUTOEXTENSIBLE"
  , status as                                    "Status"
  , round(df.bytes/1024/1024, 2)                 "Size (M)"
  , round(e.used_bytes/1024/1024, 2)             "Used (M)"
  , round(f.free_bytes/1024/1024, 2)             "Free (M)"
--  , case when round(df.bytes/1024/1024, 2) = round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2)            "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2)        "Used (G)"
  , round(f.free_bytes/1024/1024/1024, 2)        "Free (G)"
--  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as                "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') "Used (%)"
FROM DBA_DATA_FILES df,
   (select file_id, Sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select Max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
prompt
prompt ##############################################################
prompt # TempFiles                                                  #
prompt ##############################################################
column "Size (M)" format 9g999g999 heading 'Size (M)'
column "Used (M)" format 9g999g999 heading 'Used (M)'
column "Free (M)" format 9g999g999 heading 'Free (M)'
column "Size (G)" format 9g999g999 heading 'Size (G)'
column "Used (G)" format 9g999g999 heading 'Used (G)'
column "Free (G)" format 9g999g999 heading 'Free (G)'
column "MAX (G)"  format 9g999g999 heading 'MAX (G)'
col "FILE NAME"          for a90
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a20
col "Used (%)"           for a11
col "Free (M)"           for a9
col "Free (G)"           for a9
-- col "Max (G)"         for a15
select substr(df.tablespace_name,1,20) as    "Tablespace Name"
  , substr(df.file_name,1,90) as             "File Name"
  , AUTOEXTENSIBLE as                        "AUTOEXTENSIBLE"
  , status as                                "Status"
  , round(df.bytes/1024/1024, 2) as          "Size (M)"
  , round(e.used_bytes/1024/1024, 2) as      "Used (M)"
  , case when Round(df.bytes/1024/1024, 2) = Round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2) as     "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2) as "Used (G)"
  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as            "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') as "Used (%)"
FROM DBA_TEMP_FILES df,
   (select file_id, sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id  = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY TABLESPACES
#########################################################################################################
#
# 11g
function func_dba_11_043_b()
{
  echo ""
}
# 12c
function func_dba_12_043_b()
{
  echo ""
}
# 18c
function func_dba_18_043_b()
{
  echo ""
}
# 19c
function func_dba_19_043_b()
{
  echo ""
}
# 20c
function func_dba_20_043_b()
{
  echo ""
}
#
function func_dba_043_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off colsep '|'
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
prompt
prompt ##############################################################
prompt # Tablespaces                                                #
prompt ##############################################################
col "USAGE (%)"          for a9
col "FREE (%)"           for a9
col Tablespace           for a20
col "Type"               for a12
col "USED USAGE"         for a12
col "FREE USAGE"         for a12
col "USED SIZE(MB)"      for a12
col "USED SIZE(GB)"      for a12
col "USED SIZE(TB)"      for a12
col "FREE SIZE(MB)"      for a12
col "FREE SIZE(GB)"      for a12
col "FREE SIZE(TB)"      for a12
col "MAX SIZE"           for a12
col "Status"             for a7
col "Status Size"        for a13
column "USED SIZE(MB)"   format 9g999g999g990 heading  'USED SIZE(MB)'
column "USED SIZE(GB)"   format 9g999g999g990 heading  'USED SIZE(GB)'
column "USED SIZE(TB)"   format 9g999g999g990 heading  'USED SIZE(TB)'
column "FREE SIZE(MB)"   format 9g999g999g990 heading  'FREE SIZE(MB)'
column "FREE SIZE(GB)"   format 9g999g999g990 heading  'FREE SIZE(GB)'
column "FREE SIZE(TB)"   format 9g999g999g990 heading  'FREE SIZE(TB)'
column "TOTAL SIZE(MB)"  format 9g999g999g990 heading  'TOTAL SIZE(MB)'
column "TOTAL SIZE(GB)"  format 9g999g999g990 heading  'TOTAL SIZE(GB)'
column "TOTAL SIZE(TB)"  format 9g999g999g990 heading  'TOTAL SIZE(TB)'
column "MAX SIZE(GB)"    format 9g999g999g990 heading  'MAX SIZE(GB)'
break on report
compute sum of "USED SIZE(MB)"   on report
compute sum of "USED SIZE(GB)"   on report
compute sum of "USED SIZE(TB)"   on report
compute sum of "FREE SIZE(MB)"   on report
compute sum of "FREE SIZE(GB)"   on report
compute sum of "FREE SIZE(TB)"   on report
compute sum of "TOTAL SIZE(MB)"  on report
compute sum of "TOTAL SIZE(GB)"  on report
compute sum of "TOTAL SIZE(TB)"  on report
compute sum of "MAX SIZE(GB)"    on report
select substr(A.tablespace_name,1,20) "Tablespace"
   , MAX(A.contents) "Type"
   , MAX(A.status) "Status"
-- , MAX(A.max_extents) "Max extents"
-- , MAX(A.pct_increase) "Pct_increase"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(MB)"
   , ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(MB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024 "TOTAL SIZE(MB)"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(GB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(GB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "TOTAL SIZE(GB)"
-- , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(TB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(TB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/2014 "TOTAL SIZE(TB)"
-- , (SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID))-(SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID)) "USED BLOCKS"
-- , SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID) "FREE BLOCKS"
   , TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "USAGE (%)"
   , TO_CHAR((SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "FREE (%)"
-- , SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID) "TOTAL BLOCKS"
   , SUM(B.MAXBYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "MAX SIZE(GB)"
   , case
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 80 then 'Size OK'
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 90 then 'Warning'
       else 'Critical' end as "Status Size"
from dba_tablespaces A, DBA_DATA_FILES B, DBA_FREE_SPACE C
WHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME
AND A.TABLESPACE_NAME=C.TABLESPACE_NAME
GROUP BY A.TABLESPACE_NAME
order by 1;
prompt
prompt ##############################################################
prompt # Datafiles                                                  #
prompt ##############################################################
TTITLE OFF
BTITLE OFF
SET FEEDBACK ON
column "Size (M)" format 9g999g999g990     heading 'Size (M)'
column "Size (G)" format 9g999g999g990     heading 'Size (G)'
column "Used (M)" format 9g999g999g990     heading 'Used (M)'
column "Used (G)" format 9g999g999g990     heading 'Used (G)'
column "Free (M)" format 9g999g999g990     heading 'Free (M)'
column "Free (G)" format 9g999g999g990     heading 'Free (G)'
column "MAX (G)"  format 9g999g999g990     heading 'MAX (G)'
col "FILE NAME"          for a90
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a20
col "Used (%)"           for a11
-- col "Size (M)"        for a11
-- col "Size (g)"        for a11
-- col "Used (M)"        for a15
-- col "Used (G)"        for a15
-- col "Free (M)"        for a15
-- col "Free (G)"        for a15
-- col "Max (G)"         for a15
select Substr(df.tablespace_name,1,20)           "Tablespace Name"
  , Substr(df.file_name,1,90)                    "File Name"
--  , AUTOEXTENSIBLE as                          "AUTOEXTENSIBLE"
  , status as                                    "Status"
  , round(df.bytes/1024/1024, 2)                 "Size (M)"
  , round(e.used_bytes/1024/1024, 2)             "Used (M)"
  , round(f.free_bytes/1024/1024, 2)             "Free (M)"
--  , case when round(df.bytes/1024/1024, 2) = round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2)            "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2)        "Used (G)"
  , round(f.free_bytes/1024/1024/1024, 2)        "Free (G)"
--  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as                "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') "Used (%)"
FROM DBA_DATA_FILES df,
   (select file_id, Sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select Max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
prompt
prompt ##############################################################
prompt # TempFiles                                                  #
prompt ##############################################################
column "Size (M)" format 9g999g999 heading 'Size (M)'
column "Used (M)" format 9g999g999 heading 'Used (M)'
column "Free (M)" format 9g999g999 heading 'Free (M)'
column "Size (G)" format 9g999g999 heading 'Size (G)'
column "Used (G)" format 9g999g999 heading 'Used (G)'
column "Free (G)" format 9g999g999 heading 'Free (G)'
column "MAX (G)"  format 9g999g999 heading 'MAX (G)'
col "FILE NAME"          for a90
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a20
col "Used (%)"           for a11
col "Free (M)"           for a9
col "Free (G)"           for a9
-- col "Max (G)"         for a15
select substr(df.tablespace_name,1,20) as    "Tablespace Name"
  , substr(df.file_name,1,90) as             "File Name"
  , AUTOEXTENSIBLE as                        "AUTOEXTENSIBLE"
  , status as                                "Status"
  , round(df.bytes/1024/1024, 2) as          "Size (M)"
  , round(e.used_bytes/1024/1024, 2) as      "Used (M)"
  , case when Round(df.bytes/1024/1024, 2) = Round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2) as     "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2) as "Used (G)"
  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as            "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') as "Used (%)"
FROM DBA_TEMP_FILES df,
   (select file_id, sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id  = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on long 9999999 numwidth 20 heading on echo on verify on feedback on colsep '|'
prompt
prompt ##############################################################
prompt # Tablespaces                                                #
prompt ##############################################################
col "USAGE (%)"          for a9
col "FREE (%)"           for a9
col Tablespace           for a20
col "Type"               for a12
col "USED USAGE"         for a12
col "FREE USAGE"         for a12
col "USED SIZE(MB)"      for a12
col "USED SIZE(GB)"      for a12
col "USED SIZE(TB)"      for a12
col "FREE SIZE(MB)"      for a12
col "FREE SIZE(GB)"      for a12
col "FREE SIZE(TB)"      for a12
col "MAX SIZE"           for a12
col "Status"             for a7
col "Status Size"        for a13
column "USED SIZE(MB)"   format 9g999g999g990 heading  'USED SIZE(MB)'
column "USED SIZE(GB)"   format 9g999g999g990 heading  'USED SIZE(GB)'
column "USED SIZE(TB)"   format 9g999g999g990 heading  'USED SIZE(TB)'
column "FREE SIZE(MB)"   format 9g999g999g990 heading  'FREE SIZE(MB)'
column "FREE SIZE(GB)"   format 9g999g999g990 heading  'FREE SIZE(GB)'
column "FREE SIZE(TB)"   format 9g999g999g990 heading  'FREE SIZE(TB)'
column "TOTAL SIZE(MB)"  format 9g999g999g990 heading  'TOTAL SIZE(MB)'
column "TOTAL SIZE(GB)"  format 9g999g999g990 heading  'TOTAL SIZE(GB)'
column "TOTAL SIZE(TB)"  format 9g999g999g990 heading  'TOTAL SIZE(TB)'
column "MAX SIZE(GB)"    format 9g999g999g990 heading  'MAX SIZE(GB)'
break on report
compute sum of "USED SIZE(MB)"   on report
compute sum of "USED SIZE(GB)"   on report
compute sum of "USED SIZE(TB)"   on report
compute sum of "FREE SIZE(MB)"   on report
compute sum of "FREE SIZE(GB)"   on report
compute sum of "FREE SIZE(TB)"   on report
compute sum of "TOTAL SIZE(MB)"  on report
compute sum of "TOTAL SIZE(GB)"  on report
compute sum of "TOTAL SIZE(TB)"  on report
compute sum of "MAX SIZE(GB)"    on report
select substr(A.tablespace_name,1,20) "Tablespace"
   , MAX(A.contents) "Type"
   , MAX(A.status) "Status"
-- , MAX(A.max_extents) "Max extents"
-- , MAX(A.pct_increase) "Pct_increase"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(MB)"
   , ROUND(SUM(C.BYTES)/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(MB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024 "TOTAL SIZE(MB)"
   , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(GB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(GB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "TOTAL SIZE(GB)"
-- , (SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/1024)-(ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID))) "USED SIZE(TB)"
   , ROUND(SUM(C.BYTES)/1024/1024/1024/1024/COUNT(DISTINCT B.FILE_ID)) "FREE SIZE(TB)"
   , SUM(B.BYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024/2014 "TOTAL SIZE(TB)"
-- , (SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID))-(SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID)) "USED BLOCKS"
-- , SUM(C.BLOCKS)/COUNT(DISTINCT B.FILE_ID) "FREE BLOCKS"
   , TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "USAGE (%)"
   , TO_CHAR((SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID),'999.99') || '%' "FREE (%)"
-- , SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID) "TOTAL BLOCKS"
   , SUM(B.MAXBYTES)*COUNT(DISTINCT B.FILE_ID)/COUNT(B.FILE_ID)/1024/1024/1024 "MAX SIZE(GB)"
   , case
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 80 then 'Size OK'
       when TO_CHAR(100-(SUM(C.BLOCKS)*100*COUNT(B.FILE_ID)/(SUM(B.BLOCKS)*COUNT(DISTINCT B.FILE_ID)))/COUNT(DISTINCT B.FILE_ID)) < 90 then 'Warning'
       else 'Critical' end as "Status Size"
from dba_tablespaces A, DBA_DATA_FILES B, DBA_FREE_SPACE C
WHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME
AND A.TABLESPACE_NAME=C.TABLESPACE_NAME
GROUP BY A.TABLESPACE_NAME
order by 1;
prompt
prompt ##############################################################
prompt # Datafiles                                                  #
prompt ##############################################################
TTITLE OFF
BTITLE OFF
SET FEEDBACK ON
column "Size (M)" format 9g999g999g990     heading 'Size (M)'
column "Size (G)" format 9g999g999g990     heading 'Size (G)'
column "Used (M)" format 9g999g999g990     heading 'Used (M)'
column "Used (G)" format 9g999g999g990     heading 'Used (G)'
column "Free (M)" format 9g999g999g990     heading 'Free (M)'
column "Free (G)" format 9g999g999g990     heading 'Free (G)'
column "MAX (G)"  format 9g999g999g990     heading 'MAX (G)'
col "FILE NAME"          for a90
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a20
col "Used (%)"           for a11
-- col "Size (M)"        for a11
-- col "Size (g)"        for a11
-- col "Used (M)"        for a15
-- col "Used (G)"        for a15
-- col "Free (M)"        for a15
-- col "Free (G)"        for a15
-- col "Max (G)"         for a15
select Substr(df.tablespace_name,1,20)           "Tablespace Name"
  , Substr(df.file_name,1,90)                    "File Name"
--  , AUTOEXTENSIBLE as                          "AUTOEXTENSIBLE"
  , status as                                    "Status"
  , round(df.bytes/1024/1024, 2)                 "Size (M)"
  , round(e.used_bytes/1024/1024, 2)             "Used (M)"
  , round(f.free_bytes/1024/1024, 2)             "Free (M)"
--  , case when round(df.bytes/1024/1024, 2) = round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2)            "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2)        "Used (G)"
  , round(f.free_bytes/1024/1024/1024, 2)        "Free (G)"
--  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as                "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') "Used (%)"
FROM DBA_DATA_FILES df,
   (select file_id, Sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select Max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
prompt
prompt ##############################################################
prompt # TempFiles                                                  #
prompt ##############################################################
column "Size (M)" format 9g999g999 heading 'Size (M)'
column "Used (M)" format 9g999g999 heading 'Used (M)'
column "Free (M)" format 9g999g999 heading 'Free (M)'
column "Size (G)" format 9g999g999 heading 'Size (G)'
column "Used (G)" format 9g999g999 heading 'Used (G)'
column "Free (G)" format 9g999g999 heading 'Free (G)'
column "MAX (G)"  format 9g999g999 heading 'MAX (G)'
col "FILE NAME"          for a90
col "AUTOEXTENSIBLE"     for a15
col "Status"             for a10
col "Tablespace Name"    for a20
col "Used (%)"           for a11
col "Free (M)"           for a9
col "Free (G)"           for a9
-- col "Max (G)"         for a15
select substr(df.tablespace_name,1,20) as    "Tablespace Name"
  , substr(df.file_name,1,90) as             "File Name"
  , AUTOEXTENSIBLE as                        "AUTOEXTENSIBLE"
  , status as                                "Status"
  , round(df.bytes/1024/1024, 2) as          "Size (M)"
  , round(e.used_bytes/1024/1024, 2) as      "Used (M)"
  , case when Round(df.bytes/1024/1024, 2) = Round(e.used_bytes/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024, 2)) end as "Free (M)"
  , round(df.bytes/1024/1024/1024, 2) as     "Size (G)"
  , round(e.used_bytes/1024/1024/1024, 2) as "Used (G)"
  , case when Round(df.bytes/1024/1024/1024, 2) = Round(e.used_bytes/1024/1024/1024, 2) then 'Full/100%' else to_char(Round(f.free_bytes/1024/1024/1024, 2)) end as "Free (G)"
  , df.maxbytes/1024/1024/1024 as            "Max (G)"
  , rpad(' '|| Rpad ('X',Round(e.used_bytes*10/df.bytes,0), 'X'),11,'-') as "Used (%)"
FROM DBA_TEMP_FILES df,
   (select file_id, sum(Decode(bytes,NULL,0,bytes)) used_bytes FROM dba_extents GROUP by file_id) E,
   (select max(bytes) free_bytes, file_id FROM dba_free_space GROUP BY file_id) f
WHERE e.file_id (+) = df.file_id
AND df.file_id  = f.file_id (+)
ORDER BY df.tablespace_name, df.file_name;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY ASM
#########################################################################################################
#
# 11g
function func_dba_11_044()
{
  echo ""
}
# 12c
function func_dba_12_044()
{
  echo ""
}
# 18c
function func_dba_18_044()
{
  echo ""
}
# 19c
function func_dba_19_044()
{
  echo ""
}
# 20c
function func_dba_20_044()
{
  echo ""
}
#
function func_dba_044()
{ 
sqlplus -S /nolog <<EOF 
conn / as sysdba 
set pages 10000 lines 700 timing on colsep '|' 
REM ASM views: 
REM VIEW            |ASM INSTANCE                                     |DB INSTANCE 
REM ---- 
REM V$ASM_DISKGROUP |Describes a disk group (number, name, size       |Contains one row for every open ASM 
REM                 |related info, state, and redundancy type)        |disk in the DB instance. 
REM V$ASM_CLIENT    |Identifies databases using disk groups           |Contains no rows. 
REM                 |managed by the ASM instance.                     | 
REM V$ASM_DISK      |Contains one row for every disk discovered       |Contains rows only for disks in the 
REM                 |by the ASM instance, including disks that        |disk groups in use by that DB instance. 
REM                 |are not part of any disk group.                  | 
REM V$ASM_FILE      |Contains one row for every ASM file in every     |Contains rows only for files that are 
REM                 |disk group mounted by the ASM instance.          |currently open in the DB instance. 
REM V$ASM_TEMPLATE  |Contains one row for every template present in   |Contains no rows. 
REM                 |every disk group mounted by the ASM instance.    | 
REM V$ASM_ALIAS     |Contains one row for every alias present in      |Contains no rows. 
REM                 |every disk group mounted by the ASM instance.    | 
REM v$ASM_OPERATION |Contains one row for every active ASM long       |Contains no rows. 
REM                 |running operation executing in the ASM instance. | 
set wrap off 
set lines 155 pages 9999 
col "Group Name" for a15     Head "Group|Name" 
col "Disk Name"  for a10 
col "State"      for a10 
col "Used GB"    for a10 
col "Type"       for a10    Head "Diskgroup|Redundancy" 
col "Total GB"   for 999,999  Head "Total|GB" 
col "Used GB"    for 999,999  Head "Used|GB" 
col "Free GB"    for 999,999  Head "Free|GB" 
col "Imbalance"  for 99,9   Head "Percent|Imbalance" 
col "Variance"   for 99,9   Head "Percent|Disk Size|Variance" 
col "MinFree"    for 99,9   Head "Minimum|Percent|Free" 
col "MaxFree"    for 99,9   Head "Maximum|Percent|Free" 
col "DiskCnt"    for 9999   Head "Disk|Count" 
col "Status"     for 9999   Head "Status|Disk_Size" 
prompt ############################################################## 
prompt # ASM Disk Groups                                            # 
prompt ############################################################## 
set pages 10000 lines 700 timing on colsep '|' 
select g.group_number               "Group" 
  , g.name                          "Group Name" 
  , g.state                         "State" 
  , g.type                          "Type" 
  , g.total_mb/1024                 "Total GB" 
  , (g.total_mb-g.free_mb)/1024     "Used GB" 
  , g.free_mb/1024                  "Free GB" 
  , 100*(max((d.total_mb-d.free_mb)/d.total_mb)-min((d.total_mb-d.free_mb)/d.total_mb))/max((d.total_mb-d.free_mb)/d.total_mb) "Imbalance" 
  , 100*(max(d.total_mb)-min(d.total_mb))/max(d.total_mb) "Variance" 
  , 100*(min(d.free_mb/d.total_mb)) "MinFree" 
  , 100*(max(d.free_mb/d.total_mb)) "MaxFree" 
  , count(*)                        "DiskCnt" 
  , case when 100*(max(d.free_mb/d.total_mb)) > 20 then 'Status OK' when 100*(max(d.free_mb/d.total_mb)) > 10 then 'Warning' else 'Critical' end as "STATUS" 
FROM v\$asm_disk d, v\$asm_diskgroup g 
WHERE d.group_number = g.group_number and d.group_number <> 0 
GROUP BY g.group_number, g.name, g.state, g.type, g.total_mb, g.free_mb 
ORDER BY 1; 
prompt 
prompt ############################################################## 
prompt # ASM Disks In Use                                           # 
prompt ############################################################## 
set pages 10000 lines 700 timing on colsep '|' 
col "Group"            for 999 
col "Disk"             for 999 
col "Header"           for a9 
col "Mode"             for a8 
col "State"            for a8 
col "Created"          for a20          Head "Added To|Diskgroup" 
--col "Redundancy"     for a10 
--col "Failure Group"  for a10          Head "Failure|Group" 
col "Path"             for a60 
--col "ReadTime"       for 999999990    Head "Read Time|seconds" 
--col "WriteTime"      for 999999990    Head "Write Time|seconds" 
--col "BytesRead"      for 999990.00    Head "GigaBytes|Read" 
--col "BytesWrite"     for 999990.00    Head "GigaBytes|Written" 
col "SecsPerRead"      for 9.000        Head "Seconds|PerRead" 
col "SecsPerWrite"     for 9.000        Head "Seconds|PerWrite" 
select group_number           "Group" 
  , disk_number               "Disk" 
  , header_status             "Header" 
  , mode_status               "Mode" 
  , state                     "State" 
  , to_char(create_date, 'dd/mm/yyyy HH24:mm:ss') "Created" 
--, redundancy                "Redundancy" 
  , total_mb/1024             "Total GB" 
  , (total_mb-free_mb)/1024   "Used GB" 
  , free_mb/1024              "Free GB" 
  , name                      "Disk Name" 
--, failgroup                 "Failure Group" 
  , path                      "Path" 
--, read_time                 "ReadTime" 
--, write_time                "WriteTime" 
--, bytes_read/1073741824     "BytesRead" 
--, bytes_written/1073741824  "BytesWrite" 
  , read_time/reads           "SecsPerRead" 
  , write_time/writes         "SecsPerWrite" 
from v\$asm_disk_stat 
where header_status not in ('FORMER','CANDIDATE') 
order by group_number, disk_number; 
prompt 
prompt ############################################################## 
Prompt # File Types in Diskgroups                                   # 
prompt ############################################################## 
set pages 10000 lines 700 timing on colsep '|' 
col "File Type"      for a16 
col "Block Size"     for a5 Head "Block|Size" 
col "Gb"             for 9990.00 
col "Files"          for 99990 
break on "Group Name" skip 1 nodup 
select g.name                                "Group Name" 
  , f.TYPE                                   "File Type" 
  , f.BLOCK_SIZE/1024||'k'                   "Block Size" 
  , f.STRIPED                                "STRIPED" 
  , count(*)                                 "Files" 
  , round(sum(f.BYTES)/(1024*1024*1024),2)   "Gb" 
from v\$asm_file f, v\$asm_diskgroup g 
where  f.group_number = g.group_number 
group by g.name, f.TYPE, f.BLOCK_SIZE, f.STRIPED 
order by 1,2; 
clear break 
prompt 
prompt ############################################################## 
prompt # Instances Currently Accessing These Diskgroups             # 
prompt ############################################################## 
set pages 10000 lines 700 timing on colsep '|' 
col "Instance" form a8 
col "Group Name" form a15 
select c.group_number  "Group" 
  , g.name             "Group Name" 
  , c.instance_name    "Instance" 
from gv\$asm_client c, gv\$asm_diskgroup g 
where g.group_number = c.group_number 
order by 1,2,3; 
prompt 
prompt ############################################################## 
prompt # Free ASM Disks and Their Paths                             # 
prompt ############################################################## 
set pages 10000 lines 700 timing on colsep '|' 
col "Disk Size GB"    form a15 
col "Disk Size TB"    form a15 
col "Path"            form a60
select header_status                      "Header" 
  , mode_status                           "Mode" 
  , path                                  "Path" 
  , lpad(round(os_mb/1024),7)||' GB'      "Disk Size GB" 
  , lpad(round(os_mb/1024/1024),7)||' TB' "Disk Size TB" 
from v\$asm_disk 
order by path; 
prompt 
prompt ############################################################## 
prompt # Current ASM Disk Operations                                # 
prompt ############################################################## 
set pages 10000 lines 700 timing on colsep '|' 
select * from gv\$asm_operation; 
prompt 
prompt ############################################################## 
prompt # Current ASM Volumes (ACFS)                                 # 
prompt ############################################################## 
set pages 10000 lines 700 timing on colsep '|' 
col VOLUME_DEVICE for a50 
select GROUP_NUMBER 
  , VOLUME_NAME 
  , SIZE_MB 
  , FILE_NUMBER 
  , VOLUME_DEVICE 
from gv\$asm_volume; 
prompt 
prompt ############################################################## 
prompt # Orphaned Files in ASM # 
prompt ############################################################## 
SET VERIFY OFF 
SET PAGESIZE 50000 
DECLARE 
  cmd CLOB; 
BEGIN 
  FOR c IN (select name Diskgroup FROM V\$ASM_DISKGROUP) 
   LOOP 
      FOR l 
         IN (select 'rm ' || files files FROM 
            (select '+' || c.Diskgroup || files files, TYPE FROM 
            (select UPPER (SYS_CONNECT_BY_PATH (aa.name, '/')) files, aa.reference_index, b.TYPE 
       FROM (select file_number, alias_directory, name, reference_index, parent_index FROM v\$asm_alias) aa, 
            (select parent_index 
       FROM (select parent_index FROM v\$asm_alias WHERE group_number = 
            (select group_number FROM v\$asm_diskgroup WHERE name = c.Diskgroup) AND alias_index = 0)) a, 
            (select file_number, TYPE FROM 
            (select file_number, TYPE FROM v\$asm_file WHERE group_number = 
            (select group_number FROM v\$asm_diskgroup WHERE name = c.Diskgroup))) b 
       WHERE aa.file_number = b.file_number(+) 
       AND aa.alias_directory = 'N' 
       AND b.TYPE IN ('DATAFILE', 'ONLINELOG', 'CONTROLFILE', 'TEMPFILE') 
       START WITH aa.PARENT_INDEX = a.parent_index 
       CONNECT BY PRIOR aa.reference_index = aa.parent_index) WHERE SUBSTR (files, INSTR (files, '/', 1, 1), INSTR (files, '/', 1, 2) - INSTR (files, '/', 1, 1) + 1) = 
             (select dbname FROM (select  '/' || UPPER (db_unique_name) || '/' dbname FROM v\$database)) 
       MINUS (select UPPER (name) files, 'DATAFILE' TYPE FROM v\$datafile 
    UNION ALL select UPPER (name) files, 'TEMPFILE' TYPE FROM v\$tempfile 
    UNION ALL select UPPER (name) files, 'CONTROLFILE' TYPE FROM v\$controlfile WHERE name LIKE '+' || c.Diskgroup || '%' 
    UNION ALL select UPPER (name), 'CONTROLFILE' TYPE FROM v\$datafile_copy WHERE deleted = 'NO' 
    UNION ALL select UPPER (MEMBER) files, 'ONLINELOG' TYPE FROM v\$logfile WHERE MEMBER LIKE '+' || c.Diskgroup || '%'))) 
    LOOP 
      DBMS_OUTPUT.put_line (l.files); 
    END LOOP; 
   END LOOP; 
END; 
/ 
quit; 
EOF
}
#########################################################################################################
#
# asmcmd --privilege sysdba ls -l +DATA_EXA/EXADB/DATAFILE/tspace*
# asmcmd showversion
# asmcmd -V
# asmcmd showpatches
# asmcmd showpatches -l
# $GRID_HOME/OPatch/opatch lspatches
# asmcmd showversion --softwarepatch
# asmcmd showversion --releasepatch
# asmcmd showversion --active
# crsctl query crs activeversion -f
# crsctl query crs releasepatch
# crsctl query crs softwarepatch
# 
#########################################################################################################
#
#########################################################################################################
# VERIFY STATISTICS - TABLES [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_045_a()
{
  echo ""
}
# 12c
function func_dba_12_045_a()
{
  echo ""
}
# 18c
function func_dba_18_045_a()
{
  echo ""
}
# 19c
function func_dba_19_045_a()
{
  echo ""
}
# 20c
function func_dba_20_045_a()
{
  echo ""
}
#
function func_dba_045_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col schema for a20
col object for a50
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7
    then 'Status OK' when S.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_tab_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed < sysdate - 7
and a.last_analyzed < sysdate - 30
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 30
and a.last_analyzed < sysdate - 90
group by a.owner
order by a.owner;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 10000 lines 700 timing on feedback on colsep '|'
col schema for a20
col object for a50
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_tab_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed < sysdate - 7
and a.last_analyzed < sysdate - 30
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 30
and a.last_analyzed < sysdate - 90
group by a.owner
order by a.owner;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY STATISTICS - TABLES [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_045_b()
{
  echo ""
}
# 12c
function func_dba_12_045_b()
{
  echo ""
}
# 18c
function func_dba_18_045_b()
{
  echo ""
}
# 19c
function func_dba_19_045_b()
{
  echo ""
}
# 20c
function func_dba_20_045_b()
{
  echo ""
}
#
function func_dba_045_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 10000 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col schema for a20
col object for a50
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_tab_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed < sysdate - 7
and a.last_analyzed < sysdate - 30
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 30
and a.last_analyzed < sysdate - 90
group by a.owner
order by a.owner;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 10000 lines 700 timing on feedback on colsep '|'
col schema for a20
col object for a50
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_tab_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed < sysdate - 7
and a.last_analyzed < sysdate - 30
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_tab_statistics a
where a.last_analyzed > sysdate - 30
and a.last_analyzed < sysdate - 90
group by a.owner
order by a.owner;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY STATISTICS - INDEXES [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_046_a()
{
  echo ""
}
# 12c
function func_dba_12_046_a()
{
  echo ""
}
# 18c
function func_dba_18_046_a()
{
  echo ""
}
# 19c
function func_dba_19_046_a()
{
  echo ""
}
# 20c
function func_dba_20_046_a()
{
  echo ""
}
#
function func_dba_046_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
col schema for a20
col object for a50
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate -30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_ind_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
prompt
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
prompt
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed < sysdate - 7
group by a.owner
order by a.owner;
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
prompt
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 30
group by a.owner
order by a.owner;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 10000 lines 300 timing on colsep '|'
col schema for a20
col object for a50
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate -30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_ind_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
prompt
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
prompt
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed < sysdate - 7
group by a.owner
order by a.owner;
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
prompt
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 30
group by a.owner
order by a.owner;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY STATISTICS - INDEXES [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_046_b()
{
  echo ""
}
# 12c
function func_dba_12_046_b()
{
  echo ""
}
# 18c
function func_dba_18_046_b()
{
  echo ""
}
# 19c
function func_dba_19_046_b()
{
  echo ""
}
# 20c
function func_dba_20_046_b()
{
  echo ""
}
#
function func_dba_046_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 10000 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col schema for a20
col object for a50
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_ind_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed < sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 30
group by a.owner
order by a.owner;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 10000 lines 300 timing on colsep '|'
col schema for a20
col object for a50
select S.Owner as                                        "Schema"
  , S.Table_Name as                                      "Object"
  , S.Object_Type as                                     "Object Type"
  , S.Num_Rows as                                        "Qtd. of Lines"
  , To_Char(S.Last_Analyzed, 'dd/mm/yyyy HH24:mm:ss') as "Last Analyzed"
  , case when S.Last_Analyzed > sysdate - 7 then 'Status OK' when S.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM sys.dba_ind_statistics S
ORDER BY S.Owner, S.Table_Name, S.Num_Rows, S.Last_Analyzed;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Status OK - (Collected on the lasts 7 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Warning - (Collected between 7 and 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed < sysdate - 7
group by a.owner
order by a.owner;
prompt
prompt ##############################################################
prompt # Quantity of Objects with Critical - (Collected more them 30 days)
prompt ##############################################################
col owner for a30
select a.owner, count(*)
from sys.dba_ind_statistics a
where a.last_analyzed > sysdate - 30
group by a.owner
order by a.owner;
quit;
EOF
fi
}
#
#########################################################################################################
# CAPTURE STATISTICS - OWNER [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_047()
{
  echo ""
}
# 12c
function func_dba_12_047()
{
  echo ""
}
# 18c
function func_dba_18_047()
{
  echo ""
}
# 19c
function func_dba_19_047()
{
  echo ""
}
# 20c
function func_dba_20_047()
{
  echo ""
}
#
function func_dba_047()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 300 lines 300 colsep '|'
col username for a25
col account_status for a25
col profile for a25
col default_tablespace for a25
col temporary_tablespace for a25
select username
   , account_status
   , profile
   , default_tablespace
   , temporary_tablespace
from dba_users
order by 1;
quit;
EOF
}
#
#########################################################################################################
# VALIDATE OBJECTS FROM ONE OWNER [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_048()
{
  echo ""
}
# 12c
function func_dba_12_048()
{
  echo ""
}
# 18c
function func_dba_18_048()
{
  echo ""
}
# 19c
function func_dba_19_048()
{
  echo ""
}
# 20c
function func_dba_20_048()
{
  echo ""
}
#
function func_dba_048()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 300 lines 300 colsep '|'
col username for a25
col account_status for a25
col profile for a25
col default_tablespace for a25
col temporary_tablespace for a25
select username
   , account_status
   , profile
   , default_tablespace
   , temporary_tablespace
from dba_users
order by 1;
quit;
EOF
}
#
#########################################################################################################
# VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS ( @ )
#########################################################################################################
#
# 11g
function func_dba_11_049_a()
{
  echo ""
}
# 12c
function func_dba_12_049_a()
{
  echo ""
}
# 18c
function func_dba_18_049_a()
{
  echo ""
}
# 19c
function func_dba_19_049_a()
{
  echo ""
}
# 20c
function func_dba_20_049_a()
{
  echo ""
}
#
function func_dba_049_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 5000 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
col "OWNER" for a25
col "Table Name" for a35
col "Table Space" for a25
col "Last Analyzed" for a30
col "Status of Statistics" for a20
select t.owner as                                        "OWNER"
  , t.table_name as                                      "Table Name"
  , t.TABLESPACE_NAME as                                 "Table Space"
  , t.num_rows as                                        "Rows"
  , t.avg_row_len as                                     "Avg Row Len"
  , trunc((t.blocks * p.value)/1024/1024) as             "Size MB" -- numero de blocos X o seu tamanho em KBs
  , to_Char(t.Last_Analyzed, 'DD/MM/YYYY HH24:mm:ss') as "Last Analyzed"
  , case when t.Last_Analyzed > sysdate - 7 then 'Status OK' when t.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM dba_tables t, v\$parameter p
WHERE p.name = 'db_block_size'
ORDER BY 1,2;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 3000 lines 3000 timing on feedback on colsep '|'
col "OWNER" for a25
col "Table Name" for a35
col "Table Space" for a25
col "Last Analyzed" for a30
col "Status of Statistics" for a20
select t.owner as                                        "OWNER"
  , t.table_name as                                      "Table Name"
  , t.TABLESPACE_NAME as                                 "Table Space"
  , t.num_rows as                                        "Rows"
  , t.avg_row_len as                                     "Avg Row Len"
  , trunc((t.blocks * p.value)/1024/1024) as             "Size MB" -- numero de blocos X o seu tamanho em KBs
  , to_Char(t.Last_Analyzed, 'DD/MM/YYYY HH24:mm:ss') as "Last Analyzed"
  , case when t.Last_Analyzed > sysdate - 7 then 'Status OK' when t.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM dba_tables t, v\$parameter p
WHERE p.name = 'db_block_size'
ORDER BY 1,2;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS ( @ )
#########################################################################################################
#
# 11g
function func_dba_11_049_b()
{
  echo ""
}
# 12c
function func_dba_12_049_b()
{
  echo ""
}
# 18c
function func_dba_18_049_b()
{
  echo ""
}
# 19c
function func_dba_19_049_b()
{
  echo ""
}
# 20c
function func_dba_20_049_b()
{
  echo ""
}
#
function func_dba_049_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 5000 lines 3000 timing on feedback on echo on heading on verify on colsep '|'
col "OWNER" for a25
col "Table Name" for a35
col "Table Space" for a25
col "Last Analyzed" for a30
col "Status of Statistics" for a20
select t.owner as                                        "OWNER"
  , t.table_name as                                      "Table Name"
  , t.TABLESPACE_NAME as                                 "Table Space"
  , t.num_rows as                                        "Rows"
  , t.avg_row_len as                                     "Avg Row Len"
  , Trunc((t.blocks * p.value)/1024/1024) as             "Size MB" -- numero de blocos X o seu tamanho em KBs
  , To_Char(t.Last_Analyzed, 'DD/MM/YYYY HH24:mm:ss') as "Last Analyzed"
  , case when t.Last_Analyzed > sysdate - 7 then 'Status OK' when t.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM dba_tables t, v\$parameter p
WHERE p.name = 'db_block_size'
ORDER BY 1,2;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 3000 lines 3000 timing on feedback on colsep '|'
col "OWNER" for a25
col "Table Name" for a35
col "Table Space" for a25
col "Last Analyzed" for a30
col "Status of Statistics" for a20
select t.owner as                                        "OWNER"
  , t.table_name as                                      "Table Name"
  , t.TABLESPACE_NAME as                                 "Table Space"
  , t.num_rows as                                        "Rows"
  , t.avg_row_len as                                     "Avg Row Len"
  , Trunc((t.blocks * p.value)/1024/1024) as             "Size MB" -- numero de blocos X o seu tamanho em KBs
  , To_Char(t.Last_Analyzed, 'DD/MM/YYYY HH24:mm:ss') as "Last Analyzed"
  , case when t.Last_Analyzed > sysdate - 7 then 'Status OK' when t.Last_Analyzed > sysdate - 30 then 'Warning' else 'Critical' end as "Status of Statistics"
FROM dba_tables t, v\$parameter p
WHERE p.name = 'db_block_size'
ORDER BY 1,2;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY INSTANCE CHARACTERSET
#########################################################################################################
#
# 11g
function func_dba_11_050()
{
  echo ""
}
# 12c
function func_dba_12_050()
{
  echo ""
}
# 18c
function func_dba_18_050()
{
  echo ""
}
# 19c
function func_dba_19_050()
{
  echo ""
}
# 20c
function func_dba_20_050()
{
  echo ""
}
#
function func_dba_050()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col parameter for a50
col value for a50
select * from nls_database_parameters;
quit;
EOF
}
#
#########################################################################################################
# CACHE HIT RATIO (GOOD: > 90%)
#########################################################################################################
#
# 11g
function func_dba_11_051()
{
  echo ""
}
# 12c
function func_dba_12_051()
{
  echo ""
}
# 18c
function func_dba_18_051()
{
  echo ""
}
# 19c
function func_dba_19_051()
{
  echo ""
}
# 20c
function func_dba_20_051()
{
  echo ""
}
#
function func_dba_051()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select sum(gets) "Data Dict Gets"
   , sum(getmisses) "Data Dict Cache Misses"
   , round((1-(sum(getmisses)/sum(gets)))*100) "DATA DICT CACHE HIT RATIO"
   , round(sum(getmisses)*100/sum(gets)) "% MISSED"
   , case when round((1-(sum(getmisses)/sum(gets)))*100) < 90 then 'Critical' else 'Status OK' end as status
from v\$rowcache;
quit;
EOF
}
#
#########################################################################################################
# VERIFY INSTANCE INSTALLED PRODUCTS
#########################################################################################################
#
# 11g
function func_dba_11_052()
{
  echo ""
}
# 12c
function func_dba_12_052()
{
  echo ""
}
# 18c
function func_dba_18_052()
{
  echo ""
}
# 19c
function func_dba_19_052()
{
  echo ""
}
# 20c
function func_dba_20_052()
{
  echo ""
}
#
function func_dba_052()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col version_full for a15
col status for a10
col schema for a12
col comp_name for a40
select comp_name
  , version_full
  , status
  , modified
--  , to_char(modified, 'DD/MM/YYYY HH24:MM:SS') as modified
  , schema
  , status
FROM dba_registry
order by 1, 2, 3;
quit;
EOF
}
#
#########################################################################################################
# INSTANCE PROPERTIES
#########################################################################################################
#
# 11g
function func_dba_11_053()
{
  echo ""
}
# 12c
function func_dba_12_053()
{
  echo ""
}
# 18c
function func_dba_18_053()
{
  echo ""
}
# 19c
function func_dba_19_053()
{
  echo ""
}
# 20c
function func_dba_20_053()
{
  echo ""
}
#
function func_dba_053()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
COLUMN PROPERTY_NAME FORMAT A70
COLUMN PROPERTY_VALUE FORMAT A70
select PROPERTY_NAME
  , PROPERTY_VALUE
FROM database_properties
ORDER BY PROPERTY_NAME;
quit;
EOF
}
#
#########################################################################################################
# INSTANCE OPTIONS
#########################################################################################################
#
# 11g
function func_dba_11_054()
{
  echo ""
}
# 12c
function func_dba_12_054()
{
  echo ""
}
# 18c
function func_dba_18_054()
{
  echo ""
}
# 19c
function func_dba_19_054()
{
  echo ""
}
# 20c
function func_dba_20_054()
{
  echo ""
}
#
function func_dba_054()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col value for A10
col parameter for A50
select * FROM v\$option
ORDER BY parameter;
quit;
EOF
}
#
#########################################################################################################
# INSTANCE DIFERENTS PARAMETERS
#########################################################################################################
#
# 11g
function func_dba_11_055()
{
  echo ""
}
# 12c
function func_dba_12_055()
{
  echo ""
}
# 18c
function func_dba_18_055()
{
  echo ""
}
# 19c
function func_dba_19_055()
{
  echo ""
}
# 20c
function func_dba_20_055()
{
  echo ""
}
#
function func_dba_055()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
COLUMN name          FORMAT A30
COLUMN current_value FORMAT A110
COLUMN sid           FORMAT A10
COLUMN spfile_value  FORMAT A70
select p.name
  , i.instance_name as sid
  , upper(p.value) as current_value
  , sp.sid
  , upper(sp.value) as spfile_value
FROM v\$spparameter sp
  , v\$parameter p
  , v\$instance i
WHERE sp.name = p.name
AND upper(sp.value) != upper(p.value);
quit;
EOF
}
# select name, VALUE, ISSYS_MODIFIABLE from SYS.V$PARAMETER
#
#########################################################################################################
# INSTANCE MODIFICABLES PARAMETERS
#########################################################################################################
#
# 11g
function func_dba_11_056()
{
  echo ""
}
# 12c
function func_dba_12_056()
{
  echo ""
}
# 18c
function func_dba_18_056()
{
  echo ""
}
# 19c
function func_dba_19_056()
{
  echo ""
}
# 20c
function func_dba_20_056()
{
  echo ""
}
#
function func_dba_056()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
COLUMN name  FORMAT A50
COLUMN value FORMAT A110
select p.name
  , p.type
  , p.value
  , p.isses_modifiable
  , p.issys_modifiable
  , p.isinstance_modifiable
FROM v\$parameter p
ORDER BY p.name;
quit;
EOF
}
#
#########################################################################################################
# VERIFY DEAD LOCKS
#########################################################################################################
#
# 11g
function func_dba_11_057_a()
{
  echo ""
}
# 12c
function func_dba_12_057_a()
{
  echo ""
}
# 18c
function func_dba_18_057_a()
{
  echo ""
}
# 19c
function func_dba_19_057_a()
{
  echo ""
}
# 20c
function func_dba_20_057_a()
{
  echo ""
}
#
function func_dba_057_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
prompt ##############################################################
prompt # WHICH SESSION IS BLOCKING OTHER SESSION                    #
prompt ##############################################################
select (select username FROM gv\$session WHERE sid=a.sid) blocker
  , a.sid
  , ' is blocking ' as BLOCKING
  , (select username FROM gv\$session WHERE sid=b.sid) blockee
  , b.sid
FROM gv\$lock a, gv\$lock b
WHERE a.block = 1
AND b.request > 0
AND a.id1 = b.id1
AND a.id2 = b.id2;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
col username form A15
col sid form 9999999
col type form A4
col lmode form 9999999
col request form 9999999
col id1 form 9999990
col id2 form 9999990
col lmode for a20
col request for a20
break on id1 skip 1 dup
select sn.username
  , m.sid
  , m.type
  , DECODE(m.lmode, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 6, 'Exclusive', 5, 'S/Row Excl.', lmode, ltrim(to_char(lmode,'990'))) lmode
  , DECODE(m.request, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 5, 'S/Row Excl.', 6, 'Exclusive', request, ltrim(to_char(request,'990'))) request
  , m.id1
  , m.id2
FROM gv\$session sn, gv\$lock m
WHERE (sn.sid = m.sid AND m.request != 0) OR (sn.sid = m.sid AND m.request = 0 AND lmode != 4 AND (id1, id2)
IN (select s.id1, s.id2 FROM gv\$lock s WHERE request != 0 AND s.id1 = m.id1 AND s.id2 = m.id2))
ORDER BY id1,id2, m.request;
clear breaks
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
prompt ##############################################################
prompt # WHICH SESSION IS BLOCKING OTHER SESSION                    #
prompt ##############################################################
select (select username FROM gv\$session WHERE sid=a.sid) blocker
  , a.sid
  , ' is blocking ' as BLOCKING
  , (select username FROM gv\$session WHERE sid=b.sid) blockee
  , b.sid
FROM gv\$lock a, gv\$lock b
WHERE a.block = 1
AND b.request > 0
AND a.id1 = b.id1
AND a.id2 = b.id2;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
col username form A15
col sid form 9999999
col type form A4
col lmode form 9999999
col request form 9999999
col id1 form 9999990
col id2 form 9999990
col lmode for a20
col request for a20
break on id1 skip 1 dup
select sn.username
  , m.sid
  , m.type
  , DECODE(m.lmode, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 6, 'Exclusive', 5, 'S/Row Excl.', lmode, ltrim(to_char(lmode,'990'))) lmode
  , DECODE(m.request, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 5, 'S/Row Excl.', 6, 'Exclusive', request, ltrim(to_char(request,'990'))) request
  , m.id1
  , m.id2
FROM gv\$session sn, gv\$lock m
WHERE (sn.sid = m.sid AND m.request != 0) OR (sn.sid = m.sid AND m.request = 0 AND lmode != 4 AND (id1, id2)
IN (select s.id1, s.id2 FROM gv\$lock s WHERE request != 0 AND s.id1 = m.id1 AND s.id2 = m.id2))
ORDER BY id1,id2, m.request;
clear breaks
quit;
EOF
fi
}
#
#########################################################################################################
# select (select username FROM gv$session WHERE sid=a.sid) blocker
#   , a.sid || ',' || (select serial# from gv$session c where sid=a.sid) sess1
#   , ' is blocking ' as BLOCKING
#   , (select username FROM gv$session WHERE sid=b.sid) blockee
#   , b.sid || ',' || (select serial# from gv$session c where sid=b.sid) sess2
# FROM gv$lock a, gv$lock b
# WHERE a.block = 1
# AND b.request > 0
# AND a.id1 = b.id1
# AND a.id2 = b.id2;
#########################################################################################################
#
#########################################################################################################
# VERIFY DEAD LOCKS
#########################################################################################################
#
# 11g
function func_dba_11_057_b()
{
  echo ""
}
# 12c
function func_dba_12_057_b()
{
  echo ""
}
# 18c
function func_dba_18_057_b()
{
  echo ""
}
# 19c
function func_dba_19_057_b()
{
  echo ""
}
# 20c
function func_dba_20_057_b()
{
  echo ""
}
#
function func_dba_057_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
prompt ##############################################################
prompt # WHICH SESSION IS BLOCKING OTHER SESSION                    #
prompt ##############################################################
select (select username FROM gv\$session WHERE sid=a.sid) blocker
  , a.sid
  , ' is blocking ' as BLOCKING
  , (select username FROM gv\$session WHERE sid=b.sid) blockee
  , b.sid
FROM gv\$lock a, gv\$lock b
WHERE a.block = 1
AND b.request > 0
AND a.id1 = b.id1
AND a.id2 = b.id2;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
col username form A15
col sid form 9999999
col type form A4
col lmode form 9999999
col request form 9999999
col id1 form 9999990
col id2 form 9999990
col lmode for a20
col request for a20
break on id1 skip 1 dup
select sn.username
  , m.sid
  , m.type
  , DECODE(m.lmode, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 6, 'Exclusive', 5, 'S/Row Excl.', lmode, ltrim(to_char(lmode,'990'))) lmode
  , DECODE(m.request, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 5, 'S/Row Excl.', 6, 'Exclusive', request, ltrim(to_char(request,'990'))) request
  , m.id1
  , m.id2
FROM gv\$session sn, gv\$lock m
WHERE (sn.sid = m.sid AND m.request != 0) OR (sn.sid = m.sid AND m.request = 0 AND lmode != 4 AND (id1, id2)
IN (select s.id1, s.id2 FROM gv\$lock s WHERE request != 0 AND s.id1 = m.id1 AND s.id2 = m.id2))
ORDER BY id1,id2, m.request;
clear breaks
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
prompt ##############################################################
prompt # WHICH SESSION IS BLOCKING OTHER SESSION                    #
prompt ##############################################################
select (select username FROM gv\$session WHERE sid=a.sid) blocker
  , a.sid
  , ' is blocking ' as BLOCKING
  , (select username FROM gv\$session WHERE sid=b.sid) blockee
  , b.sid
FROM gv\$lock a, gv\$lock b
WHERE a.block = 1
AND b.request > 0
AND a.id1 = b.id1
AND a.id2 = b.id2;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
col username form A15
col sid form 9999999
col type form A4
col lmode form 9999999
col request form 9999999
col id1 form 9999990
col id2 form 9999990
col lmode for a20
col request for a20
break on id1 skip 1 dup
select sn.username
  , m.sid
  , m.type
  , DECODE(m.lmode, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 6, 'Exclusive', 5, 'S/Row Excl.', lmode, ltrim(to_char(lmode,'990'))) lmode
  , DECODE(m.request, 0, 'None', 1, 'Null', 2, 'Row Share', 3, 'Row Excl.', 4, 'Share', 5, 'S/Row Excl.', 6, 'Exclusive', request, ltrim(to_char(request,'990'))) request
  , m.id1
  , m.id2
FROM gv\$session sn, gv\$lock m
WHERE (sn.sid = m.sid AND m.request != 0) OR (sn.sid = m.sid AND m.request = 0 AND lmode != 4 AND (id1, id2)
IN (select s.id1, s.id2 FROM gv\$lock s WHERE request != 0 AND s.id1 = m.id1 AND s.id2 = m.id2))
ORDER BY id1,id2, m.request;
clear breaks
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY SESSIONS PER I/O CONSUME
#########################################################################################################
#
# 11g
function func_dba_11_058_a()
{
  echo ""
}
# 12c
function func_dba_12_058_a()
{
  echo ""
}
# 18c
function func_dba_18_058_a()
{
  echo ""
}
# 19c
function func_dba_19_058_a()
{
  echo ""
}
# 20c
function func_dba_20_058_a()
{
  echo ""
}
#
function func_dba_058_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
clear breaks compute
set feedback 6 feedback off linesize 300 pagesize 10000 verify off echo on heading on timing on colsep '|'
undefine topN topStat topUser
define topN=3
define topStat=%
define pctMinimo=1
column sid for a15
column top_stat_name format a35 heading 'STATISTIC_NAME' trunc
column sess_status format a10 heading 'STATUS' truncate
column username_osuser format a30 heading 'USERNAME/OSUSER'
column minutos format 9999 heading 'MIN'
column statistic_value format 9g999g999g999g990 heading 'STATISTIC_VAL'
column conn_time format a20 heading 'CONNECTED ON'
col "CONNECTED ON" for a20
column rank format 99
break on top_stat_name skip 1
compute sum of pct on statistic_name
select statistic_name as top_stat_name
   , rank
   , pct
   , sid || '/' || serial# as sid
   , decode( username, null, '(' || bg_name || ')', username) || decode(osuser, null, null, '/') || substr(osuser, 1+instr(osuser, '\')) as username_osuser
   , lpad(decode(trunc(sysdate - logon_time), 0, null, trunc(sysdate - logon_time) || 'd, ') || to_char(to_date(trunc(86400 * ((sysdate-logon_time) - trunc(sysdate - logon_time))), 'SSSSS'), 'hh24"h "mi"m"'), 10) as conn_time
   , round(last_call_et/60, 1) as minutos
   , decode(status, 'ACTIVE', 'ACTIVE', 'INACTIVE', 'INACTIVE', status) as sess_status
   , statistic_value
from (select sn.name as statistic_name
    , row_number() over (partition by sn.name order by sn.name, sv.value desc) as rank
    , 100 * ratio_to_report(sv.value) over (partition by sn.name) as pct
    , sv.value as statistic_value
    , bg.name as bg_name
    , ss.*
from v\$sesstat sv
    , v\$statname sn
    , v\$session ss
    , v\$bgprocess bg
where sn.statistic# = sv.statistic#
and ss.sid = sv.sid
and ss.paddr = bg.paddr(+)
and ss.type != 'BACKGROUND'
and ((status = 'INACTIVE' and last_call_et/60 < 5) or status = 'ACTIVE') and sv.value > 0
and sn.name
in ( 'consistent gets'
   , 'db block gets'
   , 'physical reads'
   , 'physical writes'
-- , 'physical reads direct'
-- , 'physical writes direct'
-- , 'bytes sent via SQL*Net to client'
-- , 'bytes received via SQL*Net from dblink'
-- , 'bytes sent via SQL*Net to dblink'
-- , 'enqueue releases'
-- , 'enqueue requests'
   , 'enqueue waits'
-- , 'recursive cpu usage'
-- , 'session logical reads'
-- , 'session pga memory'
-- , 'session uga memory'
   , 'session pga memory max'
   , 'session uga memory max'
   , 'execute count'
   , 'parse count (hard)'
-- , 'parse time cpu'
-- , 'parse time elapsed'
-- , 'parse count (total)'
-- , 'sorts (disk)'
-- , 'sorts (memory)'
   , 'sorts (rows)'
   , 'table scans (long tables)'
   , 'table fetch continued row'))
where trunc(pct) > &pctMinimo    -- percentuais maiores que pctMinimo
and rank < 1+&topN               -- "N" maiores sessoes que consomem aquele recurso
and upper(statistic_name) like upper('%&topStat.%') ;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
clear breaks compute
set feedback 6 feedback off linesize 300 pagesize 10000 verify off timing on colsep '|'
undefine topN topStat topUser
define topN=3
define topStat=%
define pctMinimo=1
column sid for a15
column top_stat_name format a35 heading 'STATISTIC_NAME' trunc
column sess_status format a10 heading 'STATUS' truncate
column username_osuser format a30 heading 'USERNAME/OSUSER'
column minutos format 9999 heading 'MIN'
column statistic_value format 9g999g999g999g990 heading 'STATISTIC_VAL'
column conn_time format a20 heading 'CONNECTED ON'
col "CONNECTED ON" for a20
column rank format 99
break on top_stat_name skip 1
compute sum of pct on statistic_name
select statistic_name as top_stat_name
   , rank
   , pct
   , sid || '/' || serial# as sid
   , decode( username, null, '(' || bg_name || ')', username) || decode(osuser, null, null, '/') || substr(osuser, 1+instr(osuser, '\')) as username_osuser
   , lpad(decode(trunc(sysdate - logon_time), 0, null, trunc(sysdate - logon_time) || 'd, ' ) || to_char (to_date(trunc(86400 * ((sysdate-logon_time) - trunc(sysdate - logon_time))), 'SSSSS'), 'hh24"h "mi"m"'), 10) as conn_time
   , round(last_call_et/60, 1) as minutos
   , decode(status, 'ACTIVE', 'ACTIVE', 'INACTIVE', 'INACTIVE', status) as sess_status
   , statistic_value
from (select sn.name as statistic_name
    , row_number() over (partition by sn.name order by sn.name, sv.value desc) as rank
    , 100 * ratio_to_report(sv.value) over (partition by sn.name) as pct
    , sv.value as statistic_value
    , bg.name as bg_name
    , ss.*
from v\$sesstat sv
    , v\$statname sn
    , v\$session ss
    , v\$bgprocess bg
where sn.statistic# = sv.statistic#
and ss.sid = sv.sid
and ss.paddr = bg.paddr(+)
and ss.type != 'BACKGROUND'
and ((status = 'INACTIVE' and last_call_et/60 < 5) or status = 'ACTIVE') and sv.value > 0
and sn.name
in ( 'consistent gets'
   , 'db block gets'
   , 'physical reads'
   , 'physical writes'
-- , 'physical reads direct'
-- , 'physical writes direct'
-- , 'bytes sent via SQL*Net to client'
-- , 'bytes received via SQL*Net from dblink'
-- , 'bytes sent via SQL*Net to dblink'
-- , 'enqueue releases'
-- , 'enqueue requests'
   , 'enqueue waits'
-- , 'recursive cpu usage'
-- , 'session logical reads'
-- , 'session pga memory'
-- , 'session uga memory'
   , 'session pga memory max'
   , 'session uga memory max'
   , 'execute count'
   , 'parse count (hard)'
-- , 'parse time cpu'
-- , 'parse time elapsed'
-- , 'parse count (total)'
-- , 'sorts (disk)'
-- , 'sorts (memory)'
   , 'sorts (rows)'
   , 'table scans (long tables)'
   , 'table fetch continued row'))
where trunc(pct) > &pctMinimo    -- percentuais maiores que pctMinimo
and rank < 1+&topN               -- "N" maiores sessoes que consomem aquele recurso
and upper(statistic_name) like upper('%&topStat.%') ;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY SESSIONS PER I/O CONSUME
#########################################################################################################
#
# 11g
function func_dba_11_058_b()
{
  echo ""
}
# 12c
function func_dba_12_058_b()
{
  echo ""
}
# 18c
function func_dba_18_058_b()
{
  echo ""
}
# 19c
function func_dba_19_058_b()
{
  echo ""
}
# 20c
function func_dba_20_058_b()
{
  echo ""
}
#
function func_dba_058_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
clear breaks compute
set feedback 6 feedback off linesize 300 pagesize 10000 verify off echo on heading on timing on colsep '|'
undefine topN topStat topUser
define topN=5
define topStat=%
define pctMinimo=1
column sid for a15
column top_stat_name format a35 heading 'STATISTIC_NAME' trunc
column sess_status format a10 heading 'STATUS' truncate
column username_osuser format a30 heading 'USERNAME/OSUSER'
column minutos format 9999 heading 'MIN'
column statistic_value format 9g999g999g999g990 heading 'STATISTIC_VAL'
column conn_time format a20 heading 'CONNECTED ON'
column "CONNECTED ON" for a20
column rank format 99
break on top_stat_name skip 1
compute sum of pct on statistic_name
select statistic_name as top_stat_name
   , rank
   , pct
   , sid || '/' || serial# as sid
   , decode( username, null, '(' || bg_name || ')', username) || decode(osuser, null, null, '/') || substr(osuser, 1+instr(osuser, '\')) as username_osuser
   , lpad(decode(trunc(sysdate - logon_time), 0, null, trunc(sysdate - logon_time) || 'd, ' ) || to_char (to_date(trunc(86400 * ((sysdate-logon_time) - trunc(sysdate - logon_time))), 'SSSSS'), 'hh24"h "mi"m"'), 10) as conn_time
   , round(last_call_et/60, 1) as minutos
   , decode(status, 'ACTIVE', 'ACTIVE', 'INACTIVE', 'INACTIVE', status) as sess_status
   , statistic_value
from (select sn.name as statistic_name
    , row_number() over (partition by sn.name order by sn.name, sv.value desc) as rank
    , 100 * ratio_to_report(sv.value) over (partition by sn.name) as pct
    , sv.value as statistic_value
    , bg.name as bg_name
    , ss.*
from v\$sesstat sv
    , v\$statname sn
    , v\$session ss
    , v\$bgprocess bg
where sn.statistic# = sv.statistic#
and ss.sid = sv.sid
and ss.paddr = bg.paddr(+)
and ss.type != 'BACKGROUND'
and ((status = 'INACTIVE' and last_call_et/60 < 5) or status = 'ACTIVE') and sv.value > 0
and sn.name
in ( 'consistent gets'
   , 'db block gets'
   , 'physical reads'
   , 'physical writes'
-- , 'physical reads direct'
-- , 'physical writes direct'
-- , 'bytes sent via SQL*Net to client'
-- , 'bytes received via SQL*Net from dblink'
-- , 'bytes sent via SQL*Net to dblink'
-- , 'enqueue releases'
-- , 'enqueue requests'
   , 'enqueue waits'
-- , 'recursive cpu usage'
-- , 'session logical reads'
-- , 'session pga memory'
-- , 'session uga memory'
   , 'session pga memory max'
   , 'session uga memory max'
   , 'execute count'
   , 'parse count (hard)'
-- , 'parse time cpu'
-- , 'parse time elapsed'
-- , 'parse count (total)'
-- , 'sorts (disk)'
-- , 'sorts (memory)'
   , 'sorts (rows)'
   , 'table scans (long tables)'
   , 'table fetch continued row'))
where trunc(pct) > &pctMinimo    -- percentuais maiores que pctMinimo
and rank < 1+&topN               -- "N" maiores sessoes que consomem aquele recurso
and upper(statistic_name) like upper('%&topStat.%') ;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
clear breaks compute
set feedback 6 feedback off linesize 300 pagesize 10000 verify off timing on colsep '|'
undefine topN topStat topUser
define topN=5
define topStat=%
define pctMinimo=1
column sid for a15
column top_stat_name format a35 heading 'STATISTIC_NAME' trunc
column sess_status format a10 heading 'STATUS' truncate
column username_osuser format a30 heading 'USERNAME/OSUSER'
column minutos format 9999 heading 'MIN'
column statistic_value format 9g999g999g999g990 heading 'STATISTIC_VAL'
column conn_time format a20 heading 'CONNECTED ON'
column "CONNECTED ON" for a20
column rank format 99
break on top_stat_name skip 1
compute sum of pct on statistic_name
select statistic_name as top_stat_name
   , rank
   , pct
   , sid || '/' || serial# as sid
   , decode( username, null, '(' || bg_name || ')', username) || decode(osuser, null, null, '/') || substr(osuser, 1+instr(osuser, '\')) as username_osuser
   , lpad(decode(trunc(sysdate - logon_time), 0, null, trunc(sysdate - logon_time) || 'd, ' ) || to_char (to_date(trunc(86400 * ((sysdate-logon_time) - trunc(sysdate - logon_time))), 'SSSSS'), 'hh24"h "mi"m"'), 10) as conn_time
   , round(last_call_et/60, 1) as minutos
   , decode(status, 'ACTIVE', 'ACTIVE', 'INACTIVE', 'INACTIVE', status) as sess_status
   , statistic_value
from (select sn.name as statistic_name
    , row_number() over (partition by sn.name order by sn.name, sv.value desc) as rank
    , 100 * ratio_to_report(sv.value) over (partition by sn.name) as pct
    , sv.value as statistic_value
    , bg.name as bg_name
    , ss.*
from v\$sesstat sv
    , v\$statname sn
    , v\$session ss
    , v\$bgprocess bg
where sn.statistic# = sv.statistic#
and ss.sid = sv.sid
and ss.paddr = bg.paddr(+)
and ss.type != 'BACKGROUND'
and ((status = 'INACTIVE' and last_call_et/60 < 5) or status = 'ACTIVE') and sv.value > 0
and sn.name
in ( 'consistent gets'
   , 'db block gets'
   , 'physical reads'
   , 'physical writes'
-- , 'physical reads direct'
-- , 'physical writes direct'
-- , 'bytes sent via SQL*Net to client'
-- , 'bytes received via SQL*Net from dblink'
-- , 'bytes sent via SQL*Net to dblink'
-- , 'enqueue releases'
-- , 'enqueue requests'
   , 'enqueue waits'
-- , 'recursive cpu usage'
-- , 'session logical reads'
-- , 'session pga memory'
-- , 'session uga memory'
   , 'session pga memory max'
   , 'session uga memory max'
   , 'execute count'
   , 'parse count (hard)'
-- , 'parse time cpu'
-- , 'parse time elapsed'
-- , 'parse count (total)'
-- , 'sorts (disk)'
-- , 'sorts (memory)'
   , 'sorts (rows)'
   , 'table scans (long tables)'
   , 'table fetch continued row'))
where trunc(pct) > &pctMinimo    -- percentuais maiores que pctMinimo
and rank < 1+&topN               -- "N" maiores sessoes que consomem aquele recurso
and upper(statistic_name) like upper('%&topStat.%') ;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY FREE SEGMENTS ON DATAFILES
#########################################################################################################
#
# 11g
function func_dba_11_059()
{
  echo ""
}
# 12c
function func_dba_12_059()
{
  echo ""
}
# 18c
function func_dba_18_059()
{
  echo ""
}
# 19c
function func_dba_19_059()
{
  echo ""
}
# 20c
function func_dba_20_059()
{
  echo ""
}
#
function func_dba_059()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 5000 lines 5000 timing on colsep '|'
col "Name" for a50
select file_id
  , block_id
  , blocks*8192/1024 MB
  , owner || '.' || segment_name "Name"
  , block_id*8192/1024 "Position MB"
from  dba_Extents where file_id = 21
union
select file_id
  , block_id
  , blocks*8192/1024, 'Free' "Name"
  , block_id*8192/1024 "Position MB"
from dba_free_space
order by 1,2,3;
quit;
EOF
}
#
#########################################################################################################
# VERIFY WHICH DATAFILES CAN BE RESIZED
#########################################################################################################
#
# 11g
function func_dba_11_060_a()
{
  echo ""
}
# 12c
function func_dba_12_060_a()
{
  echo ""
}
# 18c
function func_dba_18_060_a()
{
  echo ""
}
# 19c
function func_dba_19_060_a()
{
  echo ""
}
# 20c
function func_dba_20_060_a()
{
  echo ""
}
#
function func_dba_060_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify off colsep '|'
column file_name format a120 word_wrapped
column smallest format 999,999,990 heading "Smallest|Size|Poss."
column currsize format 999,999,990 heading "Current|Size"
column savings format 999,999,990 heading "Poss.|Savings"
break on report
compute sum of smallest on report
compute sum of currsize on report
compute sum of savings on report
column value new_val blksize for a10
prompt ##############################################################
PROMPT # DB BLOCK SIZE                                              #
prompt ##############################################################
select value from v\$parameter where name = 'db_block_size';
prompt
prompt ##############################################################
prompt # INFORMATIONS ABOUT DATAFILES                               #
prompt ##############################################################
select 'DATAFILE ' as DATAFILE
  , file_name
  , ceil((nvl(hwm,1)*&&blksize)/1024/1024 ) smallest
  , ceil(blocks*&&blksize/1024/1024) currsize
  , ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) savings
  , case when ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 100 then 'Recomended' else 'Not Recomended' end as "Recomendation"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+);
prompt
prompt ##############################################################
prompt # COMMANDS TO RESIZE THE DATAFILES                           #
prompt ##############################################################
column "SQL Command" for a175 word_wrapped
select 'alter database datafile ''' || file_name || ''' resize ' || ceil((nvl(hwm,1)*&&blksize)/1024/1024) || 'M;' as "SQL Command"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+)
and ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 0;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set verify off pages 700 lines 700 timing on feedback on colsep '|'
column file_name format a120 word_wrapped
column smallest format 999,999,990 heading "Smallest|Size|Poss."
column currsize format 999,999,990 heading "Current|Size"
column savings format 999,999,990 heading "Poss.|Savings"
break on report
compute sum of smallest on report
compute sum of currsize on report
compute sum of savings on report
column value new_val blksize for a10
prompt ##############################################################
PROMPT # DB BLOCK SIZE                                              #
prompt ##############################################################
select value from v\$parameter where name = 'db_block_size';
prompt
prompt ##############################################################
prompt # INFORMATIONS ABOUT DATAFILES                               #
prompt ##############################################################
select 'DATAFILE ' as DATAFILE
  , file_name
  , ceil((nvl(hwm,1)*&&blksize)/1024/1024 ) smallest
  , ceil(blocks*&&blksize/1024/1024) currsize
  , ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) savings
  , case when ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 100 then 'Recomended' else 'Not Recomended' end as "Recomendation"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+);
prompt
prompt ##############################################################
prompt # COMMANDS TO RESIZE THE DATAFILES                           #
prompt ##############################################################
column "SQL Command" for a175 word_wrapped
select 'alter database datafile ''' || file_name || ''' resize ' || ceil( (nvl(hwm,1)*&&blksize)/1024/1024 ) || 'M;' as "SQL Command"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+)
and ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 0;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY WHICH DATAFILES CAN BE RESIZED
#########################################################################################################
#
# 11g
function func_dba_11_060_b()
{
  echo ""
}
# 12c
function func_dba_12_060_b()
{
  echo ""
}
# 18c
function func_dba_18_060_b()
{
  echo ""
}
# 19c
function func_dba_19_060_b()
{
  echo ""
}
# 20c
function func_dba_20_060_b()
{
  echo ""
}
#
function func_dba_060_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify off colsep '|'
column file_name format a120 word_wrapped
column smallest format 999,999,999 heading "Smallest|Size|Poss."
column currsize format 999,999,999 heading "Current|Size"
column savings format 999,999,999 heading "Poss.|Savings"
break on report
compute sum of smallest on report
compute sum of currsize on report
compute sum of savings on report
column value new_val blksize for a10
prompt ##############################################################
PROMPT # DB BLOCK SIZE                                              #
prompt ##############################################################
select value from v\$parameter where name = 'db_block_size';
prompt
prompt ##############################################################
prompt # INFORMATIONS ABOUT DATAFILES                               #
prompt ##############################################################
select 'DATAFILE ' as DATAFILE
  , file_name
  , ceil((nvl(hwm,1)*&&blksize)/1024/1024 ) smallest
  , ceil(blocks*&&blksize/1024/1024) currsize
  , ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) savings
  , case when ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 100 then 'Recomended' else 'Not Recomended' end as "Recomendation"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+);
prompt
prompt ##############################################################
prompt # COMMANDS TO RESIZE THE DATAFILES                           #
prompt ##############################################################
column "SQL Command" for a175 word_wrapped
select 'alter database datafile ''' || file_name || ''' resize ' || ceil((nvl(hwm,1)*&&blksize)/1024/1024) || 'M;' as "SQL Command"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+)
and ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 0;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set verify off pages 700 lines 700 timing on feedback on colsep '|'
column file_name format a120 word_wrapped
column smallest format 999,999,999 heading "Smallest|Size|Poss."
column currsize format 999,999,999 heading "Current|Size"
column savings format 999,999,999 heading "Poss.|Savings"
break on report
compute sum of smallest on report
compute sum of currsize on report
compute sum of savings on report
column value new_val blksize for a10
prompt ##############################################################
PROMPT # DB BLOCK SIZE                                              #
prompt ##############################################################
select value from v\$parameter where name = 'db_block_size';
prompt
prompt ##############################################################
prompt # INFORMATIONS ABOUT DATAFILES                               #
prompt ##############################################################
select 'DATAFILE ' as DATAFILE
  , file_name
  , ceil((nvl(hwm,1)*&&blksize)/1024/1024 ) smallest
  , ceil(blocks*&&blksize/1024/1024) currsize
  , ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) savings
  , case when ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 100 then 'Recomended' else 'Not Recomended' end as "Recomendation"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+);
prompt
prompt ##############################################################
prompt # COMMANDS TO RESIZE THE DATAFILES                           #
prompt ##############################################################
column "SQL Command" for a175 word_wrapped
select 'alter database datafile ''' || file_name || ''' resize ' || ceil( (nvl(hwm,1)*&&blksize)/1024/1024 ) || 'M;' as "SQL Command"
from dba_data_files a, (select file_id, max(block_id+blocks-1) hwm from dba_extents group by file_id) b
where a.file_id = b.file_id(+)
and ceil(blocks*&&blksize/1024/1024) - ceil((nvl(hwm,1)*&&blksize)/1024/1024) > 0;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY RECYCLEBIN
#########################################################################################################
#
# 11g
function func_dba_11_061()
{
  echo ""
}
# 12c
function func_dba_12_061()
{
  echo ""
}
# 18c
function func_dba_18_061()
{
  echo ""
}
# 19c
function func_dba_19_061()
{
  echo ""
}
# 20c
function func_dba_20_061()
{
  echo ""
}
#
function func_dba_061()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 200 lines 200 timing on colsep '|'
col OBJECT_NAME for a25
col ORIGINAL_NAME for a25
col OPERATION for a10
select * from recyclebin;
quit;
EOF
}
#
#########################################################################################################
# CLEAR REYICLEBIN
#########################################################################################################
#
# 11g
function func_dba_11_062()
{
  echo ""
}
# 12c
function func_dba_12_062()
{
  echo ""
}
# 18c
function func_dba_18_062()
{
  echo ""
}
# 19c
function func_dba_19_062()
{
  echo ""
}
# 20c
function func_dba_20_062()
{
  echo ""
}
#
function func_dba_062()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 200 lines 200 timing on colsep '|'
prompt ##############################################################
Prompt # WAIT A MOMENT PLEASE, THE CLEARING IS RUNNING              #
prompt ##############################################################
purge recyclebin;
quit;
EOF
}
#
#########################################################################################################
# VERIFY DATABASE SESSIONS
#########################################################################################################
#
# 11g
function func_dba_11_063_a()
{
  echo ""
}
# 12c
function func_dba_12_063_a()
{
  echo ""
}
# 18c
function func_dba_18_063_a()
{
  echo ""
}
# 19c
function func_dba_19_063_a()
{
  echo ""
}
# 20c
function func_dba_20_063_a()
{
  echo ""
}
#
function func_dba_063_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select total_sessions
  , active_sessions
  , (total_sessions - active_sessions) inactive_sessions
  , round( 100 * active_sessions / total_sessions, 2) pct_active
  , round( 100 * (total_sessions - active_sessions) / total_sessions, 2) pct_inactive
from (select count(*) total_sessions from v\$session where type <> 'BACKGROUND') st,
     (select count(*) active_sessions from v\$session where  status = 'ACTIVE' and type <> 'BACKGROUND') sa;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
select total_sessions
  , active_sessions
  , (total_sessions - active_sessions) inactive_sessions
  , round( 100 * active_sessions / total_sessions, 2) pct_active
  , round( 100 * (total_sessions - active_sessions) / total_sessions, 2) pct_inactive
from (select count(*) total_sessions from v\$session where type <> 'BACKGROUND') st,
     (select count(*) active_sessions from v\$session where  status = 'ACTIVE' and type <> 'BACKGROUND') sa;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY DATABASE SESSIONS
#########################################################################################################
#
# 11g
function func_dba_11_063_b()
{
  echo ""
}
# 12c
function func_dba_12_063_b()
{
  echo ""
}
# 18c
function func_dba_18_063_b()
{
  echo ""
}
# 19c
function func_dba_19_063_b()
{
  echo ""
}
# 20c
function func_dba_20_063_b()
{
  echo ""
}
#
function func_dba_063_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select total_sessions
  , active_sessions
  , (total_sessions - active_sessions) inactive_sessions
  , round( 100 * active_sessions / total_sessions, 2) pct_active
  , round( 100 * (total_sessions - active_sessions) / total_sessions, 2) pct_inactive
from (select count(*) total_sessions from v\$session where type <> 'BACKGROUND') st,
     (select count(*) active_sessions from v\$session where  status = 'ACTIVE' and type <> 'BACKGROUND') sa;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
select total_sessions
  , active_sessions
  , (total_sessions - active_sessions) inactive_sessions
  , round( 100 * active_sessions / total_sessions, 2) pct_active
  , round( 100 * (total_sessions - active_sessions) / total_sessions, 2) pct_inactive
from (select count(*) total_sessions from gv\$session where type <> 'BACKGROUND') st,
     (select count(*) active_sessions from gv\$session where  status = 'ACTIVE' and type <> 'BACKGROUND') sa;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY ACTIVES SESSIONS PER OWNER
#########################################################################################################
#
# 11g
function func_dba_11_064_a()
{
  echo ""
}
# 12c
function func_dba_12_064_a()
{
  echo ""
}
# 18c
function func_dba_18_064_a()
{
  echo ""
}
# 19c
function func_dba_19_064_a()
{
  echo ""
}
# 20c
function func_dba_20_064_a()
{
  echo ""
}
#
function func_dba_064_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col username for a20
select username, status, count(*)
from gv\$session
group by username,status
order by 1,2,3;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col username for a20
select username, status, count(*)
from gv\$session
group by username,status
order by 1,2,3;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY ACTIVES SESSIONS PER OWNER
#########################################################################################################
#
# 11g
function func_dba_11_064_b()
{
  echo ""
}
# 12c
function func_dba_12_064_b()
{
  echo ""
}
# 18c
function func_dba_18_064_b()
{
  echo ""
}
# 19c
function func_dba_19_064_b()
{
  echo ""
}
# 20c
function func_dba_20_064_b()
{
  echo ""
}
#
function func_dba_064_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col username for a20
select username, status, count(*)
from gv\$session
group by username,status
order by 1,2,3;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col username for a20
select username, status, count(*)
from gv\$session
group by username,status
order by 1,2,3;
quit;
EOF
fi
}
#
#########################################################################################################
# UNLOCKING A USUER
#########################################################################################################
#
# 11g
function func_dba_11_065()
{
  echo ""
}
# 12c
function func_dba_12_065()
{
  echo ""
}
# 18c
function func_dba_18_065()
{
  echo ""
}
# 19c
function func_dba_19_065()
{
  echo ""
}
# 20c
function func_dba_20_065()
{
  echo ""
}
#
function func_dba_065()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col username for a30
col profile for a30
select user_id, username, account_status, default_tablespace, profile from dba_users
where account_status <> 'OPEN'
order by 2;
quit;
EOF
}
#
#########################################################################################################
# LOCKING A USER
#########################################################################################################
#
# 11g
function func_dba_11_066()
{
  echo ""
}
# 12c
function func_dba_12_066()
{
  echo ""
}
# 18c
function func_dba_18_066()
{
  echo ""
}
# 19c
function func_dba_19_066()
{
  echo ""
}
# 20c
function func_dba_20_066()
{
  echo ""
}
#
function func_dba_066()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col username for a30
col profile for a30
select user_id, username, account_status, default_tablespace, profile from dba_users
where account_status = 'OPEN'
order by 2;
quit;
EOF
}
#
#########################################################################################################
# REDO GROUPS INFORMATIONS
#########################################################################################################
#
# 11g
function func_dba_11_067()
{
  echo ""
}
# 12c
function func_dba_12_067()
{
  echo ""
}
# 18c
function func_dba_18_067()
{
  echo ""
}
# 19c
function func_dba_19_067()
{
  echo ""
}
# 20c
function func_dba_20_067()
{
  echo ""
}
#
function func_dba_067()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col member FORMAT A90
col group# format 999
col status for a15
col TOTAL_MB format 999,999,999,999
col TOTAL_GB format 999,999,999,999
col TOTAL_MB for a20
col TOTAL_GB for a20
break on report
break on top_stat_name skip 1
compute sum of TOTAL_MB on report
compute sum of TOTAL_GB on report
cl break
prompt ##############################################################
prompt # OnLine Redologs                                            #
prompt ##############################################################
select t1.GROUP#
   , t1.TYPE
   , t2.status
   , t1.MEMBER
   , t1.IS_RECOVERY_DEST_FILE
   , to_char(t2.bytes/1024/1024, '9G999G999D999') TOTAL_MB
   , to_char(t2.bytes/1024/1024/1024, '999D999') TOTAL_GB
from v\$logfile t1, v\$log t2
where t1.group# = t2.group#
order by 1,2,3,4;
prompt
prompt ##############################################################
prompt # Standby Redologs                                           #
prompt ##############################################################
select s1.group#
  , s2.THREAD#
  , s1.type
  , s2.status
  , s1.member
  , 'N/A' as "N/A"
  , to_char(s2.bytes/1024/1024, '9G999G999D999') TOTAL_MB
  , to_char(s2.bytes/1024/1024/1024, '999D999') TOTAL_GB
from v\$logfile s1, v\$standby_log s2
where s1.group# = s2.group#
and s1.type = 'STANDBY'
order by 1,2,3,4;
prompt
prompt ##############################################################
prompt # Archiving Details                                          #
prompt ##############################################################
select PROCESS
  , STATUS
  , THREAD#
  , SEQUENCE#
  , BLOCK#
  , BLOCKS
FROM V\$MANAGED_STANDBY;
prompt
prompt ##############################################################
prompt # Utilization of Current Redo Log ( in % )                   #
prompt ##############################################################
select le.leseq "Current log sequence No"
  , 100*cp.cpodr_bno/le.lesiz "Percent Full"
  , cp.cpodr_bno "Current Block No"
  , le.lesiz "Size of Log in Blocks" 
from x\$kcccp cp, x\$kccle le 
where le.leseq =CP.cpodr_seq 
and bitand(le.leflg,24) = 8 
/
quit;
EOF
}
#
######################################################################################################### 
# VERIFY ALL GRID INFRASTRUTURE SERVICES SOLARIS
######################################################################################################### 
#
function func_os_sun_068()
{
ccrsctl=${GRID_HOME}/bin/crsctl
TODAY=`date +%d.%m.%Y`;
ORACLE_USER=`ls -alr ${GRID_HOME}/bin/sqlplus | awk '{print $3}'`;
PATH_SET=${PATH}:${GRID_HOME}/bin;
HEADER_COLR='34m';
TRAILER_COLR='34m';
TAB_HEAD_COLR='33m';
TAB_TEXT_COLR='92m';
ALRT_COLR='31m';
DB_INST_COLR='34m';
SHELL_PROMPT_COLR='37m';
binary_setup()
{
  CRS_VERSION=`${GRID_HOME}/OPatch/opatch lsinventory | fgrep "Oracle Database" | tail -1 | awk '{print $(NF-0)}'`;
}
crsstat()
{
CHECK_RESOURCE=$1;
if [[ -z ${CHECK_RESOURCE} ]]
then
  CHECK_RESOURCE='';
else
  CHECK_RESOURCE=$1;
fi;
if [[ ${CHECK_RESOURCE} = 'h' ]]
then
  printf "\e[${TAB_HEAD_COLR}";
  printf "# COLOR CODES: ";
  printf "\e[${HEADER_COLR}";
  printf "\e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
  printf "\e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
  printf "\e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
  printf "\e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR}\n";
  echo "--------------------------------------------------------------------------------------------------";
  printf "\e[${TAB_TEXT_COLR}\n";
  cat $0 | fgrep "HELP:" | fgrep -v "fgrep" | sed 's/^.*crsstat/crsstat/g';
  printf "\e[${TRAILER_COLR}\n";
  echo "--------------------------------------------------------------------------------------------------";
  printf "\e[${SHELL_PROMPT_COLR}";
fi;
if [[ ${CHECK_RESOURCE} = 'res' ]]
then
  V_RESOURCE_TYPE=`${GRID_HOME}/bin/crsctl status resource -p | egrep "^NAME\=|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION\=|^SERVICE_NAME\=|DESCRIPTION=" | sed 's/^/|/g' | sed 's/$/|/g' | tr "\n" " " | sed 's/| |/|/g' | sed 's/| $//g' | sed 's/|NAME/\n|NAME/g' | sed 's/TYPE=ora./TYPE=/g' | sed 's/.type//g' | sort -t '|' -k3 | sed '/^$/d' | sed 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | sed 's/TYPE=//g;s/DESCRIPTION=//g' | sed 's/|!!!|/|NA|/g' | sed 's/$/!!!/g' | awk -F\| '{print "|"$3"|"$4"|!!!"}' | sed 's/|!!!|/|NO DESCRIPTION|/g' | sed 's/\"//g' | sort -u`;
  V_CRSP_COL_LINE='+---------------+-------------+!!!';
  V_CRSP_COL_NAME='| RESOURCE_TYPE | DESCRIPTION |!!!';
  V_CRSP_COL_LINE='+---------------+-------------+!!!';
  printf "\e[${HEADER_COLR}\n";
  echo "--------------------------------------------------------------------------------------------------";
  printf "\e[${TAB_HEAD_COLR}";
  printf " CRSSTAT RESOURCE LIST ";
  printf "\e[${HEADER_COLR}";
  echo "--------------------------------------------------------------------------------------------------";
  printf "\e[${TAB_HEAD_COLR}";
  printf "..::COLOR CODES: ";
  printf "\e[${HEADER_COLR}";
  printf "\e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
  printf "\e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
  printf "\e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
  printf "\e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
  echo "--------------------------------------------------------------------------------------------------";
  V_RESOURCE_TYPE=`echo ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} ${V_RESOURCE_TYPE}`;
  printf "\e[${TAB_TEXT_COLR}\n";
  echo ${V_RESOURCE_TYPE} | sed 's/[ ]\+|/|/g' | sed 's/!!!/\n/g' | column -s "|" -t;
  printf "\e[${TRAILER_COLR}\n";
  echo "--------------------------------------------------------------------------------------------------";
  printf "\e[${SHELL_PROMPT_COLR}";
elif [[ ${CHECK_RESOURCE} != 'h' ]]
then
    V_CRSP=`${GRID_HOME}/bin/crsctl status resource -p | egrep "^NAME=|^TYPE=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|SERVER_POOLS=" | sed 's/^/|/g' | sed 's/$/|/g' | tr "\n" " "`;
  # V_CRSP=`${GRID_HOME}/bin/crsctl status resource -p | egrep "^NAME=|^TYPE=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|SERVER_POOLS=" | sed 's/^/|/g' | sed 's/$/|/g' | tr "\n" " " | sed 's/| |/|/g' | sed 's/| $//g' | sed 's/|NAME/\n|NAME/g' | sed 's/TYPE=ora./TYPE=/g' | sed 's/.type//g' | sort -t '|' -k3 | sed '/^$/d' | sed 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | sed 's/$/!!!/g' | fgrep "${CHECK_RESOURCE}"`;
    V_CRSV=`${GRID_HOME}/bin/crsctl status resource -v | egrep "^NAME=|^TYPE=|^LAST_RESTART=|^STATE=|^TARGET=|^INTERNAL_STATE=" | sed 's/^/|/g' | sed 's/$/|/g' | tr "\n" " "`;
  # V_CRSV=`${GRID_HOME}/bin/crsctl status resource -v | egrep "^NAME=|^TYPE=|^LAST_RESTART=|^STATE=|^TARGET=|^INTERNAL_STATE=" | sed 's/^/|/g' | sed 's/$/|/g' | tr "\n" " " | sed 's/| |/|/g' | sed 's/|NAME/\n|NAME/g' | sed 's/TYPE=ora./TYPE=/g' | sed 's/.type//g' | sort -t'|' -k3 | sed '/^$/d' | sed 's/$/!!!|/g' | fgrep "${CHECK_RESOURCE}"`;
  for resource in `echo ${V_CRSP}`
  do
    V_NAME=`echo ${resource} | awk -F\| '{print $2}'`;
    V_TYPE=`echo ${resource} | awk -F\| '{print $2}'`;
    V_VERSION=`echo ${resource} | awk -F\| '{print $F}' | sed 's/!!!//g'`;
    V_RESOURCE=`echo ${resource} | sed 's/|'${V_NAME}'//g' | sed 's/|'${V_TYPE}'//g' | sed 's/'${V_VERSION}'//g'`;
    V_ORIGINAL=`echo ${V_CRSV} | sed 's/!!!|/\n/g' | fgrep ${V_NAME}`;
    V_REPLACE=`echo ${V_ORIGINAL}`;
    if [[ `echo ${V_REPLACE} | egrep "asm|database" | wc -l` -gt 0 ]]
    then
      for v_host_inst in `echo ${V_RESOURCE} | sed 's/|/ /g' | sed 's/!!!//g'`
      do
        HOST_NAME=`echo ${v_host_inst} | sed 's/=/ /g' | sed 's/(//g;s/)//g' | awk '{print $1}'`;
        INST_NAME=`echo ${v_host_inst} | sed 's/=/ /g' | awk '{print $2}'`;
        V_REPLACE=`echo ${V_REPLACE} | sed -e 's/'${HOST_NAME}'/'${HOST_NAME}' \('${INST_NAME}'\)/g'`;
      done;
      V_REPLACE=`echo ${V_REPLACE} | sed 's/|/|${V_VERSION}|/3'`;
    elif [[ `echo ${V_REPLACE} | fgrep "dbfs" | wc -l` -gt 0 ]]
    then
      V_REPLACE=`echo ${V_REPLACE} | sed 's/|/|NA|/3'`;
    else
    V_REPLACE=`echo ${V_REPLACE} | sed 's/|/|${V_VERSION}|/3'`;
    fi;
  V_CRSV=`echo ${V_CRSV} | sed 's#${V_ORIGINAL}#${V_REPLACE}#g'`;
  done;
  V_CRSV=`echo ${V_CRSV} | sed 's/!!!/\n/g'`;
  V_CRSP_COL_LINE1='+------+------+---------+-------+--------+--------------+----------------+!!!';
  V_CRSP_COL_NAME1='| NAME | TYPE | VERSION | STATE | TARGET | LAST_RESTART | INTERNAL_STATE |!!!';
  V_CRSP_COL_LINE2='+------+------+---------+-------+--------+--------------+----------------+!!!';
  printf "\e[${HEADER_COLR}\n";
  echo "--------------------------------------------------------------------------------------------------";
  printf "\e[${TAB_HEAD_COLR}";
  printf "# COLOR CODES: ";
  printf "\e[${HEADER_COLR}";
  printf "\e[${TAB_HEAD_COLR}HEADER \e[${HEADER_COLR} ";
  printf "\e[${TAB_TEXT_COLR}CONTENT \e[${TAB_TEXT_COLR} ";
  printf "\e[${ALRT_COLR}ALERT \e[${ALRT_COLR} ";
  printf "\e[${DB_INST_COLR}ORACLE_SID \e[${TRAILER_COLR} \n";
  echo "--------------------------------------------------------------------------------------------------";
  V_CRSV=`printf "\e[${TAB_HEAD_COLR} ${V_CRSP_COL_LINE1} ${V_CRSP_COL_NAME1} \e[${TAB_TEXT_COLR} ${V_CRSV}"`;
  echo ${V_CRSV} | sed 's/|--/\n|--/1' | sed 's/|NAME/\n|NAME/g' | sed 's/|STATE/| | | |\n| | | |STATE/g' | sed -e "s/NAME=//g;s/TYPE=//g;s/TARGET=//g;s/LAST_RESTART=//g;s/INTERNAL_STATE=//g;s/STATE=//g;s/VERSION=//g" | sed 's/!!!//g' | col -bx | sed ''/OFFLINE/s//`printf "\e[${ALRT_COLR}OFFLINE\e[${TAB_TEXT_COLR}"`/g'' | sed ''/INTERMEDIATE/s//`printf "\e[${ALRT_COLR}INTERMEDIATE\e[${TAB_TEXT_COLR}"`/g'' | sed ''/UNKNOWN/s//`printf "\e[${ALRT_COLR}UNKNOWN\e[${TAB_TEXT_COLR}"`/g'' | sed ''/\(/s//`printf "\e[${DB_INST_COLR}\("`/g'' | sed ''/\)/s//`printf "\)\e[${TAB_TEXT_COLR}"`/g'' | sed -e 's/ \+$/ /g';
  printf "\e[${TRAILER_COLR}\n";
  printf ">--------------------------------<";
  printf " \e[${TAB_HEAD_COLR}SERVICE STATUS \e[${HEADER_COLR} <----------------------> \e[${ALRT_COLR} CHECK ALERTS \e[${TRAILER_COLR}";
  printf ">--------------------------------<";
  printf " \e[${TAB_TEXT_COLR}\n";
  service_chk;
  printf "\e[${TRAILER_COLR}\n";
  printf "\e[${SHELL_PROMPT_COLR}\n";
fi;
}
service_chk()
{
V_SERVICE_CONFIG="";
V_SERVICE_STATUS="";
V_SERVICES="";
V_DATABASE_RESOURCE=`${GRID_HOME}/bin/crsctl status resource -p | grep -v "CRS_HOME" | egrep "^NAME|^ORACLE_HOME" | egrep "\.db|^ORACLE_HOME=" | fgrep -v "\%" | sed 's/^.*=//g;s/ora\.//g;s/\.db//g' | sed '$!N;s/\n/::/'`;
for db_data in `echo ${V_DATABASE_RESOURCE}`
do
  db_name=`printf "${db_data}" | awk 'BEGIN {FS="::"} { printf ("%s\n", $1)}'`;
  db_home=`printf "${db_data}" | awk 'BEGIN {FS="::"} { printf ("%s\n", $3)}'`;
  V_SERVICE_CONFIG=`${ORACLE_HOME}/bin/srvctl config service -d ${db_name} | egrep "Service name|Service is enabled|TAF policy specification|Preferred|Available|Pluggable database name" | sed -e :a -e '$!N; s/\n/|/; ta' | sed 's/|Service name/\nService name/g' | sed -e "s/|/|${db_name}|/1" | sed -e "s/Service name: //g;s/Service is //g;s/TAF policy specification: //g;s/Preferred instances: //g;s/Available instances: //g; s/Pluggable database name: //g"`;
  for srv in `echo ${V_SERVICE_CONFIG}`
  do
    V_SERVICE=`printf "${srv}" | awk -F\| '{ print $1}'`;
    V_ACTIVE_ON=`${ORACLE_HOME}/bin/srvctl status service -d ${db_name} -s ${V_SERVICE} | sed -e 's/Service //g;s/ is running on instance(s) /|/g' | awk -F\| '{print $2}'`;
    V_ON_PREFFERED=`printf "${srv}|${V_ACTIVE_ON}" | awk -F\| '{print $(NF-2)}'`;
    V_ON_AVAILABLE=`printf "${srv}|${V_ACTIVE_ON}" | awk -F\| '{print $(NF)}'`;
    srv="${srv}|${V_ON_AVAILABLE}";
    srv=`printf "${srv}" | sed 's/|$/|Not-Started|/g'`;
    srv=`printf "${srv}" | sed 's/||/|Not-Setup|/g'`;
    srv=`printf "${srv}" | awk -F\| '$5 ~ /Not-Setup/ { OFS= "|"; $5 = "NA"; }1'`;
    if [[ `printf "${srv}" | awk -F\| '{print NF-1}'` -eq 6 ]]
    then
      srv=`printf "${srv}" | sed -e "s/|/|NA|/4"`;
    fi;
    if [[ ${V_ON_PREFFERED} != ${V_ON_AVAILABLE} && "x\${V_ON_AVAILABLE}" != "x" ]]
    then
      srv=`echo ${srv} | sed 's/'${V_ON_AVAILABLE}'/BBB'${V_ON_AVAILABLE}'EEE/2'`;
    fi;
  V_SERVICES="${V_SERVICES}|||${srv}::";
  done;
done;
V_CRSP_COL_LINE3='+----------------+------------+---------+--------------+-------+----------------------+----------------------+-------------+::';
V_CRSP_COL_NAME2='|  SERVICE_NAME  |  DATABASE  |  STATE  |  TAF_POLICY  |  PDB  |  PREFFERED_INSTANCE  |  AVAILABLE_INSTANCE  |  ACTIVE_ON  |::';
V_CRSP_COL_LINE4='+----------------+------------+---------+--------------+-------+----------------------+----------------------+-------------+::';
V_SRV_ALRT=`printf "\e[${TAB_HEAD_COLR}\n${V_CRSP_COL_LINE3}\n${V_CRSP_COL_NAME2}\n${V_CRSP_COL_LINE4} \e[${TAB_TEXT_COLR}\n${V_SERVICES}"`;
printf "${V_SRV_ALRT}" | sed 's/::/\n/g' | sed '/^$/d' | col -bx | sed ''/BBB/s//`printf "\e[${ALRT_COLR}"`/g'' | sed ''/EEE/s//`printf "\e[${TAB_TEXT_COLR}"`/g'' | sed ''/Not-Started/s//`printf "\e[${ALRT_COLR}Not-Started\e[${TAB_TEXT_COLR}"`/g'' | sed ''/Not-Setup/s//`printf "\e[${ALRT_COLR}Not-Setup\e[${TAB_TEXT_COLR}"`/g'' | sed ''/NONE/s//`printf "\e[${ALRT_COLR}NONE\e[${TAB_TEXT_COLR}"`/g'';
}
CHECK_RESOURCE=$1;
binary_setup;
crsstat ${CHECK_RESOURCE};
}
#
######################################################################################################### 
# VERIFY ALL GRID INFRASTRUTURE SERVICES AIX
######################################################################################################### 
#
function func_os_aix_068()
{
hash ccrsctl &> /dev/null
ccrsctl=`which crsctl`
# ********* ENV VARIABLES *********
# MODIFY AS NEEDED ................
# *********************************
AWKCMD=`which awk`;
GREPCMD=`which grep`;
EGREPCMD=`which egrep`;
SEDCMD=`which sed`;
CATCMD=`which cat`;
WCCMD=`which wc`;
TRCMD=`which tr`;
SORTCMD=`which sort`;
ECHOCMD=`which echo`;
PRINTFCMD=`which printf`;
COLUMNCMD=`which col`;
# ********* ENV VARIABLES *********
# Do NOT MODIFY....................
TODAY=`date +%d.%m.%Y`;
ORACLE_USER=`ls -alr ${GRID_HOME}/bin/sqlplus | ${AWKCMD} '{print $3}'`;
PATH_SET=${PATH}:${GRID_HOME}/bin;
# *********** COLOR CONTRAST ***********
# Change DISPLAY COLOR CODE for LOOK and FEEL..
# Keep the Format the same as "nnnm"...........
# NOTE: COLOR CODE's are available online SEARCH for "SHELL COLOR CODES"...
# KEEP COLOR options to FOREGROUND TEXT onl
HEADER_COLR='34m';
TRAILER_COLR='34m';
TAB_HEAD_COLR='33m';
TAB_TEXT_COLR='92m';
ALRT_COLR='31m';
DB_INST_COLR='34m';
SHELL_PROMPT_COLR='37m';
# *********** CODE BODY ******************************************************************
binary_setup()
{
  CRS_VERSION=`${GRID_HOME}/OPatch/opatch lsinventory | ${GREPCMD} "Oracle Database" | tail -1 | ${AWKCMD} '{print $(NF-0)}'`;
}
crsstat()
{
CHECK_RESOURCE=$1;
if [[ -z ${CHECK_RESOURCE} ]]
then
  CHECK_RESOURCE='';
else
  CHECK_RESOURCE=$1;
fi;
if [[ ${CHECK_RESOURCE} = 'h' ]]
then
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n";
${CATCMD} $0 | ${GREPCMD} "HELP:" | ${GREPCMD} -v "GREPCMD" | ${SEDCMD} 's/^.*crsstat/crsstat/g';
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
fi;
if [[ ${CHECK_RESOURCE} = 'res' ]]
then
V_RESOURCE_TYPE=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|DESCRIPTION=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/| $//g' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | \
${SEDCMD} "s/TYPE=//g;s/DESCRIPTION=//g" | ${SEDCMD} 's/|!!!|/|NA|/g' | ${SEDCMD} 's/$/!!!/g' | \
${AWKCMD} -F\| '{print "|"$3"|"$4"|!!!"}' | ${SEDCMD} 's/|!!!|/|NO DESCRIPTION|/g' | ${SEDCMD} 's/\"//g' | \
${SORTCMD} -u`;
V_CRSP_COL_NAME='|RESOURCE_TYPE|DESCRIPTION|!!!';
V_CRSP_COL_LINE='|-------------|-----------|!!!';
${PRINTFCMD} "\e[${HEADER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} " CRSSTAT RESOURCE LIST ";
${PRINTFCMD} "\e[${HEADER_COLR}";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "..::COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
V_RESOURCE_TYPE=`${ECHOCMD} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} ${V_RESOURCE_TYPE}`;
${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n";
${ECHOCMD} ${V_RESOURCE_TYPE} | \
${SEDCMD} 's/[ ]\+|/|/g' | \
${SEDCMD} 's/!!!/\n/g' | \
${COLUMNCMD} -s"|" -t;
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
elif [[ ${CHECK_RESOURCE} != 'h' ]]
then
V_CRSP=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|SERVER_POOLS=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/| $//g' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | ${SEDCMD} 's/$/!!!/g' | \
${GREPCMD} "${CHECK_RESOURCE}"`;
V_CRSV=`${GRID_HOME}/bin/crsctl status resource -v | \
${GREPCMD} "^NAME=|^TYPE=|^LAST_RESTART=|^STATE=|^TARGET=|^INTERNAL_STATE=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/$/!!!|/g' | \
${GREPCMD} "${CHECK_RESOURCE}"`;
# Database RESOURCES
for resource in `${ECHOCMD} ${V_CRSP}`
do
V_NAME=`${ECHOCMD} ${resource} | ${AWKCMD} -F \| '{print $2}'`;
V_TYPE=`${ECHOCMD} ${resource} | ${AWKCMD} -F \| '{print $3}'`;
V_VERSION=`${ECHOCMD} ${resource} | ${AWKCMD} -F\| '{print $NF}' | ${SEDCMD} 's/!!!//g'`;
V_RESOURCE=`${ECHOCMD} ${resource} | ${SEDCMD} 's/|'${V_NAME}'//g' | ${SEDCMD} 's/|'${V_TYPE}'//g' | ${SEDCMD} 's/'${V_VERSION}'//g'`;
V_ORIGINAL=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!|/\n/g' | ${GREPCMD} ${V_NAME}`;
V_REPLACE=`${ECHOCMD} ${V_ORIGINAL}`;
if [[ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "asm|database" | ${WCCMD} -l` -gt 0 ]]
then
for v_host_inst in `${ECHOCMD} ${V_RESOURCE} | ${SEDCMD} 's/|/ /g' | ${SEDCMD} 's/!!!//g'`
do
HOST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${SEDCMD} "s/(//g;s/)//g" | ${AWKCMD} '{print $1}'`;
INST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${AWKCMD} '{print $2}'`;
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} -e 's/'${HOST_NAME}'/'${HOST_NAME}' \('${INST_NAME}'\)/g'`;
done;
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`;
elif [[ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "dbfs" | ${WCCMD} -l` -gt 0 ]]
then
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|NA|/3"`;
else
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`;
fi;
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} "s#${V_ORIGINAL}#${V_REPLACE}#g"`;
done;
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!/\n/g'`;
V_CRSP_COL_NAME='|NAME|TYPE|VERSION|STATE|TARGET|LAST_RESTART|INTERNAL_STATE|!!!';
V_CRSP_COL_LINE='|----|----|-------|-----|------|------------|--------------|!!!';
${PRINTFCMD} "\e[${HEADER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
V_CRSV=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} ${V_CRSV}"`;
${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/|--/\n|--/1' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/|STATE/| | | |\n| | | |STATE/2g' | \
${SEDCMD} -e "s/NAME=//g;s/TYPE=//g;s/TARGET=//g;s/LAST_RESTART=//g;s/INTERNAL_STATE=//g;s/STATE=//g;s/VERSION=//g" | \
${SEDCMD} 's/!!!//g' | ${COLUMNCMD} -s"|" -t | \
${SEDCMD} ''/OFFLINE/s//`${PRINTFCMD} "\e[${ALRT_COLR}OFFLINE\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/INTERMEDIATE/s//`${PRINTFCMD} "\e[${ALRT_COLR}INTERMEDIATE\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/UNKNOWN/s//`${PRINTFCMD} "\e[${ALRT_COLR}UNKNOWN\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/\(/s//`${PRINTFCMD} "\e[${DB_INST_COLR}\("`/g'' | \
${SEDCMD} ''/\)/s//`${PRINTFCMD} "\)\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} -e 's/ \+$/ /g';
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${PRINTFCMD} "-----------------------------------";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}SERVICE STATUS \e[${HEADER_COLR} --- \e[${ALRT_COLR} CHECK ALERTS\e[${TRAILER_COLR} ";
${PRINTFCMD} "-----------------------------------";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}\n";
service_chk;
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
fi;
}
# SERVICE STATUS
service_chk()
{
### V_SERVICE_CONFIG='';
V_SERVICE_CONFIG="";
### V_SERVICE_STATUS='';
V_SERVICE_STATUS="";
### V_SERVICES='';
V_SERVICES="";
V_DATABASE_RESOURCE=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^ORACLE_HOME" | ${GREPCMD} "\.db|^ORACLE_HOME=" | \
${GREPCMD} -v "\%" | ${SEDCMD} "s/^.*=//g;s/ora\.//g;s/\.db//g" | \
${SEDCMD} '$!N;s/\n/::/'`;
for db_data in `${ECHOCMD} ${V_DATABASE_RESOURCE}`
do
db_name=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F"::" '{ print $1}'`;
db_home=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F"::" '{ print $2}'`;
#${PRINTFCMD} "Database = ${db_name} \n";
#${PRINTFCMD} "Database Home = ${db_home}\n";
V_SERVICE_CONFIG=`${GRID_HOME}/bin/srvctl config service -d ${db_name} | \
${GREPCMD} "Service name|Service is enabled|TAF policy specification|Preferred|Available|Pluggable database name" | \
${SEDCMD} -e :a -e '$!N; s/\n/|/; ta' | ${SEDCMD} 's/|Service name/\nService name/g' | ${SEDCMD} -e "s/|/|${db_name}|/1" | \
${SEDCMD} -e "s/Service name: //g;s/Service is //g;s/TAF policy specification: //g;s/Preferred instances: //g;s/Available instances: //g; s/Pluggable database name: //g"`;
for srv in `${ECHOCMD} ${V_SERVICE_CONFIG}`
do
V_SERVICE=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F"|" '{ print $1}'`;
#${PRINTFCMD} "V_SERVICE=${V_SERVICE} \n\n";
V_ACTIVE_ON=`${db_home}/bin/srvctl status service -d ${db_name} -s ${V_SERVICE} | \
${SEDCMD} -e "s/Service //g;s/ is running on instance(s) /|/g" | \
${AWKCMD} -F"|" '{print $2}'`;
V_ON_PREFFERED=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F"|" '{print $(NF-2)}'`;
V_ON_AVAILABLE=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F"|" '{print $(NF)}'`;
srv="${srv}|${V_ON_AVAILABLE}";
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/|$/|Not-Started|/g'`;
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/||/|Not-Setup|/g'`;
srv=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F'|' '$5 ~ /Not-Setup/ { OFS= "|"; $5 = "NA"; }1'`;
if [[ `${PRINTFCMD} "${srv}" | ${AWKCMD} -F '|' '{print NF-1}'` -eq 6 ]]
then
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} -e "s/|/|NA|/4"`;
fi;
if [[ ${V_ON_PREFFERED} != ${V_ON_AVAILABLE} && "x\${V_ON_AVAILABLE}" != "x" ]]
then
srv=`${ECHOCMD} ${srv} | ${SEDCMD} 's/'${V_ON_AVAILABLE}'/BBB'${V_ON_AVAILABLE}'EEE/2'`;
fi;
V_SERVICES="${V_SERVICES}|||${srv}::";
done;
done;
V_CRSP_COL_NAME='|SERVICE_NAME|DATABASE|STATE|TAF_POLICY|PDB|PREFFERED_INSTANCE|AVAILABLE_INSTANCE|ACTIVE_ON|::';
V_CRSP_COL_LINE='|------------|--------|-----|----------|---|------------------|------------------|---------|::';
V_SRV_ALRT=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} \n${V_CRSP_COL_NAME} \n${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} \n${V_SERVICES}"`;
${ECHOCMD} "${V_SRV_ALRT}" | \
${SEDCMD} 's/::/\n/g' | \
${SEDCMD} '/^$/d' | \
${COLUMNCMD} -s"|" -t | \
${SEDCMD} ''/BBB/s//`${PRINTFCMD} "\e[${ALRT_COLR}"`/g'' | \
${SEDCMD} ''/EEE/s//`${PRINTFCMD} "\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/Not-Started/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Started\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/Not-Setup/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Setup\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/NONE/s//`${PRINTFCMD} "\e[${ALRT_COLR}NONE\e[${TAB_TEXT_COLR}"`/g'';
}
# *********** CODE CALL ***********
CHECK_RESOURCE=$1;
binary_setup;
crsstat ${CHECK_RESOURCE};
}
#
######################################################################################################### 
# VERIFY ALL GRID INFRASTRUTURE SERVICES HP-UX
######################################################################################################### 
#
function func_os_hpux_068()
{
hash ccrsctl &> /dev/null
ccrsctl=`which crsctl`
# ********* ENV VARIABLES *********
# MODIFY AS NEEDED ................
# *********************************
AWKCMD=`which awk`;
GREPCMD=`which grep`;
EGREPCMD=`which egrep`;
SEDCMD=`which sed`;
CATCMD=`which cat`;
WCCMD=`which wc`;
TRCMD=`which tr`;
SORTCMD=`which sort`;
ECHOCMD=`which echo`;
PRINTFCMD=`which printf`;
COLUMNCMD=`which column`;
# ********* ENV VARIABLES *********
# Do NOT MODIFY....................
TODAY=`date +%d.%m.%Y`;
ORACLE_USER=`ls -alr ${GRID_HOME}/bin/sqlplus | ${AWKCMD} '{print $3}'`;
PATH_SET=${PATH}:${GRID_HOME}/bin;
# *********** COLOR CONTRAST ***********
# Change DISPLAY COLOR CODE for LOOK and FEEL..
# Keep the Format the same as "nnnm"...........
# NOTE: COLOR CODE's are available online SEARCH for "SHELL COLOR CODES"...
# KEEP COLOR options to FOREGROUND TEXT onl
HEADER_COLR='34m';
TRAILER_COLR='34m';
TAB_HEAD_COLR='33m';
TAB_TEXT_COLR='92m';
ALRT_COLR='31m';
DB_INST_COLR='34m';
SHELL_PROMPT_COLR='37m';
# *********** CODE BODY ******************************************************************
binary_setup()
{
  CRS_VERSION=`${GRID_HOME}/OPatch/opatch lsinventory | ${GREPCMD} "Oracle Database" | tail -1 | ${AWKCMD} '{print $(NF-0)}'`;
}
crsstat()
{
CHECK_RESOURCE=$1;
if [[ -z ${CHECK_RESOURCE} ]]
then
  CHECK_RESOURCE='';
else
  CHECK_RESOURCE=$1;
fi;
if [[ ${CHECK_RESOURCE} = 'h' ]]
then
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n";
${CATCMD} $0 | ${GREPCMD} "HELP:" | ${GREPCMD} -v "GREPCMD" | ${SEDCMD} 's/^.*crsstat/crsstat/g';
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
fi;
if [[ ${CHECK_RESOURCE} = 'res' ]]
then
V_RESOURCE_TYPE=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|DESCRIPTION=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/| $//g' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | \
${SEDCMD} "s/TYPE=//g;s/DESCRIPTION=//g" | ${SEDCMD} 's/|!!!|/|NA|/g' | ${SEDCMD} 's/$/!!!/g' | \
${AWKCMD} -F\| '{print "|"$3"|"$4"|!!!"}' | ${SEDCMD} 's/|!!!|/|NO DESCRIPTION|/g' | ${SEDCMD} 's/\"//g' | \
${SORTCMD} -u`;
V_CRSP_COL_NAME='|RESOURCE_TYPE|DESCRIPTION|!!!';
V_CRSP_COL_LINE='|-------------|-----------|!!!';
${PRINTFCMD} "\e[${HEADER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} " CRSSTAT RESOURCE LIST ";
${PRINTFCMD} "\e[${HEADER_COLR}";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "..::COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
V_RESOURCE_TYPE=`${ECHOCMD} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} ${V_RESOURCE_TYPE}`;
${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n";
${ECHOCMD} ${V_RESOURCE_TYPE} | \
${SEDCMD} 's/[ ]\+|/|/g' | \
${SEDCMD} 's/!!!/\n/g' | \
${COLUMNCMD} -s"|" -t;
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
elif [[ ${CHECK_RESOURCE} != 'h' ]]
then
V_CRSP=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|SERVER_POOLS=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/| $//g' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | ${SEDCMD} 's/$/!!!/g' | \
${GREPCMD} "${CHECK_RESOURCE}"`;
V_CRSV=`${GRID_HOME}/bin/crsctl status resource -v | \
${GREPCMD} "^NAME=|^TYPE=|^LAST_RESTART=|^STATE=|^TARGET=|^INTERNAL_STATE=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/$/!!!|/g' | \
${GREPCMD} "${CHECK_RESOURCE}"`;
# Database RESOURCES
for resource in `${ECHOCMD} ${V_CRSP}`
do
V_NAME=`${ECHOCMD} ${resource} | ${AWKCMD} -F \| '{print $2}'`;
V_TYPE=`${ECHOCMD} ${resource} | ${AWKCMD} -F \| '{print $3}'`;
V_VERSION=`${ECHOCMD} ${resource} | ${AWKCMD} -F\| '{print $NF}' | ${SEDCMD} 's/!!!//g'`;
V_RESOURCE=`${ECHOCMD} ${resource} | ${SEDCMD} 's/|'${V_NAME}'//g' | ${SEDCMD} 's/|'${V_TYPE}'//g' | ${SEDCMD} 's/'${V_VERSION}'//g'`;
V_ORIGINAL=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!|/\n/g' | ${GREPCMD} ${V_NAME}`;
V_REPLACE=`${ECHOCMD} ${V_ORIGINAL}`;
if [[ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "asm|database" | ${WCCMD} -l` -gt 0 ]]
then
for v_host_inst in `${ECHOCMD} ${V_RESOURCE} | ${SEDCMD} 's/|/ /g' | ${SEDCMD} 's/!!!//g'`
do
HOST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${SEDCMD} "s/(//g;s/)//g" | ${AWKCMD} '{print $1}'`;
INST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${AWKCMD} '{print $2}'`;
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} -e 's/'${HOST_NAME}'/'${HOST_NAME}' \('${INST_NAME}'\)/g'`;
done;
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`;
elif [[ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "dbfs" | ${WCCMD} -l` -gt 0 ]]
then
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|NA|/3"`;
else
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`;
fi;
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} "s#${V_ORIGINAL}#${V_REPLACE}#g"`;
done;
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!/\n/g'`;
V_CRSP_COL_NAME='|NAME|TYPE|VERSION|STATE|TARGET|LAST_RESTART|INTERNAL_STATE|!!!';
V_CRSP_COL_LINE='|----|----|-------|-----|------|------------|--------------|!!!';
${PRINTFCMD} "\e[${HEADER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
V_CRSV=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} ${V_CRSV}"`;
${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/|--/\n|--/1' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/|STATE/| | | |\n| | | |STATE/2g' | \
${SEDCMD} -e "s/NAME=//g;s/TYPE=//g;s/TARGET=//g;s/LAST_RESTART=//g;s/INTERNAL_STATE=//g;s/STATE=//g;s/VERSION=//g" | \
${SEDCMD} 's/!!!//g' | ${COLUMNCMD} -s"|" -t | \
${SEDCMD} ''/OFFLINE/s//`${PRINTFCMD} "\e[${ALRT_COLR}OFFLINE\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/INTERMEDIATE/s//`${PRINTFCMD} "\e[${ALRT_COLR}INTERMEDIATE\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/UNKNOWN/s//`${PRINTFCMD} "\e[${ALRT_COLR}UNKNOWN\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/\(/s//`${PRINTFCMD} "\e[${DB_INST_COLR}\("`/g'' | \
${SEDCMD} ''/\)/s//`${PRINTFCMD} "\)\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} -e 's/ \+$/ /g';
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${PRINTFCMD} "-----------------------------------";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}SERVICE STATUS \e[${HEADER_COLR} --- \e[${ALRT_COLR} CHECK ALERTS\e[${TRAILER_COLR} ";
${PRINTFCMD} "-----------------------------------";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}\n";
service_chk;
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
fi;
}
# SERVICE STATUS
service_chk()
{
### V_SERVICE_CONFIG='';
V_SERVICE_CONFIG="";
### V_SERVICE_STATUS='';
V_SERVICE_STATUS="";
### V_SERVICES='';
V_SERVICES="";
V_DATABASE_RESOURCE=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^ORACLE_HOME" | ${GREPCMD} "\.db|^ORACLE_HOME=" | \
${GREPCMD} -v "\%" | ${SEDCMD} "s/^.*=//g;s/ora\.//g;s/\.db//g" | \
${SEDCMD} '$!N;s/\n/::/'`;
for db_data in `${ECHOCMD} ${V_DATABASE_RESOURCE}`
do
db_name=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F"::" '{ print $1}'`;
db_home=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F"::" '{ print $2}'`;
#${PRINTFCMD} "Database = ${db_name} \n";
#${PRINTFCMD} "Database Home = ${db_home}\n";
V_SERVICE_CONFIG=`${GRID_HOME}/bin/srvctl config service -d ${db_name} | \
${GREPCMD} "Service name|Service is enabled|TAF policy specification|Preferred|Available|Pluggable database name" | \
${SEDCMD} -e :a -e '$!N; s/\n/|/; ta' | ${SEDCMD} 's/|Service name/\nService name/g' | ${SEDCMD} -e "s/|/|${db_name}|/1" | \
${SEDCMD} -e "s/Service name: //g;s/Service is //g;s/TAF policy specification: //g;s/Preferred instances: //g;s/Available instances: //g; s/Pluggable database name: //g"`;
for srv in `${ECHOCMD} ${V_SERVICE_CONFIG}`
do
V_SERVICE=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F"|" '{ print $1}'`;
#${PRINTFCMD} "V_SERVICE=${V_SERVICE} \n\n";
V_ACTIVE_ON=`${db_home}/bin/srvctl status service -d ${db_name} -s ${V_SERVICE} | \
${SEDCMD} -e "s/Service //g;s/ is running on instance(s) /|/g" | \
${AWKCMD} -F"|" '{print $2}'`;
V_ON_PREFFERED=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F"|" '{print $(NF-2)}'`;
V_ON_AVAILABLE=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F"|" '{print $(NF)}'`;
srv="${srv}|${V_ON_AVAILABLE}";
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/|$/|Not-Started|/g'`;
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/||/|Not-Setup|/g'`;
srv=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F'|' '$5 ~ /Not-Setup/ { OFS= "|"; $5 = "NA"; }1'`;
if [[ `${PRINTFCMD} "${srv}" | ${AWKCMD} -F '|' '{print NF-1}'` -eq 6 ]]
then
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} -e "s/|/|NA|/4"`;
fi;
if [[ ${V_ON_PREFFERED} != ${V_ON_AVAILABLE} && "x\${V_ON_AVAILABLE}" != "x" ]]
then
srv=`${ECHOCMD} ${srv} | ${SEDCMD} 's/'${V_ON_AVAILABLE}'/BBB'${V_ON_AVAILABLE}'EEE/2'`;
fi;
V_SERVICES="${V_SERVICES}|||${srv}::";
done;
done;
V_CRSP_COL_NAME='|SERVICE_NAME|DATABASE|STATE|TAF_POLICY|PDB|PREFFERED_INSTANCE|AVAILABLE_INSTANCE|ACTIVE_ON|::';
V_CRSP_COL_LINE='|------------|--------|-----|----------|---|------------------|------------------|---------|::';
V_SRV_ALRT=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} \n${V_CRSP_COL_NAME} \n${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} \n${V_SERVICES}"`;
${ECHOCMD} "${V_SRV_ALRT}" | \
${SEDCMD} 's/::/\n/g' | \
${SEDCMD} '/^$/d' | \
${COLUMNCMD} -s"|" -t | \
${SEDCMD} ''/BBB/s//`${PRINTFCMD} "\e[${ALRT_COLR}"`/g'' | \
${SEDCMD} ''/EEE/s//`${PRINTFCMD} "\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/Not-Started/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Started\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/Not-Setup/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Setup\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/NONE/s//`${PRINTFCMD} "\e[${ALRT_COLR}NONE\e[${TAB_TEXT_COLR}"`/g'';
}
# *********** CODE CALL ***********
CHECK_RESOURCE=$1;
binary_setup;
crsstat ${CHECK_RESOURCE};
}
#
######################################################################################################### 
# VERIFY ALL GRID INFRASTRUTURE SERVICES LINUX
######################################################################################################### 
#
function func_os_linx_068()
{
hash ccrsctl &> /dev/null
crsctl=`which crsctl`
# ********* ENV VARIABLES *********
# MODIFY AS NEEDED ................
# *********************************
AWKCMD=`which awk`;
GREPCMD=`which grep`;
EGREPCMD=`which egrep`;
SEDCMD=`which sed`;
CATCMD=`which cat`;
WCCMD=`which wc`;
TRCMD=`which tr`;
SORTCMD=`which sort`;
ECHOCMD=`which echo`;
PRINTFCMD=`which printf`;
COLUMNCMD=`which column`;
# ********* ENV VARIABLES *********
# Do NOT MODIFY....................
TODAY=`date +%d.%m.%Y`;
ORACLE_USER=`ls -alr ${GRID_HOME}/bin/sqlplus | ${AWKCMD} '{print $3}'`;
PATH_SET=${PATH}:${GRID_HOME}/bin;
# *********** COLOR CONTRAST ***********
# Change DISPLAY COLOR CODE for LOOK and FEEL..
# Keep the Format the same as "nnnm"...........
# NOTE: COLOR CODE's are available online SEARCH for "SHELL COLOR CODES"...
# KEEP COLOR options to FOREGROUND TEXT onl
HEADER_COLR='34m';
TRAILER_COLR='34m';
TAB_HEAD_COLR='33m';
TAB_TEXT_COLR='92m';
ALRT_COLR='31m';
DB_INST_COLR='34m';
SHELL_PROMPT_COLR='37m';
# *********** CODE BODY ******************************************************************
binary_setup()
{
  CRS_VERSION=`${GRID_HOME}/OPatch/opatch lsinventory | ${GREPCMD} "Oracle Database" | tail -1 | ${AWKCMD} '{print $(NF-0)}'`;
}
crsstat()
{
CHECK_RESOURCE=$1;
if [[ -z ${CHECK_RESOURCE} ]]
then
  CHECK_RESOURCE='';
else
  CHECK_RESOURCE=$1;
fi;
if [[ ${CHECK_RESOURCE} = 'h' ]]
then
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n";
${CATCMD} $0 | ${GREPCMD} "HELP:" | ${GREPCMD} -v "GREPCMD" | ${SEDCMD} 's/^.*crsstat/crsstat/g';
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
fi;
if [[ ${CHECK_RESOURCE} = 'res' ]]
then
V_RESOURCE_TYPE=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|DESCRIPTION=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/| $//g' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | \
${SEDCMD} "s/TYPE=//g;s/DESCRIPTION=//g" | ${SEDCMD} 's/|!!!|/|NA|/g' | ${SEDCMD} 's/$/!!!/g' | \
${AWKCMD} -F\| '{print "|"$3"|"$4"|!!!"}' | ${SEDCMD} 's/|!!!|/|NO DESCRIPTION|/g' | ${SEDCMD} 's/\"//g' | \
${SORTCMD} -u`;
V_CRSP_COL_NAME='|RESOURCE_TYPE|DESCRIPTION|!!!';
V_CRSP_COL_LINE='|-------------|-----------|!!!';
${PRINTFCMD} "\e[${HEADER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} " CRSSTAT RESOURCE LIST ";
${PRINTFCMD} "\e[${HEADER_COLR}";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "..::COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
V_RESOURCE_TYPE=`${ECHOCMD} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} ${V_RESOURCE_TYPE}`;
${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n";
${ECHOCMD} ${V_RESOURCE_TYPE} | \
${SEDCMD} 's/[ ]\+|/|/g' | \
${SEDCMD} 's/!!!/\n/g' | \
${COLUMNCMD} -s"|" -t;
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
elif [[ ${CHECK_RESOURCE} != 'h' ]]
then
V_CRSP=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION=|^SERVICE_NAME=|SERVER_POOLS=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/| $//g' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | ${SEDCMD} 's/$/!!!/g' | \
${GREPCMD} "${CHECK_RESOURCE}"`;
V_CRSV=`${GRID_HOME}/bin/crsctl status resource -v | \
${GREPCMD} "^NAME=|^TYPE=|^LAST_RESTART=|^STATE=|^TARGET=|^INTERNAL_STATE=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | \
${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | \
${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/$/!!!|/g' | \
${GREPCMD} "${CHECK_RESOURCE}"`;
# Database RESOURCES
for resource in `${ECHOCMD} ${V_CRSP}`
do
V_NAME=`${ECHOCMD} ${resource} | ${AWKCMD} -F \| '{print $2}'`;
V_TYPE=`${ECHOCMD} ${resource} | ${AWKCMD} -F \| '{print $3}'`;
V_VERSION=`${ECHOCMD} ${resource} | ${AWKCMD} -F\| '{print $NF}' | ${SEDCMD} 's/!!!//g'`;
V_RESOURCE=`${ECHOCMD} ${resource} | ${SEDCMD} 's/|'${V_NAME}'//g' | ${SEDCMD} 's/|'${V_TYPE}'//g' | ${SEDCMD} 's/'${V_VERSION}'//g'`;
V_ORIGINAL=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!|/\n/g' | ${GREPCMD} ${V_NAME}`;
V_REPLACE=`${ECHOCMD} ${V_ORIGINAL}`;
if [[ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "asm|database" | ${WCCMD} -l` -gt 0 ]]
then
for v_host_inst in `${ECHOCMD} ${V_RESOURCE} | ${SEDCMD} 's/|/ /g' | ${SEDCMD} 's/!!!//g'`
do
HOST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${SEDCMD} "s/(//g;s/)//g" | ${AWKCMD} '{print $1}'`;
INST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${AWKCMD} '{print $2}'`;
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} -e 's/'${HOST_NAME}'/'${HOST_NAME}' \('${INST_NAME}'\)/g'`;
done;
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`;
elif [[ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "dbfs" | ${WCCMD} -l` -gt 0 ]]
then
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|NA|/3"`;
else
V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`;
fi;
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} "s#${V_ORIGINAL}#${V_REPLACE}#g"`;
done;
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!/\n/g'`;
V_CRSP_COL_NAME='|NAME|TYPE|VERSION|STATE|TARGET|LAST_RESTART|INTERNAL_STATE|!!!';
V_CRSP_COL_LINE='|----|----|-------|-----|------|------------|--------------|!!!';
${PRINTFCMD} "\e[${HEADER_COLR}\n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
${PRINTFCMD} "\e[${TAB_HEAD_COLR}";
${PRINTFCMD} "COLOR CODES:";
${PRINTFCMD} "\e[${HEADER_COLR}";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} ";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} ";
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} ";
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n";
${ECHOCMD} "--------------------------------------------------------------------------------------------------";
V_CRSV=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} ${V_CRSV}"`;
${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/|--/\n|--/1' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/|STATE/| | | |\n| | | |STATE/2g' | \
${SEDCMD} -e "s/NAME=//g;s/TYPE=//g;s/TARGET=//g;s/LAST_RESTART=//g;s/INTERNAL_STATE=//g;s/STATE=//g;s/VERSION=//g" | \
${SEDCMD} 's/!!!//g' | ${COLUMNCMD} -s"|" -t | \
${SEDCMD} ''/OFFLINE/s//`${PRINTFCMD} "\e[${ALRT_COLR}OFFLINE\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/INTERMEDIATE/s//`${PRINTFCMD} "\e[${ALRT_COLR}INTERMEDIATE\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/UNKNOWN/s//`${PRINTFCMD} "\e[${ALRT_COLR}UNKNOWN\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/\(/s//`${PRINTFCMD} "\e[${DB_INST_COLR}\("`/g'' | \
${SEDCMD} ''/\)/s//`${PRINTFCMD} "\)\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} -e 's/ \+$/ /g';
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${PRINTFCMD} "-----------------------------------";
${PRINTFCMD} " \e[${TAB_HEAD_COLR}SERVICE STATUS \e[${HEADER_COLR} --- \e[${ALRT_COLR} CHECK ALERTS\e[${TRAILER_COLR} ";
${PRINTFCMD} "-----------------------------------";
${PRINTFCMD} " \e[${TAB_TEXT_COLR}\n";
service_chk;
${PRINTFCMD} "\e[${TRAILER_COLR}\n";
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}";
fi;
}
# SERVICE STATUS
service_chk()
{
### V_SERVICE_CONFIG='';
V_SERVICE_CONFIG="";
### V_SERVICE_STATUS='';
V_SERVICE_STATUS="";
### V_SERVICES='';
V_SERVICES="";
V_DATABASE_RESOURCE=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME|^ORACLE_HOME" | ${GREPCMD} "\.db|^ORACLE_HOME=" | \
${GREPCMD} -v "\%" | ${SEDCMD} "s/^.*=//g;s/ora\.//g;s/\.db//g" | \
${SEDCMD} '$!N;s/\n/::/'`;
for db_data in `${ECHOCMD} ${V_DATABASE_RESOURCE}`
do
db_name=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F"::" '{ print $1}'`;
db_home=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F"::" '{ print $2}'`;
#${PRINTFCMD} "Database = ${db_name} \n";
#${PRINTFCMD} "Database Home = ${db_home}\n";
V_SERVICE_CONFIG=`${GRID_HOME}/bin/srvctl config service -d ${db_name} | \
${GREPCMD} "Service name|Service is enabled|TAF policy specification|Preferred|Available|Pluggable database name" | \
${SEDCMD} -e :a -e '$!N; s/\n/|/; ta' | ${SEDCMD} 's/|Service name/\nService name/g' | ${SEDCMD} -e "s/|/|${db_name}|/1" | \
${SEDCMD} -e "s/Service name: //g;s/Service is //g;s/TAF policy specification: //g;s/Preferred instances: //g;s/Available instances: //g; s/Pluggable database name: //g"`;
for srv in `${ECHOCMD} ${V_SERVICE_CONFIG}`
do
V_SERVICE=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F"|" '{ print $1}'`;
#${PRINTFCMD} "V_SERVICE=${V_SERVICE} \n\n";
V_ACTIVE_ON=`${db_home}/bin/srvctl status service -d ${db_name} -s ${V_SERVICE} | \
${SEDCMD} -e "s/Service //g;s/ is running on instance(s) /|/g" | \
${AWKCMD} -F"|" '{print $2}'`;
V_ON_PREFFERED=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F"|" '{print $(NF-2)}'`;
V_ON_AVAILABLE=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F"|" '{print $(NF)}'`;
srv="${srv}|${V_ON_AVAILABLE}";
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/|$/|Not-Started|/g'`;
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/||/|Not-Setup|/g'`;
srv=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F'|' '$5 ~ /Not-Setup/ { OFS= "|"; $5 = "NA"; }1'`;
if [[ `${PRINTFCMD} "${srv}" | ${AWKCMD} -F '|' '{print NF-1}'` -eq 6 ]]
then
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} -e "s/|/|NA|/4"`;
fi;
if [[ ${V_ON_PREFFERED} != ${V_ON_AVAILABLE} && "x\${V_ON_AVAILABLE}" != "x" ]]
then
srv=`${ECHOCMD} ${srv} | ${SEDCMD} 's/'${V_ON_AVAILABLE}'/BBB'${V_ON_AVAILABLE}'EEE/2'`;
fi;
V_SERVICES="${V_SERVICES}|||${srv}::";
done;
done;
V_CRSP_COL_NAME='|SERVICE_NAME|DATABASE|STATE|TAF_POLICY|PDB|PREFFERED_INSTANCE|AVAILABLE_INSTANCE|ACTIVE_ON|::';
V_CRSP_COL_LINE='|------------|--------|-----|----------|---|------------------|------------------|---------|::';
V_SRV_ALRT=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} \n${V_CRSP_COL_NAME} \n${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} \n${V_SERVICES}"`;
${ECHOCMD} "${V_SRV_ALRT}" | \
${SEDCMD} 's/::/\n/g' | \
${SEDCMD} '/^$/d' | \
${COLUMNCMD} -s"|" -t | \
${SEDCMD} ''/BBB/s//`${PRINTFCMD} "\e[${ALRT_COLR}"`/g'' | \
${SEDCMD} ''/EEE/s//`${PRINTFCMD} "\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/Not-Started/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Started\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/Not-Setup/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Setup\e[${TAB_TEXT_COLR}"`/g'' | \
${SEDCMD} ''/NONE/s//`${PRINTFCMD} "\e[${ALRT_COLR}NONE\e[${TAB_TEXT_COLR}"`/g'';
}
# *********** CODE CALL ***********
CHECK_RESOURCE=$1;
binary_setup;
crsstat ${CHECK_RESOURCE};
}
#
######################################################################################################### 
# VERIFY ALL GRID INFRASTRUTURE SERVICES B
######################################################################################################### 
#
function func_os_068_b()
{
ccrsctl=`which crsctl | grep -v -i "alias"`
# ********* ENV VARIABLES ********* 
# MODIFY AS NEEDED ................ 
# ********************************* 
AWKCMD=`which awk | grep -v -i "alias" | awk '{ print $1 }'`; 
GREPCMD=`which grep | grep -v -i "alias" | awk '{ print $1 }'`;
EGREPCMD=`which egrep | grep -v -i "alias" | awk '{ print $1 }'`;
SEDCMD=`which sed | grep -v -i "alias" | awk '{ print $1 }'`; 
CATCMD=`which cat | grep -v -i "alias" | awk '{ print $1 }'`; 
WCCMD=`which wc | grep -v -i "alias" | awk '{ print $1 }'`; 
TRCMD=`which tr | grep -v -i "alias" | awk '{ print $1 }'`; 
SORTCMD=`which sort | grep -v -i "alias" | awk '{ print $1 }'`; 
ECHOCMD=`which echo | grep -v -i "alias" | awk '{ print $1 }'`; 
PRINTFCMD=`which printf | grep -v -i "alias" | awk '{ print $1 }'`; 
COLUMNCMD=`which column | grep -v -i "alias" | awk '{ print $1 }'`; 
# ********* ENV VARIABLES ********* 
# Do NOT MODIFY.................... 
TODAY=`date +%d.%m.%Y`; 
ORACLE_USER=`ls -alr ${GRID_HOME}/bin/sqlplus | ${AWKCMD} '{ print $3 }'`; 
PATH_SET=${PATH}:${GRID_HOME}/bin; 
# *********** COLOR CONTRAST *********** 
# Change DISPLAY COLOR CODE for LOOK and FEEL.. 
# Keep the Format the same as "nnnm"........... 
# NOTE: COLOR CODE's are available online SEARCH for "SHELL COLOR CODES"... 
# KEEP COLOR options to FOREGROUND TEXT onl 
HEADER_COLR='34m'; 
TRAILER_COLR='34m'; 
TAB_HEAD_COLR='33m'; 
TAB_TEXT_COLR='92m'; 
ALRT_COLR='31m'; 
DB_INST_COLR='34m'; 
SHELL_PROMPT_COLR='37m'; 
# *********** CODE BODY ****************************************************************** 
echo ">--------------------------------------------------------------------------------------------------"
binary_setup() 
{ 
  CRS_VERSION=`${GRID_HOME}/OPatch/opatch lsinventory | ${GREPCMD} "Oracle Database" | tail -1 | ${AWKCMD} '{print $(NF-0)}'`; 
} 
crsstat() 
{ 
CHECK_RESOURCE=$1; 
if [ -z "${CHECK_RESOURCE}" ] 
then 
  CHECK_RESOURCE=""; 
else 
  CHECK_RESOURCE=$1; 
fi; 
if [ "${CHECK_RESOURCE}" = "h" ] 
then 
  ${PRINTFCMD} "COLOR CODES: "; 
  ${PRINTFCMD} " \e[${HEADER_COLR}"; 
  ${PRINTFCMD} " \e[${TAB_HEAD_COLR}"; 
  ${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} "; 
  ${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} "; 
  ${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} "; 
  ${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n"; 
  ${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
  ${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n"; 
  ${CATCMD} $0 | ${GREPCMD} "HELP:" | ${GREPCMD} -v "GREPCMD" | ${SEDCMD} 's/^.*crsstat/crsstat/g'; 
  ${PRINTFCMD} "\e[${TRAILER_COLR}\n"; 
  ${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
  ${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}"; 
fi; 
if [ "${CHECK_RESOURCE}" = "res" ] 
then 
V_RESOURCE_TYPE=`${GRID_HOME}/bin/crsctl status resource -p | \
${GREPCMD} "^NAME\=|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION\=|^SERVICE_NAME\=|^DESCRIPTION\=" | \
${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | ${SEDCMD} 's/| $//g' | \
${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | ${SORTCMD} -t'|' -k3 | \
${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | ${SEDCMD} "s/TYPE=//g;s/DESCRIPTION=//g" | \
${SEDCMD} 's/|!!!|/|NA|/g' | ${SEDCMD} 's/$/!!!/g' | ${AWKCMD} -F\| '{print "|"$3"|"$4"|!!!"}' | ${SEDCMD} 's/|!!!|/|NO DESCRIPTION|/g' | \
${SEDCMD} 's/\"//g' | ${SORTCMD} -u`;
V_CRSP_COL_NAME="|RESOURCE_TYPE|DESCRIPTION|!!!"; 
V_CRSP_COL_LINE="|-------------|-----------|!!!"; 
${PRINTFCMD} "\e[${HEADER_COLR}\n"; 
${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
${PRINTFCMD} "\e[${TAB_HEAD_COLR}"; 
${PRINTFCMD} " CRSSTAT RESOURCE LIST "; 
${PRINTFCMD} "\e[${HEADER_COLR}"; 
${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
${PRINTFCMD} "\e[${TAB_HEAD_COLR}"; 
${PRINTFCMD} "..::COLOR CODES: "; 
${PRINTFCMD} "\e[${HEADER_COLR}"; 
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} "; 
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} "; 
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} "; 
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n"; 
${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
V_RESOURCE_TYPE=`${ECHOCMD} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} ${V_RESOURCE_TYPE}`; 
${PRINTFCMD} "\e[${TAB_TEXT_COLR}\n"; 
${ECHOCMD} ${V_RESOURCE_TYPE} | ${SEDCMD} 's/[ ]\+|/|/g' | ${SEDCMD} 's/!!!/\n/g' | ${COLUMNCMD} -s"|" -t; 
${PRINTFCMD} "\e[${TRAILER_COLR}\n"; 
${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}"; 
elif [ "${CHECK_RESOURCE}" != "h" ] 
then 
V_CRSP=`${GRID_HOME}/bin/crsctl status resource -p | \
  ${GREPCMD} "^NAME\=|^TYPE\=|^GEN_USR_ORA_INST_NAME@SERVERNAME|^VERSION\=|^SERVICE_NAME\=|SERVER_POOLS\=" | \
  ${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | ${SEDCMD} 's/| $//g' | \
  ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | ${SEDCMD} 's/.type//g' | ${SORTCMD} -t'|' -k3 | \
  ${SEDCMD} '/^$/d' | ${SEDCMD} 's/GEN_USR_ORA_INST_NAME\@SERVERNAME//g' | ${SEDCMD} 's/$/!!!/g' | ${GREPCMD} "${CHECK_RESOURCE}"`; 
V_CRSV=`${GRID_HOME}/bin/crsctl status resource -v | ${GREPCMD} "^NAME\=|^TYPE\=|^LAST_RESTART\=|^STATE\=|^TARGET\=|^INTERNAL_STATE\=" | \
  ${SEDCMD} 's/^/|/g' | ${SEDCMD} 's/$/|/g' | ${TRCMD} "\n" " " | ${SEDCMD} 's/| |/|/g' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/TYPE=ora./TYPE=/g' | \
  ${SEDCMD} 's/.type//g' | ${SORTCMD} -t'|' -k3 | ${SEDCMD} '/^$/d' | ${SEDCMD} 's/$/!!!|/g' | ${GREPCMD} "${CHECK_RESOURCE}"`; 
# Database RESOURCES 
for resource in `${ECHOCMD} ${V_CRSP}` 
do 
  V_NAME=`${ECHOCMD} ${resource} | ${AWKCMD} -F\| '{ print $2 }'`; 
  V_TYPE=`${ECHOCMD} ${resource} | ${AWKCMD} -F\| '{ print $3 }'`; 
  V_VERSION=`${ECHOCMD} ${resource} | ${AWKCMD} -F\| '{ print $NF }' | ${SEDCMD} 's/!!!//g'`; 
  V_RESOURCE=`${ECHOCMD} ${resource} | ${SEDCMD} 's/|'${V_NAME}'//g' | ${SEDCMD} 's/|'${V_TYPE}'//g' | ${SEDCMD} 's/'${V_VERSION}'//g'`; 
  V_ORIGINAL=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!|/\n/g' | ${GREPCMD} ${V_NAME}`; 
  V_REPLACE=`${ECHOCMD} ${V_ORIGINAL}`; 
  if [ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "asm|database" | ${WCCMD} -l` -gt 0 ] 
  then 
    for v_host_inst in `${ECHOCMD} ${V_RESOURCE} | ${SEDCMD} 's/|/ /g' | ${SEDCMD} 's/!!!//g'` 
    do 
      HOST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${SEDCMD} "s/(//g;s/)//g" | ${AWKCMD} '{ print $1 }'`; 
      INST_NAME=`${ECHOCMD} ${v_host_inst} | ${SEDCMD} 's/=/ /g' | ${AWKCMD} '{ print $2 }'`; 
      V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} -e 's/'${HOST_NAME}'/'${HOST_NAME}' \('${INST_NAME}'\)/g'`; 
    done; 
    V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`; 
  elif [ `${ECHOCMD} ${V_REPLACE} | ${GREPCMD} "dbfs" | ${WCCMD} -l` -gt 0 ] 
  then 
    V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|NA|/3"`; 
  else 
    V_REPLACE=`${ECHOCMD} ${V_REPLACE} | ${SEDCMD} "s/|/|${V_VERSION}|/3"`; 
  fi; 
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} "s#${V_ORIGINAL}#${V_REPLACE}#g"`; 
done; 
V_CRSV=`${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/!!!/\n/g'`; 
V_CRSP_COL_NAME="|NAME|TYPE|VERSION|STATE|TARGET|LAST_RESTART|INTERNAL_STATE|!!!"; 
V_CRSP_COL_LINE="|----|----|-------|-----|------|------------|--------------|!!!"; 
${PRINTFCMD} "\e[${HEADER_COLR}\n"; 
${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
${PRINTFCMD} "\e[${TAB_HEAD_COLR}"; 
${PRINTFCMD} "COLOR CODES: "; 
${PRINTFCMD} "\e[${HEADER_COLR}"; 
${PRINTFCMD} " \e[${TAB_HEAD_COLR}HEADER\e[${HEADER_COLR} "; 
${PRINTFCMD} " \e[${TAB_TEXT_COLR}CONTENT\e[${TAB_TEXT_COLR} "; 
${PRINTFCMD} " \e[${ALRT_COLR}ALERT\e[${ALRT_COLR} "; 
${PRINTFCMD} " \e[${DB_INST_COLR}ORACLE_SID\e[${TRAILER_COLR} \n"; 
${ECHOCMD} "--------------------------------------------------------------------------------------------------"; 
V_CRSV=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} ${V_CRSP_COL_NAME} ${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} ${V_CRSV}"`; 
  ${ECHOCMD} ${V_CRSV} | ${SEDCMD} 's/|--/\n|--/1' | ${SEDCMD} 's/|NAME/\n|NAME/g' | ${SEDCMD} 's/|STATE/| | | |\n| | | |STATE/2g' | \
  ${SEDCMD} -e "s/NAME=//g;s/TYPE=//g;s/TARGET=//g;s/LAST_RESTART=//g;s/INTERNAL_STATE=//g;s/STATE=//g;s/VERSION=//g" | ${SEDCMD} 's/!!!//g' | \
  ${COLUMNCMD} -s"|" -t | ${SEDCMD} ''/OFFLINE/s//`${PRINTFCMD} "\e[${ALRT_COLR}OFFLINE\e[${TAB_TEXT_COLR}"`/g'' | \
  ${SEDCMD} ''/INTERMEDIATE/s//`${PRINTFCMD} "\e[${ALRT_COLR}INTERMEDIATE\e[${TAB_TEXT_COLR}"`/g'' | \
  ${SEDCMD} ''/UNKNOWN/s//`${PRINTFCMD} "\e[${ALRT_COLR}UNKNOWN\e[${TAB_TEXT_COLR}"`/g'' | \
  ${SEDCMD} ''/\(/s//`${PRINTFCMD} "\e[${DB_INST_COLR}\("`/g'' | ${SEDCMD} ''/\)/s//`${PRINTFCMD} "\)\e[${TAB_TEXT_COLR}"`/g'' | ${SEDCMD} -e 's/ \+$/ /g';
${PRINTFCMD} "\e[${TRAILER_COLR}\n"; 
${PRINTFCMD} "-----------------------------------"; 
${PRINTFCMD} " \e[${TAB_HEAD_COLR}SERVICE STATUS \e[${HEADER_COLR} --- \e[${ALRT_COLR} CHECK ALERTS\e[${TRAILER_COLR} "; 
${PRINTFCMD} "-----------------------------------"; 
${PRINTFCMD} " \e[${TAB_TEXT_COLR}\n"; 
service_chk; 
${PRINTFCMD} "\e[${TRAILER_COLR}\n"; 
${PRINTFCMD} "\e[${SHELL_PROMPT_COLR}"; 
fi; 
} 
# SERVICE STATUS 
service_chk() 
{ 
### V_SERVICE_CONFIG=''; 
V_SERVICE_CONFIG=""; 
### V_SERVICE_STATUS=''; 
V_SERVICE_STATUS=""; 
### V_SERVICES=''; 
V_SERVICES=""; 
V_DATABASE_RESOURCE=`${GRID_HOME}/bin/crsctl status resource -p | ${GREPCMD} "^NAME|^ORACLE_HOME" | \
  ${GREPCMD} "\.db|^ORACLE_HOME=" | ${GREPCMD} -v "\%" | ${SEDCMD} "s/^.*=//g;s/ora\.//g;s/\.db//g" | ${SEDCMD} '$!N;s/\n/::/'`; 
for db_data in `${ECHOCMD} ${V_DATABASE_RESOURCE}` 
do 
db_name=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F "::" '{ print $1 }'`; 
db_home=`${PRINTFCMD} "${db_data}" | ${AWKCMD} -F "::" '{ print $2 }'`; 
#${PRINTFCMD} "Database = ${db_name} \n"; 
#${PRINTFCMD} "Database Home = ${db_home}\n"; 
V_SERVICE_CONFIG=`${db_home}/bin/srvctl config service -d ${db_name} | \
  ${GREPCMD} "Service name|Service is enabled|TAF policy specification|Preferred|Available|Pluggable database name" | \
  ${SEDCMD} -e ":a" -e '$!N; s/\n/|/; ta' | ${SEDCMD} 's/|Service name/\nService name/g' | ${SEDCMD} -e "s/|/|${db_name}|/1" | \
  ${SEDCMD} -e "s/Service name: //g;s/Service is //g;s/TAF policy specification: //g;s/Preferred instances: //g;s/Available instances: //g; s/Pluggable database name: //g"`; 
for srv in `${ECHOCMD} ${V_SERVICE_CONFIG}` 
do 
V_SERVICE=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F "|" '{ print $1 }'`; 
#${PRINTFCMD} "V_SERVICE=${V_SERVICE} \n\n"; 
V_ACTIVE_ON=`${db_home}/bin/srvctl status service -d ${db_name} -s ${V_SERVICE} | ${SEDCMD} -e "s/Service //g;s/ is running on instance(s) /|/g" | ${AWKCMD} -F "|" '{ print $2 }'`; 
V_ON_PREFFERED=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F "|" '{ print $(NF-2) }'`; 
V_ON_AVAILABLE=`${PRINTFCMD} "${srv}|${V_ACTIVE_ON}" | ${AWKCMD} -F "|" '{ print $(NF) }'`; 
srv="${srv}|${V_ON_AVAILABLE}"; 
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/|$/|Not-Started|/g'`; 
srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} 's/||/|Not-Setup|/g'`; 
srv=`${PRINTFCMD} "${srv}" | ${AWKCMD} -F "|" '$5 ~ /Not-Setup/ { OFS= "|"; $5 = "NA"; }1'`; 
if [ `${PRINTFCMD} "${srv}" | ${AWKCMD} -F "|" '{ print NF-1 }'` -eq 6 ] 
then 
  srv=`${PRINTFCMD} "${srv}" | ${SEDCMD} -e "s/|/|NA|/4"`; 
fi; 
if [ "${V_ON_PREFFERED}" != "${V_ON_AVAILABLE}" ] && [ "x\${V_ON_AVAILABLE}" != "x" ] 
then 
  srv=`${ECHOCMD} ${srv} | ${SEDCMD} 's/'${V_ON_AVAILABLE}'/BBB'${V_ON_AVAILABLE}'EEE/2'`; 
fi; 
V_SERVICES="${V_SERVICES}|||${srv}::"; 
done; 
done; 
V_CRSP_COL_NAME="|SERVICE_NAME|DATABASE|STATE|TAF_POLICY|PDB|PREFFERED_INSTANCE|AVAILABLE_INSTANCE|ACTIVE_ON|::"; 
V_CRSP_COL_LINE="|------------|--------|-----|----------|---|------------------|------------------|---------|::"; 
V_SRV_ALRT=`${PRINTFCMD} "\e[${TAB_HEAD_COLR} \n${V_CRSP_COL_NAME} \n${V_CRSP_COL_LINE} \e[${TAB_TEXT_COLR} \n${V_SERVICES}"`; 
${ECHOCMD} "${V_SRV_ALRT}" | ${SEDCMD} 's/::/\n/g' | ${SEDCMD} '/^$/d' | ${COLUMNCMD} -s "|" -t | \
  ${SEDCMD} ''/BBB/s//`${PRINTFCMD} "\e[${ALRT_COLR}"`/g'' | ${SEDCMD} ''/EEE/s//`${PRINTFCMD} "\e[${TAB_TEXT_COLR}"`/g'' | \
  ${SEDCMD} ''/Not-Started/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Started\e[${TAB_TEXT_COLR}"`/g'' | \
  ${SEDCMD} ''/Not-Setup/s//`${PRINTFCMD} "\e[${ALRT_COLR}Not-Setup\e[${TAB_TEXT_COLR}"`/g'' | \
  ${SEDCMD} ''/NONE/s//`${PRINTFCMD} "\e[${ALRT_COLR}NONE\e[${TAB_TEXT_COLR}"`/g'';
}
# *********** CODE CALL *********** 
CHECK_RESOURCE=$1; 
binary_setup; 
crsstat ${CHECK_RESOURCE};  
}
#
######################################################################################################### 
# VERIFY ALL GRID INFRASTRUTURE SERVICES C
######################################################################################################### 
#
function func_os_068_c()
{
  func_exa_rac_status
}
# 
######################################################################################################### 
# VERIFY ALL GRID INFRASTRUTURE SERVICES 
######################################################################################################### 
#
function func_os_068()
{
if [ "${GRID_HOME}" = "" ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- THE GRID_HOME WAS NOT CONFIGURED YET OR YOU ARE NOT USING GRID INFRASTRUCTURE --"
  echo ">--------------------------------------------------------------------------------------------------"
else
  if [ `uname` = "SunOS" ]
  then
    echo ">--------------------------------------------------------------------------------------------------"
    echo "Solaris"
    echo ">--------------------------------------------------------------------------------------------------"
    func_os_sun_068
  elif [ `uname` = "AIX" ]
  then
    echo ">--------------------------------------------------------------------------------------------------"
    echo "AIX"
    echo ">--------------------------------------------------------------------------------------------------"
    func_os_aix_068
  elif [ `uname` = "HP-UX" ]
  then
    echo ">--------------------------------------------------------------------------------------------------"
    echo "HP-UX"
    echo ">--------------------------------------------------------------------------------------------------"
    func_os_hpux_068
  elif [ `uname` = "Linux" ]
  then
    echo ">--------------------------------------------------------------------------------------------------"
    echo "Linux"
    echo ">--------------------------------------------------------------------------------------------------"
    func_exa_rac_status
  else
    echo ">--------------------------------------------------------------------------------------------------"
    echo " -- This Operation System is Unknown --"
    echo ">--------------------------------------------------------------------------------------------------"
  fi
fi
}
#
#########################################################################################################
#
### OLD
#if [ -n $GRID_HOME ];
#then
#if [ "$GRID_HOME" != "" ];
#then
#$GRID_HOME/bin/crsctl status res |grep -v "^$"|awk -F "=" 'BEGIN {print " "} {printf("%s",NR%4 ? $2"|" : $2"\n")}'|sed -e 's/  *, /,/g' -e 's/, /,/g'| awk -F "|" 'BEGIN { printf "%-40s%-35s%-20s%-50s\n","Resource Name","Resource Type","Target ","State" }{ split ($3,trg,",") split ($4,st,",")} {for (i in trg) {printf "%-40s%-35s%-20s%-50s\n",$1,$2,trg[i],st[i]}}'
#elif [ "$GRID_HOME" = "" ];
#then
#CRSCTLL=`which crsctl`
#if [ "$CRSCTLL" != "" ];
#then
#$CRSCTLL status res |grep -v "^$"|awk -F "=" 'BEGIN {print " "} {printf("%s",NR%4 ? $2"|" : $2"\n")}'|sed -e 's/  *, /,/g' -e 's/, /,/g'| awk -F "|" 'BEGIN { printf "%-40s%-35s%-20s%-50s\n","Resource Name","Resource Type","Target ","State" }{ split ($3,trg,",") split ($4,st,",")} {for (i in trg) {printf "%-40s%-35s%-20s%-50s\n",$1,$2,trg[i],st[i]}}'
#else
#echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
#echo ${ECHO} " -- THE SYSTEM CAN NOT FIND THE ${RED} CRSCTL ${BLACK} COMMAND LINE, FIX THE VARIABLE ${RED} GRID_HOME ${BLACK} --"
#echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
#fi
#fi
#else
#echo ${ECHO} " -- ${RED} YOU ARE NOT USING GRID INFRASTRUCTURE ON YOUR ENVIRONMENT VARIABLES ${BLACK} --"
#fi
#
#########################################################################################################
# VERIFY SPACE OF FLASH RECOVERY AREA
#########################################################################################################
#
# 11g
function func_dba_11_069_a()
{
  echo ""
}
# 12c
function func_dba_12_069_a()
{
  echo ""
}
# 18c
function func_dba_18_069_a()
{
  echo ""
}
# 19c
function func_dba_19_069_a()
{
  echo ""
}
# 20c
function func_dba_20_069_a()
{
  echo ""
}
#
function func_dba_069_a()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col name for a75
col size_m for 999,999,999
col used_m for 999,999,999
col "% USED" for a30
prompt ##############################################################
prompt # FLASH RECOVERY AREA
prompt ##############################################################
select name
   , ceil(space_limit/1024/1024) SIZE_M
   , ceil(space_used/1024/1024) USED_M
   , case when ceil((space_used/space_limit)*100) < 80 then ceil((space_used/space_limit)*100) || '% - Status OK' when ceil((space_used/space_limit)*100) < 90 then ceil((space_used/space_limit)*100) || '% - Warning' else ceil((space_used/space_limit)*100) || '% - Critical' end as "% USED"
-- , decode(nvl(space_used, 2), 0, 0) as "#"
FROM v\$recovery_file_dest
ORDER BY name;
prompt
prompt ##############################################################
prompt # FLASH RECOVERY AREA DETAILS
prompt ##############################################################
col "Status Space" for a20
select FILE_TYPE
   , PERCENT_SPACE_USED
   , PERCENT_SPACE_RECLAIMABLE
   , NUMBER_OF_FILES
-- , CON_ID
   , case when PERCENT_SPACE_USED < 80 then 'Space OK' when PERCENT_SPACE_USED < 90 then 'Warning' else 'Critical' end as "Status Space"
FROM V\$RECOVERY_AREA_USAGE;
prompt
prompt ##############################################################
prompt # FLASH RECOVERY AREA USAGE AND %
prompt ##############################################################
SELECT ROUND((A.SPACE_LIMIT / 1024 / 1024 / 1024), 2) AS FLASH_IN_GB
  , ROUND((A.SPACE_USED / 1024 / 1024 / 1024), 2) AS FLASH_USED_IN_GB
  , ROUND((A.SPACE_RECLAIMABLE / 1024 / 1024 / 1024), 2) AS FLASH_RECLAIMABLE_GB
  , SUM(B.PERCENT_SPACE_USED)  AS PERCENT_OF_SPACE_USED
FROM V\$RECOVERY_FILE_DEST A, V\$FLASH_RECOVERY_AREA_USAGE B
GROUP BY SPACE_LIMIT, SPACE_USED, SPACE_RECLAIMABLE;
quit;
EOF
}
#
#########################################################################################################
# VERIFY SPACE OF FLASH RECOVERY AREA
#########################################################################################################
#
# 11g
function func_dba_11_069_b()
{
  echo ""
}
# 12c
function func_dba_12_069_b()
{
  echo ""
}
# 18c
function func_dba_18_069_b()
{
  echo ""
}
# 19c
function func_dba_19_069_b()
{
  echo ""
}
# 20c
function func_dba_20_069_b()
{
  echo ""
}
#
function func_dba_069_b()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col name for a75
col size_m for 999,999,999
col used_m for 999,999,999
col "% USED" for a30
select name
   , ceil(space_limit/1024/1024) SIZE_M
   , ceil(space_used/1024/1024) USED_M
   , case when ceil((space_used/space_limit)*100) < 80 then ceil((space_used/space_limit)*100) || '% - Status OK' when ceil((space_used/space_limit)*100) < 90 then ceil((space_used/space_limit)*100) || '% - Warning' else ceil((space_used/space_limit)*100) || '% - Critical' end as "% USED"
-- , decode(nvl(space_used, 2), 0, 0) as "#"
FROM v\$recovery_file_dest
ORDER BY name;
prompt
prompt ##############################################################
prompt # GENERAL OVERVIEW                                           #
prompt ##############################################################
col "Status Space" for a20
select FILE_TYPE
   , PERCENT_SPACE_USED
   , PERCENT_SPACE_RECLAIMABLE
   , NUMBER_OF_FILES
-- , CON_ID
   , case when PERCENT_SPACE_USED < 80 then 'Space OK' when PERCENT_SPACE_USED < 90 then 'Warning' else 'Critical' end as "Status Space"
FROM V\$RECOVERY_AREA_USAGE;
quit;
EOF
}
#
#########################################################################################################
# VERIFY PLUGGABLE DATABASES
#########################################################################################################
#
# 11g
function func_dba_11_070()
{
  echo ""
}
# 12c
function func_dba_12_070()
{
  echo ""
}
# 18c
function func_dba_18_070()
{
  echo ""
}
# 19c
function func_dba_19_070()
{
  echo ""
}
# 20c
function func_dba_20_070()
{
  echo ""
}
#
function func_dba_070()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
prompt ##############################################################
prompt # PLUGGABLE DATABASES                                        #
prompt ##############################################################
select CON_ID, NAME, OPEN_MODE, DBID, CON_UID, GUID FROM V\$CONTAINERS ORDER BY CON_ID;
Prompt
prompt ##############################################################
prompt # Verify Violations on PDBs Database                         #
prompt ##############################################################
col time for a20
col message for a150
select to_char(time, 'dd/mm/yyyy hh24:mi:ss') as time, message from pdb_plug_in_violations;
Prompt
prompt ##############################################################
prompt # Verify Snapshots on PDBs Database                          #
prompt ##############################################################
col pdb_name for a10
col snapshot_mode for a15
select p.con_id
  , p.pdb_name
  , p.snapshot_mode
  , p.snapshot_interval
FROM cdb_pdbs p
ORDER BY 1;
Prompt
prompt ##############################################################
prompt # Verify Properties of Snapshots on PDBs Database            #
prompt ##############################################################
col property_name for a20
col pdb_name for a10
col property_value for a15
col description for a50
select pr.con_id
  , p.pdb_name
  , pr.property_name
  , pr.property_value
  , pr.description 
FROM cdb_properties pr
JOIN cdb_pdbs p ON pr.con_id = p.con_id 
WHERE pr.property_name = 'MAX_PDB_SNAPSHOTS' 
ORDER BY pr.property_name;
Prompt
prompt ##############################################################
prompt # Verify Availabilitt of Snapshots on PDBs Database          #
prompt ##############################################################
col con_name for a10
col snapshot_name for a30
col snapshot_scn for 9999999
col full_snapshot_path for a50
select con_id
  , con_name
  , snapshot_name
  , snapshot_scn
  , full_snapshot_path 
FROM cdb_pdb_snapshots
ORDER BY con_id, snapshot_scn;
Prompt
prompt ##############################################################
prompt # Verify Snapshots JOBS on PDBs Database                     #
prompt ##############################################################
col owner for a10
col job_name for a30
col repeat_interval for a50
select owner
  , job_name
  , repeat_interval
FROM dba_scheduler_jobs
WHERE job_name LIKE '%SNAPSHOT'
ORDER BY owner, job_name;
prompt
prompt ##############################################################
prompt # Verify Snapshots Refresh on PDBs Database                  #
prompt ##############################################################
select status
  , refresh_mode
from dba_pdbs;
prompt
prompt ##############################################################
prompt # Verify The History of PDBs Database                        #
prompt ##############################################################
col db_name for a10 
col CLONED_FROM_PDB_NAME for a25 
col pdb_name for a18 
select DB_NAME
  , CON_ID
  , PDB_NAME
  , OPERATION
  , to_char(OP_TIMESTAMP, 'dd/mm/yyyy hh24:mi:ss') as time
  , CLONED_FROM_PDB_NAME
FROM CDB_PDB_HISTORY;
prompt
prompt ##############################################################
prompt # Check Undo Mode in Multitenant DB                          #
prompt ##############################################################
select * from database_properties where property_name = 'LOCAL_UNDO_ENABLED';
prompt
quit;
EOF
else
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- Your Database Version is not 12c, you don't have CDB and PDBs --"
  echo ">--------------------------------------------------------------------------------------------------"
fi
}
#
# Multitenant : PDB Snapshot Carousel in Oracle Database 18c
# ONLY FOR 18c
# alter system set "_exadata_feature_on"=true scope=spfile;
# ALTER SESSION SET CONTAINER = pdb2;
# ALTER PLUGGABLE DATABASE SNAPSHOT MODE EVERY 2999 MINUTES;
# ALTER PLUGGABLE DATABASE SNAPSHOT MODE EVERY 1999 HOURS;
# ALTER PLUGGABLE DATABASE SNAPSHOT MODE MANUAL;
# ALTER PLUGGABLE DATABASE SNAPSHOT MODE NONE;
# ALTER PLUGGABLE DATABASE SNAPSHOT MODE EVERY 24 HOURS;
# ALTER PLUGGABLE DATABASE SET MAX_PDB_SNAPSHOTS=0;
# ALTER PLUGGABLE DATABASE SET MAX_PDB_SNAPSHOTS=8;
# ALTER PLUGGABLE DATABASE SNAPSHOT;
# ALTER PLUGGABLE DATABASE SNAPSHOT my_snapshot;
# ALTER PLUGGABLE DATABASE DROP SNAPSHOT SNAP_688979926_996491289;
# ALTER PLUGGABLE DATABASE DROP SNAPSHOT my_snapshot;
# ALTER SYSTEM SET DB_CREATE_FILE_DEST = '/u02/oradata';
# CREATE PLUGGABLE DATABASE pdb2_copy FROM pdb2 USING SNAPSHOT SNAP_688979926_996491631 SNAPSHOT MODE EVERY 24 HOURS;
# ALTER PLUGGABLE DATABASE pdb2_copy OPEN;
#
# BEGIN
#  DBMS_SCHEDULER.set_attribute (
#    name      => 'PDB2_688979926_SNAPSHOT',
#    attribute => 'REPEAT_INTERVAL',
#    value     => 'FREQ=HOURLY; INTERVAL=24; BYMINUTE=15;');
# END;
# /
#
# ALTER PLUGGABLE DATABASE REFRESH MODE MANUAL FROM pdb5@clone_link SWITCHOVER;
# ALTER PLUGGABLE DATABASE OPEN READ ONLY;
# CREATE PLUGGABLE DATABASE pdb5_ro FROM pdb5@clone_link REFRESH MODE MANUAL;
# 
# ALTER PLUGGABLE DATABASE CLOSE IMMEDIATE;
# ALTER PLUGGABLE DATABASE REFRESH;
# ALTER PLUGGABLE DATABASE OPEN READ ONLY;
#
#########################################################################################################
# VERIFY CONTROLFILES
#########################################################################################################
#
# 11g
function func_dba_11_071()
{
  echo ""
}
# 12c
function func_dba_12_071()
{
  echo ""
}
# 18c
function func_dba_18_071()
{
  echo ""
}
# 19c
function func_dba_19_071()
{
  echo ""
}
# 20c
function func_dba_20_071()
{
  echo ""
}
#
function func_dba_071()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col name for a120
select name
  , status
  , IS_RECOVERY_DEST_FILE
  , BLOCK_SIZE/1024 as BLOCK_SIZE_MB
from v\$controlfile;
quit;
EOF
}
#
#########################################################################################################
# VERIFY DATAGUARD STATUS
#########################################################################################################
#
# 11g
function func_dba_11_072()
{
  echo ""
}
# 12c
function func_dba_12_072()
{
  echo ""
}
# 18c
function func_dba_18_072()
{
  echo ""
}
# 19c
function func_dba_19_072()
{
  echo ""
}
# 20c
function func_dba_20_072()
{
  echo ""
}
#
function func_dba_072()
{
if [ "${ISDGDB}" = "FALSE" ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- Your Database Doesn't Have Data Guard Configured --"
  echo ">--------------------------------------------------------------------------------------------------"
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
col FACILITY for a30
col SEVERITY for a15
col MESSAGE for a120
select to_char(TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') as TIMESTAMP
  , FACILITY
  , severity
  , MESSAGE
from v\$DATAGUARD_STATUS
order by TIMESTAMP;
quit;
EOF
echo ">--------------------------------------------------------------------------------------------------"
echo " -- DATAGUARD BROKEN SHOW CONFIGURATION --"
echo ">--------------------------------------------------------------------------------------------------"
dgmgrl / <<EOF
show configuration verbose;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY DATAGUARD PARAMETERS
#########################################################################################################
#
# 11g
function func_dba_11_073()
{
  echo ""
}
# 12c
function func_dba_12_073()
{
  echo ""
}
# 18c
function func_dba_18_073()
{
  echo ""
}
# 19c
function func_dba_19_073()
{
  echo ""
}
# 20c
function func_dba_20_073()
{
  echo ""
}
#
function func_dba_073()
{
if [ "${ISDGDB}" = "FALSE" ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- Your Database Doesn't Have Data Guard Configured --"
  echo ">--------------------------------------------------------------------------------------------------"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 feedback off trimspool on colsep '|'
col log_mode for a15
col force_logging for a15
col flashback_on for a20
prompt ##############################################################
prompt # Verify if Log Mode, Force Logging and Flashback is ON/ACTIVE
prompt ##############################################################
select log_mode
  , force_logging
  , flashback_on
from v\$database;
column name for a30
column display_value for a180
column ID format 99
column "SRLs" format 99
column active format 99
col type format a4
column ID format 99
column "SRLs" format 99
column active format 99
col type format a4
col PROTECTION_MODE for a20
col RECOVERY_MODE for a20
col db_mode for a15
prompt
prompt ##############################################################
prompt # Verify the Dataguard Parameters                            #
prompt ##############################################################
col display_value for a180
select name
  , display_value
FROM v\$parameter
WHERE name IN ('db_name','db_unique_name','undo_retention','archive_lag_target','log_archive_config','log_archive_format','log_archive_dest_1','log_archive_dest_2','log_archive_dest_state_2','flashback','fal_client','fal_server','standby_file_management','standby_archive_dest','db_file_name_convert','log_file_name_convert','remote_login_passwordfile','local_listener','dg_broker_start','dg_broker_config_file1','dg_broker_config_file2','log_archive_max_processes')
order by name;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 500 lines 500 feedback off trimspool on colsep '|'
col LOG_MODE for a15
col force_logging for a15
col FLASHBACK_ON for a20
prompt ##############################################################
prompt # Verify if Log Mode, Force Logging and Flashback is ON/ACTIVE
prompt ##############################################################
select log_mode
  , force_logging
  , flashback_on
from v\$database;
prompt
prompt ##############################################################
prompt # Verify the SYNC Inforamtions                               #
prompt ##############################################################
set pages 300 lines 300 timing on
col DB_MODE for a20
col TYPE for a8
col STATUS for a15
col recovery_mode for a25
col PROTECTION_MODE for a25
col SWITCHOVER_STATUS for a20
col DB_UNIQUE_NAME for a20
select ds.dest_id id
  , ad.status
  , ds.database_mode db_mode
  , ad.archiver type
  , ds.recovery_mode
  , ds.protection_mode
  , ds.standby_logfile_count "SRLs"
  , ds.standby_logfile_active active
  , ds.archived_seq#
from v\$archive_dest_status ds, v\$archive_dest ad
where ds.dest_id = ad.dest_id
and ad.status != 'INACTIVE'
order by ds.dest_id;
prompt
prompt ##############################################################
prompt # Verify the Protection of the Dataguard Configuration       #
prompt ##############################################################
col name for a10
col DATABASE_ROLE for a25
col OPEN_MODE for a25
select name
  , db_unique_name
  , protection_mode
  , DATABASE_ROLE
  , OPEN_MODE
  , switchover_status
from v\$database;
prompt
prompt ##############################################################
prompt # Verify the Dataguard Parameters                            #
prompt ##############################################################
column name for a30
column display_value for a180
column ID format 99
column "SRLs" format 99
column active format 99
col type format a4
column ID format 99
column "SRLs" format 99
column active format 99
col type format a4
col PROTECTION_MODE for a20
col RECOVERY_MODE for a20
col db_mode for a15
select name
  , display_value
FROM v\$parameter
WHERE name IN ('db_name','db_unique_name','undo_retention','archive_lag_target','log_archive_config','log_archive_format','log_archive_dest_1','log_archive_dest_2','log_archive_dest_state_2','flashback','fal_client','fal_server','standby_file_management','standby_archive_dest','db_file_name_convert','log_file_name_convert','remote_login_passwordfile','local_listener','dg_broker_start','dg_broker_config_file1','dg_broker_config_file2','log_archive_max_processes')
order by name;
quit;
EOF
fi
}
#
#########################################################################################################
# DATAGUARD STATUS APPLYING
#########################################################################################################
#
# 11g
function func_dba_11_074()
{
  echo ""
}
# 12c
function func_dba_12_074()
{
  echo ""
}
# 18c
function func_dba_18_074()
{
  echo ""
}
# 19c
function func_dba_19_074()
{
  echo ""
}
# 20c
function func_dba_20_074()
{
  echo ""
}
#
function func_dba_074()
{
if [ "${ISDGDB}" = "FALSE" ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- Your Database Doesn't Have Data Guard Configured --"
  echo ">--------------------------------------------------------------------------------------------------"
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on
prompt ##############################################################
prompt # Verify the Sequence Applied and the Difference Between Nodes
prompt ##############################################################
select ARCH.THREAD# "Thread"
  , ARCH.SEQUENCE# "Last Sequence Received"
  , APPL.SEQUENCE# "Last Sequence Applied"
  , (ARCH.SEQUENCE# - APPL.SEQUENCE#) "Difference"
  , case when ARCH.SEQUENCE# <> APPL.SEQUENCE# then 'Not Updated' when ARCH.SEQUENCE# = APPL.SEQUENCE# then 'Updated' else 'Status Unknown' end as "Update Status"
FROM (select THREAD# ,SEQUENCE# FROM V\$ARCHIVED_LOG WHERE (THREAD#,FIRST_TIME) IN (select THREAD#,MAX(FIRST_TIME) FROM V\$ARCHIVED_LOG GROUP BY THREAD#)) ARCH,
     (select THREAD# ,SEQUENCE# FROM V\$LOG_HISTORY WHERE (THREAD#,FIRST_TIME) IN (select THREAD#,MAX(FIRST_TIME) FROM V\$LOG_HISTORY GROUP BY THREAD#)) APPL
WHERE ARCH.THREAD# = APPL.THREAD#
ORDER BY 1;
prompt
prompt ##############################################################
prompt # Verify Unit Apply                                          #
prompt ##############################################################
col SOURCE_DB_UNIQUE_NAME for a15
col NAME for a30
col VALUE for a30
col UNIT for a40
col TIME_COMPUTED for a20
col DATUM_TIME for a20
select * from v\$dataguard_stats order by name;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
select NAME
  , EXTRACT(DAY FROM TO_DSINTERVAL(VALUE))*24*60*60 + EXTRACT(HOUR FROM TO_DSINTERVAL(VALUE))*60*60 + EXTRACT(MINUTE FROM TO_DSINTERVAL(VALUE))*60 + EXTRACT(SECOND FROM TO_DSINTERVAL(VALUE)) SECONDS
from v\$dataguard_stats 
where name in ('transport lag','apply lag','apply finish time')
union
select NAME, to_number(VALUE) SECONDS from v\$dataguard_stats where name = 'estimated startup time';
prompt
prompt ##############################################################
prompt # Verify LAG of Applying                                     #
prompt ##############################################################
column applied_time for a30
column status for a100
select to_char(sysdate, 'dd/mm/yyyy hh24:mi:ss') "Current Time" from dual;
select DB_NAME
  , APPLIED_TIME
  , LOG_ARCHIVED-LOG_APPLIED LOG_GAP
  , (case when ((APPLIED_TIME is not null and (LOG_ARCHIVED-LOG_APPLIED) is null)
  or (APPLIED_TIME is null and (LOG_ARCHIVED-LOG_APPLIED) is not null)
  or ((LOG_ARCHIVED-LOG_APPLIED) > 5)) then 'Error! Log Gap is ' else 'OK!' end) Status
FROM (select INSTANCE_NAME DB_NAME FROM GV\$INSTANCE where INST_ID = 1 ),
(select MAX(SEQUENCE#) LOG_ARCHIVED FROM V\$ARCHIVED_LOG WHERE DEST_ID = 1 AND ARCHIVED = 'YES' and THREAD# = 1),
(select MAX(SEQUENCE#) LOG_APPLIED FROM V\$ARCHIVED_LOG WHERE DEST_ID = 2 AND APPLIED = 'YES' and THREAD# = 1),
(select TO_CHAR(MAX(COMPLETION_TIME), 'DD/MM/YYYY HH24:MI:SS') APPLIED_TIME
FROM V\$ARCHIVED_LOG
WHERE DEST_ID = 2
AND APPLIED = 'YES'
and THREAD# = 1)
UNION
select DB_NAME
  , APPLIED_TIME
  , LOG_ARCHIVED-LOG_APPLIED LOG_GAP
  , (case when ((APPLIED_TIME is not null and (LOG_ARCHIVED-LOG_APPLIED) is null)
  or (APPLIED_TIME is null and (LOG_ARCHIVED-LOG_APPLIED) is not null)
  or ((LOG_ARCHIVED-LOG_APPLIED) > 5)) then 'Error! Log Gap is ' else 'OK!' end) Status
from (select INSTANCE_NAME DB_NAME FROM GV\$INSTANCE where INST_ID = 2 ),
(select MAX(SEQUENCE#) LOG_ARCHIVED FROM V\$ARCHIVED_LOG WHERE DEST_ID = 1 AND ARCHIVED = 'YES' and THREAD# = 2),
(select MAX(SEQUENCE#) LOG_APPLIED FROM V\$ARCHIVED_LOG WHERE DEST_ID = 2 AND APPLIED = 'YES' and THREAD# = 2),
(select TO_CHAR(MAX(COMPLETION_TIME), 'DD/MM/YYYY HH24:MI:SS') APPLIED_TIME
FROM V\$ARCHIVED_LOG
WHERE DEST_ID = 2
AND APPLIED = 'YES'
and THREAD# = 2)
/
prompt
prompt ##############################################################
prompt #  Verify Lasts Applyed on Both Environments                 #
prompt ##############################################################
select 'Last Log applied : ' Logs
  , to_char(next_time, 'DD/MM/YYYY HH24:MI:SS') Time
from v\$archived_log
where sequence# = (select max(sequence#) from v\$archived_log where applied = 'YES')
union
select 'Last Log received : ' Logs
  , to_char(next_time, 'DD/MM/YYYY HH24:MI:SS') Time
from v\$archived_log
where sequence# = (select max(sequence#) from v\$archived_log);
prompt
prompt ##############################################################
prompt # Verify All Archivelog Gaps                                 #
prompt ##############################################################
select * from v\$archive_gap;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY CONSUME PER CPU
#########################################################################################################
#
# 11g
function func_dba_11_075()
{
  echo ""
}
# 12c
function func_dba_12_075()
{
  echo ""
}
# 18c
function func_dba_18_075()
{
  echo ""
}
# 19c
function func_dba_19_075()
{
  echo ""
}
# 20c
function func_dba_20_075()
{
  echo ""
}
#
function func_dba_075()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on
COLUMN wait_class format a20
COLUMN name       format a55
COLUMN time_sec   format 999,999,999,999.99
COLUMN time_min   format 999,999,999,999,999.99
COLUMN time_hou   format 999,999,999,999,999,999.99
COLUMN time_day   format 999,999,999,999,999,999,999.99
COLUMN pct        format 999,99
COLUMN "% Used"   format a8 JUSTIFY RIGHT
select wait_class
   , NAME
   , ROUND(time_secs, 2) time_sec
   , ROUND(time_secs/60, 2) time_min
   , ROUND(time_secs/60/60, 2) time_hou
   , ROUND(time_secs/60/60/24, 2) time_day
   , ' ' || ROUND(time_secs * 100 / SUM (time_secs) OVER (), 2) || '%' as "% Used"
FROM (select n.wait_class, e.event NAME, e.time_waited / 100 time_secs FROM v\$system_event e, v\$event_name n WHERE n.NAME = e.event AND n.wait_class <> 'Idle' AND time_waited > 0
      UNION
      select 'CPU', 'server CPU', SUM (VALUE / 1000000) time_secs FROM v\$sys_time_model WHERE stat_name IN ('background cpu time', 'DB CPU'))
-- where ROUND(time_secs*100/SUM(time_secs) OVER (), 2) > 0
-- where "% Used" > 0
ORDER BY time_sec DESC;
quit;
EOF
}
#
#########################################################################################################
# QUICK TUNE
#########################################################################################################
#
# 11g
function func_dba_11_076()
{
  echo ""
}
# 12c
function func_dba_12_076()
{
  echo ""
}
# 18c
function func_dba_18_076()
{
  echo ""
}
# 19c
function func_dba_19_076()
{
  echo ""
}
# 20c
function func_dba_20_076()
{
  echo ""
}
#
function func_dba_076()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
COL "MEMORY TYPE" FOR A16
--HEAD "SGA + RATIOS"
--COL "Total_Mem(Ko)" FOR A12
--COL "Free(Ko)" FOR A8
COL "###" FOR A3
COL "MEMORY RATIOS" FOR A28
COL "RATIO %" FOR A7
COL IDEAL FOR A8 ;
compute sum of "Total_Mem K" on report
compute sum of "Free K" on report
break on report ;
select pool as "MEMORY TYPE"
  , Total_Mem as "ALLOCATION K"
  , Free_Mem as "FREE K"
  , '###' "###"
  , RUBRIQUE "MEMORY RATIOS"
  , to_char(round(RATIO*100,1),'999.9') "RATIO %"
  , IDEAL
from (select rownum0, A.pool, A.Total_Mem, B.Free_Mem from (select (rownum) rownum0, A.* from (select pool, round(sum(bytes)/1024,0) Total_Mem from v\$sgastat where pool is not null group by pool
UNION
select name, round(bytes/1024) from v\$sgastat where pool is null and name !='fixed_sga') A
UNION ALL
select 6,'Sort Area Size' ,round(value/1024,0) from v\$parameter where name in ('sort_area_size')
UNION ALL
select 7,'Hash Area Size' ,round(value/1024,0) from v\$parameter where name in ('hash_area_size')) A, (select pool, round(bytes/1024,0) Free_Mem from v\$sgastat where name = 'free memory'
UNION ALL
select 'db_block_buffers', (select count(*) from v\$bh where status='free')*(select (round(value/1024,0)) from v\$parameter where name = 'db_block_size') from dual ) B where A.pool=B.pool(+)) SGA, (select 6 rownum0, 'DATA DICTIONARY CACHE' "RUBRIQUE", sum(getmisses)/sum(gets) "RATIO", ' < 15 %' "IDEAL" from v\$rowcache
UNION ALL
select 3,'SHARED POOL HIT RATIO',sum(pinhits-reloads)/sum(pins),' > 85 %' from v\$librarycache
UNION ALL
select 4 ,'SHARED POOL RELOAD %',sum (reloads)/sum(pins), ' <  2 %' from v\$librarycache
UNION ALL
select 2,'BUFFER CACHE Hit Ratio', (1-(sum(decode(name, 'physical reads', value, 0))/(sum(decode(name, 'db block gets',value,0)) + (sum(decode(name,'consistent gets', value, 0)))))), ' > 95 %' from v\$sysstat
UNION ALL
select 1,'BUFFER CACHE MISS RATIO', ((G-F)/(G-F+C+E)),' < 15 %' from (select sum(value) C  from v\$sysstat where name like '%- consistent read gets') c, (select value E from v\$sysstat where name = 'db block gets') e, (select value F from v\$sysstat where name = 'physical reads direct') f, (select value G from v\$sysstat where name = 'physical reads') g
UNION ALL
select 5, 'LOG BUFFER REQUESTS Ratio', -- '#Redo Space requests/#redo entries'
((req.value * 50)/entries.value), ' < 0.02%' from v\$sysstat req, v\$sysstat entries where req.name='redo log space requests' and entries.name = 'redo entries'
UNION ALL
select 7,'MEM SORTS/TOTAL SORTS', mem.value/(mem.value+disk.value),' > 95 %' from v\$sysstat mem, v\$sysstat disk where mem.name = 'sorts (memory)' and disk.name = 'sorts (disk)') RATIOS where SGA.rownum0(+) = RATIOS.ROWNUM0 order by SGA.rownum0 asc;
quit;
EOF
}
#
#########################################################################################################
# VERIFY RECOMENDATIONS TUNING TOP 20
#########################################################################################################
#
# 11g
function func_dba_11_077()
{
  echo ""
}
# 12c
function func_dba_12_077()
{
  echo ""
}
# 18c
function func_dba_18_077()
{
  echo ""
}
# 19c
function func_dba_19_077()
{
  echo ""
}
# 20c
function func_dba_20_077()
{
  echo ""
}
#
function func_dba_077()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
DEF days_of_history_accessed = '31';
DEF captured_at_least_x_times = '10';
DEF captured_at_least_x_days_apart = '5';
DEF med_elap_microsecs_threshold = '1e4';
DEF min_slope_threshold = '0.1';
DEF max_num_rows = '20';
SET lin 200 ver OFF;
COL SLOPE for a15
COL row_n FOR A2 HEA '#';
COL med_secs_per_exec HEA 'Median Secs|Per Exec' for a20;
COL std_secs_per_exec HEA 'Std Dev Secs|Per Exec';
COL avg_secs_per_exec HEA 'Avg Secs|Per Exec';
COL min_secs_per_exec HEA 'Min Secs|Per Exec';
COL max_secs_per_exec HEA 'Max Secs|Per Exec';
COL plans FOR 9999;
COL sql_text_80 FOR A75;
prompt
prompt ##############################################################
prompt # SQL Statements with "Elapsed Time per Execution" changing over time
prompt ##############################################################
WITH
per_time AS (
select h.dbid
   , h.sql_id
   , SYSDATE - CAST(s.end_interval_time AS DATE) days_ago
   , SUM(h.elapsed_time_total) / SUM(h.executions_total) time_per_exec
FROM  dba_hist_sqlstat h, dba_hist_snapshot s
WHERE h.executions_total > 0
AND s.snap_id = h.snap_id
AND s.dbid = h.dbid
AND s.instance_number = h.instance_number
AND CAST(s.end_interval_time AS DATE) > SYSDATE - &&days_of_history_accessed
GROUP BY h.dbid, h.sql_id, SYSDATE - CAST(s.end_interval_time AS DATE)),
avg_time AS (
select dbid
   , sql_id
   , MEDIAN(time_per_exec) med_time_per_exec
   , STDDEV(time_per_exec) std_time_per_exec
   , AVG(time_per_exec)    avg_time_per_exec
   , MIN(time_per_exec)    min_time_per_exec
   , MAX(time_per_exec)    max_time_per_exec
FROM per_time
GROUP BY dbid, sql_id
HAVING COUNT(*) >= &&captured_at_least_x_times
AND MAX(days_ago) - MIN(days_ago) >= &&captured_at_least_x_days_apart
AND MEDIAN(time_per_exec) > &&med_elap_microsecs_threshold),
time_over_median AS (
select h.dbid
   ,  h.sql_id
   ,  h.days_ago
   ,  (h.time_per_exec / a.med_time_per_exec) time_per_exec_over_med
   ,  a.med_time_per_exec
   ,  a.std_time_per_exec
   ,  a.avg_time_per_exec
   ,  a.min_time_per_exec
   ,  a.max_time_per_exec
FROM per_time h, avg_time a WHERE a.sql_id = h.sql_id),
ranked AS (
select RANK () OVER (ORDER BY ABS(REGR_SLOPE(t.time_per_exec_over_med, t.days_ago)) DESC) rank_num
   ,  t.dbid
   ,  t.sql_id
   ,  CASE WHEN REGR_SLOPE(t.time_per_exec_over_med, t.days_ago) > 0 THEN 'IMPROVING' ELSE 'REGRESSING' END change
   ,  ROUND(REGR_SLOPE(t.time_per_exec_over_med, t.days_ago), 3) slope
   ,  ROUND(AVG(t.med_time_per_exec)/1e6, 3) med_secs_per_exec
   ,  ROUND(AVG(t.std_time_per_exec)/1e6, 3) std_secs_per_exec
   ,  ROUND(AVG(t.avg_time_per_exec)/1e6, 3) avg_secs_per_exec
   ,  ROUND(MIN(t.min_time_per_exec)/1e6, 3) min_secs_per_exec
   ,  ROUND(MAX(t.max_time_per_exec)/1e6, 3) max_secs_per_exec
FROM time_over_median t
GROUP BY t.dbid, t.sql_id
HAVING ABS(REGR_SLOPE(t.time_per_exec_over_med, t.days_ago)) > &&min_slope_threshold)
select LPAD(ROWNUM, 2) row_n
   ,  r.sql_id
   ,  r.change
   ,  TO_CHAR(r.slope, '990.000MI') slope
   ,  TO_CHAR(r.med_secs_per_exec, '999,990.000') med_secs_per_exec
   ,  TO_CHAR(r.std_secs_per_exec, '999,990.000') std_secs_per_exec
   ,  TO_CHAR(r.avg_secs_per_exec, '999,990.000') avg_secs_per_exec
   ,  TO_CHAR(r.min_secs_per_exec, '999,990.000') min_secs_per_exec
   ,  TO_CHAR(r.max_secs_per_exec, '999,990.000') max_secs_per_exec
   ,  (select COUNT(DISTINCT p.plan_hash_value) FROM dba_hist_sql_plan p WHERE p.dbid = r.dbid AND p.sql_id = r.sql_id) plans
--   ,  REPLACE((select DBMS_LOB.SUBSTR(s.sql_text, 80) FROM dba_hist_sqltext s WHERE s.dbid = r.dbid AND s.sql_id = r.sql_id), CHR(10)) sql_text_80
FROM ranked r
WHERE r.rank_num <= &&max_num_rows
ORDER BY r.rank_num
/
quit;
EOF
}
#
#########################################################################################################
# VERIFY TOP 20 TUNING HISTORY
#########################################################################################################
#
# 11g
function func_dba_11_078_a()
{
  echo ""
}
# 12c
function func_dba_12_078_a()
{
  echo ""
}
# 18c
function func_dba_18_078_a()
{
  echo ""
}
# 19c
function func_dba_19_078_a()
{
  echo ""
}
# 20c
function func_dba_20_078_a()
{
  echo ""
}
#
function func_dba_078_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off heading on wrap off
select * from (select SQL_ID ,
sum(decode(session_state,'ON CPU',1,0)) as CPU,
sum(decode(session_state,'WAITING',1,0)) - sum(decode(session_state, 'WAITING', decode(wait_class, 'User I/O',1,0),0)) as WAIT,
sum(decode(session_state,'WAITING', decode(wait_class, 'User I/O',1,0),0)) as IO,
sum(decode(session_state,'ON CPU',1,1)) as TOTAL
from v\$active_session_history
where SQL_ID is not NULL
group by sql_id
order by sum(decode(session_state,'ON CPU',1,1)) desc)
where rownum < 21;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
select * from (select SQL_ID ,
sum(decode(session_state,'ON CPU',1,0)) as CPU,
sum(decode(session_state,'WAITING',1,0)) - sum(decode(session_state, 'WAITING', decode(wait_class, 'User I/O',1,0),0)) as WAIT,
sum(decode(session_state,'WAITING', decode(wait_class, 'User I/O',1,0),0)) as IO,
sum(decode(session_state,'ON CPU',1,1)) as TOTAL
from v\$active_session_history
where SQL_ID is not NULL
group by sql_id
order by sum(decode(session_state,'ON CPU',1,1)) desc)
where rownum < 21;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY TOP 20 TUNING HISTORY
#########################################################################################################
#
# 11g
function func_dba_11_078_b()
{
  echo ""
}
# 12c
function func_dba_12_078_b()
{
  echo ""
}
# 18c
function func_dba_18_078_b()
{
  echo ""
}
# 19c
function func_dba_19_078_b()
{
  echo ""
}
# 20c
function func_dba_20_078_b()
{
  echo ""
}
#
function func_dba_078_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off heading on wrap off
select * from (select SQL_ID ,
sum(decode(session_state,'ON CPU',1,0)) as CPU,
sum(decode(session_state,'WAITING',1,0)) - sum(decode(session_state, 'WAITING', decode(wait_class, 'User I/O',1,0),0)) as WAIT,
sum(decode(session_state,'WAITING', decode(wait_class, 'User I/O',1,0),0)) as IO,
sum(decode(session_state,'ON CPU',1,1)) as TOTAL
from v\$active_session_history
where SQL_ID is not NULL
group by sql_id
order by sum(decode(session_state,'ON CPU',1,1)) desc)
where rownum < 21;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
select * from (select SQL_ID ,
sum(decode(session_state,'ON CPU',1,0)) as CPU,
sum(decode(session_state,'WAITING',1,0)) - sum(decode(session_state, 'WAITING', decode(wait_class, 'User I/O',1,0),0)) as WAIT,
sum(decode(session_state,'WAITING', decode(wait_class, 'User I/O',1,0),0)) as IO,
sum(decode(session_state,'ON CPU',1,1)) as TOTAL
from v\$active_session_history
where SQL_ID is not NULL
group by sql_id
order by sum(decode(session_state,'ON CPU',1,1)) desc)
where rownum < 21;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY BACKGROUND PROCESSESS
#########################################################################################################
#
# 11g
function func_dba_11_079()
{
  echo ""
}
# 12c
function func_dba_12_079()
{
  echo ""
}
# 18c
function func_dba_18_079()
{
  echo ""
}
# 19c
function func_dba_19_079()
{
  echo ""
}
# 20c
function func_dba_20_079()
{
  echo ""
}
#
function func_dba_079()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
select min(name || ': '|| description) process_description
FROM v\$bgprocess group by substr(name,1,3)
ORDER BY 1;
quit;
EOF
}
#
#########################################################################################################
# TOP 100 QUERY RECOMENDATIONS
#########################################################################################################
#
# 11g
function func_dba_11_080()
{
  echo ""
}
# 12c
function func_dba_12_080()
{
  echo ""
}
# 18c
function func_dba_18_080()
{
  echo ""
}
# 19c
function func_dba_19_080()
{
  echo ""
}
# 20c
function func_dba_20_080()
{
  echo ""
}
#
function func_dba_080()
{
${ORACLE_HOME}/perl/bin/perl <<EOF
#!/usr/bin/perl
# -------------------------------------------------------------------------------------
# Performance Script
# -------------------------------------------------------------------------------------
local Hostname=${1};
local Database=${2};
local Port=${3};
local Username=${3};
local Password=${4};
local Schema=${5};
local AutoImplement=${6};
local Top=${7};
# -------------------------------------------------------------------------------------
# perl AutoDBMS_SQLTUNE.pl HOSTNAME SERVICE PORT USERNAME PASSWORD SCHEMA AUTOIMPLEMENT TOPSQL
# perl AutoDBMS_SQLTUNE.pl nerv01 prod 1521 PORTILHO Nerv2008 SOE N 10
# -------------------------------------------------------------------------------------
use strict;
use warnings;
use DBD::Oracle qw(:ora_session_modes);
# -------------------------------------------------------------------------------------
# Versão 2.00.
# -------------------------------------------------------------------------------------
# Oracle Variable Connections
# -------------------------------------------------------------------------------------
my $Hostname = $ARGV[0];
my $Database = $ARGV[1];
my $Port = $ARGV[2];
my $Username = $ARGV[3];
my $Password = $ARGV[4];
my $Schema = $ARGV[5];
my $AutoImplement = $ARGV[6];
my $Top = $ARGV[7];
# -------------------------------------------------------------------------------------
# Which is the creterie of SQLs to be analyze and in which order?
# -------------------------------------------------------------------------------------
my @Order = ('ELAPSED_TIME', 'CPU_TIME', 'DISK_READS', 'BUFFER_GETS', 'DIRECT_WRITES', 'SORTS');
# -------------------------------------------------------------------------------------
my $oracle_dbh = DBI->connect("dbi:Oracle:host=$Hostname;service_name=$Database;port=$Port", $Username, $Password, {RaiseError => 1, AutoCommit => 0, ora_session_mode => ORA_SYSDBA});
$oracle_dbh->{LongReadLen} = 20*1024*1024; # 20MB
# -------------------------------------------------------------------------------------
open(LOG, '>AutoDBMS_SQLTUNE.log') || die ("Could not open file!");
# -------------------------------------------------------------------------------------
# Remove the Tuning Task Pack if it exists already.
# -------------------------------------------------------------------------------------
my $task_exist = 0;
my $oracle_sql_01 = "select TASK_ID FROM DBA_ADVISOR_TASKS WHERE OWNER = 'SYS' AND TASK_NAME = 'Auto DBMS_SQLTUNE Tuning Task'";
my $oracle_sth_01 = $oracle_dbh->prepare($oracle_sql_01);
$oracle_sth_01->execute();
while (my $oracle_ref_01 = $oracle_sth_01->fetchrow_hashref())
{
  $task_exist++;
}
$oracle_sth_01->finish();
if ($task_exist > 0)
{
  my $oracle_sql_02 = "BEGIN DBMS_SQLTUNE.DROP_TUNING_TASK('Auto DBMS_SQLTUNE Tuning Task'); END;";
  my $oracle_sth_02 = $oracle_dbh->prepare($oracle_sql_02);
  $oracle_sth_02->execute();
  $oracle_sth_02->finish();
}

foreach (@Order)
{
  my $Order = $_;
  print "\nAnalisando os TOP $Top SQLs ordenados por $Order...\n\n";
  print LOG "\nAnalisando os $Top 100 SQLs ordenados por $Order...\n\n";
# -------------------------------------------------------------------------------------
# Search for the Top SQLs.
# -------------------------------------------------------------------------------------
my $oracle_sql_03 = "select SQL_ID, SQL_TEXT FROM (select SQL_ID, SQL_TEXT FROM GV\$SQL WHERE PARSING_SCHEMA_NAME = '$Schema' ORDER BY $Order) WHERE ROWNUM < $Top";
my $oracle_sth_03 = $oracle_dbh->prepare($oracle_sql_03);
$oracle_sth_03->execute();
while (my $oracle_ref_03 = $oracle_sth_03->fetchrow_hashref())
{
  my $sql_id = $oracle_ref_03->{SQL_ID};
  my $sql_text = $oracle_ref_03->{SQL_TEXT};
# -------------------------------------------------------------------------------------
# Verify if the SQL stil exists.
# -------------------------------------------------------------------------------------
  my $sql_exist = 0;
  my $oracle_sql_04 = "select SQL_TEXT FROM V\$SQL WHERE SQL_ID= '$sql_id'";
  my $oracle_sth_04 = $oracle_dbh->prepare($oracle_sql_04);
  $oracle_sth_04->execute();
  while (my $oracle_ref_04 = $oracle_sth_04->fetchrow_hashref())
  {
    $sql_exist++;
  }
  $oracle_sth_04->finish();
# -------------------------------------------------------------------------------------
# Execute the Tuning Task
# -------------------------------------------------------------------------------------
  if ($sql_exist > 0)
  {
  my $oracle_sql_05 = "DECLARE RET_VAL VARCHAR2(4000); BEGIN RET_VAL := DBMS_SQLTUNE.CREATE_TUNING_TASK(SQL_ID => '$sql_id', SCOPE => DBMS_SQLTUNE.SCOPE_COMPREHENSIVE, TIME_LIMIT => 600, TASK_NAME => 'Auto DBMS_SQLTUNE Tuning Task', DESCRIPTION => 'Auto DBMS_SQLTUNE Tuning Task'); END;";
  my $oracle_sth_05 = $oracle_dbh->prepare($oracle_sql_05);
  $oracle_sth_05->execute();
  $oracle_sth_05->finish();

  my $oracle_sql_06 = "BEGIN DBMS_SQLTUNE.EXECUTE_TUNING_TASK('Auto DBMS_SQLTUNE Tuning Task'); END;";
  my $oracle_sth_06 = $oracle_dbh->prepare($oracle_sql_06);
  $oracle_sth_06->execute();
  $oracle_sth_06->finish();
# -------------------------------------------------------------------------------------
# Show the Recomendations.
# -------------------------------------------------------------------------------------
  my $oracle_sql_07 = "select DBMS_SQLTUNE.REPORT_TUNING_TASK('Auto DBMS_SQLTUNE Tuning Task') RECOMMENTATION FROM DUAL";
  my $oracle_sth_07 = $oracle_dbh->prepare($oracle_sql_07);
  $oracle_sth_07->execute();
  while (my $oracle_ref_07 = $oracle_sth_07->fetchrow_hashref())
  {
    my $recommendation = $oracle_ref_07->{RECOMMENTATION};
    print "$recommendation\n\n";
    print LOG "$recommendation\n\n";
  }
# -------------------------------------------------------------------------------------
# Execute the Recomendations.
# -------------------------------------------------------------------------------------
  my $oracle_sql_08 = "select DBMS_SQLTUNE.SCRIPT_TUNING_TASK('Auto DBMS_SQLTUNE Tuning Task') RECOMMENTATION FROM DUAL";
  my $oracle_sth_08 = $oracle_dbh->prepare($oracle_sql_08);
  $oracle_sth_08->execute();
  while (my $oracle_ref_08 = $oracle_sth_08->fetchrow_hashref())
  {
    my $recommendation = $oracle_ref_08->{RECOMMENTATION};
    if ($recommendation !~ m/There are no recommended actions for this task under the given filters./)
    {
      my @CompleteRecommendation =  split /\n/, $recommendation;
      foreach (@CompleteRecommendation)
      {
        my $RecommendationLine = $_;
        unless ($RecommendationLine =~ /;/gm) {next;}

        if ($RecommendationLine =~ /^create index /) {$RecommendationLine =~ s/;//;}
        if ($RecommendationLine =~ /^execute /) {$RecommendationLine =~ s/execute //; $RecommendationLine = "BEGIN $RecommendationLine END;";}
        my $oracle_sql_09 = "$RecommendationLine";
        my $oracle_sth_09 = $oracle_dbh->prepare($oracle_sql_09);
        print "Recommendation to implement: $RecommendationLine\n\n";
        print LOG "Recommendation to implement:: $RecommendationLine\n\n";

        my $YesOrNo;
        print "Do you wish to implement it? (Y/N)";
        if ($AutoImplement eq 'Y')
        {
          $YesOrNo = 'Y';
        }
        else
        {
          $YesOrNo = <STDIN>;
          chomp $YesOrNo;
        }
							
        if ($YesOrNo eq 'Y')
        {
          $oracle_sth_09->execute();
          $oracle_sth_09->finish();
          print "Recommendation IMPLEMENTED.\n\n";
          print LOG "Recommendation IMPLEMENTED.\n\n";
          last;
        }
        elsif ($YesOrNo eq 'N')
        {
          print "Recommendation NOT IMPLEMENTED.\n\n";
          print LOG "Recommendation NOT IMPLEMENTED.\n\n";
          last;
        }
        else
        {
          print "\nWell, I don´t know what to do...\n";
          print LOG "\nWell, I don´t know what to do...\n";
        }
        }
    }
      print "\n\n\n\n\n";
    }
    $oracle_sth_08->finish();

    my $oracle_sql_10 = "BEGIN DBMS_SQLTUNE.DROP_TUNING_TASK('Auto DBMS_SQLTUNE Tuning Task'); END;";
    my $oracle_sth_10 = $oracle_dbh->prepare($oracle_sql_10);
    $oracle_sth_10->execute();
    $oracle_sth_10->finish();
    }
  }
  $oracle_sth_03->finish();
}
$oracle_dbh->disconnect;
exit;
EOF
}
#
#########################################################################################################
# VERIFY GOLDEN GATE CONFIGURATION
#########################################################################################################
#
# 11g
function func_dba_11_081()
{
  echo ""
}
# 12c
function func_dba_12_081()
{
  echo ""
}
# 18c
function func_dba_18_081()
{
  echo ""
}
# 19c
function func_dba_19_081()
{
  echo ""
}
# 20c
function func_dba_20_081()
{
  echo ""
}
#
function func_dba_081()
{
if [ ${OOGG} = 'FALSE' ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- Your Database Does Not Have GoldenGate Configured --"
  echo ">--------------------------------------------------------------------------------------------------"
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
prompt ##############################################################
prompt # Golden Gate Captures                                       #
prompt ##############################################################
select * from v\$goldengate_capture;
prompt
prompt ##############################################################
prompt # Golden Gate Tracking                                       #
prompt ##############################################################
select * from v\$goldengate_message_tracking;
prompt
prompt ##############################################################
prompt # Golden Gate Transaction                                    #
prompt ##############################################################
select * from v\$goldengate_transaction;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY GOLDENGATE STATUS
#########################################################################################################
#
# 11g
function func_dba_11_082()
{
  echo ""
}
# 12c
function func_dba_12_082()
{
  echo ""
}
# 18c
function func_dba_18_082()
{
  echo ""
}
# 19c
function func_dba_19_082()
{
  echo ""
}
# 20c
function func_dba_20_082()
{
  echo ""
}
#
function func_dba_082()
{
if [ ${OOGG} = 'FALSE' ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- Your Database Does not Have GoldenGate Configured --"
  echo ">--------------------------------------------------------------------------------------------------"
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
prompt ##############################################################
prompt # Golden Gate Tracking                                       #
prompt ##############################################################
select * from V\$GOLDENGATE_MESSAGE_TRACKING;
prompt
prompt ##############################################################
prompt # Golden Gate Capture                                        #
prompt ##############################################################
select * from V\$GOLDENGATE_CAPTURE;
prompt
prompt ##############################################################
prompt # Golden Gate Transaction                                    #
prompt ##############################################################
select * from V\$GOLDENGATE_TRANSACTION;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY DINAMICS PARAMETERS ( SPFILE )
#########################################################################################################
#
# 11g
function func_dba_11_083()
{
  echo ""
}
# 12c
function func_dba_12_083()
{
  echo ""
}
# 18c
function func_dba_18_083()
{
  echo ""
}
# 19c
function func_dba_19_083()
{
  echo ""
}
# 20c
function func_dba_20_083()
{
  echo ""
}
#
function func_dba_083()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
col sid for a10
col name for a45
col type for a15
col display_value for a100
select sid
  , name
  , type
  , display_value
from v\$spparameter
order by name;
quit;
EOF
}
#
#########################################################################################################
# VERIFY DBA FEATURES USAGE STATISTICS
#########################################################################################################
#
# 11g
function func_dba_11_084()
{
  echo ""
}
# 12c
function func_dba_12_084()
{
  echo ""
}
# 18c
function func_dba_18_084()
{
  echo ""
}
# 19c
function func_dba_19_084()
{
  echo ""
}
# 20c
function func_dba_20_084()
{
  echo ""
}
#
function func_dba_084()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off
alter session set nls_date_format='dd/mm/yyyy';
col "NAME" for a70
col "DETECTED USAGES" for a20
col "USING NOW Y/N" for a15
select name
  , case when DETECTED_USAGES = 0 then 'Never Used' else to_char(DETECTED_USAGES) || ' Time(s) Used' end as "DETECTED USAGES"
  , case when CURRENTLY_USED = 'FALSE' then 'Not Using' when CURRENTLY_USED = 'TRUE' then 'Using' else 'UNKNOWN' end as "USING NOW Y/N"
  , FIRST_USAGE_DATE
  , LAST_USAGE_DATE
from dba_feature_usage_statistics a, v\$instance b
where a.version = b.version
order by 1;
quit;
EOF
}
#
#########################################################################################################
# CALCULATE HUGE PAGES
#########################################################################################################
#
# 11g
function func_dba_11_085()
{
  echo ""
}
# 12c
function func_dba_12_085()
{
  echo ""
}
# 18c
function func_dba_18_085()
{
  echo ""
}
# 19c
function func_dba_19_085()
{
  echo ""
}
# 20c
function func_dba_20_080()
{
  echo ""
}
#
function func_dba_085()
{
if [ `uname` = "SunOS" ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo "Solaris"
  echo ">--------------------------------------------------------------------------------------------------"
elif [ `uname` = "AIX" ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo "AIX"
  echo ">--------------------------------------------------------------------------------------------------"
elif [ `uname` = "Linux" ]
then
  # Check for the kernel version
  KERN=`uname -r | awk -F. '{ printf("%d.%d\n",$1,$2); }'`
  # Find out the HugePage size
  HPG_SZ=`grep Hugepagesize /proc/meminfo | awk '{print $2}'`
  if [ -z "${HPG_SZ}" ]
  then
    echo "The hugepages may not be supported in the system where the script is being executed."
  exit 1
  fi
  # Initialize the counter
  NUM_PG=0
  # Cumulative number of pages required to handle the running shared memory segments
  for SEG_BYTES in `ipcs -m | cut -c44-300 | awk '{print $1}' | grep "[0-9][0-9]*"`
  do
    MIN_PG=`echo ${ECHO} "${SEG_BYTES}/(${HPG_SZ}*1024)" | bc -q`
  if [ $MIN_PG -gt 0 ]
  then
    NUM_PG=`echo ${ECHO} "${NUM_PG}+${MIN_PG}+1" | bc -q`
  fi
  done
  RES_BYTES=`echo ${ECHO} "${NUM_PG} * ${HPG_SZ} * 1024" | bc -q`
  # An SGA less than 100MB does not make sense
  # Bail out if that is the case
  if [ ${RES_BYTES} -lt 100000000 ]
  then
  echo "***********"
  echo "** ERROR **"
  echo "***********"
  echo "
  Sorry! There are not enough total of shared memory segments allocated for HugePages configuration.
  HugePages can only be used for shared memory segments that you can list by command:
  # ipcs -m
  of a size that can match an Oracle Database SGA. Please make sure that:
  * Oracle Database instance is up and running
  * Oracle Database 11g Automatic Memory Management (AMM) is not configured"
  fi
  # Finish with results
echo ">--------------------------------------------------------------------------------------------------"
echo " -- RECOMENDED VALUE --"
echo ">--------------------------------------------------------------------------------------------------"
case ${KERN} in
'2.2')  echo ${ECHO} "Kernel version ${KERN} is not supported. Exiting." ;;
'2.4')  HUGETLB_POOL=`echo ${ECHO} "${NUM_PG}*${HPG_SZ}/1024" | bc -q`;
        echo ${ECHO} "Recommended setting: vm.hugetlb_pool = ${HUGETLB_POOL}" ;;
'2.6')  echo ${ECHO} "Recommended setting: vm.nr_hugepages = ${NUM_PG}" ;;
'3.8')  echo ${ECHO} "Recommended setting: vm.nr_hugepages = ${NUM_PG}" ;;
'3.10') echo ${ECHO} "Recommended setting: vm.nr_hugepages = ${NUM_PG}" ;;
'4.1')  echo ${ECHO} "Recommended setting: vm.nr_hugepages = ${NUM_PG}" ;;
esac
echo " -- ACTUAL VALUE --"
cat /etc/sysctl.conf | egrep "vm.nr_hugepages"
else
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- This Operation System is Unknown --"
  echo ">--------------------------------------------------------------------------------------------------"
fi
}
#
#########################################################################################################
# VERIFY DBA HIGH WATER MARK STATISTICS
#########################################################################################################
#
# 11g
function func_dba_11_086()
{
  echo ""
}
# 12c
function func_dba_12_086()
{
  echo ""
}
# 18c
function func_dba_18_086()
{
  echo ""
}
# 19c
function func_dba_19_086()
{
  echo ""
}
# 20c
function func_dba_20_086()
{
  echo ""
}
#
function func_dba_086()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col NAME for a30
col VERSION for a15
col HIGHWATER for a20
col LAST_VALUE for a20
col DESCRIPTION for a70
select distinct a.NAME
  , a.VERSION
  , to_char(HIGHWATER) as HIGHWATER
  , to_char(LAST_VALUE) as LAST_VALUE
  , DESCRIPTION
from DBA_HIGH_WATER_MARK_STATISTICS a, v\$instance b
where a.version = b.version
order by 1,2;
quit;
EOF
}
#
#########################################################################################################
# GLOBAL INFORMATION ABOUT I/O
#########################################################################################################
#
# 11g
function func_dba_11_087()
{
  echo ""
}
# 12c
function func_dba_12_087()
{
  echo ""
}
# 18c
function func_dba_18_087()
{
  echo ""
}
# 19c
function func_dba_19_087()
{
  echo ""
}
# 20c
function func_dba_20_087()
{
  echo ""
}
#
function func_dba_087()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' feedback off trimspool on echo off wrap off;
prompt
prompt ##############################################################
prompt # REPORT SQL MONITOR                                         #
prompt ##############################################################
select dbms_sqltune.report_sql_monitor from dual;
prompt
prompt ##############################################################
prompt # GLOBAL INFORMATION ABOUT I/O                               #
prompt ##############################################################
set pages 700 lines 700 timing on long 10000000 longchunksize 10000000 colsep '|'
set lin 200 ver off;
COL instance_number FOR 9999 HEA 'Inst';
COL end_time HEA 'End Time';
COL plan_hash_value HEA 'Plan|Hash Value';
COL executions_total FOR 999,999 HEA 'Execs|Total';
COL rows_per_exec HEA 'Rows Per Exec';
COL et_secs_per_exec HEA 'Elap Secs|Per Exec';
COL cpu_secs_per_exec HEA 'CPU Secs|Per Exec';
COL io_secs_per_exec HEA 'IO Secs|Per Exec';
COL cl_secs_per_exec HEA 'Clus Secs|Per Exec';
COL ap_secs_per_exec HEA 'App Secs|Per Exec';
COL cc_secs_per_exec HEA 'Conc Secs|Per Exec';
COL pl_secs_per_exec HEA 'PLSQL Secs|Per Exec';
COL ja_secs_per_exec HEA 'Java Secs|Per Exec';
select h.instance_number
   , TO_CHAR(CAST(s.end_interval_time AS DATE), 'DD/MM/YYYY HH24:MI:SS') end_time
   , h.plan_hash_value
   , h.executions_total
   , TO_CHAR(ROUND(h.rows_processed_total / h.executions_total), '999,999,999,999') rows_per_exec
   , TO_CHAR(ROUND(h.elapsed_time_total / h.executions_total / 1e6, 3), '999,990.000') et_secs_per_exec
   , TO_CHAR(ROUND(h.cpu_time_total / h.executions_total / 1e6, 3), '999,990.000') cpu_secs_per_exec
   , TO_CHAR(ROUND(h.iowait_total / h.executions_total / 1e6, 3), '999,990.000') io_secs_per_exec
   , TO_CHAR(ROUND(h.clwait_total / h.executions_total / 1e6, 3), '999,990.000') cl_secs_per_exec
   , TO_CHAR(ROUND(h.apwait_total / h.executions_total / 1e6, 3), '999,990.000') ap_secs_per_exec
   , TO_CHAR(ROUND(h.ccwait_total / h.executions_total / 1e6, 3), '999,990.000') cc_secs_per_exec
   , TO_CHAR(ROUND(h.plsexec_time_total / h.executions_total / 1e6, 3), '999,990.000') pl_secs_per_exec
   , TO_CHAR(ROUND(h.javexec_time_total / h.executions_total / 1e6, 3), '999,990.000') ja_secs_per_exec
FROM dba_hist_sqlstat h, dba_hist_snapshot s
WHERE h.sql_id = '${SQL_ID}'
AND h.executions_total > 0
AND s.snap_id = h.snap_id
AND s.dbid = h.dbid
AND s.instance_number = h.instance_number
ORDER BY h.sql_id, h.instance_number, s.end_interval_time, h.plan_hash_value;
quit;
EOF
}
#
#########################################################################################################
# WHICH SEGMENTS HAVE TOP LOGICAL I/O & PHYSICAL I/O
#########################################################################################################
#
# 11g
function func_dba_11_088()
{
  echo ""
}
# 12c
function func_dba_12_088()
{
  echo ""
}
# 18c
function func_dba_18_088()
{
  echo ""
}
# 19c
function func_dba_19_088()
{
  echo ""
}
# 20c
function func_dba_20_088()
{
  echo ""
}
#
function func_dba_088()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col owner for a30
col OBJECT_NAME for a40
select ROWNUM AS Rank
  , Seg_Lio.*
FROM (select St.Owner
  , St.Obj#
  , St.Object_Type
  , St.Object_Name
  , to_char(St.VALUE) as VALUE
  , 'LIO' AS Unit
FROM V\$segment_Statistics St
WHERE St.Statistic_Name = 'logical reads'
ORDER BY St.VALUE DESC) Seg_Lio WHERE ROWNUM <= 15
UNION ALL
select ROWNUM AS Rank
  , Seq_Pio_r.*
FROM (select St.Owner
  , St.Obj#
  , St.Object_Type
  , St.Object_Name
  , to_char(St.VALUE) as VALUE
  , 'PIO Reads' AS Unit
FROM V\$segment_Statistics St
WHERE St.Statistic_Name = 'physical reads'
ORDER BY St.VALUE DESC) Seq_Pio_r
WHERE ROWNUM <= 15
UNION ALL
select ROWNUM AS Rank
  , Seq_Pio_w.*
FROM (select St.Owner
  , St.Obj#
  , St.Object_Type
  , St.Object_Name
  , to_char(St.VALUE) as VALUE
  , 'PIO Writes' AS Unit
FROM V\$segment_Statistics St
WHERE St.Statistic_Name = 'physical writes'
ORDER BY St.VALUE DESC) Seq_Pio_w
WHERE ROWNUM <= 15;
quit;
EOF
}
#
#########################################################################################################
# VERIFY DBLINKS & FOLDERS INFO
#########################################################################################################
#
# 11g
function func_dba_11_089()
{
  echo ""
}
# 12c
function func_dba_12_089()
{
  echo ""
}
# 18c
function func_dba_18_089()
{
  echo ""
}
# 19c
function func_dba_19_089()
{
  echo ""
}
# 20c
function func_dba_20_089()
{
  echo ""
}
#
function func_dba_089()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 500 lines 500 timing on colsep '|'
prompt
prompt ##############################################################
prompt # DATABASE LINKS                                             #
prompt ##############################################################
SET long 1000
SET serveroutput on
SET verify off lines 132
DECLARE
   v_output CLOB := NULL;
BEGIN
   DBMS_OUTPUT.put_line ('DDL For Database Links');
   FOR tt IN (select owner, db_link FROM dba_db_links)
   LOOP
      select DBMS_METADATA.get_ddl ('DB_LINK', tt.db_link, tt.owner) INTO v_output FROM DUAL;
      DBMS_OUTPUT.put_line (v_output);
   END LOOP;
END;
/
prompt
prompt ##############################################################
prompt # Verify Wich DB LINK are Opened                             #
prompt ##############################################################
COL DB_LINK FORMAT A25 
COL OWNER_ID FORMAT 99999 HEADING "OWNID" 
COL LOGGED_ON FORMAT A5 HEADING "LOGON" 
COL HETEROGENEOUS FORMAT A5 HEADING "HETER" 
COL PROTOCOL FORMAT A8 
COL OPEN_CURSORS FORMAT 999 HEADING "OPN_CUR" 
COL IN_TRANSACTION FORMAT A3 HEADING "TXN" 
COL UPDATE_SENT FORMAT A6 HEADING "UPDATE" 
COL COMMIT_POINT_STRENGTH FORMAT 99999 HEADING "C_P_S" 
select * FROM V\$DBLINK;
prompt
prompt ##############################################################
prompt # FOLDERS                                                    #
prompt ##############################################################
select 'create or replace directory ' || directory_name || ' as ' || '''' || directory_path || ''';' as folders from all_directories;
quit;
EOF
}
#
#########################################################################################################
# OWNER X OBJECTS X TYPE X QTD
#########################################################################################################
#
# 11g
function func_dba_11_090_a()
{
  echo ""
}
# 12c
function func_dba_12_090_a()
{
  echo ""
}
# 18c
function func_dba_18_090_a()
{
  echo ""
}
# 19c
function func_dba_19_090_a()
{
  echo ""
}
# 20c
function func_dba_20_090_a()
{
  echo ""
}
#
function func_dba_090_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 2000 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col owner for a30
col object_type for a20
Clear Breaks
Break on owner Skip 1
Compute Sum LABEL 'TOTAL' Of Qtde On owner
select owner, object_type, count(*) Qtde from dba_objects where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner,object_type
union
select owner, 'CONSTRAINT ' || constraint_type, count(*) from dba_constraints where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner, 'CONSTRAINT ' || constraint_type
/
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 2000 lines 700 timing on feedback on colsep '|'
col owner for a30
col object_type for a20
Clear Breaks
Break on owner Skip 1
Compute Sum LABEL 'TOTAL' Of Qtde On owner
select owner, object_type, count(*) Qtde from dba_objects where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner,object_type
union
select owner, 'CONSTRAINT ' || constraint_type, count(*) from dba_constraints where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner, 'CONSTRAINT ' || constraint_type
/
quit;
EOF
fi
}
#
#########################################################################################################
# OWNER X OBJECTS X TYPE X QTD
#########################################################################################################
#
# 11g
function func_dba_11_090_b()
{
  echo ""
}
# 12c
function func_dba_12_090_b()
{
  echo ""
}
# 18c
function func_dba_18_090_b()
{
  echo ""
}
# 19c
function func_dba_19_090_b()
{
  echo ""
}
# 20c
function func_dba_20_090_b()
{
  echo ""
}
#
function func_dba_090_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 2000 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col owner for a30
col object_type for a20
Clear Breaks
Break on owner Skip 1
Compute Sum LABEL 'TOTAL' Of Qtde On owner
select owner, object_type, count(*) Qtde from dba_objects where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner,object_type
union
select owner, 'CONSTRAINT ' || constraint_type, count(*) from dba_constraints where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner, 'CONSTRAINT ' || constraint_type
/
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 2000 lines 700 timing on feedback on colsep '|'
col owner for a30
col object_type for a20
Clear Breaks
Break on owner Skip 1
Compute Sum LABEL 'TOTAL' Of Qtde On owner
select owner, object_type, count(*) Qtde from dba_objects where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner,object_type
union
select owner, 'CONSTRAINT ' || constraint_type, count(*) from dba_constraints where owner not in ('SYS','SYSTEM','SYSMAN','DBSNMP') group by owner, 'CONSTRAINT ' || constraint_type
/
quit;
EOF
fi
}
#
#########################################################################################################
# IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED
#########################################################################################################
#
# 11g
function func_dba_11_091_a()
{
  echo ""
}
# 12c
function func_dba_12_091_a()
{
  echo ""
}
# 18c
function func_dba_18_091_a()
{
  echo ""
}
# 19c
function func_dba_19_091_a()
{
  echo ""
}
# 20c
function func_dba_20_091_a()
{
  echo ""
}
#
function func_dba_091_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set nls_date_format='dd/mm/yyyy';
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col name form a30
col "Created" for a20
col "Last_Changed" for a20
select name
  , ctime as "Created"
  , ptime as "Last_Changed"
  , case when ptime = ctime then 'Never Changed' when ptime < sysdate - 30 and ctime < sysdate - 30 then 'Change Recomended' else 'Recently Changed' end as "Result"
FROM sys.user\$ a, dba_users b
where a.name = b.username
order by 1;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on feedback on colsep '|'
col name form a30
col "Created" for a20
col "Last_Changed" for a20
select name
  , ctime as "Created"
  , ptime as "Last_Changed"
  , case when ptime = ctime then 'Never Changed' when ptime < sysdate - 30 and ctime < sysdate - 30 then 'Change Recomended' else 'Recently Changed' end as "Result"
FROM sys.user\$ a, dba_users b
where a.name = b.username
order by 1;
quit;
EOF
fi
}
#
#########################################################################################################
# IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED
#########################################################################################################
#
# 11g
function func_dba_11_092_a()
{
  echo ""
}
# 12c
function func_dba_12_092_a()
{
  echo ""
}
# 18c
function func_dba_18_092_a()
{
  echo ""
}
# 19c
function func_dba_19_092_a()
{
  echo ""
}
# 20c
function func_dba_20_092_a()
{
  echo ""
}
#
function func_dba_091_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set nls_date_format='dd/mm/yyyy';
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col name form a30
col "Created" for a20
col "Last_Changed" for a20
select name
  , ctime as "Created"
  , ptime as "Last_Changed"
  , case when ptime = ctime then 'Never Changed' when ptime < sysdate - 30 and ctime < sysdate - 30 then 'Change Recomended' else 'Recently Changed' end as "Result"
FROM sys.user\$ a, dba_users b
where a.name = b.username
order by 1;
prompt
prompt ##############################################################
prompt # VERIFY ALL INFORMATIONS ABOUT PASSWORD                     #
prompt ##############################################################
col username for a30
select USERNAME, SYSDBA, SYSOPER, SYSASM, SYSBACKUP, SYSDG, SYSKM from v\$pwfile_users;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on feedback on colsep '|'
col name form a30
col "Created" for a20
col "Last_Changed" for a20
select name
  , ctime as "Created"
  , ptime as "Last_Changed"
  , case when ptime = ctime then 'Never Changed' when ptime < sysdate - 30 and ctime < sysdate - 30 then 'Change Recomended' else 'Recently Changed' end as "Result"
FROM sys.user\$ a, dba_users b
where a.name = b.username
order by 1;
prompt
prompt ##############################################################
prompt # VERIFY ALL INFORMATIONS ABOUT PASSWORD                     #
prompt ##############################################################
col username for a30
select USERNAME, SYSDBA, SYSOPER, SYSASM, SYSBACKUP, SYSDG, SYSKM from v\$pwfile_users;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY UNDO SEGMENTS
#########################################################################################################
#
# 11g
function func_dba_11_092()
{
  echo ""
}
# 12c
function func_dba_12_092()
{
  echo ""
}
# 18c
function func_dba_18_092()
{
  echo ""
}
# 19c
function func_dba_19_092()
{
  echo ""
}
# 20c
function func_dba_20_092()
{
  echo ""
}
#
function func_dba_092()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
prompt ##############################################################
prompt # #
prompt ##############################################################
select to_char(begin_time, 'DD/MM/YYYY HH24:MI') begin_time
  , to_char(end_time, 'DD/MM/YYYY HH24:MI') end_time
  , tuned_undoretention
from v\$undostat
order by end_time;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select TO_CHAR(BEGIN_TIME, 'DD/MM/YYYY HH24:MI') BEGIN_TIME
  , TO_CHAR(END_TIME, 'DD/MM/YYYY HH24:MI') END_TIME
  , UNDOTSN
  , UNDOBLKS
  , TXNCOUNT
  , MAXCONCURRENCY AS "MAXCON"
FROM v\$UNDOSTAT
WHERE rownum <= 144;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select segment_name
  , status
FROM dba_rollback_segs;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select rn.Name "Rollback Segment"
  , rs.RSSize/1024 "Size (KB)"
  , rs.Gets "Gets"
  , rs.waits "Waits"
  , (rs.Waits/rs.Gets)*100 "% Waits"
  , rs.Shrinks "# Shrinks"
  , rs.Extends "# Extends"
FROM sys.v_\$rollName rn, sys.v_\$rollStat rs
WHERE rn.usn = rs.usn
order by "Size (KB)", "Waits", "% Waits";
quit;
EOF
}
#
#########################################################################################################
# VERIFY DATAGUARD HEALTH CHECK
#########################################################################################################
#
# 11g
function func_dba_11_093()
{
  echo ""
}
# 12c
function func_dba_12_093()
{
  echo ""
}
# 18c
function func_dba_18_093()
{
  echo ""
}
# 19c
function func_dba_19_093()
{
  echo ""
}
# 20c
function func_dba_20_093()
{
  echo ""
}
#
function func_dba_093()
{
if [ "${ISDGDB}" = "FALSE" ]
then
  echo ">--------------------------------------------------------------------------------------------------"
  echo " -- Your Database Do Not Have Data Guard Configured --"
  echo ">--------------------------------------------------------------------------------------------------"
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|' trim on trims on numformat 999999999999999 heading off feedback off
prompt ######################################################################################################################
prompt # This script is to be run on the Standby of a Data Guard Physical Standby Site Standby Site Details                 #
prompt ######################################################################################################################
set heading on feedback on
col db_unique_name format a15
col F_LOG format a7
col flashb_on format a10
select DB_UNIQUE_NAME
  , DATABASE_ROLE DB_ROLE
  , FORCE_LOGGING F_LOG
  , FLASHBACK_ON FLASHB_ON
  , LOG_MODE
  , OPEN_MODE
  , GUARD_STATUS GUARD
  , PROTECTION_MODE PROT_MODE
from v\$database;
prompt
prompt ######################################################################################################################
prompt # Current SCN - This value on the primary and standby sites where real time apply is in place should be nearly the same
prompt ######################################################################################################################
select DB_UNIQUE_NAME
  , SWITCHOVER_STATUS
  , CURRENT_SCN
from v\$database;
prompt
prompt ######################################################################################################################
prompt # Incarnation Information / Incarnation Destination Configuration                                                    #
prompt ######################################################################################################################
set heading on feedback on
select INCARNATION# INC#
  , RESETLOGS_CHANGE# RS_CHANGE#
  , RESETLOGS_TIME
  , PRIOR_RESETLOGS_CHANGE# PRIOR_RS_CHANGE#
  , STATUS
  , FLASHBACK_DATABASE_ALLOWED FB_OK
from v\$database_incarnation;
prompt
prompt ######################################################################################################################
prompt # Archive Destination Configuration / Current Archive Locations                                                      #
prompt ######################################################################################################################
column host_name format a30 tru
column version format a10 tru
select INSTANCE_NAME
  , HOST_NAME
  , VERSION
  , ARCHIVER
from v\$instance;
prompt
prompt ######################################################################################################################
prompt # #
prompt ######################################################################################################################
column destination format a35 wrap
column process format a7
column archiver format a8
column dest_id format 99999999
select DEST_ID
  , DESTINATION
  , STATUS
  , TARGET
  , ARCHIVER
  , PROCESS
  , REGISTER
  , TRANSMIT_MODE
from v\$archive_dest
where DESTINATION IS NOT NULL;
prompt
prompt ######################################################################################################################
prompt # #
prompt ######################################################################################################################
column name format a22
column value format a200
select NAME, VALUE
from v\$parameter
where NAME like 'log_archive_dest%'
and upper(VALUE) like 'SERVICE%';
prompt
prompt ######################################################################################################################
prompt # Archive Destination Errors                                                                                         #
prompt ######################################################################################################################
column error format a100 tru
col DB_UNIQUE_NAME for a14
select DEST_ID
  , TARGET
  , DB_UNIQUE_NAME
  , TYPE
  , STATUS
  , VERIFY
  , TRANSMIT_MODE
  , NAME_SPACE
  , REOPEN_SECS
  , DELAY_MINS
  , ERROR
from v\$archive_dest
where DESTINATION IS NOT NULL;
prompt
prompt ######################################################################################################################
prompt # #
prompt ######################################################################################################################
column message format a100
select MESSAGE
  , TIMESTAMP
from v\$dataguard_status
where SEVERITY in ('Error','Fatal')
order by TIMESTAMP;
prompt
prompt ######################################################################################################################
prompt # The size of the standby redo logs must match exactly the size on the online redo logs Redo Log configuration
prompt # The size of the standby redo logs must match exactly the size on the online redo logs Data Guard Redo Log Configuration
prompt # The Standby Redo Log MUST has at least 1 ( ONE ) Group More then ONLINE Redo Logs
prompt ######################################################################################################################
select GROUP# STANDBY_GROUP#
  , THREAD#
  , SEQUENCE#
  , BYTES
  , USED
  , ARCHIVED
  , STATUS
from v\$standby_log
order by GROUP#, THREAD#;
prompt
prompt ######################################################################################################################
prompt # #
prompt ######################################################################################################################
select GROUP# ONLINE_GROUP#
  , THREAD#
  , SEQUENCE#
  , BYTES
  , ARCHIVED
  , STATUS
from v\$log
order by GROUP#, THREAD#;
prompt ######################################################################################################################
prompt # Data Guard Parameters / Data Guard Related Parameters                                                              #
prompt ######################################################################################################################
set heading on feedback on
column name format a30
column value format a100
select NAME
  , VALUE
from v\$parameter
where NAME IN ('db_unique_name','cluster_database','dg_broker_start','dg_broker_config_file1','dg_broker_config_file2','fal_client','fal_server','log_archive_config','log_archive_trace','log_archive_max_processes','archive_lag_target','remote_login_password_file','redo_transport_user')
order by name;
prompt
prompt ######################################################################################################################
prompt # Managed Recovery State / Data Guard Apply Status                                                                   #
prompt ######################################################################################################################
set heading on feedback on
column client_pid format a10
select PROCESS
  , STATUS
  , CLIENT_PROCESS
  , CLIENT_PID
  , THREAD#
  , SEQUENCE#
  , BLOCK#
  , ACTIVE_AGENTS
  , KNOWN_AGENTS
from v\$managed_standby
order by CLIENT_PROCESS, THREAD#, SEQUENCE#;
prompt
prompt ######################################################################################################################
prompt # #
prompt ######################################################################################################################
select PROCESS
  , STATUS
  , CLIENT_PROCESS
  , CLIENT_PID
  , THREAD#
  , SEQUENCE#
  , BLOCK#
--  , ACTIVE_AGENTS
  , KNOWN_AGENTS
from v\$managed_standby
order by CLIENT_PROCESS, THREAD#, SEQUENCE#;
prompt
prompt ######################################################################################################################
prompt # #
prompt ######################################################################################################################
select PROCESS
  , STATUS
  , CLIENT_PROCESS
  , CLIENT_PID
  , THREAD#
  , SEQUENCE#
  , BLOCK#
  , ACTIVE_AGENTS
  , KNOWN_AGENTS
from v\$managed_standby
order by CLIENT_PROCESS, THREAD#, SEQUENCE#;
prompt
prompt ######################################################################################################################
prompt # Data Guard Apply Lag                                                                                               #
prompt ######################################################################################################################
set heading on feedback on
column name format a12
column lag_time format a20
column datum_time format a20
column time_computed format a20
select NAME
  , VALUE LAG_TIME
  , DATUM_TIME
  , TIME_COMPUTED
from V\$DATAGUARD_STATS
where name like 'apply lag';
prompt
prompt ######################################################################################################################
prompt # If there is a lag remove the comment for the select below                                                          #
prompt ######################################################################################################################
select * FROM V\$STANDBY_EVENT_HISTOGRAM WHERE NAME = 'apply lag'  AND COUNT > 0;
prompt
prompt ######################################################################################################################
prompt # Data Guard Gap Problems                                                                                            #
prompt ######################################################################################################################
set heading on feedback on
select * from v\$archive_gap;
prompt
prompt ######################################################################################################################
prompt # Data Guard Errors in the Last Day                                                                                  #
prompt ######################################################################################################################
set heading on feedback on
col message for a100
select TIMESTAMP
  , SEVERITY
  , ERROR_CODE
  , MESSAGE
from v\$dataguard_status
where timestamp > systimestamp -1/24;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY ALL SQL STATEMENTS
#########################################################################################################
#
# 11g
function func_dba_11_094_a()
{
  echo ""
}
# 12c
function func_dba_12_094_a()
{
  echo ""
}
# 18c
function func_dba_18_094_a()
{
  echo ""
}
# 19c
function func_dba_19_094_a()
{
  echo ""
}
# 20c
function func_dba_20_094_a()
{
  echo ""
}
#
function func_dba_094_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 5000 timing on head off verify off feedback on echo off colsep '|'
select /*+ CHOOSE*/
'Session Id...........................: ' || s.sid,
'Serial Num...........................: ' || s.serial#,
'User Name............................: ' || s.username,
'SQL ID...............................: ' || s.sql_id,
'Session Status.......................: ' || s.status,
'Client Process Id on Client Machine..: ' || '*' || s.process || '*' Client,
'Server Process ID....................: ' || p.spid Server,
'Sql_Address..........................: ' || s.sql_address,
'Sql_hash_value.......................: ' || s.sql_hash_value,
'Schema Name..........................: ' || s.SCHEMANAME,
'Program..............................: ' || s.program,
'Module...............................: ' || s.module,
'Action...............................: ' || s.action,
'Terminal.............................: ' || s.terminal,
'Client Machine.......................: ' || s.machine,
'LAST_CALL_ET.........................: ' || s.last_call_et,
'S.LAST_CALL_ET/3600..................: ' || s.last_call_et/3600
from v\$session s, v\$process p
where p.addr = s.paddr;
-- and s.sid = nvl('${ORACLE_SID}', s.sid);
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 5000 timing on head off verify off feedback on echo off colsep '|'
select /*+ CHOOSE*/
'Session Id...........................: ' || s.sid,
'Serial Num...........................: ' || s.serial#,
'User Name............................: ' || s.username,
'SQL ID...............................: ' || s.sql_id,
'Session Status.......................: ' || s.status,
'Client Process Id on Client Machine..: ' || '*' || s.process || '*' Client,
'Server Process ID....................: ' || p.spid Server,
'Sql_Address..........................: ' || s.sql_address,
'Sql_hash_value.......................: ' || s.sql_hash_value,
'Schema Name..........................: ' || s.SCHEMANAME,
'Program..............................: ' || s.program,
'Module...............................: ' || s.module,
'Action...............................: ' || s.action,
'Terminal.............................: ' || s.terminal,
'Client Machine.......................: ' || s.machine,
'LAST_CALL_ET.........................: ' || s.last_call_et,
'S.LAST_CALL_ET/3600..................: ' || s.last_call_et/3600
from v\$session s, v\$process p
where p.addr = s.paddr;
-- and s.sid = nvl('${ORACLE_SID}', s.sid);
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY ALL SQL STATEMENTS
#########################################################################################################
#
# 11g
function func_dba_11_094_b()
{
  echo ""
}
# 12c
function func_dba_12_094_b()
{
  echo ""
}
# 18c
function func_dba_18_094_b()
{
  echo ""
}
# 19c
function func_dba_19_094_b()
{
  echo ""
}
# 20c
function func_dba_20_094_b()
{
  echo ""
}
#
function func_dba_094_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 80 timing on head off verify off feedback on echo off colsep '|'
select /*+ CHOOSE*/
'Session Id...........................: ' || s.sid,
'Serial Num...........................: ' || s.serial#,
'User Name............................: ' || s.username,
'SQL ID...............................: ' || s.sql_id,
'Session Status.......................: ' || s.status,
'Client Process Id on Client Machine..: ' || '*' || s.process || '*' Client,
'Server Process ID....................: ' || p.spid Server,
'SQL_Address..........................: ' || s.sql_address,
'SQL_hash_value.......................: ' || s.sql_hash_value,
'Schema Name..........................: ' || s.SCHEMANAME,
'Program..............................: ' || s.program,
'Module...............................: ' || s.module,
'Action...............................: ' || s.action,
'Terminal.............................: ' || s.terminal,
'Client Machine.......................: ' || s.machine,
'LAST_CALL_ET.........................: ' || s.last_call_et,
'S.LAST_CALL_ET/3600..................: ' || s.last_call_et/3600
from v\$session s, v\$process p
where p.addr = s.paddr;
-- and s.sid = nvl('${ORACLE_SID}', s.sid);
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 80 timing on head off verify off feedback on echo off colsep '|'
select /*+ CHOOSE*/
'Session Id...........................: ' || s.sid,
'Serial Num...........................: ' || s.serial#,
'User Name............................: ' || s.username,
'SQL ID...............................: ' || s.sql_id,
'Session Status.......................: ' || s.status,
'Client Process Id on Client Machine..: ' || '*' || s.process || '*' Client,
'Server Process ID....................: ' || p.spid Server,
'SQL_Address..........................: ' || s.sql_address,
'SQL_hash_value.......................: ' || s.sql_hash_value,
'Schema Name..........................: ' || s.SCHEMANAME,
'Program..............................: ' || s.program,
'Module...............................: ' || s.module,
'Action...............................: ' || s.action,
'Terminal.............................: ' || s.terminal,
'Client Machine.......................: ' || s.machine,
'LAST_CALL_ET.........................: ' || s.last_call_et,
'S.LAST_CALL_ET/3600..................: ' || s.last_call_et/3600
from v\$session s, v\$process p
where p.addr = s.paddr;
-- and s.sid = nvl('${ORACLE_SID}', s.sid);
quit;
EOF
fi
}
#
#########################################################################################################
# CLONE USER COMMANDS [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_095_a()
{
  echo ""
}
# 12c
function func_dba_12_095_a()
{
  echo ""
}
# 18c
function func_dba_18_095_a()
{
  echo ""
}
# 19c
function func_dba_19_095_a()
{
  echo ""
}
# 20c
function func_dba_20_095_a()
{
  echo ""
}
#
function func_dba_095_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col username for a30
col profile for a20
select username
  , account_status
  , default_tablespace
  , temporary_tablespace
  , profile
from dba_users
where username not in ('SYS','SYSTEM','XDB','XS$NULL','ANONYMOUS')
order by 1,2;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col username for a30
col profile for a30
select username
  , account_status
  , default_tablespace
  , temporary_tablespace
  , profile
from dba_users
where username not in ('SYS','SYSTEM','XDB','XS$NULL','ANONYMOUS')
order by 1,2;
quit;
EOF
fi
}
#
#########################################################################################################
# CLONE USER COMMANDS [ @ ]
#########################################################################################################
#
# 11g
function func_dba_11_095_b()
{
  echo ""
}
# 12c
function func_dba_12_095_b()
{
  echo ""
}
# 18c
function func_dba_18_095_b()
{
  echo ""
}
# 19c
function func_dba_19_095_b()
{
  echo ""
}
# 20c
function func_dba_20_095_b()
{
  echo ""
}
#
function func_dba_095_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col username for a30
col profile for a20
select username
  , account_status
  , default_tablespace
  , temporary_tablespace
  , profile
from dba_users
where username not in ('SYS','SYSTEM','XDB','XS$NULL','ANONYMOUS')
order by 1,2;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col username for a30
col profile for a30
select username
  , account_status
  , default_tablespace
  , temporary_tablespace
  , profile
from dba_users
where username not in ('SYS','SYSTEM','XDB','XS$NULL','ANONYMOUS')
order by 1,2;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY ALL INFOS ABOUT SYSAUX
#########################################################################################################
#
# 11g
function func_dba_11_096()
{
  echo ""
}
# 12c
function func_dba_12_096()
{
  echo ""
}
# 18c
function func_dba_18_096()
{
  echo ""
}
# 19c
function func_dba_19_096()
{
  echo ""
}
# 20c
function func_dba_20_096()
{
  echo ""
}
#
function func_dba_096()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|' trim on trims on numformat 999999999999999 heading on feedback on
prompt ##############################################################
prompt # AWR Retention Time                                         #
prompt ##############################################################
select a.dbid
  , c.name
  , b.instance_name
  , a.retention
from DBA_HIST_WR_CONTROL a, v\$instance b, v\$database c
where a.dbid = c.dbid (+);
prompt
prompt ##############################################################
prompt # Statistics Retention History                               #
prompt ##############################################################
select dbms_stats.get_stats_history_retention from dual;
prompt
prompt ##############################################################
prompt # Statistics Availability History                            #
prompt ##############################################################
select dbms_stats.get_stats_history_availability from dual;
prompt
prompt ##############################################################
prompt # Duration Time of SnapShots                                 #
prompt ##############################################################
col "Start Time" for a25
col "End Time" for a25
select min(snap_id) as "First Snap ID"
  , max(snap_id) as "Last Snap ID"
  , min(to_char(begin_interval_time,'DD/MM/YYYY HH24:MI:SS')) as "Start Time"
  , max(to_char(end_interval_time,'DD/MM/YYYY HH24:MI:SS')) as "End Time"
from dba_hist_snapshot;
prompt
prompt ##############################################################
prompt # Infos About SYSAUX TBS                                     #
prompt ##############################################################
COLUMN "Item" FORMAT A25
COLUMN "Space Used (GB)" FORMAT 999.999
COLUMN "Schema" FORMAT A25
COLUMN "Move Procedure" FORMAT A50
select occupant_name "Item"
  , space_usage_kbytes/1048576 "Space Used (GB)"
  , schema_name "Schema"
  , move_procedure "Move Procedure"
FROM gv_\$sysaux_occupants
ORDER BY 1;
prompt
prompt ##############################################################
prompt # Controlling the Size and Age of the OS Audit Trail         #
prompt ##############################################################
COLUMN parameter_name FORMAT A30
COLUMN parameter_value FORMAT A20
COLUMN audit_trail FORMAT A20
select * FROM dba_audit_mgmt_config_params
WHERE parameter_name LIKE 'AUDIT FILE MAX%';
quit;
EOF
}
#
#########################################################################################################
# VERIFY ALL INFOS ABOUT I/O & LATENCY
#########################################################################################################
#
# 11g
function func_dba_11_097()
{
  echo ""
}
# 12c
function func_dba_12_097()
{
  echo ""
}
# 18c
function func_dba_18_097()
{
  echo ""
}
# 19c
function func_dba_19_097()
{
  echo ""
}
# 20c
function func_dba_20_097()
{
  echo ""
}
#
function func_dba_097()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on numwidth 20 colsep '|' trim on trims on numformat 999999999999999 heading on feedback on
prompt ##############################################################
prompt # #
prompt ##############################################################
col name for a70
select to_char(sn.END_INTERVAL_TIME,'dd/mm/YYYY HH24:MI:SS') "End snapshot time"
  , sum(after.PHYRDS+after.PHYWRTS-before.PHYWRTS-before.PHYRDS) "number of IOs"
  , trunc(10*sum(after.READTIM+after.WRITETIM-before.WRITETIM-before.READTIM)/sum(1+after.PHYRDS+after.PHYWRTS-before.PHYWRTS-before.PHYRDS)) "ave IO time (ms)"
  , trunc((select value from v\$parameter where name='db_block_size')*sum(after.PHYBLKRD+after.PHYBLKWRT-before.PHYBLKRD-before.PHYBLKWRT)/sum(1+after.PHYRDS+after.PHYWRTS-before.PHYWRTS-before.PHYRDS)) "ave IO size (bytes)"
from DBA_HIST_FILESTATXS before
  , DBA_HIST_FILESTATXS after
  , DBA_HIST_SNAPSHOT sn
where after.file# = before.file#
and after.snap_id = before.snap_id+1
and before.instance_number = after.instance_number
and after.snap_id = sn.snap_id
and after.instance_number = sn.instance_number
group by to_char(sn.END_INTERVAL_TIME,'dd/mm/YYYY HH24:MI:SS')
order by to_char(sn.END_INTERVAL_TIME,'dd/mm/YYYY HH24:MI:SS');
prompt
prompt ##############################################################
prompt # Physical Reads and Writes                                  #
prompt ##############################################################
col name for a100
select NAME
  , PHYRDS "Physical Reads"
  , round((PHYRDS / PD.PHYS_READS)*100,2) "Read %"
  , PHYWRTS "Physical Writes"
  , round(PHYWRTS * 100 / PD.PHYS_WRTS,2) "Write %"
  , fs.PHYBLKRD+FS.PHYBLKWRT "Total Block I/O's"
from (select sum(PHYRDS) PHYS_READS, sum(PHYWRTS) PHYS_WRTS from v\$filestat) pd
  , v\$datafile df
  , v\$filestat fs
where df.FILE# = fs.FILE#
order by fs.PHYBLKRD+fs.PHYBLKWRT desc;
prompt
prompt ##############################################################
prompt #  #
prompt ##############################################################
col event for a70
col total_waits for a15
col total_timeouts for a15
col time_waited for a15
select EVENT
  , to_char(TOTAL_WAITS) as TOTAL_WAITS
  , to_char(TOTAL_TIMEOUTS) as TOTAL_TIMEOUTS
  , to_char(TIME_WAITED) as TIME_WAITED
  , round(AVERAGE_WAIT,2) "Average Wait"
from v\$system_event
order by event, to_char(TOTAL_WAITS);
prompt
prompt ##############################################################
prompt # Datafiles Sync Status                                      #
prompt ##############################################################
col name format a100
select distinct name
  , asynch_io
from v\$datafile d
inner join v\$iostat_file f on d.file# = f.file_no;
prompt
-- SET SERVEROUTPUT ON
-- DECLARE
  -- lat  INTEGER;
  -- iops INTEGER;
  -- mbps INTEGER;
-- BEGIN
  -- DBMS_RESOURCE_MANAGER.CALIBRATE_IO(
    -- 1    /* # of disks */
    -- , 10   /* maximum tolerable latency in milliseconds */
    -- , iops /* I/O rate per second */
    -- , mbps /* throughput, MB per second */
    -- , lat  /* actual latency in milliseconds */
   -- );
  -- DBMS_OUTPUT.PUT_LINE('max_iops = ' || iops);
  -- DBMS_OUTPUT.PUT_LINE('latency  = ' || lat);
  -- DBMS_OUTPUT.PUT_LINE('max_mbps = ' || mbps);
-- END;
-- /
prompt ##############################################################
prompt # Datafiles Size Reads                                       #
prompt ##############################################################
col name for a100
select d.name
  , f.file_no
  , f.small_read_megabytes
  , f.small_read_reqs
  , f.large_read_megabytes
--  , f.large_read_reqs
from v\$iostat_file f
inner join v\$datafile d on f.file_no = d.file#;
quit;
EOF
}
#
#########################################################################################################
# VERIFY MAIN TOP WAIT EVENTS PER WEEK
#########################################################################################################
#
# 11g
function func_dba_11_098()
{
  echo ""
}
# 12c
function func_dba_12_098()
{
  echo ""
}
# 18c
function func_dba_18_098()
{
  echo ""
}
# 19c
function func_dba_19_098()
{
  echo ""
}
# 20c
function func_dba_20_098()
{
  echo ""
}
#
function func_dba_098()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
-- Auslesen Event Historie (cursor: mutex S) - je Report
set pages 700 lines 700 timing on numwidth 20 colsep '|' trim on trims on numformat 999999999999999 heading on feedback on
col begin_interval_time format a20
col end_interval_time format a20
col AVG_WAIT_TIME_MSEC for a30
col EVENT_NAME for a40
col total_waits for a15
col total_waited_sec for a15
col KW for a5
col AVG_WAIT_TIME_MSEC for 999999999,99
select dhs.snap_id
  , to_char(dhs.begin_interval_time,'iw') kw
  , to_char(dhs.begin_interval_time,'dd/mm/yyyy hh24:mi:ss') begin_interval_time
  , to_char(dhs.end_interval_time,'dd/mm/yyyy hh24:mi:ss') end_interval_time
  , to_char(event_name) event_name
  , to_char(total_waits) total_waits
  , to_char(round(total_waited_micro/1000000)) as total_waited_sec
  , decode(total_waits,0,0,round(total_waited_micro/total_waits/1000,2)) avg_wait_time_msec
FROM (select snap_id
        , event_name
        , total_waits - lag( total_waits) OVER(ORDER BY snap_id) AS total_waits
        , time_waited_micro - lag (time_waited_micro) over (ORDER BY snap_id) as total_waited_micro
      FROM dba_hist_system_event
      WHERE event_name in ('db file sequential read','direct path read','direct path read temp','direct path sync','direct path write','direct path write temp','log file sync','db file scattered read','cursor: mutex S')
      ORDER BY snap_id) details,
dba_hist_snapshot dhs
WHERE dhs.snap_id = details.snap_id
and total_waits > 0
-- and begin_interval_time > sysdate - 12/24
ORDER BY dhs.snap_id;
quit;
EOF
}
#
#########################################################################################################
# VERIFY SCHEMAS SIZE
#########################################################################################################
#
# 11g
function func_dba_11_099_a()
{
  echo ""
}
# 12c
function func_dba_12_099_a()
{
  echo ""
}
# 18c
function func_dba_18_099_a()
{
  echo ""
}
# 19c
function func_dba_19_099_a()
{
  echo ""
}
# 20c
function func_dba_20_099_a()
{
  echo ""
}
#
function func_dba_099_a()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt ##############################################################
prompt # SIZE BY OWNER                                              #
prompt ##############################################################
col size_mb for a20
col size_gb for a20
col size_tb for a20
col owner for a30
select owner
  , to_char(sum(bytes)/1024/1024,'999G999G999D999') as SIZE_MB
  , to_char(sum(bytes)/1024/1024/1024,'999G999G999D999') as SIZE_GB
  , to_char(sum(bytes)/1024/1024/1024/1024,'999G999G999D999') as SIZE_TB
From dba_segments
group by owner
order by owner;
prompt
prompt ##############################################################
prompt # VERIFY LARGESTS OBJECTS
prompt ##############################################################
col owner format a30
col segment_name format a50
col segment_type format a20
col tablespace_name format a20
col mb format 999,999,999,999
col gb format 999,999,999,999
col tb format 999,999,999,999
select owner
  , segment_name
  , segment_type
  , tablespace_name
  , mb
  , gb
  , tb
from (select owner
        , segment_name
        , segment_type
        , tablespace_name
        , bytes/1024/1024 "MB"
        , bytes/1024/1024/1024 "GB"
        , bytes/1024/1024/1024/1024 "TB"
      from dba_segments
      order by bytes desc)
where rownum < 26;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 500 lines 700 timing on colsep '|'
prompt ##############################################################
prompt # SIZE BY OWNER                                              #
prompt ##############################################################
col size_mb for a20
col size_gb for a20
col size_tb for a20
col owner for a30
select owner
  , to_char(sum(bytes)/1024/1024,'999G999G999D999') as SIZE_MB
  , to_char(sum(bytes)/1024/1024/1024,'999G999G999D999') as SIZE_GB
  , to_char(sum(bytes)/1024/1024/1024/1024,'999G999G999D999') as SIZE_TB
From dba_segments
group by owner
order by owner;
prompt ##############################################################
prompt # VERIFY LARGESTS OBJECTS
prompt ##############################################################
col owner format a30
col segment_name format a50
col segment_type format a20
col tablespace_name format a20
col mb format 999,999,999,999
col gb format 999,999,999,999
col tb format 999,999,999,999
select owner
  , segment_name
  , segment_type
  , tablespace_name
  , mb
  , gb
  , tb
from (select owner
        , segment_name
        , segment_type
        , tablespace_name
        , bytes/1024/1024 "MB"
        , bytes/1024/1024/1024 "GB"
        , bytes/1024/1024/1024/1024 "TB"
      from dba_segments
      order by bytes desc)
where rownum < 26;
quit;
EOF
fi
}
#
#########################################################################################################
# VERIFY SCHEMAS SIZE
#########################################################################################################
#
# 11g
function func_dba_11_099_b()
{
  echo ""
}
# 12c
function func_dba_12_099_b()
{
  echo ""
}
# 18c
function func_dba_18_099_b()
{
  echo ""
}
# 19c
function func_dba_19_099_b()
{
  echo ""
}
# 20c
function func_dba_20_099_b()
{
  echo ""
}
#
function func_dba_099_b()
{
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
for PDBS in ${PDB}
do
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PDBS};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PDBS}' ORDER BY CON_ID, NAME;
prompt ##############################################################
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt
prompt ##############################################################
prompt # SIZE BY OWNER                                              #
prompt ##############################################################
col size_mb for a20
col size_gb for a20
col size_tb for a20
col owner for a30
select owner
  , to_char(sum(bytes)/1024/1024,'999G999G999D999') as SIZE_MB
  , to_char(sum(bytes)/1024/1024/1024,'999G999G999D999') as SIZE_GB
  , to_char(sum(bytes)/1024/1024/1024/1024,'999G999G999D999') as SIZE_TB
From dba_segments
group by owner
order by owner;
prompt
prompt ##############################################################
prompt # VERIFY LARGESTS OBJECTS
prompt ##############################################################
col owner format a30
col segment_name format a50
col segment_type format a20
col tablespace_name format a20
col mb format 999,999,999,999
col gb format 999,999,999,999
col tb format 999,999,999,999
select owner
  , segment_name
  , segment_type
  , tablespace_name
  , mb
  , gb
  , tb
from (select owner
        , segment_name
        , segment_type
        , tablespace_name
        , bytes/1024/1024 "MB"
        , bytes/1024/1024/1024 "GB"
        , bytes/1024/1024/1024/1024 "TB"
      from dba_segments
      order by bytes desc)
where rownum < 26;
quit;
EOF
done
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 500 lines 700 timing on colsep '|'
prompt ##############################################################
prompt # SIZE BY OWNER                                              #
prompt ##############################################################
col size_mb for a20
col size_gb for a20
col size_tb for a20
col owner for a30
select owner
  , to_char(sum(bytes)/1024/1024,'999G999G999D999') as SIZE_MB
  , to_char(sum(bytes)/1024/1024/1024,'999G999G999D999') as SIZE_GB
  , to_char(sum(bytes)/1024/1024/1024/1024,'999G999G999D999') as SIZE_TB
From dba_segments
group by owner
order by owner;
prompt ##############################################################
prompt # VERIFY LARGESTS OBJECTS
prompt ##############################################################
col owner format a30
col segment_name format a50
col segment_type format a20
col tablespace_name format a20
col mb format 999,999,999,999
col gb format 999,999,999,999
col tb format 999,999,999,999
select owner
  , segment_name
  , segment_type
  , tablespace_name
  , mb
  , gb
  , tb
from (select owner
        , segment_name
        , segment_type
        , tablespace_name
        , bytes/1024/1024 "MB"
        , bytes/1024/1024/1024 "GB"
        , bytes/1024/1024/1024/1024 "TB"
      from dba_segments
      order by bytes desc)
where rownum < 26;
quit;
EOF
fi
}
#
#########################################################################################################
# Verify Failed Login Attempt
#########################################################################################################
#
function func_verify_login_attempt()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col username for a15
col userhost for a13
col timestamp for a39
col terminal for a23
select username
  , userhost
  , terminal
  , to_char(timestamp,'DD/MM/YYYY HH24:MI:SS' ) "TIMESTAMP"
  , CASE when returncode=1017 then 'INVALID-attempt' when returncode = 28000 then 'account locked' end "FAILED LOGIN ACTION"
FROM dba_audit_session
where timestamp > sysdate-1/9
and returncode in (1017,28000);
quit;
EOF
}
#
#########################################################################################################
# GoldenGate Validate Database
#########################################################################################################
#
function func_ogg_001()
{
local schema=${1}
sqlplus -S /nolog <<EOF
conn / as sysdba
--|#########################################################################
--|# Program: Validation_all.sql
--|#  Author: Gilson Martins (gilson.pmartins@gmail.com | skype: gilson.pmartins)
--|# Version: 1.0
--|#
--|# Description: Verify many information to validated schema for migration.
--|#
--|# History:
--|#   08/03/2014 - Released version 1.0 as GPL.
--|#   17/03/2014 - Added log file sysout date.
--|#   30/03/2014 - Added check: DEGREE table and RECOMPILE ivalid objects.
--|#   31/03/2014 - Change from table query to remote table using dblink.
--|#   01/04/2014 - Added schema size verification.
--|#   01/04/2014 - Added script to generate "PARALLEL(DEGREE 1)" for tables.
--|#   01/04/2014 - Added LOGGING table verification.
--|#   01/04/2014 - Added script to generate "PARALLEL(DEGREE 1)" for indexes.
--|#   03/04/2014 - Added script table and index size
--|#
--|# Usage: Validation_all
--|#
--|#########################################################################
set echo off feed off
alter session set nls_date_format='DD/MM/YYYY HH24:Mi:SS';
alter session set nls_language=american;
column v_date new_value file_date noprint;
select to_char(sysdate, 'dd/mm/yyyy') v_date from dual;
set verify off pages 1000 lines 200;
column owner format a30;
select to_char(sysdate, 'dd/mm/yyyy hh24:mi:ss') TIME from dual;
PROMPT
prompt ##############################################################
PROMPT # OWNER: '${schema}'
prompt ##############################################################
column "Size SOURCE" format a20;
column "TARGET" format a20;
select distinct a.owner
  , (select trunc(sum(bytes/1024/1024/1024),2) || ' GB' from dba_segments@SOURCE_DB where owner = a.owner) "Size SOURCE"
  , (select trunc(sum(bytes/1024/1024/1024),2) || ' GB' from dba_segments where owner = a.owner) "TARGET"
from dba_tables@SOURCE_DB a
where a.owner = '${schema}'
group by owner;
PROMPT
select distinct a.owner ||' --> TABLES' owner
  , (select trunc(sum(bytes/1024/1024/1024),2)||' GB' "Size SOURCE" from dba_segments@SOURCE_DB where owner = a.owner and segment_type like '%TABLE%') "Size SOURCE"
  , (select trunc(sum(bytes/1024/1024/1024),2)||' GB' "TARGET" from dba_segments where owner = a.owner and segment_type like '%TABLE%') "TARGET"
from dba_tables@SOURCE_DB a
where a.owner = '${schema}'
group by owner;
set head off
select distinct a.owner ||' --> INDEXES' owner
  , (select trunc(sum(bytes/1024/1024/1024),2)||' GB' "Size SOURCE" from dba_segments@SOURCE_DB where owner = a.owner and segment_type like '%INDEX%') "Size SOURCE"
  , (select trunc(sum(bytes/1024/1024/1024),2)||' GB' "TARGET" from dba_segments where owner = a.owner and segment_type like '%INDEX%') "TARGET"
from dba_tables@SOURCE_DB a
where a.owner = '${schema}'
group by owner;
set head on
set feed on
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_OBJECTS / OBJECT_TYPE
prompt ##############################################################
select  distinct a.owner
  , a.object_type
  , status
  , (select count(*) from dba_objects@SOURCE_DB where owner = a.owner and object_type = a.object_type) "Qtd SOURCE"
  , (select count(*) from dba_objects where owner = a.owner and object_type = a.object_type) "Qtd TARGET"
from dba_objects@SOURCE_DB a
where a.owner = '${schema}'
order by owner,object_type;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_OBJECTS --> STATUS: INVALID
prompt ##############################################################
set feed off
select count(*)
from dba_objects
where owner = '${schema}'
and status = 'INVALID'
and object_type not like '%BODY%';
set feed on
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_CONSTRAINTS / CONSTRAINT_TYPE
prompt ##############################################################
select distinct a.owner
  , a.constraint_type
  , a.status
  , (select count(*) from dba_constraints@SOURCE_DB where owner = a.owner and constraint_type = a.constraint_type) "Qtd SOURCE"
  , (select count(*) from dba_constraints where owner = a.owner and constraint_type = a.constraint_type) "Qtd TARGET"
from dba_constraints@SOURCE_DB a
where a.owner = '${schema}'
group by owner, constraint_type, status;
PROMPT
prompt ##############################################################
PROMPT # STATUS --> SOURCE
prompt ##############################################################
select owner
  , CONSTRAINT_TYPE
  , status
  , validated
  , count(*)
from dba_constraints@SOURCE_DB 
where owner = '${schema}'
group by owner, status, CONSTRAINT_TYPE, validated
order by CONSTRAINT_TYPE;
PROMPT
prompt ##############################################################
PROMPT # STATUS --> TARGET
prompt ##############################################################
select owner
  , CONSTRAINT_TYPE
  , status
  , validated
  , count(*) 
from dba_constraints where owner = '${schema}'
group by owner,status, CONSTRAINT_TYPE, validated
order by CONSTRAINT_TYPE;
PROMPT
select 'ALTER TABLE ' || '"' || owner ||'"' || '.' || '"' || table_name || '" COMPRESS FOR OLTP;' as "COMPREESS FOR OLTP :"
from dba_tables
where owner = '${schema}'
and COMPRESS_FOR <> 'OLTP';
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_INDEXES
prompt ##############################################################
select distinct a.owner
  , a.index_type
  , a.status
  , (select count(*) from dba_indexes@SOURCE_DB where owner = a.owner and index_type = a.index_type) "QTD SOURCE"
  , (select count(*) from dba_indexes where owner = a.owner and index_type = a.index_type) "QTD TARGET"
from dba_indexes a
where owner = '${schema}'
group by owner, index_type, status
order by index_type;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_SYNONYMS
prompt ##############################################################
select a.owner
  , a.table_owner
  , (select count(*) from dba_synonyms@SOURCE_DB where owner = a.owner and table_owner = a.table_owner) "QTD SOURCE"
  , (select count(*) from dba_synonyms where owner = a.owner and table_owner = a.table_owner) "QTD TARGET"
from dba_synonyms a
where table_owner = '${schema}'
group by owner,table_owner
order by owner, 3;
begin
  DBMS_METADATA.SET_TRANSFORM_PARAM ( DBMS_METADATA.SESSION_TRANSFORM, 'SEGMENT_ATTRIBUTES', true );
  DBMS_METADATA.SET_TRANSFORM_PARAM ( DBMS_METADATA.SESSION_TRANSFORM, 'STORAGE', false );
  DBMS_METADATA.SET_TRANSFORM_PARAM ( DBMS_METADATA.SESSION_TRANSFORM, 'TABLESPACE', true );
  DBMS_METADATA.SET_TRANSFORM_PARAM ( DBMS_METADATA.SESSION_TRANSFORM, 'SQLTERMINATOR', true );
  DBMS_METADATA.SET_TRANSFORM_PARAM ( DBMS_METADATA.SESSION_TRANSFORM, 'PRETTY', true );
  DBMS_METADATA.SET_TRANSFORM_PARAM ( DBMS_METADATA.SESSION_TRANSFORM, 'CONSTRAINTS_AS_ALTER', true );
end;
/
SET LONG 200000000
SET PAGES 5000 LIN 4000 TRIMSPOO ON
col SYNONYMS for a125
prompt
prompt ##############################################################
PROMPT # OWNER SYNONYMS
prompt ##############################################################
select 'CREATE OR REPLACE SYNONYM "' || OWNER ||'"' || '.' || '"' || SYNONYM_NAME || '"' || ' FOR ' || '"' ||TABLE_OWNER||'"' || '.' || '"' ||SYNONYM_NAME|| '"' || ';' AS SYNONYMS
from dba_synonyms@SOURCE_DB
where SYNONYM_NAME not in (select SYNONYM_NAME from dba_synonyms where TABLE_OWNER = '${schema}' and OWNER <> 'PUBLIC')
and TABLE_OWNER = '${schema}'
and OWNER <> 'PUBLIC';
prompt
prompt ##############################################################
PROMPT # PUBLIC SYNONYMS
prompt ##############################################################
select 'CREATE OR REPLACE PUBLIC SYNONYM '|| '"' || SYNONYM_NAME || '"' || ' FOR ' || '"' ||TABLE_OWNER||'"' || '.' || '"' ||SYNONYM_NAME|| '"' || ';' AS SYNONYMS
from dba_synonyms@SOURCE_DB
where SYNONYM_NAME not in (select SYNONYM_NAME from dba_synonyms where TABLE_OWNER = '${schema}' and owner = 'PUBLIC')
and TABLE_OWNER='${schema}'
and owner = 'PUBLIC';
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_TAB_PRIVS
prompt ##############################################################
select distinct a.owner
  , (select count(*) from dba_tab_privs@SOURCE_DB where owner = a.owner) "QTD SOURCE"
  , (select count(*) from dba_tab_privs where owner = a.owner) "QTD TARGET"
from dba_tab_privs@SOURCE_DB a
where owner = '${schema}';
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_ROLE_PRIVS
prompt ##############################################################
select distinct a.grantee
  , (select count(*) from dba_role_privs@SOURCE_DB where grantee = a.grantee) "QTD SOURCE"
  , (select count(*) from dba_role_privs where grantee = a.grantee) "QTD TARGET"
from dba_role_privs@SOURCE_DB a
where grantee = '${schema}';
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_TRIGGERS
prompt ##############################################################
PROMPT
prompt ##############################################################
PROMPT # STATUS --> SOURCE
prompt ##############################################################
select owner
  , status
  , count(*) 
from dba_triggers@SOURCE_DB 
where owner = '${schema}' 
group by status, owner;
quit;
EOF
}
#
#########################################################################################################
# GoldenGate Validate Database All
#########################################################################################################
#
function func_ogg_002()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set echo off
set feed off
col owner for a30
col validation for a30
alter session set nls_date_format='DD/MM/YYYY HH24:Mi:SS';
alter session set nls_language=american;
column v_date new_value file_date noprint;
select to_char(sysdate,'dd/mm/yyyy') v_date from dual;
set feed on
set serveroutput on;
PROMPT
select to_char(sysdate, 'dd/mm/yyyy hh24:mi:ss') TIME from dual;
PROMPT
set feed off
prompt ##############################################################
PROMPT # Validation: DBA_DIRECTORIES
prompt ##############################################################
set lines 700 pages 1000;
column directory_path format a50;
select 'DBA_DIRECTORIES' as "Validation"
  , (select count(*) from dba_directories@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_directories ) "QTD. TARGET"
from dual;
PROMPT
select *
from dba_directories
where DIRECTORY_NAME not in ( select DIRECTORY_NAME from dba_directories@SOURCE_DB);
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_TABLESPACES
prompt ##############################################################
select 'DBA_TABLESPACES' as "Validation"
  , (select count(*) from dba_tablespaces@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_tablespaces ) "QTD. TARGET"
from dual;
PROMPT
select tablespace_name "DIFERENCA DE TABLESPACES"
from dba_tablespaces@SOURCE_DB
where tablespace_name not in ( select tablespace_name from dba_tablespaces)
order by tablespace_name;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_PROFILES
prompt ##############################################################
column  profile format a25;
column  limit   format a25;
select  'DBA_PROFILES' as "Validation"
  , (select count(*) from dba_profiles@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_profiles ) "QTD. TARGET"
from dual;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_ROLES
prompt ##############################################################
select 'DBA_ROLES' as "Validation"
  , (select count(*) from dba_roles@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_roles ) "QTD. TARGET"
from dual;
PROMPT
select role "DIFERENCA DE ROLES ( DEFAULT )"
from dba_roles
where role not in ( select role from dba_roles@SOURCE_DB)
order by role;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_USERS
prompt ##############################################################
select 'DBA_USERS' as "Validation"
  , (select count(*) from dba_users@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_users ) "QTD. TARGET"
from dual;
PROMPT
set feed on;
select username "DIFERENCA DE USERS ( DEFAULT )"
from dba_users
where username not in ( select username from dba_users@SOURCE_DB)
order by username;
PROMPT
set feed on;
select username "DIFERENCA DE USERS ( MISSING )"
from dba_users@SOURCE_DB
where username not in ( select username from dba_users)
order by username;
set feed off;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_QUOTAS
prompt ##############################################################
column username format a40
select  'DBA_QUOTAS' as "Validation"
  , (select count(*) from dba_ts_quotas@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_ts_quotas ) "QTD. TARGET"
from dual;
PROMPT
set feed on;
select username, tablespace_name "QUOTAS TBS NAO EXISTE"
from dba_ts_quotas@SOURCE_DB
where username = username
and tablespace_name not in ( select tablespace_name from dba_ts_quotas)
order by username, tablespace_name;
set feed off;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_ROLE_PRIVS
prompt ##############################################################
select  'DBA_ROLE_PRIVS' as "Validation"
  , (select count(*) from dba_role_privs@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_role_privs ) "QTD. TARGET"
from dual;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_SYS_PRIVS
prompt ##############################################################
select 'DBA_SYS_PRIVS' as "Validation"
  , (select count(*) from dba_sys_privs@SOURCE_DB ) "QTD. SOURCE"
  , (select count(*) from dba_sys_privs ) "QTD. TARGET"
from dual;
PROMPT
set feed on;
select GRANTEE, PRIVILEGE
from DBA_SYS_PRIVS
where GRANTEE not in ( select GRANTEE from DBA_SYS_PRIVS@SOURCE_DB)
order by GRANTEE, PRIVILEGE;
set feed off;
PROMPT
prompt ##############################################################
PROMPT # Validation: DBA_DB_LINKS
prompt ##############################################################
PROMPT
prompt ##############################################################
PROMPT # STATUS --> SOURCE
prompt ##############################################################
column db_link format a20;
column host    format a20;
select * from dba_db_links@SOURCE_DB order by owner, db_link, username;
PROMPT
prompt ##############################################################
PROMPT # STATUS --> TARGET
prompt ##############################################################
select * from dba_db_links order by owner, db_link, username;
set feed on
quit;
EOF
}
#
#########################################################################################################
# GoldenGate Full Check of GoldenGate on Database
#########################################################################################################
#
function func_ogg_005()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
-- This script spools the output to a file named schemaCheckOracle.out 
-- Example of running the script:
-- Oracle Support document ID 1298562.1
-- sqlplus <userid>/<pw> @full-DB_CheckOracle.sql
-- 9-17-07  SGEORGE  - Added sequences 
-- 		             - Added reverse key index check
-- 3-24-08  SGEORGE  - Added average archive log size
--  		         - Added number of archive log switches by hour and day
-- 3-35-08  SGEORGE  - Added query for tables without PK/UK
--                   - and columns > 256k
-- 3-27-08  SGEORGE  - added schema name and total size of schema
-- 5-09-08  SGEORGE  - Added  exclude users list for all queries
--                   - not like ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS')
-- 9-29-08  SGEORGE  - Added set trimspool on per request.
-- 		             - Also added a check for compressed tables.
-- 1-19-11  SGEORGE  - Update query for Tables with no PK or UI and rowsize > 256K to 1M
-- 		             - Update query for Tables with rowsize > 512K to 2M
-- 		             - Updated query for Tables With Columns of UNSUPPORTED Datatypes to include ORDDICOM data type
-- 		             - Updated query for tables with compression enabled.
-- 2-23-11  SGEORGE  - Added query to check for Compressed Tablespaces.
--                   - Updated query to list Domain Indexes
--	                 - Updated comment on Add trandata issues.
-- 9-6-11   SGEORGE  - Updated query for copression and removed "COMPRESS_FOR" to make query compatable for Oracle 10.
-- 9-7-11   SGEORGE  - Added check for columns with Default values.  0 default values may cause replication problems
-- 9-27-11  SGEORGE  - Removed check for default not null columns - issue has been resolved in latest release
-- 11-15-11 SGEORGE  - Added check for deferred constraints.  Deferred constaints may cause ADD TRANDATA to select the 
--	                 - wrong column for logging. Use KEYCOLS for tables with deferred constaints.
-- 12-07-11 SGEORGE  - Added check for tables with NOLOGGING. Tables with the NOLOGGING option may cause problems  
--                   - downstream at the target.
--                   - fixed format on archive log summary to hh24
--		             - fixed various format issues
-- 05-06-14 SGEORGE  - Updated comments added new view for IE.
--		             - OGG database healthcheck for Integrated Extract and Integrated Replicat  (for 11.2.0.4 and 12.1 only ).
--                   - These scripts have been updated recently and are available for download under MOS note 1448324.1 
-- 11-03-14 SGEORGE  - Limitation - this script will not pick up user defined datatypes (UDTs) based on varrays and LOB's.
--                   - Please use the GoldenGate documentation for a complete listing of supported data types.
-- 04-29-15 SGEORGE  - Added comment about deferred constraints
-- 07-08-15 SGEORGE  - added query for IR and PK issue - Integrated Replicat does not support Transient Primary Key Updates 
--                   - on primary key constraints that have a non-unique index under them.
--
set null "NULL VALUE" feedback off heading on linesize 700 pagesize 9999 echo off verify off trimspool on numformat 99999999999999999999
col table_name for a40
col column_name for a40
col data_type for a40
col object_type for a40
col constraint_type_desc for a40
col Owner format a30
prompt ##############################################################
prompt # Most of the output relates to the Classic Capture configuration.  
prompt # If you are using Integrated Capture PLEASE see the new DBA view - DBA_GOLDENGATE_SUPPORT_MODE (listed below).
Prompt # IF using IE also please see health Check MOS Document ID 1448324.1
Prompt # Please be sure to read the Installing and Configuring Oracle GoldenGate for Oracle Database documentation for 
Prompt # a complete list of supported and non-supported data types.  
prompt ##############################################################
prompt
prompt ##############################################################
prompt # System Info:
prompt ##############################################################
select to_char(sysdate, 'MM/DD/YYYY HH24:MI:SS') "DateTime: " from dual;
prompt
prompt ##############################################################
select banner from v\$version;
prompt
prompt ##############################################################
col name for a12
select name
  , log_mode "LogMode"
  , supplemental_log_data_min "SupLog: Min"
  , supplemental_log_data_pk "PK"
  , supplemental_log_data_ui "UI"
  , force_logging "Forced"
  , supplemental_log_data_fk "FK"
  , supplemental_log_data_all "All"
  , to_char(created, 'MM/DD/YYYY HH24:MI:SS') "Created"
from v\$database;
prompt
prompt ##############################################################
select platform_name from v\$database;
prompt
prompt ##############################################################
prompt # Objects stored in Tablespaces with Compression are not supported in the current release of OGG
prompt ##############################################################
select TABLESPACE_NAME
  , DEF_TAB_COMPRESSION
from DBA_TABLESPACES
where 
DEF_TAB_COMPRESSION <> 'DISABLED';
prompt
prompt ##############################################################
prompt # Distinct Object Types and their Count By Schema:
prompt ##############################################################
col owner for a30
SELECT owner
  , object_type
  , count(*) total
FROM all_objects
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')
GROUP BY object_type, owner
order by owner;
prompt
prompt ##############################################################
prompt # Distinct Column Data Types and their Count in the Schema:
prompt ##############################################################
col data_type for a40
SELECT data_type
  , count(*) total
FROM all_tab_columns
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')
GROUP BY data_type
order by data_type;
prompt
prompt ##############################################################
prompt # Tables that will Fail Add Trandata (Only an issue for Oracle versions below Oracle 10G) in the Database
prompt ##############################################################
SELECT distinct(table_name)
FROM dba_tab_columns
WHERE owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')  
AND column_id > 32
AND table_name in
(SELECT distinct(table_name)
 FROM all_tables
 WHERE owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
MINUS
(SELECT obj1.name
  FROM SYS.user\$ user1,
       SYS.user\$ user2,
       SYS.cdef\$ cdef,
       SYS.con\$ con1,
       SYS.con\$ con2,
       SYS.obj\$ obj1,
       SYS.obj\$ obj2
 WHERE user1.name not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
   AND cdef.type# = 2
   AND con2.owner# = user2.user#(+)
   AND cdef.robj# = obj2.obj#(+)
   AND cdef.rcon# = con2.con#(+)
   AND obj1.owner# = user1.user#
   AND cdef.con# = con1.con#
   AND cdef.obj# = obj1.obj#
UNION
SELECT idx.table_name
  FROM all_indexes idx
 WHERE idx.owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
   AND idx.uniqueness = 'UNIQUE'));
prompt
prompt ##############################################################
prompt # Tables With No Primary Key or Unique Index by Schema:
prompt ##############################################################
set heading on
col owner for a30
col table_name for a50
SELECT owner, table_name
FROM all_tables
WHERE owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
MINUS
(SELECT user1.name, obj1.name
  FROM SYS.user\$ user1,
       SYS.user\$ user2,
       SYS.cdef\$ cdef,
       SYS.con\$ con1,
       SYS.con\$ con2,
       SYS.obj\$ obj1,
       SYS.obj\$ obj2
 WHERE user1.name not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
   AND cdef.type# = 2 
   AND con2.owner# = user2.user#(+)
   AND cdef.robj# = obj2.obj#(+)
   AND cdef.rcon# = con2.con#(+)
   AND obj1.owner# = user1.user#
   AND cdef.con# = con1.con#
   AND cdef.obj# = obj1.obj#
UNION
SELECT distinct(owner)
  , idx.table_name
FROM all_indexes idx
WHERE idx.owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
AND idx.uniqueness = 'UNIQUE');
prompt
prompt ##############################################################
prompt # Tables with NOLOGGING setting
prompt # This may cause problems with missing data down stream.
prompt ##############################################################
set heading on
col owner for a30
col table_name for a50
col range for a30
select owner
  , table_name
  , ' ' as range
  , logging 
from DBA_TABLES
where logging <> 'YES'
and owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')
UNION
select owner
  , table_name
  , partitioning_type
  , DEF_LOGGING "LOGGING" 
from DBA_part_tables
where DEF_LOGGING != 'YES' 
and owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
UNION
select table_owner
  , table_name
  , PARTITION_NAME
  , logging 
from DBA_TAB_PARTITIONS
where logging <> 'YES' 
and table_owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
UNION
select table_owner
  , table_name
  , PARTITION_NAME
  , logging 
from DBA_TAB_SUBPARTITIONS
where logging <> 'YES' 
and table_owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC');
prompt
prompt ##############################################################
prompt # Tables with Deferred constraints.Deferred constraints may cause TRANDATA to chose an incorrect Key
prompt # Any table with a deferred constraint will need more research to avoid any issues
prompt # Tables with Deferred PK constraints should be added using KEYCOLS in the trandata statement.
prompt ##############################################################
SELECT c.TABLE_NAME
  , c.CONSTRAINT_NAME
  , c.CONSTRAINT_TYPE
  , c.DEFERRABLE
  , c.DEFERRED
  , c.VALIDATED
  , c.STATUS
  , i.INDEX_TYPE
  , c.INDEX_NAME
  , c.INDEX_OWNER
FROM dba_constraints c, dba_indexes i
WHERE i.TABLE_NAME = c.TABLE_NAME
AND i.OWNER = c.OWNER
AND c.DEFERRED = 'DEFERRED'
And i.owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC');
prompt
prompt ##############################################################
prompt # Tables Defined with Rowsize > 2M in all Schemas
prompt ##############################################################
set heading on
SELECT table_name
  , sum(data_length) row_length_over_2M
FROM all_tab_columns
WHERE owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
GROUP BY table_name
HAVING sum(data_length) > 2000000;
prompt
prompt ##############################################################
prompt # Tables With No Primary Key or Unique Index and Column lenght > 1M
prompt ##############################################################
SELECT owner
  , table_name
FROM all_tab_columns
WHERE owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
group by owner, table_name
HAVING sum(data_length) > 1000000
MINUS
(SELECT user1.name, obj1.name
  FROM SYS.user\$ user1,
       SYS.user\$ user2,
       SYS.cdef\$ cdef,
       SYS.con\$ con1,
       SYS.con\$ con2,
       SYS.obj\$ obj1,
       SYS.obj\$ obj2
 WHERE user1.name not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
   AND cdef.type# = 2 
   AND con2.owner# = user2.user#(+)
   AND cdef.robj# = obj2.obj#(+)
   AND cdef.rcon# = con2.con#(+)
   AND obj1.owner# = user1.user#
   AND cdef.con# = con1.con#
   AND cdef.obj# = obj1.obj#
UNION
SELECT idx.owner
  , idx.table_name
FROM all_indexes idx
WHERE idx.owner not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
AND idx.uniqueness = 'UNIQUE');
prompt
prompt ##############################################################
prompt # Integrated Replicat does not support Transient Primary Key Updates:
prompt # on primary key constraints that have a non-unique index under them.
prompt ##############################################################
Select i.OWNER
  , i.INDEX_NAME
  , i.TABLE_NAME
  , i.TABLE_OWNER
  , i.UNIQUENESS
  , c.CONSTRAINT_NAME
  , c.CONSTRAINT_TYPE 
from dba_indexes i, dba_constraints c
where i.TABLE_NAME = c.TABLE_NAME 
and i.OWNER = c.INDEX_OWNER 
and i.INDEX_NAME = c.INDEX_NAME 
and i.UNIQUENESS = 'NONUNIQUE' 
AND c.CONSTRAINT_TYPE = 'P'
and i.OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC');
prompt
prompt ##############################################################
prompt # Tables With CLOB, BLOB, LONG, NCLOB or LONG RAW Columns in ALL Schemas
prompt ##############################################################
col owner for a30
col table_name for a40
col column_name for a40
SELECT OWNER
  , TABLE_NAME
  , COLUMN_NAME
  , DATA_TYPE
FROM all_tab_columns
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
AND data_type in ('CLOB', 'BLOB', 'LONG', 'LONG RAW', 'NCLOB')
order by 1,2;
prompt
prompt ##############################################################
prompt # Tables With Columns of UNSUPPORTED Datatypes in ALL Schemas
prompt ##############################################################
col owner for a30
col table_name for a40
col column_name for a40
SELECT OWNER
  , TABLE_NAME
  , COLUMN_NAME
  , DATA_TYPE
FROM all_tab_columns
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
AND (data_type in ('ORDDICOM', 'BFILE', 'TIMEZONE_REGION', 'BINARY_INTEGER', 'PLS_INTEGER', 'UROWID', 'URITYPE', 'MLSLABEL', 'TIMEZONE_ABBR', 'ANYDATA', 'ANYDATASET', 'ANYTYPE')
or data_type like 'INTERVAL%')
order by 1,2;
prompt
prompt ##############################################################
prompt # Cluster, or Object Tables - ALL UNSUPPORTED - in ALL Schemas
prompt ##############################################################
col owner for a30
col table_name for a40
col table_type for a40
col cluster_name for a40
SELECT OWNER
  , TABLE_NAME
  , CLUSTER_NAME
  , TABLE_TYPE 
FROM all_all_tables
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
AND (cluster_name is NOT NULL or TABLE_TYPE is NOT NULL)
order by 1,2;
prompt
prompt ##############################################################
prompt # All tables that have compression enabled (need IE for support):
prompt ##############################################################
col owner for a30
col table_name for a40
select owner
  , table_name
from DBA_TABLES
where COMPRESSION = 'ENABLED';
prompt
prompt ##############################################################
SELECT TABLE_OWNER
  , TABLE_NAME
  , COMPRESSION
FROM ALL_TAB_PARTITIONS
WHERE (COMPRESSION = 'ENABLED');
prompt
prompt ##############################################################
prompt # IOT (Fully support for Oracle 10GR2 (with or without overflows) using GGS 10.4 and higher) - in All Schemas:
prompt ##############################################################
col owner for a30
col table_name for a40
col iot_type for a40
col table_type for a40
SELECT OWNER
  , TABLE_NAME
  , IOT_TYPE
  , TABLE_TYPE 
FROM all_all_tables
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
AND (IOT_TYPE is not null or TABLE_TYPE is NOT NULL)
order by 1,2;
prompt
prompt ##############################################################
prompt # Tables with Domain or Context Indexes
prompt ##############################################################
SELECT OWNER
  , TABLE_NAME
  , index_name
  , index_type 
FROM dba_indexes 
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC') 
and index_type = 'DOMAIN';
prompt
prompt ##############################################################
prompt # Types of Constraints on the Tables in ALL Schemas
prompt ##############################################################
SELECT DECODE(constraint_type,'P','PRIMARY KEY','U','UNIQUE', 'C', 'CHECK', 'R', 'REFERENTIAL') constraint_type_desc
  , count(*) total
FROM all_constraints
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')  
GROUP BY constraint_type;
prompt
prompt ##############################################################
prompt # Cascading Deletes on the Tables in ALL Schemas
prompt ##############################################################
col owner for a30
col table_name for a40
col constraint_name for a40
SELECT owner
  , table_name
  , constraint_name
FROM all_constraints
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')  
and constraint_type = 'R' and delete_rule = 'CASCADE'
order by 1,2;
prompt
prompt ##############################################################
prompt # Tables Defined with Triggers in ALL Schema:
prompt ##############################################################
SELECT table_name
  , COUNT(*) trigger_count
FROM all_triggers
WHERE OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')  
GROUP BY table_name;
prompt
prompt ##############################################################
prompt # Performance issues - Reverse Key Indexes Defined in ALL Schema:
prompt ##############################################################
col TABLE_OWNER format a15
col INDEX_TYPE format a15
select OWNER
  , INDEX_NAME
  , INDEX_TYPE
  , TABLE_OWNER
  , TABLE_NAME
  , TABLE_TYPE
  , UNIQUENESS
  , CLUSTERING_FACTOR
  , NUM_ROWS
  , LAST_ANALYZED
  , BUFFER_POOL
from dba_indexes
where index_type = 'NORMAL/REV'
And OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC');
prompt
prompt ##############################################################
prompt # For Integrated Extract please see MOS doc -1448324.1
prompt # Integrated Extract unsupported objects
prompt ##############################################################
column object_name format a35
COL OWNER FOR a20
select owner
  , object_name
  , support_mode
from DBA_GOLDENGATE_SUPPORT_MODE
WHERE support_mode = 'NONE';
prompt
prompt ##############################################################
prompt # For Integrated Extract please see MOS doc -1448324.1
prompt # A capture process can capture changes made to the key columns and any other columns
prompt # in the table supported by the capture process, except for LOB, LONG, LONG RAW, and XMLType columns.
prompt # Integrated Extract - Key Columns only
prompt ##############################################################
col owner for a30
col object_name for a40
select owner
  , object_name
  , support_mode
from DBA_GOLDENGATE_SUPPORT_MODE
where support_mode not in ('FULL','NONE')
order by 1,2; 
prompt
prompt ##############################################################
prompt # Sequence numbers - Sequences could be a issue for HA configurations
prompt ##############################################################
set numformat 99999999999999999999
COL SEQUENCE_OWNER FOR a30
COL SEQUENCE_NAME FOR a40
COL INCR FOR 999
-- COL min_value for a40
-- COL max_value for a40
COL CYCLE FOR A5
COL ORDER FOR A5
SELECT SEQUENCE_OWNER
  , SEQUENCE_NAME
  , MIN_VALUE
  , MAX_VALUE
  , INCREMENT_BY INCR
  , CYCLE_FLAG CYCLE
  , ORDER_FLAG "ORDER"
  , CACHE_SIZE
  , LAST_NUMBER
FROM DBA_SEQUENCES
WHERE SEQUENCE_OWNER not in ('SYS', 'SYSTEM', 'DBSNMP','SYSMAN','OUTLN','MDSYS','ORDSYS','EXFSYS','DMSYS','WMSYS','CTXSYS','ANONYMOUS','XDB','ORDPLUGINS','OLAPSYS','PUBLIC')
order by 1,2;
prompt
prompt ##############################################################
col "Avg Log Size" format 999,999,999
select sum (BLOCKS) * max(BLOCK_SIZE)/ count(*)"Avg Log Size" From gv\$ARCHIVED_LOG;
prompt
prompt ##############################################################
Prompt # Table: Frequency of Log Switches by hour and day
prompt ##############################################################
SELECT SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),1,5) DAY, 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'00',1,0)),'9999') "00", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'01',1,0)),'9999') "01", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'02',1,0)),'9999') "02", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'03',1,0)),'9999') "03", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'04',1,0)),'9999') "04", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'05',1,0)),'9999') "05", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'06',1,0)),'9999') "06", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'07',1,0)),'9999') "07", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'08',1,0)),'9999') "08", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'09',1,0)),'9999') "09", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'10',1,0)),'9999') "10", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'11',1,0)),'9999') "11", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'12',1,0)),'9999') "12", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'13',1,0)),'9999') "13", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'14',1,0)),'9999') "14", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'15',1,0)),'9999') "15", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'16',1,0)),'9999') "16", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'17',1,0)),'9999') "17", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'18',1,0)),'9999') "18", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'19',1,0)),'9999') "19", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'20',1,0)),'9999') "20", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'21',1,0)),'9999') "21", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'22',1,0)),'9999') "22", 
  TO_CHAR(SUM(DECODE(SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),10,2),'23',1,0)),'9999') "23" 
FROM V\$LOG_HISTORY 
GROUP BY SUBSTR(TO_CHAR(FIRST_TIME, 'MM/DD/YYYY HH24:MI:SS'),1,5) 
order by 1;
prompt
prompt ##############################################################
prompt # Summary of log volume processed by day for last 7 days:
prompt ##############################################################
select to_char(first_time, 'dd/mm') ArchiveDate
  , sum(BLOCKS*BLOCK_SIZE/1024/1024) LOGMB
from v\$archived_log
where first_time > sysdate - 7
group by to_char(first_time, 'dd/mm')
order by to_char(first_time, 'dd/mm');
prompt
prompt ##############################################################
prompt # Summary of log volume processed per hour for last 7 days:
prompt ##############################################################
select to_char(first_time, 'DD/MM/YYYY') ArchiveDate
  , to_char(first_time, 'HH24') ArchiveHour
  , sum(BLOCKS*BLOCK_SIZE/1024/1024) LogMB
from v\$archived_log
where first_time > sysdate - 7
group by to_char(first_time, 'DD/MM/YYYY'), to_char(first_time, 'HH24')
order by to_char(first_time, 'DD/MM/YYYY'), to_char(first_time, 'HH24');
quit;
EOF
}
#
#########################################################################################################
# GoldenGate 
#########################################################################################################
#
function func_ogg_006()
{
sqlplus -S /nolog <<EOF
conn / as sysdba

set feed on
quit;
EOF
}
#
#########################################################################################################
# GoldenGate 
#########################################################################################################
#
function func_ogg_007()
{
sqlplus -S /nolog <<EOF
conn / as sysdba

set feed on
quit;
EOF
}
#
#########################################################################################################
# GoldenGate 
#########################################################################################################
#
function func_ogg_008()
{
sqlplus -S /nolog <<EOF
conn / as sysdba

set feed on
quit;
EOF
}
#
#########################################################################################################
# GoldenGate 
#########################################################################################################
#
function func_ogg_009()
{
sqlplus -S /nolog <<EOF
conn / as sysdba

set feed on
quit;
EOF
}
#
#########################################################################################################
# GoldenGate 
#########################################################################################################
#
function func_ogg_010()
{
sqlplus -S /nolog <<EOF
conn / as sysdba

set feed on
quit;
EOF
}
#
#########################################################################################################
# GoldenGate 
#########################################################################################################
#
function func_ogg_011()
{
sqlplus -S /nolog <<EOF
conn / as sysdba

set feed on
quit;
EOF
}
#
#########################################################################################################
# GoldenGate 
#########################################################################################################
#
function func_ogg_012()
{
sqlplus -S /nolog <<EOF
conn / as sysdba

set feed on
quit;
EOF
}
#
#########################################################################################################
# Verify Sniped Sessions
#########################################################################################################
#
function func_verify_sniped_sessions()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
prompt ##############################################################
prompt # Verify Quantity of Sniped Sessions
prompt ##############################################################
prompt
select count(*) from v\$session where status='SNIPED';
prompt
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set nls_date_format='DD/MM/YYYY HH24:MI:SS';
prompt ##############################################################
prompt # Verify Sysdate (Date and Time)
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select sysdate from dual;
prompt ##############################################################
prompt # Verify Wich Session is Sniped
prompt ##############################################################
prompt
select sid
  , serial#
  , event
  , sql_id
  , last_call_et
  , username
  , status
  , machine
  , logon_time
  , process
  , substr(module,1,15) module
from v\$session
where status = 'SNIPED';
quit;
EOF
}
#
#########################################################################################################
# Generate Custom Report From OEM Cloud Control
#########################################################################################################
#
function func_create_custom_report_oem()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select A.HOST_NAME
  , A.DATABASE_NAME
  , TO_CHAR(A.STARTUP_TIME,'DD/MM/YYYY') "STARTUP_DATE"
  , TO_CHAR(A.creation_date,'DD/MM/YYYY') "CREATION_DATE"
  , A.LOG_MODE,A.CHARACTERSET,A.DBVERSION
  , AVAILABILITY_STATUS,E.SGASIZE
  , G.HOME_LOCATION "ORACLE_HOME"
  , F.property_value "PORT"
  , C.cpu_count
  , C.CPU_CORE_COUNT
  , SUBSTR(D.OS_SUMMARY,1,40) "OS PLATFORM"
FROM SYSMAN.MGMT\$DB_DBNINSTANCEINFO A
  , SYSMAN.MGMT\$AVAILABILITY_CURRENT B
  , SYSMAN.MGMT\$DB_CPU_USAGE C
  , sysman.mgmt\$os_hw_summary D
  , sysman.mgmt\$db_sga_all E
  , SYSMAN.MGMT\$TARGET_PROPERTIES F
  , SYSMAN.MGMT\$ORACLE_SW_ENT_TARGETS G
WHERE B.TARGET_TYPE = 'oracle_database'
and A.TARGET_NAME = B.TARGET_NAME
AND A.TARGET_NAME = C.TARGET_NAME
AND A.HOST_NAME = D.HOST_NAME
and a.target_name = E.target_name
AND E.SGANAME = 'Total SGA (MB)'
AND A.TARGET_NAME = F.TARGET_NAME
AND a.target_name = G.TARGET_NAME
and F.PROPERTY_NAME = 'Port'
ORDER BY host_name desc;
quit;
EOF
}
#
#########################################################################################################
# Verify Parallel Queries
#########################################################################################################
#
function func_verify_parallel_queries()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col username for a9
col sid for a8
select s.inst_id
  , decode(px.qcinst_id,NULL,s.username, ' - ' || lower(substr(s.program,length(s.program)-4,4))) "Username"
  , decode(px.qcinst_id,NULL, 'QC', '(Slave)') "QC/Slave"
  , to_char( px.server_set) "Slave Set"
  , to_char(s.sid) "SID"
  , decode(px.qcinst_id, NULL ,to_char(s.sid) ,px.qcsid) "QC SID"
  , px.req_degree "Requested DOP"
  , px.degree "Actual DOP", p.spid
from gv\$px_session px
  , gv\$session s
  , gv\$process p
where px.sid=s.sid (+)
and px.serial# = s.serial#
and px.inst_id = s.inst_id
and p.inst_id = s.inst_id
and p.addr=s.paddr
order by 5, 1 desc;
quit;
EOF
}
#
#########################################################################################################
# Verify Pending Distributed Transactions
#########################################################################################################
#
function func_verify_pending_distributed_transaction()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
COL local_tran_id FORMAT a13
COL in_out FORMAT a6
COL database FORMAT a25
COL dbuser_owner FORMAT a15
COL interface FORMAT a3
select local_tran_id, in_out, database, dbuser_owner, interface
FROM dba_2pc_neighbors;
quit;
EOF
}
#
#########################################################################################################
# Verify Executions History
#########################################################################################################
#
function func_verify_executions_history()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select a.instance_number inst_id
  , a.snap_id,a.plan_hash_value
  , to_char(begin_interval_time, 'DD/MM/YYYY hh24:mi') btime
  , abs(extract(minute from (end_interval_time-begin_interval_time)) + extract(hour from (end_interval_time-begin_interval_time))*60 + extract(day from (end_interval_time-begin_interval_time))*24*60) minutes
  , executions_delta executions
  , round(ELAPSED_TIME_delta/1000000/greatest(executions_delta,1),4) "avg duration (sec)"
from dba_hist_SQLSTAT a
  , dba_hist_snapshot b
where sql_id = '$sql_id'
and a.snap_id = b.snap_id
and a.instance_number = b.instance_number
order by snap_id desc, a.instance_number;
quit;
EOF
}
#
#########################################################################################################
# Verify CPU Usage and Wait Events
#########################################################################################################
#
function func_verify_cpu_usage_wait()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col sample_time for a14
col CONFIGURATION head "CONFIG" for 99.99
col ADMINISTRATIVE head "ADMIN" for 99.99
col OTHER for 99.99
select TO_CHAR(SAMPLE_TIME, 'HH24:MI ') AS SAMPLE_TIME
  , ROUND(OTHER / 60, 3) AS OTHER
  , ROUND(CLUST / 60, 3) AS CLUST
  , ROUND(QUEUEING / 60, 3) AS QUEUEING
  , ROUND(NETWORK / 60, 3) AS NETWORK
  , ROUND(ADMINISTRATIVE / 60, 3) AS ADMINISTRATIVE
  , ROUND(CONFIGURATION / 60, 3) AS CONFIGURATION
  , ROUND(COMMIT / 60, 3) AS COMMIT
  , ROUND(APPLICATION / 60, 3) AS APPLICATION
  , ROUND(CONCURRENCY / 60, 3) AS CONCURRENCY
  , ROUND(SIO / 60, 3) AS SYSTEM_IO
  , ROUND(UIO / 60, 3) AS USER_IO
  , ROUND(SCHEDULER / 60, 3) AS SCHEDULER
  , ROUND(CPU / 60, 3) AS CPU
  , ROUND(BCPU / 60, 3) AS BACKGROUND_CPU
FROM (select TRUNC(SAMPLE_TIME, 'MI') AS SAMPLE_TIME, DECODE(SESSION_STATE, 'ON CPU', DECODE(SESSION_TYPE, 'BACKGROUND', 'BCPU', 'ON CPU'), WAIT_CLASS) AS WAIT_CLASS
FROM V\$ACTIVE_SESSION_HISTORY
WHERE SAMPLE_TIME > SYSDATE - INTERVAL '2' HOUR
AND SAMPLE_TIME <= TRUNC(SYSDATE, 'MI')) ASH PIVOT(COUNT(*)
FOR WAIT_CLASS IN('ON CPU' AS CPU,'BCPU' AS BCPU,'Scheduler' AS SCHEDULER,'User I/O' AS UIO,'System I/O' AS SIO,'Concurrency' AS CONCURRENCY,'Application' AS  APPLICATION,'Commit' AS  COMMIT,'Configuration' AS CONFIGURATION,'Administrative' AS ADMINISTRATIVE,'Network' AS  NETWORK,'Queueing' AS QUEUEING,'Cluster' AS CLUST,'Other' AS OTHER));
quit;
EOF
}
#
#########################################################################################################
# Verify CPU and Memory Informations
#########################################################################################################
#
function func_verify_cpu_memory_info()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select STAT_NAME
  , to_char(VALUE) as VALUE
  , COMMENTS
from v\$osstat
where stat_name IN ('NUM_CPUS','NUM_CPU_CORES','NUM_CPU_SOCKETS')
union
select STAT_NAME
  , round(VALUE/1024/1024/1024, 2) || ' GB' 
  , COMMENTS
from v\$osstat
where stat_name IN ('PHYSICAL_MEMORY_BYTES');
quit;
EOF
}
#
#########################################################################################################
# Verify User Commits per Minute
#########################################################################################################
#
function func_verify_user_commits_per_minute()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 1500 lines 700 timing on feedback on echo on heading on verify on colsep '|' long 99999999
col STAT_NAME for a20
col VALUE_DIFF for 9999,999,999
col STAT_PER_MIN for 9999,999,999
col BEGIN for a20
col END for a20
set pagesize 40
set pause on
select hsys.SNAP_ID
  , to_char(hsnap.BEGIN_INTERVAL_TIME, 'DD/MM/YYYY HH24:MM:SS') as begin
  , to_char(hsnap.END_INTERVAL_TIME, 'DD/MM/YYYY HH24:MM:SS') as end
  , hsys.STAT_NAME
  , hsys.VALUE
  , hsys.VALUE - LAG(hsys.VALUE,1,0) OVER (ORDER BY hsys.SNAP_ID) AS "VALUE_DIFF"
  , round((hsys.VALUE - LAG(hsys.VALUE,1,0) OVER (ORDER BY hsys.SNAP_ID)) / round(abs(extract(hour from (hsnap.END_INTERVAL_TIME - hsnap.BEGIN_INTERVAL_TIME))*60 + extract(minute from (hsnap.END_INTERVAL_TIME - hsnap.BEGIN_INTERVAL_TIME)) + extract(second from (hsnap.END_INTERVAL_TIME - hsnap.BEGIN_INTERVAL_TIME))/60),1)) "STAT_PER_MIN"
from dba_hist_sysstat hsys
  , dba_hist_snapshot hsnap
where hsys.snap_id = hsnap.snap_id
and hsnap.instance_number in (select instance_number from v\$instance)
and hsnap.instance_number = hsys.instance_number
and hsys.STAT_NAME = 'user commits'
order by 1;
quit;
EOF
}
#
#########################################################################################################
# Verify Session Consuming of CPU
#########################################################################################################
#
function func_verify_session_consuming_cpu()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col "SID+SERIAL" form a20 heading "SID+SERIAL"
col program form a60 heading "Program"
col CPUMins form 99990 heading "CPU in Mins"
select rownum as rank
  , a.*
from (select v.sid || ',' || sess.serial# as "SID+SERIAL"
        , program
        , v.value / (100 * 60) CPUMins
      FROM v\$statname s
      , v\$sesstat v
      , v\$session sess
      WHERE s.name = 'CPU used by this session'
      and sess.sid = v.sid
      and v.statistic# = s.statistic#
      and v.value > 0
      ORDER BY v.value DESC) a
where rownum < 11;
quit;
EOF
}
#
#########################################################################################################
# Verify OS PID from SID
#########################################################################################################
#
function func_verify_ospid_sid()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col USERNAME for a15
col OSUSER for a8
col MACHINE for a15
col PROGRAM for a20
select b.spid
  , a.username
  , a.program
  , a.osuser
  , a.machine
  , a.sid
  , a.serial#
  , a.status
from gv\$session a
  , gv\$process b
where addr = paddr(+)
and sid = '$sid';
quit;
EOF
}
#
#########################################################################################################
# Verify Utilization of Redo Logs
#########################################################################################################
#
function func_verify_redo_logs_utilization()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select le.leseq "Current log sequence No"
  , 100*cp.cpodr_bno/le.lesiz "Percent Full"
  , cp.cpodr_bno "Current Block No"
  , le.lesiz "Size of Log in Blocks"
FROM x\$kcccp cp
  , x\$kccle le
WHERE le.leseq = CP.cpodr_seq
AND bitand(le.leflg,24) = 8;
quit;
EOF
}
#
#########################################################################################################
# Verify Count of All Partitions of a Table
#########################################################################################################
#
function func_verify_all_partition_tables()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
set serverout on size 1000000
set verify off
declare
sql_stmt varchar2(1024);
row_count number;
cursor get_tab is
select table_name
  , partition_name
from dba_tab_partitions
where table_owner = upper('&&TABLE_OWNER')
and table_name = '&&TABLE_NAME';
begin
  dbms_output.put_line('Checking Record Counts for table_name');
  dbms_output.put_line('Log file to numrows_part_&&TABLE_OWNER.lst ....');
  dbms_output.put_line('....');
for get_tab_rec in get_tab loop
BEGIN
  sql_stmt := 'select count(*) from &&TABLE_OWNER..' || get_tab_rec.table_name || ' partition (' || get_tab_rec.partition_name || ' )';
  EXECUTE IMMEDIATE sql_stmt INTO row_count;
  dbms_output.put_line('Table '||rpad(get_tab_rec.table_name || '(' || get_tab_rec.partition_name || ')',50) || ' ' || TO_CHAR(row_count) || ' rows.');
  exception when others
  then
    dbms_output.put_line ('Error counting rows for table '||get_tab_rec.table_name);
  END;
end loop;
end;
/
quit;
EOF
}
#
#########################################################################################################
# Verify I/O Usage of Tempfiles
#########################################################################################################
#
function func_verify_i_o_usage_tempfiles()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt ##############################################################
prompt # Verify I/O on Tempfiles
prompt ##############################################################
COL FILE_NAME for a100
select SUBSTR(t.name,1,50) AS file_name
  , f.phyblkrd AS blocks_read
  , f.phyblkwrt AS blocks_written
  , f.phyblkrd + f.phyblkwrt AS total_io
FROM v\$tempstat f
  , v\$tempfile t
WHERE t.file# = f.file#
ORDER BY f.phyblkrd + f.phyblkwrt DESC;
prompt
prompt ##############################################################
prompt # Verify I/O on Tempfile Sorted
prompt ##############################################################
col username for a20
col tablespace_name for a15
col host_name for a35
select * from (select u.tablespace
                 , s.username
                 , s.sid
                 , s.serial#
                 , s.logon_time
                 , program
                 , u.extents
                 , ((u.blocks*8)/1024) as MB
                 , i.inst_id
                 , i.host_name
               FROM gv\$session s
                 , gv\$sort_usage u
                 , gv\$instance i
               WHERE s.saddr = u.session_addr
               and u.inst_id = i.inst_id
               order by MB DESC) a
where rownum < 10;
quit;
EOF
}
#
#########################################################################################################
# Verify High Water Mark of a Table
#########################################################################################################
#
function func_verify_high_water_mark_table()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
SET LINESIZE 300
SET SERVEROUTPUT ON
SET VERIFY OFF
prompt ##############################################################
prompt #
prompt ##############################################################
DECLARE
CURSOR cu_tables IS
select a.owner
  , a.table_name
FROM all_tables a
WHERE a.table_name = Decode(Upper('&&Table_Name'), 'ALL', a.table_name ,Upper('&&Table_Name'))
AND a.owner = Upper('&&Table_Owner')
AND a.partitioned='NO'
AND a.logging='YES'
order by table_name;
prompt
prompt ##############################################################
prompt #
prompt ##############################################################
op1 NUMBER;
op2 NUMBER;
op3 NUMBER;
op4 NUMBER;
op5 NUMBER;
op6 NUMBER;
op7 NUMBER;
BEGIN
  Dbms_Output.Disable;
  Dbms_Output.Enable(1000000);
  Dbms_Output.Put_Line('TABLE UNUSED BLOCKS TOTAL BLOCKS HIGH WATER MARK');
  Dbms_Output.Put_Line('------------------------------ --------------- --------------- ---------------');
FOR cur_rec IN cu_tables LOOP
  Dbms_Space.Unused_Space(cur_rec.owner,cur_rec.table_name,'TABLE',op1,op2,op3,op4,op5,op6,op7);
  Dbms_Output.Put_Line(RPad(cur_rec.table_name,30,' ') || LPad(op3,15,' ') || LPad(op1,15,' ') || LPad(Trunc(op1-op3-1),15,' '));
END LOOP;
END;
/
quit;
EOF
}
#
#########################################################################################################
# Verify Session Holding Library Cache Lock
#########################################################################################################
#
function func_verify_session_holding_lib_cache_lock()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt ##############################################################
prompt # For Single Instance
prompt ##############################################################
prompt
select sid Waiter
  , p1raw
  , substr(rawtohex(p1),1,30) Handle
  , substr(rawtohex(p2),1,30) Pin_addr
from v\$session_wait
where wait_time = 0
and event like '%library cache%';
prompt ##############################################################
prompt # For RAC Instances I
prompt ##############################################################
prompt
select a.sid Waiter
  , b.SERIAL#
  , a.event
  , a.p1raw
  , substr(rawtohex(a.p1),1,30) Handle
  , substr(rawtohex(a.p2),1,30) Pin_addr
from v\$session_wait a
  , v\$session b
where a.sid = b.sid
and a.wait_time = 0
and a.event like 'library cache%';
prompt ##############################################################
prompt # For RAC Instances II
prompt ##############################################################
prompt
set lines 152
col sid for a20
col name for a40
select a.sid
  , b.name
  , a.value
  , b.class
from gv\$sesstat a
  , gv\$statname b
where a.statistic# = b.statistic#
and name like '%library cache%';
quit;
EOF
}
#
#########################################################################################################
# Verify Tablespace Monitoring Multitenant
#########################################################################################################
#
function func_verify_tablespace_monitoring_multitenant()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
SET LINES 132 PAGES 100
COL con_name        FORM A20 HEAD "Container|Name"
COL tablespace_name FORM A20
COL fsm             FORM 999,999,999,999 HEAD "Free|Space Meg."
COL apm             FORM 999,999,999,999 HEAD "Alloc|Space Meg."
--
COMPUTE SUM OF fsm apm ON REPORT
BREAK ON REPORT ON con_id ON con_name ON tablespace_name
--
WITH x AS (select c1.con_id, cf1.tablespace_name, SUM(cf1.bytes)/1024/1024 fsm
           FROM cdb_free_space cf1, v\$containers c1
           WHERE cf1.con_id = c1.con_id
           GROUP BY c1.con_id, cf1.tablespace_name),
     y AS (select c2.con_id, cd.tablespace_name, SUM(cd.bytes)/1024/1024 apm
           FROM cdb_data_files cd, v\$containers c2
           WHERE cd.con_id = c2.con_id
           GROUP BY c2.con_id, cd.tablespace_name)
select x.con_id
  , v.name con_name
  , x.tablespace_name
  , x.fsm
  , y.apm
FROM x
  , y
  , v\$containers v
WHERE x.con_id = y.con_id
AND x.tablespace_name = y.tablespace_name
AND v.con_id = y.con_id
UNION
select vc2.con_id
  , vc2.name
  , tf.tablespace_name
  , null
  , SUM(tf.bytes)/1024/1024
FROM v\$containers vc2, cdb_temp_files tf
WHERE vc2.con_id = tf.con_id
GROUP BY vc2.con_id, vc2.name, tf.tablespace_name
ORDER BY 1, 2;
quit;
EOF
}
#
#########################################################################################################
# Verify TOP 5 Cached SQL Statement
#########################################################################################################
#
function func_verify_top5_cached_sql()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col sql_id for a20
col sql_text for a150
select sql_id
  , child_number
  , sql_text
  , elapsed_time
FROM (select sql_id
       , child_number
       , sql_text
       , elapsed_time
       , cpu_time
       , disk_reads
       , RANK () OVER (ORDER BY elapsed_time DESC) AS elapsed_rank
      FROM v\$sql)
WHERE elapsed_rank <= 5;
quit;
EOF
}
#
#########################################################################################################
# Verify Active Sessions
#########################################################################################################
#
function func_verify_active_sessions()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
set echo off
set head on
set feedback on
col sid head "Sid" form 9999 trunc
col serial# form 99999 trunc head "Ser#"
col username form a15 trunc
col osuser form a15 trunc
col machine form a50 trunc head "Client|Machine"
col program form a60 trunc head "Client|Program"
col "Login At" form a15
col "last call"  form 9999999 trunc head "Last Call|In Secs"
col status form a6 trunc
select sid
  , serial#
  , substr(username,1,10) username
  , substr(osuser,1,10) osuser
  , substr(program || module,1,50) program
  , substr(machine,1,50) machine
  , to_char(logon_time,'DD/MM hh24:mi:ss') as "Login At"
  , last_call_et "last call"
  , status
from gv\$session
where status = 'ACTIVE'
order by 1;
quit;
EOF
}
#
#########################################################################################################
# Verify DDL of All Tablespaces
#########################################################################################################
#
function func_verify_ddl_tablespaces()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select dbms_metadata.get_ddl('TABLESPACE', tb.tablespace_name) as "Tablespace DDL" from dba_tablespaces tb;
quit;
EOF
}
#
#########################################################################################################
# Verify Tablespace Free Space
#########################################################################################################
#
function func_verify_tablespace_free_space()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
set feedback off
set pagesize 70;
set linesize 2000
set head on
COLUMN Tablespace                      format a25       heading 'Tablespace Name'
COLUMN autoextensible                  format a11       heading 'AutoExtend'
COLUMN files_in_tablespace             format 999       heading 'Files'
COLUMN total_tablespace_space          format 99999999  heading 'TotalSpace'
COLUMN total_used_space                format 99999999  heading 'UsedSpace'
COLUMN total_tablespace_free_space     format 99999999  heading 'FreeSpace'
COLUMN total_used_pct                  format 9999      heading '%Used'
COLUMN total_free_pct                  format 9999      heading '%Free'
COLUMN max_size_of_tablespace          format 99999999  heading 'ExtendUpto'
COLUM total_auto_used_pct              format 999.99    heading 'Max%Used'
COLUMN total_auto_free_pct             format 999.99    heading 'Max%Free'
WITH tbs_auto AS
              (select DISTINCT tablespace_name, autoextensible FROM dba_data_files WHERE autoextensible = 'YES'),
files AS      (select   tablespace_name, COUNT (*) tbs_files, SUM (BYTES/1024/1024) total_tbs_bytes FROM dba_data_files GROUP BY tablespace_name),
fragments AS  (select   tablespace_name, COUNT (*) tbs_fragments, SUM (BYTES)/1024/1024 total_tbs_free_bytes, MAX (BYTES)/1024/1024 max_free_chunk_bytes FROM dba_free_space GROUP BY tablespace_name),
AUTOEXTEND AS (select   tablespace_name, SUM (size_to_grow) total_growth_tbs FROM (select tablespace_name, SUM (maxbytes)/1024/1024 size_to_grow FROM dba_data_files WHERE autoextensible = 'YES' GROUP BY tablespace_name
UNION
select tablespace_name, SUM (BYTES)/1024/1024 size_to_grow
FROM dba_data_files
WHERE autoextensible = 'NO'
GROUP BY tablespace_name)
GROUP BY tablespace_name)
select c.instance_name
  , a.tablespace_name Tablespace
  , CASE tbs_auto.autoextensible WHEN 'YES' THEN 'YES' ELSE 'NO' END AS autoextensible
  , files.tbs_files files_in_tablespace
  , files.total_tbs_bytes total_tablespace_space
  , (files.total_tbs_bytes - fragments.total_tbs_free_bytes) total_used_space
  , fragments.total_tbs_free_bytes total_tablespace_free_space
  , round((((files.total_tbs_bytes - fragments.total_tbs_free_bytes)/files.total_tbs_bytes) * 100)) total_used_pct
  , round(((fragments.total_tbs_free_bytes / files.total_tbs_bytes) * 100)) total_free_pct
FROM dba_tablespaces a
  , v\$instance c
  , files
  , fragments
  , AUTOEXTEND
  , tbs_auto
WHERE a.tablespace_name = files.tablespace_name
AND a.tablespace_name = fragments.tablespace_name
AND a.tablespace_name = AUTOEXTEND.tablespace_name
AND a.tablespace_name = tbs_auto.tablespace_name(+)
order by total_free_pct;
quit;
EOF
}
#
#########################################################################################################
# Verify Free Space in UNDO
#########################################################################################################
#
function func_verify_free_space_undo()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select a.tablespace_name
  , SIZEMB
  , USAGEMB
  , (SIZEMB - USAGEMB) FREEMB
from (select sum(bytes)/1024/1024 SIZEMB
  , b.tablespace_name
from dba_data_files a
  , dba_tablespaces b
where a.tablespace_name = b.tablespace_name
and b.contents = 'UNDO'
group by b.tablespace_name) a
, (select c.tablespace_name, sum(bytes)/1024/1024 USAGEMB from DBA_UNDO_EXTENTS c where status <> 'EXPIRED' group by c.tablespace_name) b where a.tablespace_name = b.tablespace_name;
quit;
EOF
}
#
#########################################################################################################
# Verify RMAN Progress
#########################################################################################################
#
function func_verify_rman_progress()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select SID
  , SERIAL#
  , CONTEXT
  , SOFAR
  , TOTALWORK
  , ROUND(SOFAR/TOTALWORK*100,2) "%_COMPLETE"
FROM V\$SESSION_LONGOPS
WHERE OPNAME LIKE 'RMAN%'
AND OPNAME NOT LIKE '%aggregate%'
AND TOTALWORK != 0
AND SOFAR <> TOTALWORK;
quit;
EOF
}
#
#########################################################################################################
# Verify Sessions Using Undo
#########################################################################################################
#
function func_verify_session_using_undo()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select a.sid
  , a.serial#
  , a.username
  , b.used_urec used_undo_record
  , b.used_ublk used_undo_blocks
from v\$session a
  , v\$transaction b
where a.saddr = b.ses_addr;
quit;
EOF
}
#
#########################################################################################################
# Verify Session Using Temp
#########################################################################################################
#
function func_verify_session_using_temp()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col username for a15
col osuser for a15
select b.TABLESPACE
  , b.segfile#
  , b.segblk#
  , ROUND (((b.blocks * p.VALUE)/1024/1024), 2) size_mb
  , a.SID
  , a.serial#
  , a.username
  , a.osuser
  , a.program
  , a.status
FROM v\$session a
  , v\$sort_usage b
  , v\$process c
  , v\$parameter p
WHERE p.NAME = 'db_block_size'
AND a.saddr = b.session_addr
AND a.paddr = c.addr
ORDER BY b.TABLESPACE, b.segfile#, b.segblk#, b.blocks;
quit;
EOF
}
#
#########################################################################################################
# Verify Session Generating Logs
#########################################################################################################
#
function func_verify_session_generating_logs()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
col sid for 99999
col name for a09
col username for a14
col PROGRAM for a60
col MODULE for a25
select s.sid
  , sn.SERIAL#
  , n.name
  , round(value/1024/1024,2) "Redo_MB"
  , sn.username
  , sn.status
  , substr(sn.program,1,60) "Program"
  , sn.type
  , sn.module
  , sn.sql_id
from v\$sesstat s
join v\$statname n on n.statistic# = s.statistic#
join v\$session sn on sn.sid = s.sid
where n.name like 'redo size'
and s.value != 0
order by "Redo_MB" desc;
quit;
EOF
}
#
#########################################################################################################
# Verify Long Running Queries
#########################################################################################################
#
function func_verify_long_running_queries()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select sid
  , inst_id
  , opname
  , totalwork
  , sofar
  , start_time
  , time_remaining
from gv\$session_longops
where totalwork <> sofar;
quit;
EOF
}
#
#########################################################################################################
# Function General Informations
#########################################################################################################
#
function func_dba_general_infos()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 1000 linesize 5000 head off feedback off echo off timing off TRIMSPOOL ON NEWPAGE NONE
col PROPERTY_NAME for a25
col PROPERTY_VALUE for a15
col DESCRIPTION for a35
col DIRECTORY_PATH for a70
col directory_name for a25
col OWNER for a10
col DB_LINK for a40
col HOST for a20
col "User_Concurrent_Queue_Name" format a50 heading 'Manager'
col "Running_Processes" for 9999 heading 'Running'
break on utl_file_dir
select '------------------------ Getting Database Information ------------------------' from dual;
select 'Database Name.....................: ' || name from v\$database;
select 'Database Status...................: ' || open_mode from v\$database;
select 'Archiving Status..................: ' || log_mode from v\$database;
select 'Global Name.......................: ' || global_name from global_name;
select 'Service Name......................: ' || value from v\$parameter where name = 'service names';
select 'Creation Date.....................: ' || to_char(created,'DD/MM/YYYY HH24:MI:SS') from v\$database;
select 'Checking For Missing File.........: ' || count(*) from v\$recover_file;
select 'Checking Missing File Name .......: ' || count(*) from v\$datafile where name like '%MISS%';
select 'Total SGA MB......................: ' || round(sum(value)/(1024*1024)) || ' MB' from v\$sga ;
select 'Total SGA GB......................: ' || round(sum(value)/(1024*1024*1024)) || ' GB' from v\$sga ;
select 'Total SGA TB......................: ' || round(sum(value)/(1024*1024*1024*1024)) || ' TB' from v\$sga ;
select 'Database Version..................: ' || version from v\$instance;
select 'Database Size MB..................: ' || trim(to_char(sum(bytes)/1024/1024,'9G999G999D99')) || ' MB' from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\$log
union all
select sum(block_size * file_size_blks) from v\$controlfile);
select 'Database Size GB..................: ' || trim(to_char(sum(bytes)/1024/1024/1024,'9G999G999D99')) || ' GB' from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\$log
union all
select sum(block_size * file_size_blks) from v\$controlfile);
select 'Database Size TB..................: ' || trim(to_char(sum(bytes)/1024/1024/1024/1024,'9G999G999D99')) || ' TB' from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\$log
union all
select sum(block_size * file_size_blks) from v\$controlfile);
select 'Temporary Tablespace..............: ' || property_value from database_properties where property_name like 'default_temp_tablespace';
select 'Apps Temp Tablespace..............: ' || temporary_tablespace from dba_users where username like '%APPS%';
select 'Temp Tablespace Size..............: ' || sum(maxbytes/1024/1024/1024) || ' GB' from dba_temp_files group by tablespace_name;
select 'No of Invalid Object .............: ' || count(*) from dba_objects where status = 'INVALID' ;
select 'plsql Code Type...................: ' || value from v\$parameter2 where name = 'plsql_code_type';
select 'plsql Subdir Count................: ' || value from v\$parameter2 where name = 'plsql_native_library_subdir_count';
select 'plsql Native Library Dir..........: ' || value from v\$parameter2 where name = 'plsql_native_library_dir';
select 'Shared Pool Size.........,........: ' || (value/1024/1024) || ' MB' from v\$parameter where name = 'shared_pool_size';
select 'Log Buffer........................: ' || (value/1024/1024) || ' MB' from v\$parameter where name = 'log_buffer';
select 'Buffer Cache MB...................: ' || (value/1024/1024) || ' MB' from v\$parameter where name = 'db_cache_size';
select 'Buffer Cache GB...................: ' || (value/1024/1024/1024) || ' GB' from v\$parameter where name = 'db_cache_size';
select 'Buffer Cache TB...................: ' || (value/1024/1024/1024/1024) || ' TB' from v\$parameter where name = 'db_cache_size';
select 'Large Pool Size MB................: ' || (value/1024/1024) || ' MB' from v\$parameter where name = 'large_pool_size';
select 'Large Pool Size GB................: ' || (value/1024/1024/1024) || ' GB' from v\$parameter where name = 'large_pool_size';
select 'Java Pool Size MB.................: ' || (value/1024/1024) || ' MB' from v\$parameter where name = 'java_pool_size';
select 'Java Pool Size GB.................: ' || (value/1024/1024/1024) || ' GB' from v\$parameter where name = 'java_pool_size';
select 'utl_file_dir......................: ' || value from v\$parameter2 where name = 'utl_file_dir';
select directory_name || '................: ' || directory_path from all_directories where rownum < 15;
quit;
EOF
}
#
#########################################################################################################
# Function Performance 001
#########################################################################################################
#
function func_dba_perform_001()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|' numwidth 20 feedback on
prompt ##############################################################
prompt # Top Recent Wait Events                                     #
prompt ##############################################################
col EVENT format a60
select *
from (select active_session_history.event
      , sum(active_session_history.wait_time + active_session_history.time_waited) ttl_wait_time
      from v\$active_session_history active_session_history
      where active_session_history.event is not null
      group by active_session_history.event
      order by 2 desc)
where rownum < 6;
prompt
prompt ##############################################################
prompt # Top Wait Events Since Instance Startup                     #
prompt ##############################################################
col event format a60
select event
  , total_waits
  , time_waited
from v\$system_event e, v\$event_name n
where n.event_id = e.event_id
and n.wait_class !='Idle'
and n.wait_class = (select wait_class from v\$session_wait_class where wait_class !='Idle' group by wait_class having sum(time_waited) = (select max(sum(time_waited)) from v\$session_wait_class
where wait_class !='Idle'
group by (wait_class)))
order by 3;
prompt
prompt ##############################################################
prompt # List Of Users Currently Waiting                            #
prompt ##############################################################
col username format a12
col sid format 9999
col state format a15
col event format a50
col wait_time format 99999999
set pagesize 700
set linesize 700
select s.sid
  , s.username
  , se.event
  , se.state
  , se.wait_time
from v\$session s, v\$session_wait se
where s.sid=se.sid
and se.event not like 'SQL*Net%'
and se.event not like '%rdbms%'
and s.username is not null
order by se.wait_time;
prompt
prompt ##############################################################
prompt # Find The Main Database Wait Events In A Particular Time Interval
prompt # First determine the snapshot id values for the period in question.
prompt # In this example we need to find the SNAP_ID for the period 10 PM to 11 PM on the 14th of November, 2012.
prompt ##############################################################
col BEGIN_INTERVAL_TIME for a30
col END_INTERVAL_TIME for a30
select snap_id
  , to_char(begin_interval_time, 'DD/MM/YYYY HH24:MI:SS') as begin_interval_time
  , to_char(end_interval_time, 'DD/MM/YYYY HH24:MI:SS') as end_interval_time
from dba_hist_snapshot
where to_char(begin_interval_time, 'DD/MM/YYYY') = to_char(sysdate -1)
order by 1;
quit;
EOF
}
# and EXTRACT(HOUR FROM begin_interval_time) between 22 and 23;
#
#########################################################################################################
# Function Performance 002
#########################################################################################################
#
function func_dba_perform_002()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|' numwidth 20 feedback on
prompt ##############################################################
prompt #
prompt ##############################################################
--  set verify off
select *
from (select active_session_history.event, sum(active_session_history.wait_time + active_session_history.time_waited) ttl_wait_time from dba_hist_active_sess_history active_session_history
      where event is not null
--    and SNAP_ID between $SNAP_IN and $SNAP_OU
      group by active_session_history.event
      order by 2 desc);
prompt
prompt ##############################################################
prompt # Top CPU Consuming SQL During A Certain Time Period
prompt # Note – in this case we are finding the Top 5 CPU intensive SQL statements executed between 9.00 AM and 11.00 AM
prompt ##############################################################
select *
from (select SQL_ID
        , sum(CPU_TIME_DELTA)
        , sum(DISK_READS_DELTA)
        , count(*)
      from DBA_HIST_SQLSTAT a, dba_hist_snapshot s
      where s.snap_id = a.snap_id
      and s.begin_interval_time > sysdate -1
      and EXTRACT(HOUR FROM S.END_INTERVAL_TIME) between 9 and 11
      group by SQL_ID order by sum(CPU_TIME_DELTA) desc);
prompt
prompt ##############################################################
prompt # Which Database Objects Experienced the Most Number of Waits in the Past One Hour
prompt ##############################################################
set linesize 700
col event format a40
col object_name format a40
select *
from (select dba_objects.object_name
    , dba_objects.object_type
    , active_session_history.event
    , sum(active_session_history.wait_time + active_session_history.time_waited) ttl_wait_time
      from v\$active_session_history active_session_history, dba_objects
      where active_session_history.sample_time between sysdate - 1/24 and sysdate
      and active_session_history.current_obj# = dba_objects.object_id
      group by dba_objects.object_name, dba_objects.object_type, active_session_history.event
      order by 4 desc)
where rownum < 6;
prompt
prompt ##############################################################
prompt # Top Segments ordered by Physical Reads                     #
prompt ##############################################################
col segment_name format a50
col owner format a10
select segment_name
  , object_type
  , total_physical_reads
from (select owner || '.' || object_name as segment_name
    , object_type
    , value as total_physical_reads
      from v\$segment_statistics
      where statistic_name in ('physical reads')
      order by total_physical_reads desc);
prompt
prompt ##############################################################
prompt # Top 5 SQL statements in the past one hour                  #
prompt ##############################################################
col username for a15
col sql_text for a150
select *
from (select active_session_history.sql_id
    , dba_users.username
    , sqlarea.sql_text
    , sum(active_session_history.wait_time + active_session_history.time_waited) ttl_wait_time
      from v\$active_session_history active_session_history, v\$sqlarea sqlarea, dba_users
      where active_session_history.sample_time between sysdate - 1/24 and sysdate
      and active_session_history.sql_id = sqlarea.sql_id
      and active_session_history.user_id = dba_users.user_id
      group by active_session_history.sql_id,sqlarea.sql_text, dba_users.username
      order by 4 desc);
prompt
prompt ##############################################################
prompt # SQL with the highest I/O in the past one day               #
prompt ##############################################################
select *
from (select /*+LEADING(x h) USE_NL(h)*/ h.sql_id, SUM(10) ash_secs
      FROM dba_hist_snapshot x, dba_hist_active_sess_history h
      WHERE x.begin_interval_time > sysdate -1
      AND h.SNAP_id = X.SNAP_id
      AND h.dbid = x.dbid
      AND h.instance_number = x.instance_number
      AND h.event in ('db file sequential read','db file scattered read')
      GROUP BY h.sql_id
      ORDER BY ash_secs desc);
prompt
prompt ##############################################################
prompt # Top CPU consuming queries since past one day               #
prompt ##############################################################
select *
from (select SQL_ID
     , sum(CPU_TIME_DELTA)
     , sum(DISK_READS_DELTA)
     , count(*)
    from DBA_HIST_SQLSTAT a, dba_hist_snapshot s
    where s.snap_id = a.snap_id
    and s.begin_interval_time > sysdate -1
    group by SQL_ID
    order by sum(CPU_TIME_DELTA) desc);
prompt
prompt ##############################################################
prompt # Find what the top SQL was at a particular reported time of day
prompt # First determine the snapshot id values for the period in question.
prompt # In thos example we need to find the SNAP_ID for the period 10 PM to 11 PM on the 14th of November, 2012.
prompt ##############################################################
select snap_id
  , to_char(begin_interval_time, 'DD/MM/YYYY HH24:MI:SS') as begin_interval_time
  , to_char(end_interval_time, 'DD/MM/YYYY HH24:MI:SS') as end_interval_time
from dba_hist_snapshot
where to_char(begin_interval_time,'DD/MM/YYYY') = to_char(sysdate -1)
order by 1;
prompt # and EXTRACT(HOUR FROM begin_interval_time) between 22 and 23;
prompt
prompt ##############################################################
prompt #
prompt ##############################################################
select *
from (select sql.sql_id c1
    , sql.buffer_gets_delta c2
    , sql.disk_reads_delta c3
    , sql.iowait_delta c4
      from dba_hist_sqlstat sql, dba_hist_snapshot s
      where s.snap_id = sql.snap_id
--      and s.snap_id= $SNAP_IN
      order by c3 desc)
where rownum < 6;
prompt
prompt ##############################################################
prompt # Analyse a particular SQL ID and see the trends for the past day
prompt ##############################################################
select s.snap_id
  , to_char(s.begin_interval_time,'HH24:MI') c1
  , sql.executions_delta c2
  , sql.buffer_gets_delta c3
  , sql.disk_reads_delta c4
  , sql.iowait_delta c5
  , sql.cpu_time_delta c6
  , sql.elapsed_time_delta c7
from dba_hist_sqlstat sql, dba_hist_snapshot s
where s.snap_id = sql.snap_id
and s.begin_interval_time > sysdate -1
--  and sql.sql_id='&SQL_ID'
order by c7;
quit;
EOF
}
#
#########################################################################################################
# Function Performance 003
#########################################################################################################
#
function func_dba_perform_003()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|' numwidth 20 feedback on
prompt
prompt ##############################################################
prompt # Do we have multiple plan hash values for the same SQL ID – in that case may be changed plan is causing bad performance
prompt ##############################################################
select SQL_ID
  , PLAN_HASH_VALUE
  , sum(EXECUTIONS_DELTA) EXECUTIONS
  , sum(ROWS_PROCESSED_DELTA) CROWS
  , trunc(sum(CPU_TIME_DELTA)/1000000/60) CPU_MINS
  , trunc(sum(ELAPSED_TIME_DELTA)/1000000/60)  ELA_MINS
from DBA_HIST_SQLSTAT
-- where SQL_ID in ('$SQL_ID')
group by SQL_ID, PLAN_HASH_VALUE
order by SQL_ID, CPU_MINS;
prompt
prompt ##############################################################
prompt # Top 5 Queries for past week based on ADDM recommendations
prompt # Top 10 SQL_ID's for the last 7 days as identified by ADDM
prompt # from DBA_ADVISOR_RECOMMENDATIONS and dba_advisor_log
prompt ##############################################################
col SQL_ID form a16
col Benefit form 9999999999999
select *
from (select b.ATTR1 as SQL_ID
      , max(a.BENEFIT) as "Benefit"
      from DBA_ADVISOR_RECOMMENDATIONS a, DBA_ADVISOR_OBJECTS b
      where a.REC_ID = b.OBJECT_ID
      and a.TASK_ID = b.TASK_ID
      and a.TASK_ID in (select distinct b.task_id
                        from dba_hist_snapshot a, dba_advisor_tasks b, dba_advisor_log l
		        where a.begin_interval_time > sysdate - 7
			and a.dbid = (select dbid from v\$database)
                        and a.INSTANCE_NUMBER = (select INSTANCE_NUMBER from v\$instance)
and to_char(a.begin_interval_time, 'yyyymmddHH24') = to_char(b.created, 'yyyymmddHH24')
and b.advisor_name = 'ADDM'
and b.task_id = l.task_id
and l.status = 'COMPLETED')
and length(b.ATTR4) > 1
group by b.ATTR1
order by max(a.BENEFIT) desc)
where rownum < 6;
quit;
EOF
}
#
#########################################################################################################
# Function Dashboard Install
#########################################################################################################
#
function func_dba_dash_install()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' numwidth 20 feedback on
grant create type to system;
grant create procedure to system;
grant execute on dbms_lock to system;
grant select on gv_\$sql to system;
grant select on gv_\$sql_monitor to system;
grant select on gv_\$active_session_history to system;
grant select on gv_\$osstat to system;
grant select on gv_\$instance to system;
grant select on gv_\$statname to system;
grant select on gv_\$sysstat to system;
grant select on gv_\$segment_statistics to system;
grant select on gv_\$dlm_misc to system;
grant select on gv_\$sysmetric to system;
grant select on v_\$parameter to system;
alter session set current_schema=system;
drop type ta_obj;
drop type ta_ginst;
drop type ta_gash;
drop type ta_gc;
drop type ta_gsqlm;
drop type ty_obj;
drop type ty_ginst;
drop type ty_gash;
drop type ty_gsqlm;
drop type ty_gc;
drop package body JSS;
drop package jss;
create or replace type ty_obj as object (output varchar2(2500));
/
create or replace type ty_ginst as object
  (
    inst_id       number(2),
    inst_name     varchar2(16),
    statname      varchar2(64),
    value         number,
    Times         date
   );
/
create or replace type ty_gash as object
  (
    inst_id       number,
    sid           number,
    sql_id        varchar2(13),
    sql_child     number,
    sql_text      varchar2(100),
    planhash      varchar2(64),
    offloadpct    number,
    plancntrl     varchar2(10),
    pgamb         number,
    tmpmb         number,
    event         varchar2(64),
    wait_class    varchar2(64),
    time_Waited   number,
    obj#          number
   );
/
create or replace type ty_gsqlm as object
  (
    inst_id                    number,
    sql_id                     varchar2(13),
    sql_text                   varchar2(100),
    elapsed_time               number,
    cpu_time                   number,
    concurrency_Wait_time      number,
    cluster_Wait_time          number,
    user_io_wait_time          number,
    physical_read_bytes        number,
    px_server#                 number
  );
 /
create or replace type ty_gc as object
 (
   inst_id    number(2),
   GCBCS      number,
   GCBRS      number,
   GMSR       number
  );
/
create or replace type ta_gc as table of ty_gc;
/
create or replace type ta_gsqlm is table of ty_gsqlm;
/
create or replace type ta_obj as table of ty_obj;
/
create or replace type ta_ginst as table of ty_ginst;
/
create or replace type ta_gash as table of ty_gash;
/
CREATE OR REPLACE PACKAGE JSS
AS
FUNCTION GTOP
  (
     PV_ARR_SIZE     INT DEFAULT 50,
     PV_SAMPLE       INT DEFAULT 6,
     PV_COLORS       INT DEFAULT 1,
     PV_SYSMETRC_ID1 INT DEFAULT NULL,
     PV_SYSMETRC_ID2 INT DEFAULT NULL,
     PV_SYSMETRC_ID3 INT DEFAULT NULL
  )
RETURN ta_obj pipelined;
FUNCTION GTOPHELP
RETURN TA_OBJ PIPELINED;
end;
/
CREATE OR REPLACE PACKAGE body jss
AS
---##############
-- Global Variables
---##############
pv_first_ginst        ta_ginst := ta_ginst();   -- variables to store global instance info by using gv\$sysstat, first sample
pv_last_ginst         ta_ginst := ta_ginst();   -- second sample, In order to get delta data
pv_only_gash          ta_gash  := ta_gash();    -- to store gv\$active_session_history data for given sample
pv_version            number;
pv_tmp_obj            ta_obj   := ta_obj() ;    -- temporary variable
pv_only_gsqlm         ta_gsqlm := ta_gsqlm();   -- to store gv\$sql_monitor info, no delta
pv_num_cpus           int;                      -- no. of cores from gv\$iostat
pv_maxcpuprint        varchar2(100);            -- array no. to get maxcpu print in active session graph
p_sample              int;                      -- Input parameter for delay in sample\/sleep time
pv_st_sample          date;                     -- sample start time from sysdate
pv_et_sample          date;                     -- sample end time from sysdate
pv_top_sql            ta_obj := ta_obj();       -- to store top sqls from pv_only_gash collection
pv_only_gc            ta_gc  :=  ta_gc();       -- Global Cache info from gv\$sysstat
pv_block_size         number;                   -- Block size from v\$parameter to calculate interconnect traffic
pv_tmp_gcinfo         ta_obj := ta_obj();       -- temporary global variable
PV_SYSMETRIC_STRING1  VARCHAR2(200);
PV_SYSMETRIC_STRING2  VARCHAR2(200);
pv_sysmetric_string3  varchar2(200);
V_PGAMB               VARCHAR2(20);
v_tmpmb               varchar2(20);
pv_maxcpu_string      varchar2(50);
----##################################################
-- Variables to draw active sessions Graph, 80 samples are shown in graph.
-- 4 arrays are used to show session range.
----##################################################
pa_stet  ta_obj := ta_obj();  pa1       ta_obj := ta_obj(); pa2       ta_obj := ta_obj();
pa3      ta_obj := ta_obj();  pa4       ta_obj := ta_obj(); pa5       ta_obj := ta_obj();
pa6      ta_obj := ta_obj();  pa7       ta_obj := ta_obj(); pa8       ta_obj := ta_obj();
pa9      ta_obj := ta_obj();  pa10      ta_obj := ta_obj(); pa11      ta_obj := ta_obj();
pa12     ta_obj := ta_obj();  pa13      ta_obj := ta_obj(); pa14      ta_obj := ta_obj();
pa15      ta_obj := ta_obj(); pa16      ta_obj := ta_obj(); pa17      ta_obj := ta_obj();
pa18      ta_obj := ta_obj(); pa19      ta_obj := ta_obj(); pa20      ta_obj := ta_obj();
pa21      ta_obj := ta_obj(); pa22      ta_obj := ta_obj(); pa23      ta_obj := ta_obj();
pa24      ta_obj := ta_obj(); pa25      ta_obj := ta_obj(); pa26      ta_obj := ta_obj();
pa27      ta_obj := ta_obj(); pa28      ta_obj := ta_obj(); pa29      ta_obj := ta_obj();
pa30      ta_obj := ta_obj(); pa31      ta_obj := ta_obj(); pa32      ta_obj := ta_obj();
pa33      ta_obj := ta_obj(); pa34      ta_obj := ta_obj(); pa35      ta_obj := ta_obj();
pa36      ta_obj := ta_obj(); pa37      ta_obj := ta_obj(); pa38      ta_obj := ta_obj();
pa39      ta_obj := ta_obj(); pa40      ta_obj := ta_obj(); pa41      ta_obj := ta_obj();
pa42      ta_obj := ta_obj(); pa43      ta_obj := ta_obj(); pa44      ta_obj := ta_obj();
pa45      ta_obj := ta_obj(); pa46      ta_obj := ta_obj(); pa47      ta_obj := ta_obj();
pa48      ta_obj := ta_obj(); pa49      ta_obj := ta_obj(); pa50      ta_obj := ta_obj();
pa51      ta_obj := ta_obj(); pa52      ta_obj := ta_obj(); pa53      ta_obj := ta_obj();
pa54      ta_obj := ta_obj(); pa55      ta_obj := ta_obj(); pa56      ta_obj := ta_obj();
pa57      ta_obj := ta_obj(); pa58      ta_obj := ta_obj(); pa59      ta_obj := ta_obj();
pa60      ta_obj := ta_obj(); pa61      ta_obj := ta_obj(); pa62      ta_obj := ta_obj();
pa63      ta_obj := ta_obj(); pa64      ta_obj := ta_obj(); pa65      ta_obj := ta_obj();
pa66      ta_obj := ta_obj(); pa67      ta_obj := ta_obj(); pa68      ta_obj := ta_obj();
pa69      ta_obj := ta_obj(); pa70      ta_obj := ta_obj(); pa71      ta_obj := ta_obj();
pa72      ta_obj := ta_obj(); pa73      ta_obj := ta_obj(); pa74      ta_obj := ta_obj();
pa75      ta_obj := ta_obj(); pa76      ta_obj := ta_obj(); pa77      ta_obj := ta_obj();
pa78      ta_obj := ta_obj(); pa79      ta_obj := ta_obj(); pa80      ta_obj := ta_obj();
pa81      ta_obj := ta_obj(); pa82      ta_obj := ta_obj(); pa83      ta_obj := ta_obj();
pa84      ta_obj := ta_obj();
pv_maxval    int ;    --- info regarding maxval of Active Session Graph array
pv_tmp_maxval int;    --- for reshuffling the maxval based on current active sessions
pv_maxsess   int ;    --- max sessions reached in last 80 samples
 ------------------ to store waits
pv_cpuwaitpct int;
pv_iowaitpct  int;
pv_cluwaitpct int;
pv_othwaitpct int;
PV_CPU_DIG     VARCHAR2(11) ;
PV_IO_DIG      VARCHAR2(11) ;
PV_CLU_DIG     VARCHAR2(11) ;
pv_oth_dig     varchar2(11) ;
p_localarray   int := 0;
pva int;
pvb int;
pvc int;
pvd int;
pve int;
JS_MAXSESS    INT := 0;
js_arr        int := 0 ;
pv_work_done  int := 0;
----##################################################
-- Fbyt function format bytes in K,M,G,T
----##################################################
FUNCTION fbyt(V_SIZE_K   NUMBER)
RETURN varchar2
AS
BEGIN
if v_size_k > 0  then
    IF      V_SIZE_K/1024                  <= 1023 THEN RETURN ROUND(V_SIZE_K/1024,1)||'K';
    ELSIF   V_SIZE_K/1024/1024             <= 1023 THEN RETURN ROUND(V_SIZE_K/1024/1024,1)||'M';
    ELSIF   V_SIZE_K/1024/1024/1024        <= 1023 THEN RETURN ROUND(V_SIZE_K/1024/1024/1024,1)||'G';
    ELSIF   V_SIZE_K/1024/1024/1024/1024   <= 1023 THEN RETURN ROUND(V_SIZE_K/1024/1024/1024/1024,1)||'T';
    END IF;
ELSE   RETURN ' '; -- instead of null so that lpad function should work
end if;
end;
------##################
--Initial Procedure to extend all the arrays to ASG [Active Sessions Graph]
------##################
procedure initactarr
as
begin
 ---extending arrays
    pa1.extend(21);   pa2.extend(21); pa3.extend(21);  pa4.extend(21);   pa5.extend(21);
    pa6.extend(21);   pa7.extend(21); pa8.extend(21);  pa9.extend(21);  pa10.extend(21);
    pa11.extend(21); pa12.extend(21); pa13.extend(21); pa14.extend(21); pa15.extend(21);
    pa16.extend(21); pa17.extend(21); pa18.extend(21); pa19.extend(21); pa20.extend(21);
    pa21.extend(21); pa22.extend(21); pa23.extend(21); pa24.extend(21); pa25.extend(21);
    pa26.extend(21); pa27.extend(21); pa28.extend(21); pa29.extend(21); pa30.extend(21);
    pa31.extend(21); pa32.extend(21); pa33.extend(21); pa34.extend(21); pa35.extend(21);
    pa36.extend(21); pa37.extend(21); pa38.extend(21); pa39.extend(21); pa40.extend(21);
    pa41.extend(21); pa42.extend(21); pa43.extend(21); pa44.extend(21); pa45.extend(21);
    pa46.extend(21); pa47.extend(21); pa48.extend(21); pa49.extend(21); pa50.extend(21);
    pa51.extend(21); pa52.extend(21); pa53.extend(21); pa54.extend(21); pa55.extend(21);
    pa56.extend(21); pa57.extend(21); pa58.extend(21); pa59.extend(21); pa60.extend(21);
    pa61.extend(21); pa62.extend(21); pa63.extend(21); pa64.extend(21); pa65.extend(21);
    pa66.extend(21); pa67.extend(21); pa68.extend(21); pa69.extend(21); pa70.extend(21);
    pa71.extend(21); pa72.extend(21); pa73.extend(21); pa74.extend(21); pa75.extend(21);
    pa76.extend(21); pa77.extend(21); pa78.extend(21); pa79.extend(21); pa80.extend(21);
exception
when others then
raise_application_Error(-20001,'INITACTARR : '||sqlerrm );
end;
-------------------
------##################
-- ginsteff build data set from gv\$sysstat, gv\$osstat, gv\$dlm_misc
-- and load data collection name pv_last_ginst
-- only every loop, pv_last_ginst will be assigned to pv_first_ginst to get the delta
------##################
function ginsteff return ta_ginst
is
fv_ginst  ta_ginst := ta_ginst();
fv_sql    varchar2(3000) := q'[select ty_ginst(a.instance_number, a.instance_name, b.name, c.value, sysdate) from gv\$instance a, gv\$statname b, gv\$sysstat c where a.inst_id = b.inst_id and b.inst_id = c.inst_id and b.statistic# = c.statistic# and b.name in ('execute count','parse count (hard)','parse count (total)','physical read total IO requests','physical read total bytes','physical write total IO requests','physical write total bytes','redo size','session logical reads','user commits','cell physical IO interconnect bytes returned by smart scan','cell physical IO bytes saved by storage index','cell flash cache read hits','gc cr blocks served','gc current blocks served','gc cr blocks received','gc current blocks received','gcs messages sent','ges messages sent')
union all
select ty_ginst(d.inst_id, e.instance_name, d.stat_name, d.value, sysdate) from gv\$osstat d, gv\$instance e where d.inst_id = e.inst_id and d.stat_name in ('IDLE_TIME','USER_TIME','SYS_TIME','IOWAIT_TIME','BUSY_TIME','NICE_TIME','NUM_CPU_CORES')
union all
select ty_ginst(i.inst_id, i.instance_name, d.name, d.value, sysdate) from gv\$instance i, gv\$dlm_misc d where i.inst_id = d.inst_id and d.name in ('gcs msgs received','ges msgs received')]';
begin
  execute immediate fv_sql bulk collect into fv_ginst;
return fv_ginst;
exception
  when others then
raise_application_Error(-20001,'GINSTEFF : ' || sqlerrm);
end;
-------------------
------##################
-- ginstbuilddata - once data set is ready by calling ginsteff [ above function ], ginstbuilddata
-- format the data by query both samples [ pv_first_ginst and pv_last_ginst ]
------##################
function ginstbuilddata (fv_firstsample ta_ginst, fv_lastsample  ta_ginst) return ta_obj
is
fv_ta_obj      ta_obj := ta_obj();
v_sampl_time   int;
v_total_time   int;
-- Variables to store sum values for cluster
vt_tprse       int := 0;
vt_hprse       int := 0;
vt_phwio       int := 0;
vt_phwmb       int := 0;
vt_phrio       int := 0;
vt_phrmb       int := 0;
vt_slio        int := 0;
vt_exec        int := 0;
vt_redo        int := 0;
vt_comt        int := 0;
vt_exSS        int := 0;
vt_exSI        int := 0;
vt_exFC        int := 0;
begin
pv_only_gc.delete;
fv_ta_obj.extend;
fv_ta_obj(fv_ta_obj.count) := ty_obj( '+Inst-------+CPUIDL%--IO%-USR%--SYS%+--Tprse/s--+Hprse/s+--PhyWIO/s-+-PhyWMB/s-+--PhyRIO/s--+-PhyRMB/s-+-SessLIO/s--+---Exec/s-+RedoMB/s+Commit/s+-ExSSMB/s-+-ExSIMB/s+-ExFCRh/s+') ;
    --- updating CPU info -- updating with every sample in case new node join/leave the cluser
        select sum(first.value) into pv_num_cpus from table (fv_firstsample) first where first.statname = 'NUM_CPU_CORES';
    --- Initializing package variables with sample time for later use.
        select first.times,last.times  into pv_st_sample, pv_et_sample from table (fv_firstsample) first, table( fv_lastsample ) last where rownum = 1;
    ---# Not using pv_sample as selecting across multiple instances may take more time, so would be wise to calculate sample based on timestamps
        v_sampl_time := (pv_et_sample - pv_st_sample ) *24*60*60 ;
    -------
   for i in (select distinct inst_id from table(fv_lastsample ) order by inst_id ) loop -- processing order by inst_id. Pls. note : no restriction on no. of instances
            -------------
            for ii in (select b.inst_id,b.inst_name,
                        max(decode(b.statname,'DB time', round((b.value-a.value)/v_sampl_time)))                                                               dbtime,
                        max(decode(b.statname,'parse count (total)', round((b.value-a.value)/v_sampl_time)))                                                   Tparse,
                        max(decode(b.statname,'parse count (hard)', round((b.value-a.value)/v_sampl_time)))                                                    Hparse,
                        max(decode(b.statname,'physical write total IO requests', round((b.value-a.value)/v_sampl_time)))                                      PhyWIO,
                        max(decode(b.statname,'physical write total bytes', round(((b.value-a.value)/1048576)/v_sampl_time)))                                  PhyWMB,
                        max(decode(b.statname,'physical read total IO requests', round((b.value-a.value)/v_sampl_time)))                                       PhyRIO,
                        max(decode(b.statname,'physical read total bytes', round(((b.value-a.value)/1048576)/v_sampl_time)))                                   PhyRMB,
                        max(decode(b.statname,'session logical reads', round((b.value-a.value)/v_sampl_time)))                                                 SessLIO,
                        max(decode(b.statname,'execute count', round((b.value-a.value)/v_sampl_time)))                                                         TotExec,
                        max(decode(b.statname,'redo size', round(((b.value-a.value)/1048576)/v_sampl_time)))                                                   RedoMB,
                        max(decode(b.statname,'user commits', round((b.value-a.value)/v_sampl_time)))                                                          Ccommit,
                        sum(decode(b.statname,'IDLE_TIME', round((b.value-a.value)/v_sampl_time)))                                                             idle_time,
                        sum(decode(b.statname,'USER_TIME', round((b.value-a.value)/v_sampl_time)))                                                             user_time,
                        sum(decode(b.statname,'SYS_TIME',  round((b.value-a.value)/v_sampl_time)))                                                             sys_time,
                        sum(decode(b.statname,'IOWAIT_TIME', round((b.value-a.value)/v_sampl_time)))                                                           iowait_time,
                        sum(decode(b.statname,'BUSY_TIME', round((b.value-a.value)/v_sampl_time)))                                                             busy_time,
                        sum(decode(b.statname,'NICE_TIME', round((b.value-a.value)/v_sampl_time)))                                                             nice_time,
                        sum(decode(b.statname,'cell physical IO interconnect bytes returned by smart scan', round(((b.value-a.value)/1048576)/v_sampl_time)))  ExSSMB,
                        sum(decode(b.statname,'cell physical IO bytes saved by storage index', round(((b.value-a.value)/1048576)/v_sampl_time)))               ExSIMB,
                        sum(decode(b.statname,'cell flash cache read hits', round(((b.value-a.value))/v_sampl_time)))                                          ExFCRh,
                        sum(decode(b.statname,'gc cr blocks served', round(((b.value-a.value))/v_sampl_time)))                                                 GCCRBS,
                        sum(decode(b.statname,'gc current blocks served', round(((b.value-a.value))/v_sampl_time)))                                            GCCUBS,
                        sum(decode(b.statname,'gc cr blocks received', round(((b.value-a.value))/v_sampl_time)))                                               GCCRBR,
                        sum(decode(b.statname,'gc current blocks received', round(((b.value-a.value))/v_sampl_time)))                                          GCCUBR,
                        sum(decode(b.statname,'gcs msgs received', round(((b.value-a.value))/v_sampl_time)))                                                   GCSMR,
                        sum(decode(b.statname,'ges msgs received', round(((b.value-a.value))/v_sampl_time)))                                                   GESMR,
                        sum(decode(b.statname,'gcs messages sent', round(((b.value-a.value))/v_sampl_time)))                                                   GCSMS,
                        sum(decode(b.statname,'ges messages sent', round(((b.value-a.value))/v_sampl_time)))                                                   GESMS
                        from table(fv_lastsample) b, table(fv_firstsample) a
                        where a.inst_id = b.inst_id and a.statname = b.statname and a.inst_id = i.inst_id group by b.inst_id,b.inst_name) loop
            v_total_time :=  ii.idle_time+ii.busy_time;
            fv_ta_obj.extend;
            fv_ta_obj(fv_ta_obj.count) := ty_obj( '|' ||
              rpad(substr(ii.inst_name,1,11),11,' ') || '|' ||
              lpad(trunc(100-((ii.iowait_time+ii.user_time+ii.sys_time+ii.nice_time)/v_total_time*100),1) || ' ',6,' ') ||
              lpad(trunc(ii.iowait_time/v_total_time*100,1),5,' ') || ' ' ||
              lpad(trunc(ii.user_time/v_total_time*100,1),5,' ') || ' ' ||
              lpad(trunc(ii.sys_time/v_total_time*100,1),5,' ') || '|' ||
              lpad(ii.Tparse,11,' ') || '|' ||
              lpad(ii.Hparse,7,' ') || '|' ||
              lpad(ii.Phywio,11,' ') || '|' ||
              lpad(ii.phywmb,10,' ') || '|' ||
              lpad(ii.phyrio,12,' ') || '|' ||
              lpad(ii.phyrmb,10,' ') || '|' ||
              lpad(ii.sesslio,12,' ') || '|' ||
              lpad(ii.totexec,10,' ') || '|' ||
              lpad(ii.redomb,8,' ') || '|' ||
              lpad(ii.ccommit,8,' ') || '|' ||
              lpad(ii.ExSSMB,10,' ') || '|' ||
              lpad(ii.ExSIMB,9,' ') || '|' ||
              lpad(ii.ExFCRh,9,' ') || '|'
              ) ;
      -- Filling GC data into global array for later use., info for columns related to gc* waits
            pv_only_gc.extend;
            pv_only_gc(pv_only_gc.count) := ty_gc(ii.inst_id,ii.GCCRBS+ii.GCCUBS,ii.GCCRBR+ii.GCCRBR,ii.GCSMR+ii.GESMR+ii.GCSMS+ii.GESMS);
          -------------- Getting Total/sum
            vt_tprse   :=  vt_tprse + ii.tparse;
            vt_hprse   :=  vt_hprse + ii.hparse;
            vt_phwio   :=  vt_phwio + ii.phywio;
            vt_phwmb   :=  vt_phwmb + ii.phywmb;
            vt_phrio   :=  vt_phrio + ii.phyrio;
            vt_phrmb   :=  vt_phrmb + ii.phyrmb;
            vt_slio    :=  vt_slio  + ii.sesslio;
            vt_exec    :=  vt_exec  + ii.totexec;
            vt_redo    :=  vt_redo  + ii.redomb;
            vt_comt    :=  vt_comt  + ii.ccommit;
            vt_exSS    :=  vt_exSS  + ii.ExSSMB;
            vt_exSI    :=  vt_exSI  + ii.ExSIMB;
            vt_exFC    :=  vt_exFC  + ii.ExFCRh;
         --------------
          end loop;
   end loop;
  -------
     fv_ta_obj.extend;
     fv_ta_obj(fv_ta_obj.count) := ty_obj( '+-----------+-----------------------+-----------+-------+-----------+----------+------------+----------+------------+----------+--------+--------+----------+---------+---------+'  )  ;
     fv_ta_obj.extend;
     fv_ta_obj(fv_ta_obj.count) := ty_obj( '                              TOTAL :' || lpad(vt_tprse,11,' ')||','||lpad(vt_hprse,7,' ')||','||lpad(vt_phwio,11,' ')||','||lpad(vt_phwmb,10,' ')||','||lpad(vt_phrio,12,' ')||','||lpad(vt_phrmb,10,' ')||','||lpad(vt_slio,12,' ')||','||lpad(vt_exec,10,' ')||','||lpad(vt_redo,8,' ')||','||lpad(vt_comt,8,' ')||','||lpad(vt_ExSS,10,' ')||','||lpad(vt_ExSI,9,' ')||','||lpad(vt_ExFC,9,' ')||',' );
return fv_ta_obj;
exception
when others then
raise_application_Error(-20001,'GINSTBUILDDATA: '||sqlerrm );
end;
-------------------
------##################
-- gash - build dataset from gv\$active_Session_history for the given sample time,
-- added logic to eliminate the own session info
------##################
FUNCTION GASH (FV_ST_SMPLTIME DATE,FV_ET_SMPLTIME DATE) RETURN TA_GASH
is
FV_GASH    TA_GASH := TA_GASH();
FV_SQL     VARCHAR2(2000);
BEGIN
IF PV_VERSION = 12 THEN
-- In below cursor, I am using IS_RESOLVED_ADAPTIVE_PLAN for 12c.
-- Using Min function for SQL Plan Control to pick the plan with sql patch/profile/adaptive info in case when we have both plans
FV_SQL  := q'[select ty_gash(gash.Inst_id, gash.session_id, gash.sql_id, gash.sql_child_number, substr(sql_Text,1,100), decode(sql_plan_hash_value,0,null,sql_plan_hash_value), round(decode(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,0,100*(IO_CELL_OFFLOAD_ELIGIBLE_BYTES-IO_INTERCONNECT_BYTES)/decode(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,1,IO_CELL_OFFLOAD_ELIGIBLE_BYTES))), substr(nvl2(sql_profile,'SProf',null)||nvl2(sql_plan_baseline,'SBase',null)||nvl2(sql_patch,'SPatc',null)||nvl2( decode(IS_RESOLVED_ADAPTIVE_PLAN,'Y','Y'),'ADapt',null),1,9), pga_allocated, temp_space_allocated, case when session_state = 'WAITING' then gash.event else 'ON CPU' end, case when session_state = 'WAITING' then gash.wait_class else 'ON CPU' end, gash.delta_Time, gash.current_obj#)
from gv\$active_Session_history gash, gv\$sql gsql
where gash.sample_time between :fv_st_smpltime and :fv_et_smpltime
and  gash.program not like '%(PZ%'
and  gash.delta_time > 0
and (gash.wait_class != 'Idle' or gash.session_state != 'WAITING')
and  gash.inst_id || ':' || gash.session_id != sys_context('userenv','INSTANCE') || ':' || sys_context('userenv','SID')
and gash.inst_id = gsql.inst_id and gash.sql_id=gsql.sql_id]';
else    -- For 11gR2 Version
FV_SQL  := q'[select ty_gash(gash.Inst_id, gash.session_id, gash.sql_id, gash.sql_child_number, substr(sql_Text,1,100), decode(sql_plan_hash_value,0,null,sql_plan_hash_value), round(decode(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,0,100*(IO_CELL_OFFLOAD_ELIGIBLE_BYTES-IO_INTERCONNECT_BYTES)/decode(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,1,IO_CELL_OFFLOAD_ELIGIBLE_BYTES))), substr(nvl2(sql_profile,'SProf',null)||nvl2(sql_plan_baseline,'SBase',null)||nvl2(sql_patch,'SPatc',null),1,9), pga_allocated, temp_space_allocated, case when session_state = 'WAITING' then gash.event else 'ON CPU' end, case when session_state = 'WAITING' then gash.wait_class else 'ON CPU' end, gash.delta_Time, gash.current_obj#)
from gv\$active_Session_history gash, gv\$sql gsql
where gash.sample_time between :fv_st_smpltime and :fv_et_smpltime
and gash.program not like '%(PZ%'
and gash.delta_time > 0
and (gash.wait_class != 'Idle' or gash.session_state != 'WAITING')
and gash.inst_id || ':' || gash.session_id != sys_context('userenv','INSTANCE') || ':' || sys_context('userenv','SID')
and gash.inst_id = gsql.inst_id and gash.sql_id = gsql.sql_id]';
END IF;
execute immediate fv_sql bulk collect into fv_gash using fv_st_smpltime,fv_et_smpltime;
return fv_gash;
end;
-------------------
------##################
-- gashbuilddata - it access data from collection pv_only_gash built in gash function for given sample
------##################
function gashbuilddata (fv_only_gash ta_gash ) return ta_obj
is
fv_ta_obj      ta_obj := ta_obj();
fv_wait_obj    ta_obj := ta_obj();
fv_sql_obj     ta_obj := ta_obj();
fv_output      varchar2(200);
fv_sid_string  varchar2(66);
begin
--js resetting graph wait variables
pv_cpuwaitpct := 0;
pv_iowaitpct  := 0;
pv_cluwaitpct := 0;
pv_othwaitpct := 0;
------------
pv_top_sql.delete;
--- getting top 5 events based on time spent event wise
for i in (select pct,event,wait_class from (select wait_class,event, round(evnttime/tottime * 100,1) pct from
(select wait_class,event, sum(time_waited) evnttime from table(fv_only_gash) where event is not null group by wait_class, event ) evnt,
(select sum(time_Waited) tottime from table(fv_only_gash )) tot order by pct desc) where rownum < 6) loop
FV_WAIT_OBJ.EXTEND;
fv_wait_obj(fv_wait_obj.count) :=  ty_obj('| ' || lpad(round(i.pct,1) || '%',6,' ') || ' | ' || rpad(substr(i.event,1,34),34,' ') || ' | ' || rpad(i.wait_class,13,' ') || ' |');
-------------- Storing info in 4 variables to get the % of of all the waits for total active sessions for graph
case
when i.wait_class = 'ON CPU'      then pv_cpuwaitpct :=   (pv_cpuwaitpct + i.pct);
when i.wait_class = 'User I/O'    then pv_iowaitpct  :=   (pv_iowaitpct  + i.pct);
when i.wait_class = 'System I/O'  then pv_iowaitpct  :=   (pv_iowaitpct  + i.pct);
when i.wait_class = 'Cluster'     then pv_cluwaitpct :=   (pv_cluwaitpct + i.pct);
ELSE
pv_othwaitpct := (pv_othwaitpct + i.pct );
end case;
-------------
end loop;
--- getting top 5 sqls based on time spent event wise
 FOR II IN (select PLANHASH, PCT,SQL_ID || '(' || SQL_CHILD || ')' SQL_ID, OFFLOADPCT,PLANCNTRL, pgamb, tmpmb
 FROM      (select SQL_ID,SQL_CHILD, PLANHASH, OFFLOADPCT, PLANCNTRL, ROUND(SQLTIME/TOTTIME * 100,1) PCT, PGAMB, TMPMB
 FROM      (select SQL_ID,SQL_CHILD, PLANHASH, max(OFFLOADPCT) OFFLOADPCT,min(PLANCNTRL) PLANCNTRL, max(pgamb) pgamb, max(tmpmb) tmpmb, SUM(TIME_WAITED) SQLTIME FROM TABLE(FV_ONLY_GASH)
where sql_id is not null group by sql_id,sql_child, planhash ) sqlt,
(select sum(time_Waited) tottime from  table(fv_only_gash)) tot order by pct desc) where rownum < 6) loop
--- building inst_id and sid string for top sqls
select substr(sidstring,1,66) into fv_sid_string
from (select  listagg(inst_id || ':' || sid,', ') within group (order by  sql_id || '(' || sql_child || ')' ) sidstring
FROM (select DISTINCT SQL_ID, SQL_CHILD, INST_ID, SID FROM TABLE(FV_ONLY_GASH) WHERE SQL_ID || '(' || SQL_CHILD || ')' = II.SQL_ID));
V_PGAMB := FBYT(II.PGAMB);
v_tmpmb := fbyt(ii.tmpmb);
            FV_SQL_OBJ.EXTEND;
            fv_sql_obj(fv_sql_obj.count)  :=  ty_obj('    | ' || lpad(round(ii.pct,1) || '%',6,' ') || ' | ' || rpad(ii.sql_id,17,' ') || '| ' || rpad(nvl(ii.planhash,' '),9,' ') || ' | ' || lpad(ii.OFFLOADPCT || '%',7,' ') || ' |' || lpad(v_pgamb,7,' ') || '|' || lpad(v_tmpmb,7,' ') || '| ' || rpad(nvl(ii.PLANCNTRL,' '),5,' ') || ' | ' || rpad(fv_sid_string,32,' ') || ' |');
                --- filling global collection pv_top_sql for later use
           pv_top_sql.extend; pv_top_sql(pv_Top_sql.count) := ty_obj(substr(ii.sql_id,1,13));
 end loop;
  FV_TA_OBJ.EXTEND;
  fv_ta_obj(fv_ta_obj.count) := ty_obj('+IMPACT%-+--TOP WAIT EVENTS-------------------+-WAIT CLASS----+    +IMPACT%-+ TOP SQLs (child)-+--PLAN#----+-OFFLOAD-+--PGA--+--TEMP-+-PLANC-+------TOP SESSIONS----INST:SID----+' ) ;
--- printing top wait events and top sqls
  for iii in 1..greatest(fv_wait_obj.count,fv_sql_obj.count) loop
    IF FV_WAIT_OBJ.EXISTS(III)
      then
        fv_output := fv_wait_obj(iii).output;
      ELSE
        FV_OUTPUT :=                         '|        |                                    |               |' ;
      end if;
      if fv_sql_obj.exists(iii) then
        fv_output := fv_output || fv_sql_obj(iii).output;
      ELSE
       FV_OUTPUT := FV_OUTPUT || '    |        |                  |           |         |       |       |       |                                  |';
            END IF;
             fv_ta_obj.extend;
             fv_ta_obj(fv_ta_obj.count) := ty_obj(fv_output);
  end loop;
  FV_TA_OBJ.EXTEND;
  fv_ta_obj(fv_ta_obj.count) := ty_obj('+--------+------------------------------------+---------------+    +--------+------------------+-----------+---------+-------+-------+-------+----------------------------------+' );
 -- adding emplty lines to getting fixed ASG [Active Session Graph ]
 for iv in 1..(7-fv_ta_obj.count) loop
   fv_ta_obj.extend;
   fv_ta_obj(fv_ta_obj.count):= ty_obj(' ');
   end loop;
return fv_ta_obj;
--exception
--when others then
--raise_application_Error(-20001,'GASH: ' || sqlerrm);
end;
-------------------
----#######################
PROCEDURE PRINT_MAXCPU(v_ARRAYNO  INT )
as
BEGIN
PA69(V_ARRAYNO).OUTPUT := '-';
PA68(V_ARRAYNO).OUTPUT := 'M';
PA67(V_ARRAYNO).OUTPUT := 'A';
PA66(V_ARRAYNO).OUTPUT := 'X';
PA65(V_ARRAYNO).OUTPUT := ' ';
PA64(V_ARRAYNO).OUTPUT := 'C';
PA63(V_ARRAYNO).OUTPUT := 'P';
PA62(V_ARRAYNO).OUTPUT := 'U';
PA61(V_ARRAYNO).OUTPUT := '[';
if length(pv_num_cpus)= 1 then
PA60(V_ARRAYNO).OUTPUT := PV_NUM_CPUS;
PA59(V_ARRAYNO).OUTPUT := ']';
PA58(V_ARRAYNO).OUTPUT := '-';
ELSIF LENGTH(PV_NUM_CPUS)= 2 THEN
PA60(V_ARRAYNO).OUTPUT := SUBSTR(PV_NUM_CPUS,1,1);
PA59(V_ARRAYNO).OUTPUT := SUBSTR(PV_NUM_CPUS,2,1);
PA58(V_ARRAYNO).OUTPUT := ']';
PA57(V_ARRAYNO).OUTPUT := '-';
ELSIF LENGTH(PV_NUM_CPUS)= 3 THEN
PA60(V_ARRAYNO).OUTPUT := SUBSTR(PV_NUM_CPUS,1,1);
PA59(V_ARRAYNO).OUTPUT := SUBSTR(PV_NUM_CPUS,2,1);
PA58(V_ARRAYNO).OUTPUT := SUBSTR(PV_NUM_CPUS,3,1);
PA57(V_ARRAYNO).OUTPUT := ']';
PA56(V_ARRAYNO).OUTPUT := '-';
END IF;
end;
------------------
------##################
-- Gcinfo uses pv_only_gc collection built by ginstbuilddata to format
------##################
function gcinfo return ta_obj
as
fv_gcs     ta_obj := ta_obj();
fv_topgseg ta_obj := ta_obj();
fv_ta_obj  ta_obj := ta_obj();
fv_seg              varchar2(40);
fv_totblks           int;
fv_totmsgs           int;
begin
------------------------------
-- *BASED on AWR, below formula can be used to calculate  Estd interconnect Traffic
------------------------------
/*
Estd Interconnect traffic (KB): =(('gc cr blocks received' + 'gc current blocks received' + 'gc cr blocks served' + 'gc current blocks served') * db Block size)
+ (('gcs messages sent' + 'ges messages sent' + 'gcs msgs received' + 'ges msgs received' )* 200 )/1024/
 -- Sample Calculation from AWR using Above Formula
 Global Cache Load Profile
~~~~~~~~~~~~~~~~~~~~                  Per Second       Per Transact
                                      ---------------       ------------
  Global Cache blocks received:              1,086.29                  3
    Global Cache blocks served:              1,088.33                  3
     GCS/GES messages received:              2,736.50                  9
         GCS/GES messages sent:              2,681.79                  9
            DBWR Fusion writes:                  5.90                  0
 Estd Interconnect traffic (KB)             18,455.23
((1086.29 + 1088.33) * 8192) / 1024 = 17396.96
((2736.50 + 2681.79) * 200 / 1024 = 1058.26
 17396.96 + 1058.26  = (18455.22) <-- Final Value
*/
--  pv_only_gc is being populated from ginstbuilddata function [ access gv\$sysstat and gv\$dlm_misc ] only for GC* waits
--  calculating totblks received/sent and total GCS/GES messages received/sent
for i in 1..pv_only_gc.count loop
fv_totblks :=  (nvl(pv_only_gc(i).GCBCS,0) + nvl(pv_only_gc(i).GCBRS,0)) * pv_block_size ;
fv_totmsgs :=   nvl(pv_only_gc(i).GMSR,0) * 200 ;
fv_gcs.extend;
fv_gcs(fv_gcs.count) := ty_obj ( lpad(pv_only_gc(i).inst_id,3,' ') || ' | ' || lpad(nvl(pv_only_gc(i).GCBCS,0),9,' ') || '|' || lpad(nvl(pv_only_gc(i).GCBRS,0),10,' ') || '|' || lpad(round(((fv_totblks+fv_totmsgs)/1048576),1),11,' ') || '|');
end loop;
--
--  querying pv_only_gash [ global active session history data for Cluster waits and using current_obj# to find the topobject
   for ii in (select * from (select obj#, round(evnttime/tottime * 100,1) pct from
                            (select  obj#,sum(time_waited) evnttime from table(pv_only_gash) where wait_class = 'Cluster' and  obj# != -1 group by obj# ) gcobj,
                            (select sum(time_Waited) tottime from table(pv_only_gash ) where wait_class = 'Cluster' and  obj# != -1 ) tot order by pct desc) where rownum < 6) loop
            begin
            --- getting object name from gv\$segment_statistics
            select rpad((substr(s.object_type,1,3) || ':' || substr(s.object_name || nvl2(subobject_name, ':' || subobject_name,null),1,33)),37,' ') into fv_seg from gv\$segment_statistics s where s.obj# = ii.obj# and rownum = 1;
            exception
            when no_data_found then
            fv_seg := 'Obj ID not populated' ;
            end;
            fv_topgseg.extend;
            fv_topgseg(fv_topgseg.count) := ty_obj (' |' || lpad(ii.pct || '%',5) || ' ' || fv_seg);
            end loop;
--
-- building header for Global Cache info
fv_ta_obj.extend;fv_ta_obj(fv_ta_obj.count) := ty_obj( '    |  Global  |  Global  | Estd.     |                            ');
fv_ta_obj.extend;fv_ta_obj(fv_ta_obj.count) := ty_obj( '    |  Cache   |  Cache   | Intercnt  |  | TOP Segments by GC*     |');
FV_TA_OBJ.EXTEND;FV_TA_OBJ(FV_TA_OBJ.COUNT) := TY_OBJ( 'Inst|  Blocks  |  Blocks  | Traffic   |  | Waits                   |');
FV_TA_OBJ.EXTEND;FV_TA_OBJ(FV_TA_OBJ.COUNT) := TY_OBJ( '  ID|  Sent/s  |  Rcvd/s  | MB/s      |  | IMPACT% [Type:Segment]  |');
fv_ta_obj.extend;fv_ta_obj(fv_ta_obj.count) := ty_obj( '+---+----------+----------+-----------+  +-------------------------+');
            for iii in 1..12 loop     -- Concatinating output about GC info and TOP Segment
               if fv_gcs.count < iii then fv_gcs.extend; end if;
               if fv_topgseg.count < iii then fv_topgseg.extend; end if;
            fv_ta_obj.extend; fv_ta_obj(fv_ta_obj.count) := ty_obj(rpad(nvl(fv_gcs(iii).output,' '),39,' ') || ' ' || fv_topgseg(iii).output );
            end loop;
return fv_ta_obj;
exception
when others then
raise_application_Error(-20001,'GCINFO : ' || sqlerrm );
end ;
-------------------
------##################
--   stactsessar - it shuffles all the arrays to have moving effect in ASG
--   it also rearrange the max sess based on the changed array range.
------##################
procedure stactsessarr
as
procedure setgraphdigit(p_varrlenset int, p_pa in out ta_obj)
as
begin
pv_work_done := 1 ;
pva := 0;
pvb := 0;
pvc := 0;
pvd := 0;
pve := 0;
 if to_number(p_pa(18).output) > 0 then    -- CPU
     p_localarray := round(p_varrlenset * to_number(p_pa(18).output)/100) ;
     if p_localarray > 0 then
          for i in pv_work_done..p_localarray loop
            p_pa(i) := ty_obj(pv_cpu_dig) ;
            end loop;
          pv_work_done := pv_work_done + p_localarray ;
     end if;
end if;
if to_number(p_pa(19).output) > 0 then    -- IO
     p_localarray := round( p_varrlenset * to_number(p_pa(19).output)/100);
     if p_localarray > 0 then
          for i in pv_work_done..(pv_work_done + p_localarray) loop
            p_pa(i) := ty_obj(pv_io_dig) ;
          end loop;
          pv_work_done :=  pv_work_done + p_localarray ;
     end if;
end if;
if to_number(p_pa(20).output) > 0 then    -- CLU
     p_localarray := round( p_varrlenset * to_number(p_pa(20).output)/100);
     if p_localarray > 0 then
          for i in pv_work_done..(pv_work_done + p_localarray) loop
            p_pa(i) := ty_obj(pv_CLU_dig) ;
          end loop;
          pv_work_done :=  pv_work_done + p_localarray ;
     end if;
end if;
if to_number(p_pa(21).output) > 0 then    -- OTH
     p_localarray := round( p_varrlenset * to_number(p_pa(21).output)/100);
     if p_localarray > 0 then
          for i in pv_work_done..(pv_work_done + p_localarray) loop
            p_pa(i) := ty_obj(pv_oth_dig) ;
          end loop;
          pv_work_done :=  pv_work_done + p_localarray ;
     end if;
end if;
     FOR I IN (P_VARRLENSET+1)..15 LOOP  --filling remaining array
         P_PA(I) := TY_OBJ(' ');   -- I have replaced single space ' ' with ' ' to adjust colored graph
       end loop;
 end;
begin
 --- shuffling array except the first one
pa80 := pa79; pa79 := pa78; pa78 := pa77; pa77 := pa76; pa76 := pa75; pa75 := pa74; pa74 := pa73; pa73 := pa72; pa72 := pa71; pa71 := pa70;
pa70 := pa69; pa69 := pa68; pa68 := pa67; pa67 := pa66; pa66 := pa65; pa65 := pa64; pa64 := pa63; pa63 := pa62; pa62 := pa61; pa61 := pa60;
pa60 := pa59; pa59 := pa58; pa58 := pa57; pa57 := pa56; pa56 := pa55; pa55 := pa54; pa54 := pa53; pa53 := pa52; pa52 := pa51; pa51 := pa50;
pa50 := pa49; pa49 := pa48; pa48 := pa47; pa47 := pa46; pa46 := pa45; pa45 := pa44; pa44 := pa43; pa43 := pa42; pa42 := pa41; pa41 := pa40;
pa40 := pa39; pa39 := pa38; pa38 := pa37; pa37 := pa36; pa36 := pa35; pa35 := pa34; pa34 := pa33; pa33 := pa32; pa32 := pa31; pa31 := pa30;
pa30 := pa29; pa29 := pa28; pa28 := pa27; pa27 := pa26; pa26 := pa25; pa25 := pa24; pa24 := pa23; pa23 := pa22; pa22 := pa21; pa21 := pa20;
pa20 := pa19; pa19 := pa18; pa18 := pa17; pa17 := pa16; pa16 := pa15; pa15 := pa14; pa14:=pa13; pa13:=pa12; pa12:=pa11; pa11:=pa10;
pa10:= pa9; pa9:=pa8; pa8 :=pa7; pa7:=pa6; pa6:=pa5; pa5:=pa4; pa4:=pa3; pa3:=pa2; pa2:=pa1;
    -- updating first array
       pa1(21) := ty_obj(pv_othwaitpct);
       pa1(20) := ty_obj(pv_cluwaitpct);
       pa1(19) := ty_obj(pv_iowaitpct);
       pa1(18) := ty_obj(pv_cpuwaitpct);
       pa1(17) := ty_obj(pv_maxval);
       pa1(16) := ty_obj(pv_maxsess);
--- here else clause is used for the empty arrays when we start dashboard
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa1(16).output) then js_maxsess := to_number(pa1(16).output); js_arr := i-1;  setgraphdigit(i-1,pa1);  exit; else pa1(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa2(16).output) then setgraphdigit(i-1,pa2);  exit; else pa2(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa3(16).output) then setgraphdigit(i-1,pa3);  exit; else pa3(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa4(16).output) then setgraphdigit(i-1,pa4);  exit; else pa4(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa5(16).output) then setgraphdigit(i-1,pa5);  exit; else pa5(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa6(16).output) then setgraphdigit(i-1,pa6);  exit; else pa6(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa7(16).output) then setgraphdigit(i-1,pa7);  exit; else pa7(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa8(16).output) then setgraphdigit(i-1,pa8);  exit; else pa8(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa9(16).output) then setgraphdigit(i-1,pa9);  exit; else pa9(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa10(16).output) then setgraphdigit(i-1,pa10);  exit; else pa10(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa11(16).output) then setgraphdigit(i-1,pa11);  exit; else pa11(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa12(16).output) then setgraphdigit(i-1,pa12);  exit; else pa12(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa13(16).output) then setgraphdigit(i-1,pa13);  exit; else pa13(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa14(16).output) then setgraphdigit(i-1,pa14);  exit; else pa14(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa15(16).output) then setgraphdigit(i-1,pa15);  exit; else pa15(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa16(16).output) then setgraphdigit(i-1,pa16);  exit; else pa16(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa17(16).output) then setgraphdigit(i-1,pa17);  exit; else pa17(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa18(16).output) then setgraphdigit(i-1,pa18);  exit; else pa18(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa19(16).output) then setgraphdigit(i-1,pa19);  exit; else pa19(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa20(16).output) then setgraphdigit(i-1,pa20);  exit; else pa20(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa21(16).output) then setgraphdigit(i-1,pa21);  exit; else pa21(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa22(16).output) then setgraphdigit(i-1,pa22);  exit; else pa22(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa23(16).output) then setgraphdigit(i-1,pa23);  exit; else pa23(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa24(16).output) then setgraphdigit(i-1,pa24);  exit; else pa24(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa25(16).output) then setgraphdigit(i-1,pa25);  exit; else pa25(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa26(16).output) then setgraphdigit(i-1,pa26);  exit; else pa26(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa27(16).output) then setgraphdigit(i-1,pa27);  exit; else pa27(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa28(16).output) then setgraphdigit(i-1,pa28);  exit; else pa28(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa29(16).output) then setgraphdigit(i-1,pa29);  exit; else pa29(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa30(16).output) then setgraphdigit(i-1,pa30);  exit; else pa30(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa31(16).output) then setgraphdigit(i-1,pa31);  exit; else pa31(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa32(16).output) then setgraphdigit(i-1,pa32);  exit; else pa32(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa33(16).output) then setgraphdigit(i-1,pa33);  exit; else pa33(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa34(16).output) then setgraphdigit(i-1,pa34);  exit; else pa34(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa35(16).output) then setgraphdigit(i-1,pa35);  exit; else pa35(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa36(16).output) then setgraphdigit(i-1,pa36);  exit; else pa36(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa37(16).output) then setgraphdigit(i-1,pa37);  exit; else pa37(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa38(16).output) then setgraphdigit(i-1,pa38);  exit; else pa38(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa39(16).output) then setgraphdigit(i-1,pa39);  exit; else pa39(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa40(16).output) then setgraphdigit(i-1,pa40);  exit; else pa40(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa41(16).output) then setgraphdigit(i-1,pa41);  exit; else pa41(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa42(16).output) then setgraphdigit(i-1,pa42);  exit; else pa42(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa43(16).output) then setgraphdigit(i-1,pa43);  exit; else pa43(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa44(16).output) then setgraphdigit(i-1,pa44);  exit; else pa44(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa45(16).output) then setgraphdigit(i-1,pa45);  exit; else pa45(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa46(16).output) then setgraphdigit(i-1,pa46);  exit; else pa46(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa47(16).output) then setgraphdigit(i-1,pa47);  exit; else pa47(i) := ty_obj(' ');   end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa48(16).output) then setgraphdigit(i-1,pa48);  exit; else pa48(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa49(16).output) then setgraphdigit(i-1,pa49);  exit; else pa49(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa50(16).output) then setgraphdigit(i-1,pa50);  exit; else pa50(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa51(16).output) then setgraphdigit(i-1,pa51);  exit; else pa51(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa52(16).output) then setgraphdigit(i-1,pa52);  exit; else pa52(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa53(16).output) then setgraphdigit(i-1,pa53);  exit; else pa53(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa54(16).output) then setgraphdigit(i-1,pa54);  exit; else pa54(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa55(16).output) then setgraphdigit(i-1,pa55);  exit; else pa55(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa56(16).output) then setgraphdigit(i-1,pa56);  exit; else pa56(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa57(16).output) then setgraphdigit(i-1,pa57);  exit; else pa57(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa58(16).output) then setgraphdigit(i-1,pa58);  exit; else pa58(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa59(16).output) then setgraphdigit(i-1,pa59);  exit; else pa59(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa60(16).output) then setgraphdigit(i-1,pa60);  exit; else pa60(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa61(16).output) then setgraphdigit(i-1,pa61);  exit; else pa61(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa62(16).output) then setgraphdigit(i-1,pa62);  exit; else pa62(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa63(16).output) then setgraphdigit(i-1,pa63);  exit; else pa63(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa64(16).output) then setgraphdigit(i-1,pa64);  exit; else pa64(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa65(16).output) then setgraphdigit(i-1,pa65);  exit; else pa65(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa66(16).output) then setgraphdigit(i-1,pa66);  exit; else pa66(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa67(16).output) then setgraphdigit(i-1,pa67);  exit; else pa67(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa68(16).output) then setgraphdigit(i-1,pa68);  exit; else pa68(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa69(16).output) then setgraphdigit(i-1,pa69);  exit; else pa69(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa70(16).output) then setgraphdigit(i-1,pa70);  exit; else pa70(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa71(16).output) then setgraphdigit(i-1,pa71);  exit; else pa71(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa72(16).output) then setgraphdigit(i-1,pa72);  exit; else pa72(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa73(16).output) then setgraphdigit(i-1,pa73);  exit; else pa73(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa74(16).output) then setgraphdigit(i-1,pa74);  exit; else pa74(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa75(16).output) then setgraphdigit(i-1,pa75);  exit; else pa75(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa76(16).output) then setgraphdigit(i-1,pa76);  exit; else pa76(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa77(16).output) then setgraphdigit(i-1,pa77);  exit; else pa77(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa78(16).output) then setgraphdigit(i-1,pa78);  exit; else pa78(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa79(16).output) then setgraphdigit(i-1,pa79);  exit; else pa79(i) := ty_obj(' ');  end if;  end loop;
      for i in 1..15 loop  if to_number(pa_stet(i).output) > to_number(pa80(16).output) then setgraphdigit(i-1,pa80);  exit; else pa80(i) := ty_obj(' ');  end if;  end loop;
                for i in 2..15 loop
               if pv_num_cpus < to_number(pa_stet(i).output) then
                   pv_maxcpuprint := pa_stet(i-1).output;  exit; end if;
               end loop;
               -- printing exact active sess
               pa81.delete; pa81.extend(15);
               pa82.delete; pa82.extend(15);
               pa83.delete; pa83.extend(15);
               pa84.delete; pa84.extend(15);
               for i in 1..15 loop
               if  pa1(i).output in (pv_cpu_dig,pv_io_dig,pv_clu_dig,pv_oth_dig) then
                 null; -- need to add logic
                 else
                   if i > 1 then -- protecting being no active session
                   pa81(i-1) := ty_obj(substr(lpad(pv_maxsess,4,'_'),1,1));
                   pa82(i-1) := ty_obj(substr(lpad(pv_maxsess,4,'_'),2,1));
                   pa83(i-1) := ty_obj(substr(lpad(pv_maxsess,4,'_'),3,1));
                   pa84(i-1) := ty_obj(substr(lpad(pv_maxsess,4,'_'),4,1));
                   end if;
                 exit;
                 end if;
               end loop;
exception
when others then
raise_application_Error(-20001,'STACTSESSAR : ' || sqlerrm || '  ' || pv_work_done ) ;
end;
-------------------
------##################
-- gactses : it set the upper bound of array based on
-- no. of active sessions and add 15%
-- it also builds the range of sessions
------##################
Procedure gactses
is
begin
       -- Max active session at this point
       select  count (distinct ( inst_id||':'||sid )) into  pv_maxsess  from  table(pv_only_gash);
          -- Setting MAx VALUE top of CPU Vs Active sess and adding 15% -
        select case when round (max(pv_maxsess+(pv_maxsess*15/100))) < 15 then 15 else round (max(pv_maxsess+(pv_maxsess*15/100))) end  maxval  into pv_maxval from dual;
        --- searching if any existing array has got higher value.
             pv_tmp_maxval := greatest(pv_maxval,nvl(pa1(17).output,0),nvl(pa2(17).output,0),nvl(pa3(17).output,0),nvl(pa4(17).output,0)
            ,nvl(pa5(17).output,0),nvl(pa6(17).output,0), nvl(pa7(17).output,0),nvl(pa8(17).output,0),nvl(pa9(17).output,0),nvl(pa10(17).output,0),nvl(pa11(17).output,0)
            ,nvl(pa12(17).output,0),nvl(pa13(17).output,0),nvl(pa14(17).output,0),nvl(pa15(17).output,0)
            ,nvl(pa16(17).output,0) ,nvl(pa17(17).output,0) ,nvl(pa18(17).output,0) ,nvl(pa19(17).output,0) ,nvl(pa20(17).output,0)
            ,nvl(pa21(17).output,0) ,nvl(pa22(17).output,0) ,nvl(pa23(17).output,0) ,nvl(pa24(17).output,0) ,nvl(pa25(17).output,0)
            ,nvl(pa26(17).output,0) ,nvl(pa27(17).output,0) ,nvl(pa28(17).output,0) ,nvl(pa29(17).output,0) ,nvl(pa30(17).output,0)
            ,nvl(pa31(17).output,0) ,nvl(pa32(17).output,0) ,nvl(pa33(17).output,0) ,nvl(pa34(17).output,0) ,nvl(pa35(17).output,0)
            ,nvl(pa36(17).output,0) ,nvl(pa37(17).output,0) ,nvl(pa38(17).output,0) ,nvl(pa39(17).output,0) ,nvl(pa40(17).output,0)
            ,nvl(pa41(17).output,0) ,nvl(pa42(17).output,0) ,nvl(pa43(17).output,0) ,nvl(pa44(17).output,0) ,nvl(pa45(17).output,0)
            ,nvl(pa46(17).output,0) ,nvl(pa47(17).output,0) ,nvl(pa48(17).output,0) ,nvl(pa49(17).output,0) ,nvl(pa50(17).output,0)
            ,nvl(pa51(17).output,0) ,nvl(pa52(17).output,0) ,nvl(pa53(17).output,0) ,nvl(pa54(17).output,0) ,nvl(pa55(17).output,0)
            ,nvl(pa56(17).output,0) ,nvl(pa57(17).output,0) ,nvl(pa58(17).output,0) ,nvl(pa59(17).output,0) ,nvl(pa60(17).output,0)
            ,nvl(pa61(17).output,0) ,nvl(pa62(17).output,0) ,nvl(pa63(17).output,0) ,nvl(pa64(17).output,0) ,nvl(pa65(17).output,0)
            ,nvl(pa66(17).output,0) ,nvl(pa67(17).output,0) ,nvl(pa68(17).output,0) ,nvl(pa69(17).output,0) ,nvl(pa70(17).output,0)
            ,nvl(pa71(17).output,0) ,nvl(pa72(17).output,0) ,nvl(pa73(17).output,0) ,nvl(pa74(17).output,0) ,nvl(pa75(17).output,0)
            ,nvl(pa76(17).output,0) ,nvl(pa77(17).output,0) ,nvl(pa78(17).output,0) ,nvl(pa79(17).output,0) ,nvl(pa80(17).output,0));
          -- Fill Start/End array to print
             pa_stet.delete;
             select  ty_obj(val) bulk collect into pa_stet from
			 (select ceil(rownum * (pv_tmp_maxval/14)) val from dict where rownum < 15
        union all
        select 1 from dual) order by val;
        pa_stet.extend;
        pa_stet.extend;
stactsessarr;   -- calls stactsessarr to shuffle all the arrays to have moving effect
exception
when others then
raise_application_Error(-20001,'GACTSES : ' || sqlerrm);
end;
-------------------/
Procedure gset3sysmetrics (p_sysmetric_id1 int,p_sysmetric_id2 int,p_sysmetric_id3 int)
as
BEGIN
--------
PV_SYSMETRIC_STRING1 := ' ';   -- setting space for rpad
PV_SYSMETRIC_STRING2 := ' ';
PV_SYSMETRIC_STRING3 := ' ';
--------
--------------------------
select MAX(DECODE(METRIC_ID, NVL(P_SYSMETRIC_ID1,2144), V)),
       MAX(DECODE(METRIC_ID, NVL(P_SYSMETRIC_ID2,2008), V)),
       max(decode(metric_id, nvl(p_sysmetric_id3,2010), V))
       into
       pv_sysmetric_string1,
       PV_SYSMETRIC_STRING2,
       pv_sysmetric_string3
from
(select  metric_id, metric_name||'- '||V  v from
(select metric_id, METRIC_NAME, LISTAGG(VALUE, ', ') WITHIN GROUP (ORDER BY METRIC_name) "V"
FROM (select metric_id,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(METRIC_NAME,
         'Average Synchronous Single-Block Read Latency','SingBlk Read Latency'),
         'User Rollback Undo','UsrRlbkUndo'),
         'Logical Reads Per Sec','LogicalReads /s'),
         'Per Second','/s'),
         'Per Sec','/s'),
         'Per Txn','/tx'),
         'Shared Pool','SPool'),
         'Hit Ratio','HitRtio'),
         'Global Cache','GC'),
         'Total','Tot'),
         'Database','DB'),
         'Enqueue','Enq'),
         'Percentage','%'),
         'per Second','/s'),
         'Physical','Phy'),
         'Workload','Wrklod'),
         'Capture','Cptur'),
         'Execute','Exec'),
         'Consistent','Consist'),
         'parallelized','PX'),
         'downgraded','\/'),
         'Records','Recrds'),
         'Requests','Reqs'),
         'Block','Blk'),
         'Interconnect','Interc'),
         'statements','stmts'),
         'Bytes','Byts') Metric_name, Value
        FROM (select metric_id, METRIC_NAME, INST_ID || ':' || ROUND(VALUE,1) VALUE FROM GV\$SYSMETRIC WHERE GROUP_ID = 2 and metric_id in ( nvl(p_sysmetric_id1,2144),nvl(p_sysmetric_id2,2008),nvl(p_sysmetric_id3,2010))))
GROUP BY metric_id, METRIC_NAME
order by Metric_name)
order by decode (metric_id, nvl(p_sysmetric_id1,2144), 1, nvl(p_sysmetric_id2,2008), 2, NVL(P_SYSMETRIC_ID3,2010), 3));
--------------------------
end;
------##################
-- gactsesret : it uses all global pa* arrays to format Active Session Graph
------##################
function gactsessret return ta_obj
as
fv_ta_obj  ta_obj := ta_obj();
BEGIN

IF     PV_MAXCPUPRINT = PA_STET(1).OUTPUT THEN PRINT_MAXCPU(1);
ELSIF  PV_MAXCPUPRINT = PA_STET(2).OUTPUT THEN PRINT_MAXCPU(2);
ELSIF  PV_MAXCPUPRINT = PA_STET(3).OUTPUT THEN PRINT_MAXCPU(3);
ELSIF  PV_MAXCPUPRINT = PA_STET(4).OUTPUT THEN PRINT_MAXCPU(4);
ELSIF  PV_MAXCPUPRINT = PA_STET(5).OUTPUT THEN PRINT_MAXCPU(5);
ELSIF  PV_MAXCPUPRINT = PA_STET(6).OUTPUT THEN PRINT_MAXCPU(6);
ELSIF  PV_MAXCPUPRINT = PA_STET(7).OUTPUT THEN PRINT_MAXCPU(7);
ELSIF  PV_MAXCPUPRINT = PA_STET(8).OUTPUT THEN PRINT_MAXCPU(8);
ELSIF  PV_MAXCPUPRINT = PA_STET(9).OUTPUT THEN PRINT_MAXCPU(9);
ELSIF  PV_MAXCPUPRINT = PA_STET(10).OUTPUT THEN PRINT_MAXCPU(10);
ELSIF  PV_MAXCPUPRINT = PA_STET(11).OUTPUT THEN PRINT_MAXCPU(11);
ELSIF  PV_MAXCPUPRINT = PA_STET(12).OUTPUT THEN PRINT_MAXCPU(12);
ELSIF  PV_MAXCPUPRINT = PA_STET(13).OUTPUT THEN PRINT_MAXCPU(13);
ELSIF  PV_MAXCPUPRINT = PA_STET(14).OUTPUT THEN PRINT_MAXCPU(14);
ELSIF  PV_MAXCPUPRINT = PA_STET(15).OUTPUT THEN PRINT_MAXCPU(15);
End If;

fv_Ta_obj.extend(20);
fv_ta_obj(1) :=ty_obj(rpad(' ',71,' ')||'        -------+'||'                                 ACTIVE SESSIONS GRAPH                              +----');
fv_ta_obj(2) :=ty_obj(rpad(' ',71,' ')||'  Active'||lpad(pa_stet(15).output,6,' ')||' |'||(
pa80(15).output||pa79(15).output||pa78(15).output||pa77(15).output||pa76(15).output||pa75(15).output||pa74(15).output||pa73(15).output||pa72(15).output||pa71(15).output||pa70(15).output||pa69(15).output||pa68(15).output||pa67(15).output||pa66(15).output||pa65(15).output||pa64(15).output||pa63(15).output||
pa62(15).output||pa61(15).output||pa60(15).output||pa59(15).output||pa58(15).output||pa57(15).output||pa56(15).output||pa55(15).output||pa54(15).output||pa53(15).output||pa52(15).output||pa51(15).output||pa50(15).output||pa49(15).output||pa48(15).output||pa47(15).output||pa46(15).output||pa45(15).output||
pa44(15).output||pa43(15).output||pa42(15).output||pa41(15).output||pa40(15).output||pa39(15).output||pa38(15).output||pa37(15).output||pa36(15).output||pa35(15).output||pa34(15).output||pa33(15).output||pa32(15).output||pa31(15).output||pa30(15).output||pa29(15).output||pa28(15).output||pa27(15).output||
pa26(15).output||pa25(15).output||pa24(15).output||pa23(15).output||pa22(15).output||pa21(15).output||pa20(15).output||pa19(15).output||pa18(15).output||pa17(15).output||pa16(15).output||pa15(15).output||pa14(15).output||pa13(15).output||pa12(15).output||pa11(15).output||pa10(15).output||pa9(15).output||
pa8(15).output||pa7(15).output||pa6(15).output||pa5(15).output||pa4(15).output||pa3(15).output||pa2(15).output||pa1(15).output)||rpad(nvl(pa81(15).output||pa82(15).output||pa83(15).output||pa84(15).output,' '),4,' ')||'| '||rpad(pa_stet(15).output,6,' '));

fv_ta_obj(3)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(1).output,1,71),71,' ')||'Sessions'||lpad(pa_stet(14).output,6,' ')||' |'||(
pa80(14).output||pa79(14).output||pa78(14).output||pa77(14).output||pa76(14).output||pa75(14).output||pa74(14).output||pa73(14).output||pa72(14).output||pa71(14).output||pa70(14).output||pa69(14).output||pa68(14).output||pa67(14).output||pa66(14).output||pa65(14).output||pa64(14).output||pa63(14).output||
pa62(14).output||pa61(14).output||pa60(14).output||pa59(14).output||pa58(14).output||pa57(14).output||pa56(14).output||pa55(14).output||pa54(14).output||pa53(14).output||pa52(14).output||pa51(14).output||pa50(14).output||pa49(14).output||pa48(14).output||pa47(14).output||pa46(14).output||pa45(14).output||
pa44(14).output||pa43(14).output||pa42(14).output||pa41(14).output||pa40(14).output||pa39(14).output||pa38(14).output||pa37(14).output||pa36(14).output||pa35(14).output||pa34(14).output||pa33(14).output||pa32(14).output||pa31(14).output||pa30(14).output||pa29(14).output||pa28(14).output||pa27(14).output||
PA26(14).OUTPUT||PA25(14).OUTPUT||PA24(14).OUTPUT||PA23(14).OUTPUT||PA22(14).OUTPUT||PA21(14).OUTPUT||PA20(14).OUTPUT||PA19(14).OUTPUT||PA18(14).OUTPUT||PA17(14).OUTPUT||PA16(14).OUTPUT||PA15(14).OUTPUT||PA14(14).OUTPUT||PA13(14).OUTPUT||PA12(14).OUTPUT||PA11(14).OUTPUT||PA10(14).OUTPUT||PA9(14).OUTPUT||
pa8(14).output||pa7(14).output||pa6(14).output||pa5(14).output||pa4(14).output||pa3(14).output||pa2(14).output||pa1(14).output)||rpad(nvl(pa81(14).output||pa82(14).output||pa83(14).output||pa84(14).output,' '),4,' ')||'| '||rpad(pa_stet(14).output,6,' ')||'           ' );

fv_ta_obj(4)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(2).output,1,71),71,' ')||'        '||lpad(pa_stet(13).output,6,' ')||' |'||(
pa80(13).output||pa79(13).output||pa78(13).output||pa77(13).output||pa76(13).output||pa75(13).output||pa74(13).output||pa73(13).output||pa72(13).output||pa71(13).output||pa70(13).output||pa69(13).output||pa68(13).output||pa67(13).output||pa66(13).output||pa65(13).output||pa64(13).output||pa63(13).output||
pa62(13).output||pa61(13).output||pa60(13).output||pa59(13).output||pa58(13).output||pa57(13).output||pa56(13).output||pa55(13).output||pa54(13).output||pa53(13).output||pa52(13).output||pa51(13).output||pa50(13).output||pa49(13).output||pa48(13).output||pa47(13).output||pa46(13).output||pa45(13).output||
pa44(13).output||pa43(13).output||pa42(13).output||pa41(13).output||pa40(13).output||pa39(13).output||pa38(13).output||pa37(13).output||pa36(13).output||pa35(13).output||pa34(13).output||pa33(13).output||pa32(13).output||pa31(13).output||pa30(13).output||pa29(13).output||pa28(13).output||pa27(13).output||
PA26(13).OUTPUT||PA25(13).OUTPUT||PA24(13).OUTPUT||PA23(13).OUTPUT||PA22(13).OUTPUT||PA21(13).OUTPUT||PA20(13).OUTPUT||PA19(13).OUTPUT||PA18(13).OUTPUT||PA17(13).OUTPUT||PA16(13).OUTPUT|| PA15(13).OUTPUT||PA14(13).OUTPUT||PA13(13).OUTPUT||PA12(13).OUTPUT||PA11(13).OUTPUT||PA10(13).OUTPUT||PA9(13).OUTPUT||
pa8(13).output||pa7(13).output||pa6(13).output||pa5(13).output||pa4(13).output||pa3(13).output||pa2(13).output||pa1(13).output)||rpad(nvl(pa81(13).output||pa82(13).output||pa83(13).output||pa84(13).output,' '),4,' ')||'| '||rpad(pa_stet(13).output,6,' ')||'           ' );

fv_ta_obj(5)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(3).output,1,71),71,' ')||'        '||lpad(pa_stet(12).output,6,' ')||' |'||(
pa80(12).output||pa79(12).output||pa78(12).output||pa77(12).output||pa76(12).output||pa75(12).output||pa74(12).output||pa73(12).output||pa72(12).output||pa71(12).output||pa70(12).output||pa69(12).output||pa68(12).output||pa67(12).output||pa66(12).output||pa65(12).output||pa64(12).output||pa63(12).output||
pa62(12).output||pa61(12).output||pa60(12).output||pa59(12).output||pa58(12).output||pa57(12).output||pa56(12).output||pa55(12).output||pa54(12).output||pa53(12).output||pa52(12).output||pa51(12).output||pa50(12).output||pa49(12).output||pa48(12).output||pa47(12).output||pa46(12).output||pa45(12).output||
pa44(12).output||pa43(12).output||pa42(12).output||pa41(12).output||pa40(12).output||pa39(12).output||pa38(12).output||pa37(12).output||pa36(12).output||pa35(12).output||pa34(12).output||pa33(12).output||pa32(12).output||pa31(12).output||pa30(12).output||pa29(12).output||pa28(12).output||pa27(12).output||
PA26(12).OUTPUT||PA25(12).OUTPUT||PA24(12).OUTPUT||PA23(12).OUTPUT||PA22(12).OUTPUT||PA21(12).OUTPUT||PA20(12).OUTPUT||PA19(12).OUTPUT||PA18(12).OUTPUT||PA17(12).OUTPUT||PA16(12).OUTPUT||PA15(12).OUTPUT||PA14(12).OUTPUT||PA13(12).OUTPUT||PA12(12).OUTPUT||PA11(12).OUTPUT||PA10(12).OUTPUT||PA9(12).OUTPUT||
PA8(12).OUTPUT||PA7(12).OUTPUT||PA6(12).OUTPUT||PA5(12).OUTPUT||PA4(12).OUTPUT||PA3(12).OUTPUT||PA2(12).OUTPUT||PA1(12).OUTPUT)||RPAD(NVL(PA81(12).OUTPUT||PA82(12).OUTPUT||PA83(12).OUTPUT||PA84(12).OUTPUT,' '),4,' ')||'| '||RPAD(PA_STET(12).OUTPUT,6,' ')||'           ' );

fv_ta_obj(6)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(4).output,1,71),71,' ')||'        '||lpad(pa_stet(11).output,6,' ')||' |'||(
pa80(11).output||pa79(11).output||pa78(11).output||pa77(11).output||pa76(11).output||pa75(11).output||pa74(11).output||pa73(11).output||pa72(11).output||pa71(11).output||pa70(11).output||pa69(11).output||pa68(11).output||pa67(11).output||pa66(11).output||pa65(11).output||pa64(11).output||pa63(11).output||
pa62(11).output||pa61(11).output||pa60(11).output||pa59(11).output||pa58(11).output||pa57(11).output||pa56(11).output||pa55(11).output||pa54(11).output||pa53(11).output||pa52(11).output||pa51(11).output||pa50(11).output||pa49(11).output||pa48(11).output||pa47(11).output||pa46(11).output||pa45(11).output||
pa44(11).output||pa43(11).output||pa42(11).output||pa41(11).output||pa40(11).output||pa39(11).output||pa38(11).output||pa37(11).output||pa36(11).output||pa35(11).output||pa34(11).output||pa33(11).output||pa32(11).output||pa31(11).output||pa30(11).output||pa29(11).output||pa28(11).output||pa27(11).output||
PA26(11).OUTPUT||PA25(11).OUTPUT||PA24(11).OUTPUT||PA23(11).OUTPUT||PA22(11).OUTPUT||PA21(11).OUTPUT||PA20(11).OUTPUT||PA19(11).OUTPUT||PA18(11).OUTPUT||PA17(11).OUTPUT||PA16(11).OUTPUT||PA15(11).OUTPUT||PA14(11).OUTPUT||PA13(11).OUTPUT||PA12(11).OUTPUT||PA11(11).OUTPUT||PA10(11).OUTPUT||PA9(11).OUTPUT||
pa8(11).output||pa7(11).output||pa6(11).output||pa5(11).output||pa4(11).output||pa3(11).output||pa2(11).output||pa1(11).output)||rpad(nvl(pa81(11).output||pa82(11).output||pa83(11).output||pa84(11).output,' '),4,' ')||'| '||rpad(pa_stet(11).output,6,' ')||'           ' );

fv_ta_obj(7)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(5).output,1,71),71,' ')||'        '||lpad(pa_stet(10).output,6,' ')||' |'||(
pa80(10).output||pa79(10).output||pa78(10).output||pa77(10).output||pa76(10).output||pa75(10).output||pa74(10).output||pa73(10).output||pa72(10).output||pa71(10).output||pa70(10).output||pa69(10).output||pa68(10).output||pa67(10).output||pa66(10).output||pa65(10).output||pa64(10).output||pa63(10).output||
pa62(10).output||pa61(10).output||pa60(10).output||pa59(10).output||pa58(10).output||pa57(10).output||pa56(10).output||pa55(10).output||pa54(10).output||pa53(10).output||pa52(10).output||pa51(10).output||pa50(10).output||pa49(10).output||pa48(10).output||pa47(10).output||pa46(10).output||pa45(10).output||
pa44(10).output||pa43(10).output||pa42(10).output||pa41(10).output||pa40(10).output||pa39(10).output||pa38(10).output||pa37(10).output||pa36(10).output||pa35(10).output||pa34(10).output||pa33(10).output||pa32(10).output||pa31(10).output||pa30(10).output||pa29(10).output||pa28(10).output||pa27(10).output||
pa26(10).output||pa25(10).output||pa24(10).output||pa23(10).output||pa22(10).output||pa21(10).output||pa20(10).output||pa19(10).output||pa18(10).output||pa17(10).output||pa16(10).output||pa15(10).output||pa14(10).output||pa13(10).output||pa12(10).output||pa11(10).output||pa10(10).output||pa9(10).output||
pa8(10).output||pa7(10).output||pa6(10).output||pa5(10).output||pa4(10).output||pa3(10).output||pa2(10).output||pa1(10).output)||rpad(nvl(pa81(10).output||pa82(10).output||pa83(10).output||pa84(10).output,' '),4,' ')||'| '||rpad(pa_stet(10).output,6,' ')||'           ' );

fv_ta_obj(8)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(6).output,1,77),77,' ')||'  '||lpad(pa_stet(9).output,6,' ')||' |'||(
pa80(9).output||pa79(9).output||pa78(9).output||pa77(9).output||pa76(9).output||pa75(9).output||pa74(9).output||pa73(9).output||pa72(9).output||pa71(9).output||pa70(9).output||pa69(9).output||pa68(9).output||pa67(9).output||pa66(9).output||pa65(9).output||pa64(9).output||pa63(9).output||pa62(9).output||
pa61(9).output||pa60(9).output||pa59(9).output||pa58(9).output||pa57(9).output||pa56(9).output||pa55(9).output||pa54(9).output||pa53(9).output||pa52(9).output||pa51(9).output||pa50(9).output||pa49(9).output||pa48(9).output||pa47(9).output||pa46(9).output||pa45(9).output||pa44(9).output||pa43(9).output||
pa42(9).output||pa41(9).output||pa40(9).output||pa39(9).output||pa38(9).output||pa37(9).output||pa36(9).output||pa35(9).output||pa34(9).output||pa33(9).output||pa32(9).output||pa31(9).output||pa30(9).output||pa29(9).output||pa28(9).output||pa27(9).output||pa26(9).output||pa25(9).output||pa24(9).output||
PA23(9).OUTPUT||PA22(9).OUTPUT||PA21(9).OUTPUT||PA20(9).OUTPUT||PA19(9).OUTPUT||PA18(9).OUTPUT||PA17(9).OUTPUT||PA16(9).OUTPUT|| PA15(9).OUTPUT||PA14(9).OUTPUT||PA13(9).OUTPUT||PA12(9).OUTPUT||PA11(9).OUTPUT||PA10(9).OUTPUT||PA9(9).OUTPUT||PA8(9).OUTPUT||PA7(9).OUTPUT||PA6(9).OUTPUT||PA5(9).OUTPUT||
PA4(9).OUTPUT||PA3(9).OUTPUT||PA2(9).OUTPUT||PA1(9).OUTPUT)||RPAD(NVL(PA81(9).OUTPUT||PA82(9).OUTPUT||PA83(9).OUTPUT||PA84(9).OUTPUT,' '),4,' ')||'| '||RPAD(PA_STET(9).OUTPUT,6,' ')||'           ' );

fv_ta_obj(9)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(7).output,1,77),77,' ')||'  '||lpad(pa_stet(8).output,6,' ') ||' |'||(
pa80(8).output||pa79(8).output||pa78(8).output||pa77(8).output||pa76(8).output||pa75(8).output||pa74(8).output||pa73(8).output||pa72(8).output||pa71(8).output||pa70(8).output||pa69(8).output||pa68(8).output||pa67(8).output||pa66(8).output||pa65(8).output||pa64(8).output||pa63(8).output||pa62(8).output||
pa61(8).output||pa60(8).output||pa59(8).output||pa58(8).output||pa57(8).output||pa56(8).output||pa55(8).output||pa54(8).output||pa53(8).output||pa52(8).output||pa51(8).output||pa50(8).output||pa49(8).output||pa48(8).output||pa47(8).output||pa46(8).output||pa45(8).output||pa44(8).output||pa43(8).output||
pa42(8).output||pa41(8).output||pa40(8).output||pa39(8).output||pa38(8).output||pa37(8).output||pa36(8).output||pa35(8).output||pa34(8).output||pa33(8).output||pa32(8).output||pa31(8).output||pa30(8).output||pa29(8).output||pa28(8).output||pa27(8).output||pa26(8).output||pa25(8).output||pa24(8).output||
PA23(8).OUTPUT||PA22(8).OUTPUT||PA21(8).OUTPUT||PA20(8).OUTPUT||PA19(8).OUTPUT||PA18(8).OUTPUT||PA17(8).OUTPUT||PA16(8).OUTPUT||PA15(8).OUTPUT||PA14(8).OUTPUT||PA13(8).OUTPUT||PA12(8).OUTPUT||PA11(8).OUTPUT||PA10(8).OUTPUT||PA9(8).OUTPUT||PA8(8).OUTPUT||PA7(8).OUTPUT||PA6(8).OUTPUT||PA5(8).OUTPUT||
PA4(8).OUTPUT||PA3(8).OUTPUT||PA2(8).OUTPUT||PA1(8).OUTPUT)||RPAD(NVL(PA81(8).OUTPUT||PA82(8).OUTPUT||PA83(8).OUTPUT||PA84(8).OUTPUT,' '),4,' ')||'| '||RPAD(PA_STET(8).OUTPUT,6,' ')||'           ' );

fv_ta_obj(10)  :=ty_obj(rpad(substr(pv_tmp_gcinfo(8).output,1,77),77,' ')||'  '||lpad(pa_stet(7).output,6,' ') ||' |'||(
pa80(7).output||pa79(7).output||pa78(7).output||pa77(7).output||pa76(7).output||pa75(7).output||pa74(7).output||pa73(7).output||pa72(7).output||pa71(7).output||pa70(7).output||pa69(7).output||pa68(7).output||pa67(7).output||pa66(7).output||pa65(7).output||pa64(7).output||pa63(7).output||pa62(7).output||
pa61(7).output||pa60(7).output||pa59(7).output||pa58(7).output||pa57(7).output||pa56(7).output||pa55(7).output||pa54(7).output||pa53(7).output||pa52(7).output||pa51(7).output||pa50(7).output||pa49(7).output||pa48(7).output||pa47(7).output||pa46(7).output||pa45(7).output||pa44(7).output||pa43(7).output||
pa42(7).output||pa41(7).output||pa40(7).output||pa39(7).output||pa38(7).output||pa37(7).output||pa36(7).output||pa35(7).output||pa34(7).output||pa33(7).output||pa32(7).output||pa31(7).output||pa30(7).output||pa29(7).output||pa28(7).output||pa27(7).output||pa26(7).output||pa25(7).output||pa24(7).output||
pa23(7).output||pa22(7).output||pa21(7).output||pa20(7).output||pa19(7).output||pa18(7).output||pa17(7).output||pa16(7).output||pa15(7).output||pa14(7).output||pa13(7).output||pa12(7).output||pa11(7).output||pa10(7).output||pa9(7).output||pa8(7).output||pa7(7).output||pa6(7).output||pa5(7).output||
pa4(7).output||pa3(7).output||pa2(7).output||pa1(7).output)||rpad(nvl(pa81(7).output||pa82(7).output||pa83(7).output||pa84(7).output,' '),4,' ')||'| '||rpad(pa_stet(7).output,6,' ')||'           ' );

fv_ta_obj(11) :=ty_obj(rpad(substr(pv_tmp_gcinfo(9).output,1,77),77,' ')||'  '||lpad(pa_stet(6).output,6,' ') ||' |'||(
pa80(6).output||pa79(6).output||pa78(6).output||pa77(6).output||pa76(6).output||pa75(6).output||pa74(6).output||pa73(6).output||pa72(6).output||pa71(6).output||pa70(6).output||pa69(6).output||pa68(6).output||pa67(6).output||pa66(6).output||pa65(6).output||pa64(6).output||pa63(6).output||pa62(6).output||
pa61(6).output||pa60(6).output||pa59(6).output||pa58(6).output||pa57(6).output||pa56(6).output||pa55(6).output||pa54(6).output||pa53(6).output||pa52(6).output||pa51(6).output||pa50(6).output||pa49(6).output||pa48(6).output||pa47(6).output||pa46(6).output||pa45(6).output||pa44(6).output||pa43(6).output||
pa42(6).output||pa41(6).output||pa40(6).output||pa39(6).output||pa38(6).output||pa37(6).output||pa36(6).output||pa35(6).output||pa34(6).output||pa33(6).output||pa32(6).output||pa31(6).output||pa30(6).output||pa29(6).output||pa28(6).output||pa27(6).output||pa26(6).output||pa25(6).output||pa24(6).output||
pa23(6).output||pa22(6).output||pa21(6).output||pa20(6).output||pa19(6).output||pa18(6).output||pa17(6).output||pa16(6).output||pa15(6).output||pa14(6).output||pa13(6).output||pa12(6).output||pa11(6).output||pa10(6).output||pa9(6).output||pa8(6).output||pa7(6).output||pa6(6).output||pa5(6).output||
pa4(6).output||pa3(6).output||pa2(6).output||pa1(6).output)||rpad(nvl(pa81(6).output||pa82(6).output||pa83(6).output||pa84(6).output,' '),4,' ')||'| '||rpad(pa_stet(6).output,6,' ')||'           ' );

fv_ta_obj(12) :=ty_obj(rpad(substr(pv_tmp_gcinfo(10).output,1,77),77,' ')||'  '||lpad(pa_stet(5).output,6,' ') ||' |'||(
pa80(5).output||pa79(5).output||pa78(5).output||pa77(5).output||pa76(5).output||pa75(5).output||pa74(5).output||pa73(5).output||pa72(5).output||pa71(5).output||pa70(5).output||pa69(5).output||pa68(5).output||pa67(5).output||pa66(5).output||pa65(5).output||pa64(5).output||pa63(5).output||pa62(5).output||
pa61(5).output||pa60(5).output||pa59(5).output||pa58(5).output||pa57(5).output||pa56(5).output||pa55(5).output||pa54(5).output||pa53(5).output||pa52(5).output||pa51(5).output||pa50(5).output||pa49(5).output||pa48(5).output||pa47(5).output||pa46(5).output||pa45(5).output||pa44(5).output||pa43(5).output||
pa42(5).output||pa41(5).output||pa40(5).output||pa39(5).output||pa38(5).output||pa37(5).output||pa36(5).output||pa35(5).output||pa34(5).output||pa33(5).output||pa32(5).output||pa31(5).output||pa30(5).output||pa29(5).output||pa28(5).output||pa27(5).output||pa26(5).output||pa25(5).output||pa24(5).output||
pa23(5).output||pa22(5).output||pa21(5).output||pa20(5).output||pa19(5).output||pa18(5).output||pa17(5).output||pa16(5).output||pa15(5).output||pa14(5).output||pa13(5).output||pa12(5).output||pa11(5).output||pa10(5).output||pa9(5).output||pa8(5).output||pa7(5).output||pa6(5).output||pa5(5).output||
pa4(5).output||pa3(5).output||pa2(5).output||pa1(5).output)||rpad(nvl(pa81(5).output||pa82(5).output||pa83(5).output||pa84(5).output,' '),4,' ')||'| '||rpad(pa_stet(5).output,6,' ')||'           ' );

fv_ta_obj(13) :=ty_obj(rpad(substr(pv_tmp_gcinfo(11).output,1,77),77,' ')||'  '||lpad(pa_stet(4).output,6,' ') ||' |'||(
pa80(4).output||pa79(4).output||pa78(4).output||pa77(4).output||pa76(4).output||pa75(4).output||pa74(4).output||pa73(4).output||pa72(4).output||pa71(4).output||pa70(4).output||pa69(4).output||pa68(4).output||pa67(4).output||pa66(4).output||pa65(4).output||pa64(4).output||pa63(4).output||pa62(4).output||
pa61(4).output||pa60(4).output||pa59(4).output||pa58(4).output||pa57(4).output||pa56(4).output||pa55(4).output||pa54(4).output||pa53(4).output||pa52(4).output||pa51(4).output||pa50(4).output||pa49(4).output||pa48(4).output||pa47(4).output||pa46(4).output||pa45(4).output||pa44(4).output||pa43(4).output||
pa42(4).output||pa41(4).output||pa40(4).output||pa39(4).output||pa38(4).output||pa37(4).output||pa36(4).output||pa35(4).output||pa34(4).output||pa33(4).output||pa32(4).output||pa31(4).output||pa30(4).output||pa29(4).output||pa28(4).output||pa27(4).output||pa26(4).output||pa25(4).output||pa24(4).output||
PA23(4).OUTPUT||PA22(4).OUTPUT||PA21(4).OUTPUT||PA20(4).OUTPUT||PA19(4).OUTPUT||PA18(4).OUTPUT||PA17(4).OUTPUT||PA16(4).OUTPUT||PA15(4).OUTPUT||PA14(4).OUTPUT||PA13(4).OUTPUT||PA12(4).OUTPUT||PA11(4).OUTPUT||PA10(4).OUTPUT||PA9(4).OUTPUT||PA8(4).OUTPUT||PA7(4).OUTPUT||PA6(4).OUTPUT||PA5(4).OUTPUT||
pa4(4).output||pa3(4).output||pa2(4).output||pa1(4).output)||rpad(nvl(pa81(4).output||pa82(4).output||pa83(4).output||pa84(4).output,' '),4,' ')||'| '||rpad(pa_stet(4).output,6,' ')||'           ' );

fv_ta_obj(14) :=ty_obj(rpad(substr(pv_tmp_gcinfo(12).output,1,55),55,' ')||' ALL OTHER EVENTS : '||pv_oth_dig ||'   '||lpad(pa_stet(3).output,6,' ') ||' |'||(
pa80(3).output||pa79(3).output||pa78(3).output||pa77(3).output||pa76(3).output||pa75(3).output||pa74(3).output||pa73(3).output||pa72(3).output||pa71(3).output||pa70(3).output||pa69(3).output||pa68(3).output||pa67(3).output||pa66(3).output||pa65(3).output||pa64(3).output||pa63(3).output||pa62(3).output||
pa61(3).output||pa60(3).output||pa59(3).output||pa58(3).output||pa57(3).output||pa56(3).output||pa55(3).output||pa54(3).output||pa53(3).output||pa52(3).output||pa51(3).output||pa50(3).output||pa49(3).output||pa48(3).output||pa47(3).output||pa46(3).output||pa45(3).output||pa44(3).output||pa43(3).output||
pa42(3).output||pa41(3).output||pa40(3).output||pa39(3).output||pa38(3).output||pa37(3).output||pa36(3).output||pa35(3).output||pa34(3).output||pa33(3).output||pa32(3).output||pa31(3).output||pa30(3).output||pa29(3).output||pa28(3).output||pa27(3).output||pa26(3).output||pa25(3).output||pa24(3).output||
PA23(3).OUTPUT||PA22(3).OUTPUT||PA21(3).OUTPUT||PA20(3).OUTPUT||PA19(3).OUTPUT||PA18(3).OUTPUT||PA17(3).OUTPUT||PA16(3).OUTPUT||PA15(3).OUTPUT||PA14(3).OUTPUT||PA13(3).OUTPUT||PA12(3).OUTPUT||PA11(3).OUTPUT||PA10(3).OUTPUT||PA9(3).OUTPUT||PA8(3).OUTPUT||PA7(3).OUTPUT||PA6(3).OUTPUT||PA5(3).OUTPUT||
pa4(3).output||pa3(3).output||pa2(3).output||pa1(3).output)||rpad(nvl(pa81(3).output||pa82(3).output||pa83(3).output||pa84(3).output,' '),4,' ')||'| '||rpad(pa_stet(3).output,6,' ')||'           ');

fv_ta_obj(15) :=ty_obj(rpad(substr(pv_tmp_gcinfo(13).output,1,55),55,' ')||'          CLUSTER : '||pv_clu_dig ||'   '||lpad(pa_stet(2).output,6,' ') ||' |'||(
pa80(2).output||pa79(2).output||pa78(2).output||pa77(2).output||pa76(2).output||pa75(2).output||pa74(2).output||pa73(2).output||pa72(2).output||pa71(2).output||pa70(2).output||pa69(2).output||pa68(2).output||pa67(2).output||pa66(2).output||pa65(2).output||pa64(2).output||pa63(2).output||pa62(2).output||
PA61(2).OUTPUT||PA60(2).OUTPUT||PA59(2).OUTPUT||PA58(2).OUTPUT||PA57(2).OUTPUT||PA56(2).OUTPUT||PA55(2).OUTPUT||PA54(2).OUTPUT||PA53(2).OUTPUT||PA52(2).OUTPUT||PA51(2).OUTPUT||PA50(2).OUTPUT||PA49(2).OUTPUT||PA48(2).OUTPUT||PA47(2).OUTPUT||PA46(2).OUTPUT||PA45(2).OUTPUT||PA44(2).OUTPUT||PA43(2).OUTPUT||
pa42(2).output||pa41(2).output||pa40(2).output||pa39(2).output||pa38(2).output||pa37(2).output||pa36(2).output||pa35(2).output||pa34(2).output||pa33(2).output||pa32(2).output||pa31(2).output||pa30(2).output||pa29(2).output||pa28(2).output||pa27(2).output||pa26(2).output||pa25(2).output||pa24(2).output||
PA23(2).OUTPUT||PA22(2).OUTPUT||PA21(2).OUTPUT||PA20(2).OUTPUT||PA19(2).OUTPUT||PA18(2).OUTPUT||PA17(2).OUTPUT||PA16(2).OUTPUT||PA15(2).OUTPUT||PA14(2).OUTPUT||PA13(2).OUTPUT||PA12(2).OUTPUT||PA11(2).OUTPUT||PA10(2).OUTPUT||PA9(2).OUTPUT||PA8(2).OUTPUT||PA7(2).OUTPUT||PA6(2).OUTPUT||PA5(2).OUTPUT||
pa4(2).output||pa3(2).output||pa2(2).output||pa1(2).output)||rpad(nvl(pa81(2).output||pa82(2).output||pa83(2).output||pa84(2).output,' '),4,' ')||'| '||rpad(pa_stet(2).output,6,' ')||'           ' );

fv_ta_obj(16) :=ty_obj(rpad(substr(pv_tmp_gcinfo(14).output,1,55),55,' ')||'               IO : '||pv_io_dig||'   '||lpad(pa_stet(1).output,6,' ') ||' |'||(
pa80(1).output||pa79(1).output||pa78(1).output||pa77(1).output||pa76(1).output||pa75(1).output||pa74(1).output||pa73(1).output||pa72(1).output||pa71(1).output||pa70(1).output||pa69(1).output||pa68(1).output||pa67(1).output||pa66(1).output||pa65(1).output||pa64(1).output||pa63(1).output||pa62(1).output||
pa61(1).output||pa60(1).output||pa59(1).output||pa58(1).output||pa57(1).output||pa56(1).output||pa55(1).output||pa54(1).output||pa53(1).output||pa52(1).output||pa51(1).output||pa50(1).output||pa49(1).output||pa48(1).output||pa47(1).output||pa46(1).output||pa45(1).output||pa44(1).output||pa43(1).output||
pa42(1).output||pa41(1).output||pa40(1).output||pa39(1).output||pa38(1).output||pa37(1).output||pa36(1).output||pa35(1).output||pa34(1).output||pa33(1).output||pa32(1).output||pa31(1).output||pa30(1).output||pa29(1).output||pa28(1).output||pa27(1).output||pa26(1).output||pa25(1).output||pa24(1).output||
PA23(1).OUTPUT||PA22(1).OUTPUT||PA21(1).OUTPUT||PA20(1).OUTPUT||PA19(1).OUTPUT||PA18(1).OUTPUT||PA17(1).OUTPUT||PA16(1).OUTPUT||PA15(1).OUTPUT||PA14(1).OUTPUT||PA13(1).OUTPUT||PA12(1).OUTPUT||PA11(1).OUTPUT||PA10(1).OUTPUT||PA9(1).OUTPUT||PA8(1).OUTPUT||PA7(1).OUTPUT||PA6(1).OUTPUT||PA5(1).OUTPUT||
PA4(1).OUTPUT||PA3(1).OUTPUT||PA2(1).OUTPUT||PA1(1).OUTPUT)||RPAD(NVL(PA81(1).OUTPUT||PA82(1).OUTPUT||PA83(1).OUTPUT||PA84(1).OUTPUT,' '),4,' ')||'| '||RPAD(PA_STET(1).OUTPUT,6,' ')||'           ' );

FV_TA_OBJ(17) :=TY_OBJ(RPAD(' ',69,' ')||'CPU : '||PV_CPU_DIG ||'   '||LPAD(0,6,' ')||' +'||RPAD('-',84,'-')||'+ 0');
FV_TA_OBJ(18) :=TY_OBJ(RPAD(PV_SYSMETRIC_STRING1,88,' ')||'^'||' '||TO_CHAR(SYSDATE-(1/24/60/(60/(P_SAMPLE*80))),'hh24:mi:ss')||LPAD(' ',21,' ')||TO_CHAR(SYSDATE-(1/24/60/(60/(P_SAMPLE*40))),'hh24:mi:ss')||' '||'^'||LPAD(' ',29,' ')||TO_CHAR(SYSDATE,'hh24:mi:ss')||' '||'^');
FV_TA_OBJ(19) :=TY_OBJ(RPAD(PV_SYSMETRIC_STRING2,170,' '));
FV_TA_OBJ(20) :=TY_OBJ(RPAD(PV_SYSMETRIC_STRING3,170,' '));

return fv_ta_obj;
exception
when others then
RAISE_APPLICATION_ERROR(-20001,'GACTSESSRET : '||SQLERRM );
end;
-------------------
------##################
-- gsqlm : ---  building dataset from gv\$sql_monitor for all running queries.
--- print info for pv_top_sql
------##################
function gsqlm  return ta_obj
as
fv_Ta_obj     ta_obj  := ta_obj();
v_rcnt        int := 0 ;
fv_sql        varchar2(500) := q'[ select ty_gsqlm(inst_id,sql_id,substr(sql_text,1,100),elapsed_time,cpu_time,concurrency_wait_time, cluster_wait_Time,user_io_wait_time,physical_read_bytes,px_server#) from gv\$sql_monitor where status = 'EXECUTING' and elapsed_time > 0 ]';
----##
function  f_convert_datetime(fvs number ) return varchar2
as
v_result    varchar2(20) ;
begin
with
   hrs as (select secs, trunc(secs/60/60) as h from (select fvs secs from dual))
 , mins as (select secs, h, trunc((secs - h * 60 * 60) / 60) as m from hrs)
select lpad(h,2,'0') || ':' || lpad(m,2,'0') || ':' || lpad((secs - (h * 60 * 60) - (m * 60) ),2,'0') into v_result
  from  mins;
  v_result := replace(v_result,'::') ;
return v_result;
end;
---##
begin
execute immediate fv_sql bulk collect into pv_only_gsqlm;
fv_ta_obj.extend;fv_ta_obj(fv_ta_obj.count) := ty_obj( ' ');
fv_ta_obj.extend;fv_ta_obj(fv_ta_obj.count) := ty_obj( '+--SqlID--------+--SqlText---' || lpad('-',73,'-') || '+-LongstDur-+-InstCnt-+-Cnt-+--CPU%--+--CONC%--+--CLUS%--+-IO%-+-PhyReadMb+');
for i in (select (select round(max(elapsed_time)/1000000) from table(pv_only_gsqlm) gsq1 where gsq1.sql_id = gsm.sql_id) maxduration,
                 (select count(distinct inst_id) from table(pv_only_gash)  sq1 where sq1.sql_id = gsm.sql_id) acrossins, sql_id,
                 (select SUBSTR(SQL_TEXT,1,87) FROM TABLE(PV_ONLY_GASH) SQ2 WHERE SQ2.SQL_ID = GSM.SQL_ID AND ROWNUM = 1) SQL_TEXT,
                 (select lpad(nvl(round(sum(cpu_time)/ nvl(sum(elapsed_time),1) *100,1),0),6,' ') || ' | ' || lpad(nvl(round(sum(concurrency_Wait_Time)/nvl(sum(elapsed_time),1)*100,1),0),6,' ') || ' | ' || lpad(nvl(round(sum(cluster_Wait_Time)/nvl(sum(elapsed_time),1)*100,1),0),6,' ') || ' | ' || lpad(nvl(round(sum(user_io_wait_time)/nvl(sum(elapsed_time),1)*100,1),0),4,'  ') || ' | ' || lpad(nvl(round(sum(physical_read_bytes)/1048576),0),10,'  ') || ' | ' from table(pv_only_gsqlm) sql3 where sql3.sql_id = gsm.sql_id) db_time,
                 (select count( distinct inst_id || sid) from table(pv_only_gash) sq4 where sq4.sql_id = gsm.sql_id ) exccount from (select distinct output sql_id from table(pv_top_sql)) gsm)
          loop
 v_rcnt := 1;
 fv_ta_obj.extend;
fv_ta_obj(fv_ta_obj.count) := ty_obj('| ' || i.sql_id || ' | ' || rpad(nvl(i.sql_text,' '),83,' ') || ' | ' || lpad(nvl(f_convert_datetime(i.maxduration),' '),9,' ') || ' |    ' || rpad(i.acrossins,4,'  ') || '  |  ' || lpad(i.exccount,2,'  ') || ' | ' || i.db_time );
fv_ta_obj.extend;fv_ta_obj(fv_ta_obj.count) := ty_obj('+---------------+' || lpad('-',85,'-') || '+-----------+---------+-----+--------+---------+---------+-----+----------+');
        end loop;
           if v_rcnt = 0 then
            fv_ta_obj.extend;
			fv_ta_obj(fv_ta_obj.count) := ty_obj( '+---------------+' || lpad('-',85,'-') || '+-----------+---------+-----+--------+---------+---------+-----+----------+');
           end if;
return  fv_ta_obj;
exception
when others then
raise_application_Error(-20001,'GSQLM : ' || sqlerrm);
end;
-------------------/
------##################
-- gtop : pipe lined function, which calls all the sections
------##################
FUNCTION gtop(PV_ARR_SIZE     INT DEFAULT 50 ,
              PV_SAMPLE       INT DEFAULT 6,
              PV_COLORS       INT DEFAULT 1,
              PV_SYSMETRC_ID1 INT DEFAULT NULL,
              PV_SYSMETRC_ID2 INT DEFAULT NULL,
              PV_SYSMETRC_ID3 INT DEFAULT NULL
              ) RETURN ta_obj pipelined
is
v_tot_rec       int := 0 ;
BEGIN
p_sample  := pv_Sample;
---############################
--If Non-Colored Graph Required
---############################
IF PV_COLORS = 0 THEN     -- No color
PV_CPU_DIG     :=  '#';
pv_io_dig      :=  'O';
PV_CLU_DIG     :=  '+';
PV_OTH_DIG     :=  '*';
ELSIF PV_COLORS = 2 THEN
PV_CPU_DIG     :=  CHR(27)||'[32m'||'#'||CHR(27)||'[0m';  -- Colored Digit
PV_IO_DIG      :=  CHR(27)||'[34m'||'O'||CHR(27)||'[0m';
PV_CLU_DIG     :=  CHR(27)||'[33m'||'+'||CHR(27)||'[0m';
PV_OTH_DIG     :=  CHR(27)||'[31m'||'*'||CHR(27)||'[0m';
ELSIF PV_COLORS = 1 THEN                                  -- Background Colored
PV_CPU_DIG     :=  CHR(27)||'[42m'||' '||CHR(27)||'[0m';
PV_IO_DIG      :=  CHR(27)||'[44m'||' '||CHR(27)||'[0m';
PV_CLU_DIG     :=  CHR(27)||'[47m'||' '||CHR(27)||'[0m';
PV_OTH_DIG     :=  CHR(27)||'[41m'||' '||CHR(27)||'[0m';
END IF;
      --- Printing Banner..
        begin
        pipe row ( ty_obj('########################################')); v_tot_rec := v_tot_Rec + 1;
        PIPE ROW ( TY_OBJ('Taking first sample .......             ')); V_TOT_REC := V_TOT_REC + 1;
        PIPE ROW ( TY_OBJ('Author  : Ribas                         ')); V_TOT_REC := V_TOT_REC + 1;
        PIPE ROW ( TY_OBJ('Version : V2.1                          ')); V_TOT_REC := V_TOT_REC + 1;
        PIPE ROW ( TY_OBJ('########################################')); V_TOT_REC := V_TOT_REC + 1;
                pipe row ( ty_obj('')); V_TOT_REC := V_TOT_REC + 1;
                PIPE ROW ( TY_OBJ('')); V_TOT_REC := V_TOT_REC + 1;
                PIPE ROW ( TY_OBJ('Please use below sql to see help !!')); V_TOT_REC := V_TOT_REC + 1;
                PIPE ROW ( TY_OBJ('-- select * from table(jss.help()); ')); V_TOT_REC := V_TOT_REC + 1;
                PIPE ROW ( TY_OBJ('')); V_TOT_REC := V_TOT_REC + 1;
                PIPE ROW ( TY_OBJ('')); V_TOT_REC := V_TOT_REC + 1;
           IF V_TOT_REC <= PV_ARR_SIZE THEN
                     for i in 1..(pv_arr_size-v_tot_rec) loop
                     pipe row ( ty_obj(' ')); v_tot_rec := v_tot_Rec + 1;
                    end loop;
           end if;
        initactarr;                 -- calling initactarr to extend all the arrays
        pv_first_ginst := ginsteff; -- getting first sample for ginsteff
        dbms_lock.sleep(pv_sample); -- sleep based on passed parameter, default is 6 seconds
        v_tot_rec := 0;
        end;
loop
--#######################
-- Printing Instance Eff.
--#######################
------------------ -- Building output for Inst Eff.
pv_last_ginst :=  ginsteff;  -- Taking second sample for Inst Eff. data
pv_tmp_obj    :=  ginstbuilddata(pv_first_ginst,pv_last_ginst);  -- getting data formatted
for i in 1..pv_tmp_obj.count loop   pipe row( ty_obj( pv_tmp_obj(i).output )); v_tot_rec := v_tot_rec + 1; end loop;  pipe row ( ty_obj(' ')); v_tot_rec := v_tot_rec + 1; -- printing
pv_tmp_obj.delete;  -- deleting temp obj
------------------
--#########################
-- Printing TOP SQLs,Waits
--#########################
------------------
pv_only_gash  := gash(pv_st_sample,pv_et_sample); -- building dataset from global active session history
pv_tmp_obj    := gashbuilddata (pv_only_gash); -- getting dataset formatted
for i in 1..pv_tmp_obj.count loop   pipe row( ty_obj( pv_tmp_obj(i).output )); v_tot_rec := v_tot_rec + 1; end loop;  -- printing
pv_tmp_obj.delete;  -- deleting temp obj
------------------
--#########################
-- Building Cluster/GC* data
--#########################
pv_tmp_gcinfo :=  gcinfo ; -- building dataset for Cluster waits,
--#########################
-- Printing Active Sessions
--#########################
-----------------
gset3sysmetrics(PV_SYSMETRC_ID1,PV_SYSMETRC_ID2,PV_SYSMETRC_ID3); -- Customizable Section/Sysmetric Id
gactses ;
PV_TMP_OBJ := GACTSESSRET;
FOR I IN 1..PV_TMP_OBJ.COUNT LOOP   PIPE ROW( TY_OBJ( PV_TMP_OBJ(I).OUTPUT )); V_TOT_REC := V_TOT_REC + 1; END LOOP;
--pipe row ( ty_obj(' ')); v_tot_rec := v_tot_rec + 1;
pv_tmp_obj.delete;
--------------------
--#########################
-- Printing SQL Monitor
--#########################
------------------
pv_tmp_obj := gsqlm;    -- using pv_top_sql to fill detail from sql monitor
for i in 1..pv_tmp_obj.count loop   pipe row( ty_obj( pv_tmp_obj(i).output )); v_tot_rec := v_tot_rec + 1; end loop;
pv_tmp_obj.delete;
-------------------
--#######################
-- Fill remaining Array
--#######################
        if v_tot_rec < pv_arr_size then
            for i in 1..(pv_arr_size-v_tot_rec) loop
             pipe row ( ty_obj(' '));
            end loop;
        end if;
--##############################
-- Sleep, triming all the arrays
--
--##############################
pv_first_ginst := pv_last_ginst;   -- shuffling ginst collection
dbms_lock.sleep(pv_sample);
v_tot_rec := 0;
end loop ;
RETURN ;
--exception
--when others then
--raise_application_Error(-20001,'GTOP: '||sqlerrm );
end;
---
--#############################
-- Below Section Talks About GTOP Help
FUNCTION GTOPHELP RETURN TA_OBJ PIPELINED
as
begin
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  Arguments Name In GTOP Function    '));
pipe row ( ty_obj('  ---------------   '));
pipe row ( ty_obj('  PV_ARR_SIZE       : Pass SQL Array Size (Set Sqlarray Size <Value>) '));
pipe row ( ty_obj('  PV_SAMPLE         : Time Interval In Seconds For Sample, Default=6 Seconds, Screen Refresh Time '));
pipe row ( ty_obj('  PV_COLORS         : 0=No Colors, 1=BG Colors(Default), 2=Colored Digits '));
pipe row ( ty_obj('  PV_SYSMETRC_ID1   : Pass Metric_ID column from v\$sysmetric to monitor, Default=2144 (Single Blk Read Latency) '));
pipe row ( ty_obj('  PV_SYSMETRC_ID2   : Pass Metric_ID column from v\$sysmetric to monitor, Default=2088 (Physical Read Direct)  '));
pipe row ( ty_obj('  PV_SYSMETRC_ID3   : Pass Metric_ID column from v\$sysmetric to monitor, Default=2010 (Physical Write Direct) '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj(' ## With All Defaults Values -- Sample=6 Secs , Colors=Background Color, Default 3 Sysmetrics  '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
pipe row ( ty_obj('  SET LINESIZE 5000 pagesize 0 Arraysize 50 TAB OFF '));
pipe row ( ty_obj('  select * FROM TABLE(JSS.GTOP(50)); '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj(' ## With Changed Sample Size -- Interval=3 Sec, Remaining All Defaults '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
pipe row ( ty_obj('  SET LINESIZE 5000 pagesize 0 Arraysize 50 TAB OFF '));
pipe row ( ty_obj('  select * FROM TABLE(JSS.GTOP(50,3)); '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj(' ## With Changed Sample Size and No Colors -- Interval=3 Secs, Colors=No Color, Remaining All Defaults '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
pipe row ( ty_obj('  SET LINESIZE 5000 pagesize 0 Arraysize 50 TAB OFF '));
pipe row ( ty_obj('  select * FROM TABLE(JSS.GTOP(50,3,0)); '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj('  '));
pipe row ( ty_obj(' ## With Customized Sysmetrics- 2003=User Transactions Per Sec, 2018=Logins Per Sec, 2026=>User Calls Per Sec '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
pipe row ( ty_obj('  SET LINESIZE 5000 pagesize 0 Arraysize 50 TAB OFF '));
pipe row ( ty_obj('  select * FROM TABLE(JSS.GTOP(50,pv_sysmetrc_id1=>2003,pv_sysmetrc_id2=>2018,pv_sysmetrc_id3=>2026)); '));
pipe row ( ty_obj(' ~~~~~~~~~ '));
end;
--#############################
--########################
-- Package Begin Section
--########################
Begin
dbms_application_info.set_action('JSS.GTOP');
select VALUE  INTO PV_BLOCK_SIZE FROM V\$PARAMETER WHERE NAME = 'db_block_size' ;   -- this query will get executed once per session
select SUBSTR(VALUE,1,INSTR(VALUE,'.')-1) INTO PV_VERSION FROM V\$PARAMETER WHERE NAME = 'compatible' ;
END JSS;
/
quit;
EOF
}
#
#########################################################################################################
# Show All Corrupted Objects
#########################################################################################################
#
function func_corrupted()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
select e.owner
  , e.segment_type
  , e.segment_name
  , e.partition_name
  , c.file#
  , greatest(e.block_id, c.block#) corr_start_block#
  , least(e.block_id+e.blocks-1
  , c.block#+c.blocks-1) corr_end_block#
  , least(e.block_id+e.blocks-1, c.block#+c.blocks-1)- greatest(e.block_id, c.block#) + 1 blocks_corrupted
  , null description
FROM dba_extents e, v\$database_block_corruption c
WHERE e.file_id = c.file#
AND e.block_id <= c.block# + c.blocks - 1
AND e.block_id + e.blocks - 1 >= c.block#
UNION
select s.owner
  , s.segment_type
  , s.segment_name
  , s.partition_name
  , c.file#
  , header_block corr_start_block#
  , header_block corr_end_block#
  , 1 blocks_corrupted
  , 'Segment Header' description
FROM dba_segments s, v\$database_block_corruption c
WHERE s.header_file = c.file#
AND s.header_block between c.block#
and c.block# + c.blocks - 1
UNION
select null owner
  , null segment_type
  , null segment_name
  , null partition_name
  , c.file#
  , greatest(f.block_id, c.block#) corr_start_block#
  , least(f.block_id+f.blocks-1, c.block#+c.blocks-1) corr_end_block#
  , least(f.block_id+f.blocks-1, c.block#+c.blocks-1) - greatest(f.block_id, c.block#) + 1 blocks_corrupted
  , 'Free Block' description
FROM dba_free_space f, v\$database_block_corruption c
WHERE f.file_id = c.file#
AND f.block_id <= c.block# + c.blocks - 1
AND block_id + f.blocks - 1 >= c.block#
order by file#, corr_start_block#;
quit;
EOF
}
#
#########################################################################################################
# Check Objects LOBs
#########################################################################################################
#
function check_lobs()
{
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on numwidth 20 colsep '|'
prompt ##############################################################
prompt # Check Objects LOBs                                         #
prompt ##############################################################
col tablespace_name for a20
col table_name for a50
col column_name for a50
select tablespace_name
  , table_name
  , column_name
  , securefile 
from user_lobs 
where securefile='YES' 
order by 1, 2, 3;
prompt
prompt ##############################################################
prompt # LOB SEGMENTS                                               #
prompt ##############################################################
SET SERVEROUTPUT ON
DECLARE
  l_segment_size_blocks  NUMBER;
  l_segment_size_bytes   NUMBER;
  l_used_blocks          NUMBER;
  l_used_bytes           NUMBER;
  l_expired_blocks       NUMBER;
  l_expired_bytes        NUMBER;
  l_unexpired_blocks     NUMBER;
  l_unexpired_bytes      NUMBER;
BEGIN
  DBMS_SPACE.SPACE_USAGE(
    segment_owner         => 'SYSAUX',
    segment_name          => 'SECUREFILE_LOB',
    segment_type          => 'LOB',
    segment_size_blocks   => l_segment_size_blocks,
    segment_size_bytes    => l_segment_size_bytes,
    used_blocks           => l_used_blocks,
    used_bytes            => l_used_bytes,
    expired_blocks        => l_expired_blocks,
    expired_bytes         => l_expired_bytes,
    unexpired_blocks      => l_unexpired_blocks,
    unexpired_bytes       => l_unexpired_bytes);

  DBMS_OUTPUT.put_line('segment_size_blocks:' || l_segment_size_blocks);
  DBMS_OUTPUT.put_line('segment_size_bytes :' || l_segment_size_bytes);
  DBMS_OUTPUT.put_line('used_blocks        :' || l_used_blocks);
  DBMS_OUTPUT.put_line('used_bytes         :' || l_used_bytes);
  DBMS_OUTPUT.put_line('expired_blocks     :' || l_expired_blocks);
  DBMS_OUTPUT.put_line('expired_bytes      :' || l_expired_bytes);
  DBMS_OUTPUT.put_line('unexpired_blocks   :' || l_unexpired_blocks);
  DBMS_OUTPUT.put_line('unexpired_bytes    :' || l_unexpired_bytes);
END;
/
quit;
EOF
}
#
#########################################################################################################
# Function Create Report
#########################################################################################################
#
function func_dba_report()
{
cat > /tmp/ribas_report.sql <<EOF
-- executing user must have select ANY TABLE privilege, best use with SYSTEM user
---------------Output into a html-file-------------------------------------------------------------------------------
-- exlude SQL text
set feedback off echo off numwidth 20
var hide_sql varchar2(3);
--- exec select decode('&1', 'nosql', 'Y', 'N') into :hide_sql from dual;
exec select decode('1', 'nosql', 'YES', 'NO') into :hide_sql from dual;
---SQL*Plus Settings -----------------------------------------------------------------------------------------
set timing off trimspool on feedback off echo off heading off linesize 1000 long 800 verify off define off serveroutput on size unlimited numwidth 20
---Parameter Settings ----------------------------------------------------------------------------------------
-- how many days in the past
var days_back number;
-- needs to replaced by cmd line parameter later on
exec :days_back := 7;
-- keep Starttime -----------------------------------------------------------------------------------------
var starttime varchar2(30)
exec :starttime := to_char(sysdate,'dd/mm/yyyy hh24:mi:ss');
exec dbms_application_info.set_module('DBACheck DB Report', 'Start');
--- Settings for queries-----------------------------------------------------------------------------------------
-- number of Logswitches (warning)
var redo_warn number
-- number of Logswitches (critical)
var redo_critical number
-- MB Redolog (warning)
var redo_warn_mb number
-- MB Redolog (critical)
var redo_critical_mb number
-- % MB Redolog (waring)
var redo_warn_mb_pct number
-- % MB Redolog (waring)
var redo_critical_mb_pct number
exec :redo_warn := 10;
exec :redo_critical := 20;
exec :redo_warn_mb_pct := 30;
exec :redo_critical_mb_pct := 80;
--exec :redo_warn_mb := 1000;
--exec :redo_critical_mb :=3000;
-- Get limits from DB size
var dbsize_mb number
exec select sum(bytes/1024/1024) into :dbsize_mb from dba_segments;
exec :redo_warn_mb := round((:dbsize_mb/100* :redo_warn_mb_pct)/24);
exec :redo_critical_mb := round((:dbsize_mb/100* :redo_critical_mb_pct)/24);
-- tablespace free space in PCT (warning)
var ts_pct_free_warn number
exec :ts_pct_free_warn := 15;
-- tablespace free space in PCT (critical)
var ts_pct_free_critical number
exec :ts_pct_free_critical := 5;
-- Management Pack Access
var is_diag_licensed number
begin
  :is_diag_licensed := 0;
  select 1 into :is_diag_licensed from v\$version where banner like '%Enterprise Edition%' and dbms_db_version.version < 11 -- before 11 there was no init param
  union all
  select 1 from (select 1 from v\$version v, v\$parameter p where v.banner like '%Enterprise Edition%' and dbms_db_version.version >= 11 and p.name = 'control_management_pack_access' and p.value like '%DIAGNOSTIC%');
  exception
  when no_data_found then null;
end;
/
-- Username
var whoami varchar2(30)
exec :whoami := user;
-- Version
var myversion number
begin
  select substr(version, 1, instr(version, '.')-1) into :myversion from dba_registry where comp_id = 'CATALOG';
end;
/
---------------Date format---------------------------------------------------------------------------------------
alter session set nls_date_format='dd/mm/yyyy hh24:mi:ss';
alter session set nls_numeric_characters=',.';
---------------spooling---------------------------------------------------------------------------------------
set define on
col spoolname new_value spoolname_var
select to_char(sysdate, 'YYYYMMDD_HHSS') || '_dbinfo_' || instance_name || '_' || host_name || '.html' spoolname from v\$instance;
DEFINE LOGFILE=&&spoolname_var
spool /tmp/&LOGFILE
set define off
---------------HTML-Head------------------------------------------------------------------------------------------
prompt <HTML><HEAD><TITLE>Ribas - Oracle Database Report</TITLE>
prompt <script language="JavaScript" type="text/javascript"> -
function switchdiv(myElement) { -
 if (document.getElementById(myElement).style.display=="block") { -
  document.getElementById(myElement).style.display="none"; -
  document.getElementById("b_" + myElement.substr(2)).innerHTML="(+)"; -
 } else { -
  document.getElementById(myElement).style.display="block"; -
  document.getElementById("b_" + myElement.substr(2)).innerHTML="(-)"; -
 } -
}
prompt
prompt   /*
prompt   SortTable
prompt   version 2
prompt   7th April 2007
prompt   Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
prompt
prompt   Thanks to many, many people for contributions and suggestions.
prompt   Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
prompt   This basically means: do what you want with it.
prompt */
prompt
prompt var stIsIE = /*@cc_on!@*/false;
prompt
prompt sorttable = {
prompt   init: function() {
prompt     // quit if this function has already been called
prompt     if (arguments.callee.done) return;
prompt     // flag this function so we do not do the same thing twice
prompt     arguments.callee.done = true;
prompt     // kill the timer
prompt     if (_timer) clearInterval(_timer);
prompt
prompt     if (!document.createElement || !document.getElementsByTagName) return;
prompt
prompt     sorttable.DATE_RE = /^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/;
prompt
prompt     forEach(document.getElementsByTagName('table'), function(table) {
prompt       if (table.className.search(/\bsortable\b/) != -1) {
prompt         sorttable.makeSortable(table);
prompt       }
prompt     });
prompt   },
prompt
prompt   makeSortable: function(table) {
prompt     if (table.getElementsByTagName('thead').length == 0) {
prompt       // table does not have a tHead. Since it should have, create one and
prompt       // put the first table row in it.
prompt       the = document.createElement('thead');
prompt       the.appendChild(table.rows[0]);
prompt       table.insertBefore(the,table.firstChild);
prompt     }
prompt     // Safari does not support table.tHead, sigh
prompt     if (table.tHead == null) table.tHead = table.getElementsByTagName('thead')[0];
prompt
prompt     if (table.tHead.rows.length != 1) return; // can not cope with two header rows
prompt
prompt     // Sorttable v1 put rows with a class of "sortbottom" at the bottom (as
prompt     // "total" rows, for example). This is B&R, since what you are supposed
prompt     // to do is put them in a tfoot. So, if there are sortbottom rows,
prompt     // for backwards compatibility, move them to tfoot (creating it if needed).
prompt     sortbottomrows = [];
prompt     for (var i=0; i<table.rows.length; i++) {
prompt       if (table.rows[i].className.search(/\bsortbottom\b/) != -1) {
prompt         sortbottomrows[sortbottomrows.length] = table.rows[i];
prompt       }
prompt     }
prompt     if (sortbottomrows) {
prompt       if (table.tFoot == null) {
prompt         // table does not have a tfoot. Create one.
prompt         tfo = document.createElement('tfoot');
prompt         table.appendChild(tfo);
prompt       }
prompt       for (var i=0; i<sortbottomrows.length; i++) {
prompt         tfo.appendChild(sortbottomrows[i]);
prompt       }
prompt       delete sortbottomrows;
prompt     }
prompt
prompt     // work through each column and calculate its type
prompt     headrow = table.tHead.rows[0].cells;
prompt     for (var i=0; i<headrow.length; i++) {
prompt       // manually override the type with a sorttable_type attribute
prompt       if (!headrow[i].className.match(/\bsorttable_nosort\b/)) { // skip this col
prompt         mtch = headrow[i].className.match(/\bsorttable_([a-z0-9]+)\b/);
prompt         if (mtch) { override = mtch[1]; }
prompt 	      if (mtch && typeof sorttable["sort_"+override] == 'function') {
prompt 	        headrow[i].sorttable_sortfunction = sorttable["sort_"+override];
prompt 	      } else {
prompt 	        headrow[i].sorttable_sortfunction = sorttable.guessType(table,i);
prompt 	      }
prompt 	      // make it clickable to sort
prompt 	      headrow[i].sorttable_columnindex = i;
prompt 	      headrow[i].sorttable_tbody = table.tBodies[0];
prompt 	      dean_addEvent(headrow[i],"click", function(e) {
prompt
prompt           if (this.className.search(/\bsorttable_sorted\b/) != -1) {
prompt             // if we are already sorted by this column, just
prompt             // reverse the table, which is quicker
prompt             sorttable.reverse(this.sorttable_tbody);
prompt             this.className = this.className.replace('sorttable_sorted','sorttable_sorted_reverse');
prompt             this.removeChild(document.getElementById('sorttable_sortfwdind'));
prompt             sortrevind = document.createElement('span');
prompt             sortrevind.id = "sorttable_sortrevind";
prompt             sortrevind.innerHTML = stIsIE ? '&nbsp<font face="webdings">5</font>' : '&nbsp;&#x25B4;';
prompt             this.appendChild(sortrevind);
prompt             return;
prompt           }
prompt           if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) {
prompt             // if we are already sorted by this column in reverse, just
prompt             // re-reverse the table, which is quicker
prompt             sorttable.reverse(this.sorttable_tbody);
prompt             this.className = this.className.replace('sorttable_sorted_reverse','sorttable_sorted');
prompt             this.removeChild(document.getElementById('sorttable_sortrevind'));
prompt             sortfwdind = document.createElement('span');
prompt             sortfwdind.id = "sorttable_sortfwdind";
prompt             sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
prompt             this.appendChild(sortfwdind);
prompt             return;
prompt           }
prompt
prompt           // remove sorttable_sorted classes
prompt           theadrow = this.parentNode;
prompt           forEach(theadrow.childNodes, function(cell) {
prompt             if (cell.nodeType == 1) { // an element
prompt               cell.className = cell.className.replace('sorttable_sorted_reverse','');
prompt               cell.className = cell.className.replace('sorttable_sorted','');
prompt             }
prompt           });
prompt           sortfwdind = document.getElementById('sorttable_sortfwdind');
prompt           if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
prompt           sortrevind = document.getElementById('sorttable_sortrevind');
prompt           if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }
prompt
prompt           this.className += ' sorttable_sorted';
prompt           sortfwdind = document.createElement('span');
prompt           sortfwdind.id = "sorttable_sortfwdind";
prompt           sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
prompt           this.appendChild(sortfwdind);
prompt
prompt 	        // build an array to sort. This is a Schwartzian transform thing,
prompt 	        // i.e., we "decorate" each row with the actual sort key,
prompt 	        // sort based on the sort keys, and then put the rows back in order
prompt 	        // which is a lot faster because you only do getInnerText once per row
prompt 	        row_array = [];
prompt 	        col = this.sorttable_columnindex;
prompt 	        rows = this.sorttable_tbody.rows;
prompt 	        for (var j=0; j<rows.length; j++) {
prompt 	          row_array[row_array.length] = [sorttable.getInnerText(rows[j].cells[col]), rows[j]];
prompt 	        }
prompt 	        /* If you want a stable sort, uncomment the following line */
prompt 	        //sorttable.shaker_sort(row_array, this.sorttable_sortfunction);
prompt 	        /* and comment out this one */
prompt 	        row_array.sort(this.sorttable_sortfunction);
prompt
prompt 	        tb = this.sorttable_tbody;
prompt 	        for (var j=0; j<row_array.length; j++) {
prompt 	          tb.appendChild(row_array[j][1]);
prompt 	        }
prompt
prompt 	        delete row_array;
prompt 	      });
prompt 	    }
prompt     }
prompt   },
prompt
prompt   guessType: function(table, column) {
prompt     // guess the type of a column based on its first non-blank row
prompt     sortfn = sorttable.sort_alpha;
prompt     for (var i=0; i<table.tBodies[0].rows.length; i++) {
prompt       text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column]);
prompt       if (text != '') {
prompt         if (text.match(/^-?[£$¤]?[\d,.]+%?$/)) {
prompt           return sorttable.sort_numeric;
prompt         }
prompt         // check for a date: dd/mm/yyyy or dd/mm/yy
prompt         // can have / or . or - as separator
prompt         // can be mm/dd as well
prompt         possdate = text.match(sorttable.DATE_RE)
prompt         if (possdate) {
prompt           // looks like a date
prompt           first = parseInt(possdate[1]);
prompt           second = parseInt(possdate[2]);
prompt           if (first > 12) {
prompt             // definitely dd/mm
prompt             return sorttable.sort_ddmm;
prompt           } else if (second > 12) {
prompt             return sorttable.sort_mmdd;
prompt           } else {
prompt             // looks like a date, but we can not tell which, so assume
prompt             // that it is dd/mm (English imperialism!) and keep looking
prompt             sortfn = sorttable.sort_ddmm;
prompt           }
prompt         }
prompt       }
prompt     }
prompt     return sortfn;
prompt   },
prompt
prompt   getInnerText: function(node) {
prompt     // gets the text we want to use for sorting for a cell.
prompt     // strips leading and trailing whitespace.
prompt     // this is *not* a generic getInnerText function; it is special to sorttable.
prompt     // for example, you can override the cell text with a customkey attribute.
prompt     // it also gets .value for <input> fields.
prompt
prompt     hasInputs = (typeof node.getElementsByTagName == 'function') &&
prompt                  node.getElementsByTagName('input').length;
prompt
prompt     if (node.getAttribute("sorttable_customkey") != null) {
prompt       return node.getAttribute("sorttable_customkey");
prompt     }
prompt     else if (typeof node.textContent != 'undefined' && !hasInputs) {
prompt       return node.textContent.replace(/^\s+|\s+$/g, '');
prompt     }
prompt     else if (typeof node.innerText != 'undefined' && !hasInputs) {
prompt       return node.innerText.replace(/^\s+|\s+$/g, '');
prompt     }
prompt     else if (typeof node.text != 'undefined' && !hasInputs) {
prompt       return node.text.replace(/^\s+|\s+$/g, '');
prompt     }
prompt     else {
prompt       switch (node.nodeType) {
prompt         case 3:
prompt           if (node.nodeName.toLowerCase() == 'input') {
prompt             return node.value.replace(/^\s+|\s+$/g, '');
prompt           }
prompt         case 4:
prompt           return node.nodeValue.replace(/^\s+|\s+$/g, '');
prompt           break;
prompt         case 1:
prompt         case 11:
prompt           var innerText = '';
prompt           for (var i = 0; i < node.childNodes.length; i++) {
prompt             innerText += sorttable.getInnerText(node.childNodes[i]);
prompt           }
prompt           return innerText.replace(/^\s+|\s+$/g, '');
prompt           break;
prompt         default:
prompt           return '';
prompt       }
prompt     }
prompt   },
prompt
prompt   reverse: function(tbody) {
prompt     // reverse the rows in a tbody
prompt     newrows = [];
prompt     for (var i=0; i<tbody.rows.length; i++) {
prompt       newrows[newrows.length] = tbody.rows[i];
prompt     }
prompt     for (var i=newrows.length-1; i>=0; i--) {
prompt        tbody.appendChild(newrows[i]);
prompt     }
prompt     delete newrows;
prompt   },
prompt
prompt   /* sort functions
prompt      each sort function takes two parameters, a and b
prompt      you are comparing a[0] and b[0] */
prompt   sort_numeric: function(a,b) {
prompt     aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
prompt     if (isNaN(aa)) aa = 0;
prompt     bb = parseFloat(b[0].replace(/[^0-9.-]/g,''));
prompt     if (isNaN(bb)) bb = 0;
prompt     return aa-bb;
prompt   },
prompt   sort_alpha: function(a,b) {
prompt     if (a[0]==b[0]) return 0;
prompt     if (a[0]<b[0]) return -1;
prompt     return 1;
prompt   },
prompt   sort_ddmm: function(a,b) {
prompt     mtch = a[0].match(sorttable.DATE_RE);
prompt     y = mtch[3]; m = mtch[2]; d = mtch[1];
prompt     if (m.length == 1) m = '0'+m;
prompt     if (d.length == 1) d = '0'+d;
prompt     dt1 = y+m+d;
prompt     mtch = b[0].match(sorttable.DATE_RE);
prompt     y = mtch[3]; m = mtch[2]; d = mtch[1];
prompt     if (m.length == 1) m = '0'+m;
prompt     if (d.length == 1) d = '0'+d;
prompt     dt2 = y+m+d;
prompt     if (dt1==dt2) return 0;
prompt     if (dt1<dt2) return -1;
prompt     return 1;
prompt   },
prompt   sort_mmdd: function(a,b) {
prompt     mtch = a[0].match(sorttable.DATE_RE);
prompt     y = mtch[3]; d = mtch[2]; m = mtch[1];
prompt     if (m.length == 1) m = '0'+m;
prompt     if (d.length == 1) d = '0'+d;
prompt     dt1 = y+m+d;
prompt     mtch = b[0].match(sorttable.DATE_RE);
prompt     y = mtch[3]; d = mtch[2]; m = mtch[1];
prompt     if (m.length == 1) m = '0'+m;
prompt     if (d.length == 1) d = '0'+d;
prompt     dt2 = y+m+d;
prompt     if (dt1==dt2) return 0;
prompt     if (dt1<dt2) return -1;
prompt     return 1;
prompt   },
prompt
prompt   shaker_sort: function(list, comp_func) {
prompt     // A stable sort function to allow multi-level sorting of data
prompt     // see: http://en.wikipedia.org/wiki/Cocktail_sort
prompt     // thanks to Joseph Nahmias
prompt     var b = 0;
prompt     var t = list.length - 1;
prompt     var swap = true;
prompt
prompt     while(swap) {
prompt         swap = false;
prompt         for(var i = b; i < t; ++i) {
prompt             if ( comp_func(list[i], list[i+1]) > 0 ) {
prompt                 var q = list[i]; list[i] = list[i+1]; list[i+1] = q;
prompt                 swap = true;
prompt             }
prompt         } // for
prompt         t--;
prompt
prompt         if (!swap) break;
prompt
prompt         for(var i = t; i > b; --i) {
prompt             if ( comp_func(list[i], list[i-1]) < 0 ) {
prompt                 var q = list[i]; list[i] = list[i-1]; list[i-1] = q;
prompt                 swap = true;
prompt             }
prompt         } // for
prompt         b++;
prompt
prompt     } // while(swap)
prompt   }
prompt }
prompt
prompt /* ******************************************************************
prompt    Supporting functions: bundled here to avoid depending on a library
prompt    ****************************************************************** */
prompt
prompt // Dean Edwards/Matthias Miller/John Resig
prompt
prompt /* for Mozilla/Opera9 */
prompt if (document.addEventListener) {
prompt     document.addEventListener("DOMContentLoaded", sorttable.init, false);
prompt }
prompt
prompt /* for Internet Explorer */
prompt /*@cc_on @*/
prompt /*@if (@_win32)
prompt     document.write("<script id=__ie_onload defer src=javascript:void(0)><\/script>");
prompt     var script = document.getElementById("__ie_onload");
prompt     script.onreadystatechange = function() {
prompt         if (this.readyState == "complete") {
prompt             sorttable.init(); // call the onload handler
prompt         }
prompt     };
prompt /*@end @*/
prompt
prompt /* for Safari */
prompt if (/WebKit/i.test(navigator.userAgent)) { // sniff
prompt     var _timer = setInterval(function() {
prompt         if (/loaded|complete/.test(document.readyState)) {
prompt             sorttable.init(); // call the onload handler
prompt         }
prompt     }, 10);
prompt }
prompt
prompt /* for other browsers */
prompt window.onload = sorttable.init;
prompt
prompt // written by Dean Edwards, 2005
prompt // with input from Tino Zijdel, Matthias Miller, Diego Perini
prompt
prompt // http://dean.edwards.name/weblog/2005/10/add-event/
prompt
prompt function dean_addEvent(element, type, handler) {
prompt 	if (element.addEventListener) {
prompt 		element.addEventListener(type, handler, false);
prompt 	} else {
prompt 		// assign each event handler a unique ID
prompt 		if (!handler.$$guid) handler.$$guid = dean_addEvent.guid++;
prompt 		// create a hash table of event types for the element
prompt 		if (!element.events) element.events = {};
prompt 		// create a hash table of event handlers for each element/event pair
prompt 		var handlers = element.events[type];
prompt 		if (!handlers) {
prompt 			handlers = element.events[type] = {};
prompt 			// store the existing event handler (if there is one)
prompt 			if (element["on" + type]) {
prompt 				handlers[0] = element["on" + type];
prompt 			}
prompt 		}
prompt 		// store the event handler in the hash table
prompt 		handlers[handler.$$guid] = handler;
prompt 		// assign a global event handler to do all the work
prompt 		element["on" + type] = handleEvent;
prompt 	}
prompt };
prompt // a counter used to create unique IDs
prompt dean_addEvent.guid = 1;
prompt
prompt function removeEvent(element, type, handler) {
prompt 	if (element.removeEventListener) {
prompt 		element.removeEventListener(type, handler, false);
prompt 	} else {
prompt 		// delete the event handler from the hash table
prompt 		if (element.events && element.events[type]) {
prompt 			delete element.events[type][handler.$$guid];
prompt 		}
prompt 	}
prompt };
prompt
prompt function handleEvent(event) {
prompt 	var returnValue = true;
prompt 	// grab the event object (IE uses a global event object)
prompt 	event = event || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);
prompt 	// get a reference to the hash table of event handlers
prompt 	var handlers = this.events[event.type];
prompt 	// execute each event handler
prompt 	for (var i in handlers) {
prompt 		this.$$handleEvent = handlers[i];
prompt 		if (this.$$handleEvent(event) === false) {
prompt 			returnValue = false;
prompt 		}
prompt 	}
prompt 	return returnValue;
prompt };
prompt
prompt function fixEvent(event) {
prompt 	// add W3C standard event methods
prompt 	event.preventDefault = fixEvent.preventDefault;
prompt 	event.stopPropagation = fixEvent.stopPropagation;
prompt 	return event;
prompt };
prompt fixEvent.preventDefault = function() {
prompt 	this.returnValue = false;
prompt };
prompt fixEvent.stopPropagation = function() {
prompt   this.cancelBubble = true;
prompt }
prompt
prompt // Dean forEach: http://dean.edwards.name/base/forEach.js
prompt /*
prompt 	forEach, version 1.0
prompt 	Copyright 2006, Dean Edwards
prompt 	License: http://www.opensource.org/licenses/mit-license.php
prompt */
prompt
prompt // array-like enumeration
prompt if (!Array.forEach) { // mozilla already supports this
prompt 	Array.forEach = function(array, block, context) {
prompt 		for (var i = 0; i < array.length; i++) {
prompt 			block.call(context, array[i], i, array);
prompt 		}
prompt 	};
prompt }
prompt
prompt // generic enumeration
prompt Function.prototype.forEach = function(object, block, context) {
prompt 	for (var key in object) {
prompt 		if (typeof this.prototype[key] == "undefined") {
prompt 			block.call(context, object[key], key, object);
prompt 		}
prompt 	}
prompt };
prompt
prompt // character enumeration
prompt String.forEach = function(string, block, context) {
prompt 	Array.forEach(string.split(""), function(chr, index) {
prompt 		block.call(context, chr, index, string);
prompt 	});
prompt };
prompt
prompt // globally resolve forEach enumeration
prompt var forEach = function(object, block, context) {
prompt 	if (object) {
prompt 		var resolve = Object; // default
prompt 		if (object instanceof Function) {
prompt 			// functions have a "length" property
prompt 			resolve = Function;
prompt 		} else if (object.forEach instanceof Function) {
prompt 			// the object implements a custom forEach method so use that
prompt 			object.forEach(block, context);
prompt 			return;
prompt 		} else if (typeof object == "string") {
prompt 			// the object is a string
prompt 			resolve = String;
prompt 		} else if (typeof object.length == "number") {
prompt 			// the object is array-like
prompt 			resolve = Array;
prompt 		}
prompt 		resolve.forEach(object, block, context);
prompt 	}
prompt };
prompt
prompt </script>
prompt
prompt <style type="text/css">
prompt <!---
prompt /* ... define Formats... */ -
    body              {font:9pt Arial,Helvetica,sans-serif; color:black; background:white;} -
    p                 {font:9pt Arial,Helvetica,sans-serif; color:black; background:white;} -
    table             {font:9pt Arial,Helvetica,sans-serif; color:Black; background:#FFFFDD; ;border-spacing:0px;border-collapse:collapse;} -
    tr                {font:9pt Arial,Helvetica,sans-serif; color:Black; background:#FFFFDD;} -
    th                {font:bold 9pt Arial,Helvetica,sans-serif; color:Black; background:#CCCCAA; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    td                {font:9pt Arial,Helvetica,sans-serif; color:Black; background:#FFFFDD; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    td.number         {text-align:right; font:9pt Arial,Helvetica,sans-serif; color:Black; background:#FFFFDD; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    td.critical       {font:bold 9pt Arial,Helvetica,sans-serif; color:Black; background:#FF5050; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    td.warning        {font:9pt Arial,Helvetica,sans-serif; color:Black; background:#FF9933; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    td.good           {font:9pt Arial,Helvetica,sans-serif; color:Black; background:#339900; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    td.numbercritical {text-align:right; font:bold 9pt Arial,Helvetica,sans-serif; color:Black; background:#FF5050; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;}
prompt td.numberwarning  {text-align:right; font:9pt Arial,Helvetica,sans-serif; color:Black; background:#FF9933; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    td.numbergood     {text-align:right; font:9pt Arial,Helvetica,sans-serif; color:Black; background:#339900; padding:1px 1px 1px 1px; margin:0px 0px 0px 0px;border:1px solid #000000;} -
    h1                {font:bold 12pt Arial,Helvetica,Geneva,sans-serif; color:#336699; margin-top:0pt; margin-bottom:0pt; padding:0px 0px 0px 0px;} -
    h2                {font:bold 10pt Arial,Helvetica,Geneva,sans-serif; color:#336699; margin-top:4pt; margin-bottom:0pt;} -
    h3                {font:bold 10pt Arial,Helvetica,Geneva,sans-serif; color:Black; margin-top:4pt; margin-bottom:0pt;} -
    a                 {font:9pt Arial,Helvetica,sans-serif; color:#663300; margin-top:0pt; margin-bottom:0pt; vertical-align:top;} -
    a.link            {font:9pt Arial,Helvetica,sans-serif; color:#663300; margin-top:0pt; margin-bottom:0pt; vertical-align:top;} -
    a.noLink          {font:9pt Arial,Helvetica,sans-serif; color:#663300; text-decoration: none; margin-top:0pt; margin-bottom:0pt; vertical-align:top;} -
    a.noLinkBlue      {font:9pt Arial,Helvetica,sans-serif; color:#0000ff; text-decoration: none; margin-top:0pt; margin-bottom:0pt; vertical-align:top;} -
    a.noLinkDarkBlue  {font:9pt Arial,Helvetica,sans-serif; color:#000099; text-decoration: none; margin-top:0pt; margin-bottom:0pt; vertical-align:top;}
prompt    a.noLinkRed       {font:9pt Arial,Helvetica,sans-serif; color:#ff0000; text-decoration: none; margin-top:0pt; margin-bottom:0pt; vertical-align:top;} -
    a.noLinkDarkRed   {font:9pt Arial,Helvetica,sans-serif; color:#990000; text-decoration: none; margin-top:0pt; margin-bottom:0pt; vertical-align:top;} -
    a.noLinkGreen     {font:9pt Arial,Helvetica,sans-serif; color:#00ff00; text-decoration: none; margin-top:0pt; margin-bottom:0pt; vertical-align:top;} -
    a.noLinkDarkGreen {font:9pt Arial,Helvetica,sans-serif; color:#009900; text-decoration: none; margin-top:0pt; margin-bottom:0pt; vertical-align:top;}

-- Styles for Bargraph-Tables
prompt table.BarGraph, table.BarGraph td.EmptyRight  { -
    background-color:#E0E0E0; -
    color:#000000; -
} -
table.BarGraph td.EmptyRight, table.BarGraph td.Full { -
    padding-left:1; -
    padding-top:1; -
    padding-right:1; -
    padding-bottom:1; -
    border-width:0; -
    border-style:solid; -
} -
table.BarGraph { -
    border-color:#80A080; -
    border-width:1px; -
    border-style:solid; -
} -
table.BarGraph td.EmptyRight { -
    text-align:right; -
} -
table.BarGraph td.FullGreen { -
   background-color:#60A060; -
   text-align:center; -
} -
table.BarGraph td.FullWarning { -
   background-color:#FF9933; -
   text-align:center; -
} -
table.BarGraph td.FullCritical { -
   background-color:#FF5050; -
   text-align:center; -
}
prompt -->
prompt </style>
prompt </HEAD>
prompt <BODY>
prompt <!-- CUSTOMERID = ######## -->
---------------Content------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
select '<h1>Ribas - Database Maintenance Report</h1><br>' FROM dual;
select '<a name="options"><h3>DB Options</h3></a><br>' FROM dual;
select '<table>
  <tr>
  <th>Instance</th>
  <th>DB Name</th>
  <th>DB Uniq Name</th>
  <th>Service Names</th>
  <th>Host</th>
  <th>Start Time</th>
  <th>Uptime</th>
  <th>Open mode</th>
  <th>DB Role</th>
  <th>LogMode</th>
  <th>Cluster</th>
  <th>Guard Status</th>
  <th>DataGuard</th>
  <th>Protection Level</th>
  <th>Force Logging</th>
  <th>Flashback ON</th>
  <th>Hide SQL</th>
  <th>Diagnostic Pack</th>
  </tr>' 
FROM dual;
select '<tr><td>' || i.instance_name 
  || '</td><td>' || d.NAME
  || '</td><td>' || (select value from v\$parameter where name = 'db_unique_name')
  || '</td><td>' || (select value from v\$parameter where name = 'service_names')
  || '</td><td>' || i.HOST_NAME 
  || '</td><td>' || startup_time 
  || '</td><td>' || to_char(round(sysdate-startup_time,1), '99990d0') || ' d' 
  || '</td><td>' || open_mode 
  || '</td><td>' || DATABASE_ROLE 
  || '</td><td>' || log_mode 
  || '</td><td>' || (select case when value = 'TRUE' then 'YES' else 'NO' end from v\$parameter where name = 'cluster_database')
  || '</td><td>' || GUARD_STATUS 
  || '</td><td>' || (select case when value = 'TRUE' then 'YES' else 'NO' end from v$parameter where name = 'dg_broker_start')
  || '</td><td>' || PROTECTION_LEVEL 
  || '</td><td>' || FORCE_LOGGING 
  || '</td><td>' || d.FLASHBACK_ON
  || '</td><td>' || (select :hide_sql FROM dual)
  || '</td><td>' || (select decode(:is_diag_licensed, 1, 'YES', 0, 'NO') FROM dual)
  || '</td></tr>' 
FROM gv\$instance i, v\$database d 
order by instance_name;
select '</table><br>' FROM dual;
select '<table>
  <tr>
  <th>Instance</th>
  <th>System Sessions</th>
  <th>User Sessions</th>
  </tr>' 
FROM dual;
---------------DB Sessions------------------------------------------------------------------------------------------
select '<a name="sessions"><h3>DB Sessions</h3></a><br>' FROM dual;
select '<tr><td>' 
  || i.instance_name || '</td><td>' 
  || to_char(sum(nvl2(username, 0, 1)), '999g999') || '</td><td>' 
  || to_char(sum(nvl2(username, 1, 0)), '999g999') || '</td></tr>' 
FROM gv\$session s, gv\$instance i 
WHERE s.inst_id = i.inst_id 
group by i.instance_name 
order by i.instance_name;
select '</table><br>' FROM dual;
---------------Healthchecks------------------------------------------------------------------------------------------
select '<a name="health"><h3>Healthchecks</h3></a><br>' FROM dual;
select '<table>
  <tr>
  <th>Status</th>
  <th>Message</th>
  </tr>'
FROM dual;
-- Database Uptime
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end || '>Instance Uptime</td>' || '<td>' || to_char(anzahl) || ' Instances rebooted during the last ' || to_char(:days_back) || ' days.' || '</td></tr>' from (select count(*) as anzahl from gv\$instance where sysdate-startup_time < :days_back);
-- Alert Log (use dynamic SQL to prevent ORA-942 errors during parse time)
declare
  dynsql varchar2(2000);
  ret    varchar2(1000);
  TYPE   cur_typ IS REF CURSOR;
  c cur_typ;
begin
  if :myversion < 11 then dbms_output.put_line('<tr><td class="warning">Alert Log</td><td>not executed since version is below 11g.</td></tr>');
  elsif :whoami <> 'SYS' then dbms_output.put_line('<tr><td class="warning">Alert Log</td><td>not executed since user is not SYS.</td></tr>');
  else
-- Alert Log general
  dynsql := 'select ''<tr><td'' || case when anzahl_ora+anzahl_cnc > 0 then '' class="warning"'' else '' class="good"'' end ||''>Altert Log</td>'' || ''<td><a href="#alert_log">'' || to_char(anzahl_ora) || '' ORA- messages, '' || to_char(anzahl_cnc) || '' "checkpoint not complete" messages  in last '' || to_char(:days_back) || '' days.'' || ''<a></td></tr>'' as msgtext from (select sum( case when lower(message_text) like ''ora-%'' then 1 else 0 end ) as anzahl_ora, sum( case when lower(message_text) like ''%checkpoint not complete%'' then 1 else 0 end ) as anzahl_cnc from sys.X\$DBGALERTEXT where ORIGINATING_TIMESTAMP>sysdate-:days_back)';
    OPEN c FOR dynsql USING :days_back, :days_back;
    LOOP
      FETCH c INTO ret;
      EXIT WHEN c%NOTFOUND;
      dbms_output.put_line(ret);
    END LOOP;
    CLOSE c;
-- Alert Log ORA-600, ORA-7445
    dynsql := 'select ''<tr><td'' || case when anzahl_ora > 0 then '' class="warning"'' else '' class="good"'' end ||''>Altert Log ORA-600/7445</td>'' || ''<td><a href="#alert_log">'' || to_char(anzahl_ora) || '' ORA-600/7445 messages in last '' || to_char(:days_back) || '' days.'' || ''</a></td></tr>'' as msgtext from (select count(*) as anzahl_ora from sys.X\$DBGALERTEXT where ORIGINATING_TIMESTAMP>sysdate-:days_back and (lower(message_text) like ''%ora-%600%'' or lower(message_text) like ''%ora-%7445%'' ))';
    OPEN c FOR dynsql USING :days_back, :days_back;
    LOOP
      FETCH c INTO ret;
      EXIT WHEN c%NOTFOUND;
      dbms_output.put_line(ret);
    END LOOP;
    CLOSE c;
  end if;
end;
/
-- current processes utilization
-- with clause is neccessary because predicate pushing leads to division by zero....
with reslimit as (select /*+ MATERIALIZE */ s.anz_sess/p.value*100 pctused, s.inst_id
from (select inst_id, max_utilization anz_sess from gv\$resource_limit where resource_name='processes') s,
     (select inst_id, value from gv\$parameter where name ='processes' ) p
where s.inst_id = p.inst_id)
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end ||'>processes parameter</td>' || '<td><a href="res_limit">' || to_char(anzahl) || ' Instances have more than 80% of max processes used.</a></td></tr>' from (select count(inst_id) as anzahl from reslimit where pctused>=80);
-- PGA overallocation
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end ||'>PGA overallocation</td>' || '<td><a href="#pga_advice">' || to_char(anz_inst) || ' instances had ' || to_char(anzahl) || ' PGA memory overallocations.</a></td></tr>' from (select sum(case when p.value > 0 then 1 else 0 end) as anz_inst, sum(p.value) as anzahl from gv\$pgastat p, gv\$instance i where p.name='over allocation count' and p.inst_id = i.inst_id);
-- session_cached_cursors
select '<tr><td' || case when amount/s.sess# >= 0.2 then ' class="critical"' when amount/s.sess# >= 0.1 then ' class="warning"' else ' class="good"' end ||'>session_cached_cursors</td>' || '<td><a href="#session_cached_cursors">' || to_char( round(amount/s.sess#*100) ) || '% sessions outrun session_cached_cursors (' || to_char(p.value) || ')</a></td></tr>'
from (select trunc(value) SESSION_CACHED_CURSORS, count(*) Amount from gv\$sesstat seval, v\$statname sname, gv\$session se where name = 'session cursor cache count' and   seval.statistic# = sname.statistic#	and   seval.sid = se.sid and seval.inst_id = se.inst_id and se.username is not null	group by trunc(value) order by 1) c,
     (select to_number(value) value from v\$parameter where name='session_cached_cursors') p,
     (select count(*) sess# from v\$session where username is not null) s where SESSION_CACHED_CURSORS = (select to_number(value) value from v\$parameter where name='session_cached_cursors');
-- open_cursors
select '<tr><td' || case when sum_critical > 0 then ' class="critical"' when sum_warning  > 0 then ' class="warning"' else ' class="good"' end ||'>open_cursors</td>' || '<td><a href="#open_cursors">' || to_char(sum_critical) || ' sessions use 90%, ' || to_char(sum_warning) || ' session use 80%</a></td></tr>'
from (select sum(case when a.value > p.value*0.8 then 1 else 0 end) sum_warning, sum(case when a.value > p.value*0.9 then 1 else 0 end) sum_critical from gv\$sesstat a, v\$statname b, gv\$session s,
	 (select to_number(value) value from v\$parameter where name='open_cursors') p
where a.statistic# = b.statistic# and s.sid=a.sid and s.inst_id = a.inst_id and b.name = 'opened cursors current');
-- Tablespace usage
select '<tr><td' || case when nvl(pct_free_crit,0)>0 then ' class="critical"' when pct_free_warn > 0 then ' class="warning"' else ' class="good"' end || '>Tablespace usage</td>' || '<td>' || '<a href="#tablespaces">' || to_char(nvl(pct_free_crit,0)) || ' Tablespaces with <' || to_char(:ts_pct_free_critical) || '% free, ' || to_char(pct_free_warn) || ' Tablespaces with <' || to_char(:ts_pct_free_warn) || '% free. ' || '</a></td></tr>'
from (select sum(case when pct_free < 5 then 1 else 0 end) pct_free_crit, count(pct_free) pct_free_warn from (select round((mb_free+mb_autoalloc)/mb_gesamt*100, 1) pct_free from dba_tablespaces t, (select sum(greatest(BYTES,MAXBYTES))/1024/1024 mb_gesamt, sum(greatest(BYTES,MAXBYTES)-BYTES)/1024/1024 mb_autoalloc, TABLESPACE_NAME from dba_data_files group by TABLESPACE_NAME) f,
     (select sum(BYTES)/1024/1024 mb_free, TABLESPACE_NAME from dba_free_space group by TABLESPACE_NAME) fs where t.tablespace_name = f.tablespace_name and t.tablespace_name = fs.tablespace_name and t.contents = 'PERMANENT')
where pct_free <= :ts_pct_free_warn);
-- Quota usage
select '<tr><td' || case when nvl(pct_free_5,0)>0 then ' class="critical"' when pct_free_25>0 then ' class="warning"' else ' class="good"' end || '>Quota usage</td>' || '<td>' || '<a href="#quotas">' || to_char(nvl(pct_free_5,0)) || ' Quotas with <5% free, ' || to_char(pct_free_25) || ' Quotas with <25% free. ' || '</a></td></tr>'
from (select sum(case when pct_free < 5 then 1 else 0 end) pct_free_5, count(pct_free) pct_free_25 from
     (select /*+RULE*/ USERNAME, -- RULE hint as fix for Bug 6613821
			   TABLESPACE_NAME,
			   BYTES/1024/1024 MB ,
			   MAX_BYTES/1024/1024 MB_MAX,
			   100-BYTES/MAX_BYTES*100 pct_free,
			   row_number() over (order by BYTES/MAX_BYTES desc) rn
		from dba_ts_quotas
		where max_bytes > 1 ) -- unlimited Quota = -1; no Quota = 0)
	where pct_free < 25);
-- unable to extend issues
select '<tr><td' || case when anzahl>0 then ' class="critical"' else ' class="good"' end || '>unable to extend issues</td>' || '<td>' || '<a href="#extend_issues">' || to_char(anzahl) || ' tablespaces might have segments which are unable to extend.' || '</a></td></tr>'
from (select /* extent check DMTs, LMTs  */
	  count(tablespace_name) as anzahl
	FROM (select t.tablespace_name, mb_gesamt, mb_free+mb_autoalloc mb_free	from dba_tablespaces t,
         (select sum(greatest(BYTES,MAXBYTES)) / 1024/1024 mb_gesamt, sum(greatest(BYTES,MAXBYTES)-BYTES)/1024/1024 mb_autoalloc, TABLESPACE_NAME from dba_data_files group by TABLESPACE_NAME) f,
		 (select sum(BYTES) / 1024/1024 mb_free, TABLESPACE_NAME from dba_free_space group by TABLESPACE_NAME) fs
	where t.tablespace_name = f.tablespace_name
	and   t.tablespace_name = fs.tablespace_name
	and   t.contents = 'PERMANENT')
	where (mb_free <= 64 /* 64MB */ and mb_gesamt >= 640) or (mb_free < (mb_gesamt/10) and mb_gesamt < 640));
-- Tablespace organization
select '<tr><td' || case when anzahl_dmt > 0 or anzahl_noassm > 0 then ' class="warning"' else ' class="good"' end ||'>Extent/Segment Management (non-SYSTEM)</td>' || '<td>' || '<a href="#space_management">' || to_char(anzahl_dmt) || ' dictionary managed tablespaces, ' || to_char(anzahl_noassm) || ' tablespaces without ASSM. ' || '</a></td></tr>' from (select nvl(sum(decode(extent_management, 'LOCAL', 0, 1)), 0) anzahl_dmt, nvl(sum(decode(segment_space_management, 'AUTO', 0, 1)), 0) anzahl_noassm from dba_tablespaces where tablespace_name <> 'SYSTEM' and contents = 'PERMANENT' and (extent_management <> 'LOCAL' or segment_space_management <> 'AUTO'));
-- Invalid objects
select '<tr><td' || case when objects > 10 then ' class="critical"' when objects > 0 then ' class="warning"' else ' class="good"' end ||'>Objects</td>' || '<td>' || '<a href="#inv_obj">' || to_char(objects) || ' invalid objects in ' || to_char(owners) || ' schemas. ' || '</a></td></tr>' from (select count(distinct owner) owners, count(object_name) objects from dba_objects where object_type <> 'SYNONYM' and status <> 'VALID' and object_name not like 'BIN$%');
-- Invalid indexes
select '<tr><td' || case when indexes > 0 then ' class="critical"' else ' class="good"' end ||'>Indexes</td>' || '<td>' || '<a href="#inv_index">' || to_char(indexes) || ' invalid indexes in ' || to_char(owners) || ' schemas. ' || '</a></td></tr>'
from (select count(distinct owner) owners, count(index_name) indexes from (select index_name, owner, status from dba_indexes where status not in ('VALID', 'N/A')
union all
select index_name, index_owner, status from dba_ind_partitions where status not in ('USABLE', 'N/A')
union all
select index_name, index_owner, status from dba_ind_subpartitions where status <> 'USABLE'));
-- FRA usage
select '<tr><td' || case when pct_used > 90 then ' class="critical"' when pct_used > 75 then ' class="warning"' else ' class="good"' end ||'>FRA</td>' || '<td>' || '<a href="#fra">' || to_char(pct_used) || '% used in Flash Recovery Area.' || '</a></td></tr>' from (select sum(PERCENT_SPACE_USED) pct_used from v\$flash_recovery_area_usage);
-- Failed Jobs
select '<tr><td' || case when status_failed > 2 then ' class="critical"' when status_failed > 1 then ' class="warning"' else ' class="good"' end ||'>Scheduler Jobs</td>' || '<td>' || '<a href="#scheduler_job_runs">' || to_char(status_failed) || ' failed Scheduler Jobs.' || '</a></td></tr>' from (select count(status) status_failed from dba_scheduler_job_run_details where status <> 'SUCCEEDED' and log_date > systimestamp - :days_back);
-- Redolog Members
select '<tr><td' || case when anzahl > 1 then ' class="warning"' else ' class="good"' end ||'>Members per Loggroup</td>' || '<td>' || '<a href="#all_files">' || to_char(anzahl) || ' Redolog groups with only 1 member.' || '</a></td></tr>'from (select count(*) as anzahl from gv\$log where members < 2);
-- Redolog Sizes
select '<tr><td' || case when anzahl > 1 then ' class="warning"' else ' class="good"' end ||'>Redologs same size</td>' || '<td>' || '<a href="#all_files">' || to_char(anzahl) || ' distinct Redolog sizes in database.' || '</a></td></tr>' from (select count(distinct bytes) as anzahl from gv\$log);
-- Controlfile Mirroring
select '<tr><td' || case when anz_mount = 1 then ' class="warning"' else ' class="good"' end ||'>Controlfile Redundancy</td>' || '<td>' || '<a href="#all_files">' || to_char(anzahl) || ' Control files in ' || to_char(anz_mount) || ' distinct Mountpoints.' || '</a></td></tr>' from (select * from (select count(distinct directory) anz_mount from (select SUBSTR(name, 1,INSTR(REPLACE(name, '/', '\'), '\', -1)-1) directory from gv\$controlfile)), (select count(*) as anzahl from gv\$controlfile));
-- Controlfile Autobackup
select '<tr><td' || case  when anz < 1 then ' class="warning"' else ' class="good"' end || '>Controlfile Autobackup</td>' || '<td>' || '<a href="#rman_conf">' || 'Controlfile Autobackup is ' || mytext || '.' || '</a></td></tr>'
from (select decode(anz, 0, 'OFF', 'ON') mytext, anz from (select count(*) as anz from v\$rman_configuration where name = 'CONTROLFILE AUTOBACKUP' and value = 'ON'));
-- Datafile Backups
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end ||'>Datafile Backups</td>' || '<td>' || '<a href="#backups">' || to_char(anzahl) || ' datafile backups corrupt or older than ' || to_char(:days_back) || ' days.' || '</a></td></tr>' from (select count(*) as anzahl from (select i.instance_name, f.file#, f.name fname, bd.completion_time, bd.MARKED_CORRUPT corrupt_blocks, bd.LOGICALLY_CORRUPT, row_number() over (partition by f.file# order by bd.completion_time desc) rn from gv\$instance i, gv\$datafile f, gv\$backup_datafile bd where i.inst_id = f.inst_id and i.inst_id = bd.inst_id and f.inst_id = bd.inst_id and f.file# = bd.file# order by i.instance_name, f.name)
where rn=1 and ( corrupt_blocks > 0 or LOGICALLY_CORRUPT >0 or completion_time < sysdate - :days_back));
-- missing Datafile Backups
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end ||'>Datafile without backup</td>' || '<td>' || '<a href="#missing_backups">' || to_char(anzahl) || ' datafile(s) never backed up.' || '</a></td></tr>'
from (with bdf as (select --+MATERIALIZE
	  bd.inst_id, bd.file# from gv\$backup_datafile bd where bd.completion_time > sysdate- :days_back)
select count(*) as anzahl from (select i.instance_name, f.file#, f.name fname from gv\$instance i, gv\$datafile f	where i.inst_id = f.inst_id and (f.inst_id, f.file#) not in (select bd.inst_id, bd.file# from bdf bd where f.file# = bd.file# and f.inst_id = bd.inst_id) order by i.instance_name, f.name));
-- missing Datafile Backups
with vd as (select /*+MATERIALIZE*/ * from v\$datafile),
     bd as (select /*+MATERIALIZE*/ * from v\$BACKUP_DATAFILE)
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end || '>Datafiles with unrecoverable operations</td>' || '<td>' || '<a href="#unrecoverable">' || to_char(anzahl) || ' datafile(s) have unrecoverable operations (nologging).' || '</a></td></tr>' from (select count(*) as anzahl from (select * FROM VD, (select BD.CREATION_CHANGE#, MAX(BD.COMPLETION_TIME) COMPLETION_TIME FROM BD GROUP BY BD.CREATION_CHANGE#) VBD
WHERE VBD.CREATION_CHANGE# = VD.CREATION_CHANGE#
AND VD.UNRECOVERABLE_TIME > VBD.COMPLETION_TIME
order by vd.name));
-- Paramter control_file_record_keep_time
select '<tr><td' || case when value < 8 then ' class="warning"' else ' class="good"' end ||'>control_file_record_keep_time</td>' || '<td>' || '<a href="#parameter">' || 'control_file_record_keep_time = ' || to_char(value) || '. Should be increased.' || '</a></td></tr>' from (select value from v\$parameter where name='control_file_record_keep_time');
-- Standby File Management
select '<tr><td' || case when upper(value) <> 'AUTO' then ' class="warning"' else ' class="good"' end ||'>Standby File Management</td>' || '<td><a href="#parameter">Standby Configurations should use STANDBY_FILE_MANAGEMENT=AUTO. Current Setting: ' || p.value || '</a></td></tr>' from (select value from v\$parameter where name='standby_file_management') p,
--	(select protection_level from v\$database where protection_level <> 'UNPROTECTED') d
	(select value as broker_state from v\$parameter where name= 'dg_broker_start' and value = 'TRUE') d;
-- Standby LOGGING Mode
select '<tr><td' || case when force_logging <> 'YES' then ' class="warning"' else ' class="good"' end ||'>Standby Logging Mode</td>' || '<td>Standby Configurations should use FORCE LOGGING. Current Setting: ' || force_logging || '</td></tr>' from (select force_logging from v\$database where protection_level <> 'UNPROTECTED') d,
	(select value as broker_state from v\$parameter where name= 'dg_broker_start' and value = 'TRUE') p;
-- Segments in SYSTEM Tablespace
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end ||'>Segments in SYSTEM Tablespace</td>' || '<td>' || '<a href="#system_segments">' || to_char(owners) || ' owners have ' || to_char(anzahl) || ' segments in SYSTEM tablespace.' || '</a></td></tr>' from (select count(distinct owner) as owners, count(*) as anzahl FROM DBA_SEGMENTS
	WHERE TABLESPACE_NAME IN ('SYS','SYSAUX')
	AND   OWNER NOT IN ('SYS','SYSTEM','SYSMAN','TSMSYS','DBSNMP','XDB','CTXSYS','EXFSYS','WMSYS','ORDSYS','MDSYS','OLAPSYS','WKSYS', 'DMSYS','WK_TEST', 'ORDDATA', 'AUDSYS', 'GSMADMIN_INTERNAL', 'APPQOSSYS')
	AND   OWNER not like 'FLOWS_%'
	AND   OWNER not like 'APEX%');
-- Segments without statistics
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end ||'>Segments without statistics</td>' || '<td>' || '<a href="#stale_statistics">' || to_char(owners) || ' owners have ' || to_char(anzahl) || ' segments without statistics.' || '</a></td></tr>' from (select count(distinct owner) as owners, count(*) as anzahl
from (select owner, 'TABLE' segment_type, count(*) anzahl from dba_tables where last_analyzed is null and owner not in ('SYS','SYSTEM') group by owner
union all
select table_owner, 'TABLE PARTITION' segment_type, count(*) anzahl from dba_tab_partitions where last_analyzed is null and table_owner not in ('SYS','SYSTEM') group by table_owner
union all
select table_owner, 'TABLE SUBPARTITION' segment_type, count(*) anzahl from dba_tab_subpartitions where last_analyzed is null and table_owner not in ('SYS','SYSTEM') group by table_owner
union all
select owner, 'INDEX' segment_type, count(*) anzahl from dba_indexes where last_analyzed is null and owner not in ('SYS','SYSTEM') group by owner
union all
select index_owner, 'INDEX PARTITION' segment_type, count(*) anzahl from dba_ind_partitions where last_analyzed is null and index_owner not in ('SYS','SYSTEM') group by index_owner
union all
select index_owner, 'INDEX SUBPARTITION' segment_type, count(*) anzahl from dba_ind_subpartitions where last_analyzed is null and index_owner not in ('SYS','SYSTEM') group by index_owner));
-- Segments with stale statistics
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"'  end ||'>Segments with stale statistics</td>' || '<td>' || '<a href="#stale_statistics">' || to_char(owners) || ' owners have ' || to_char(anzahl) || ' segments with stale statistics.' || '</a></td></tr>'
from (select count(distinct owner) as owners, count(*) as anzahl
	FROM (select u.TIMESTAMP,
			   d.last_analyzed,
			   d.owner,
			   u.table_name,
			   u.inserts,
			   u.updates,
			   u.deletes,
			   d.num_rows,
			   ((U.inserts+u.deletes+u.updates)/decode(d.num_rows, 0, 1, d.num_rows) ) * 100 percent
		from ALL_TAB_MODIFICATIONS u,dba_tables d
		where u.table_name = d.table_name
		and   u.table_owner = d.owner
		and (u.inserts > 10000 or u.updates > 10000 or u.deletes > 10000)));
-- Segments which need Reorg
select '<tr><td' ||
       case
	     when anzahl > 0 then ' class="warning"'
		 else ' class="good"'
	   end ||'>Segments which need reorganization</td>' ||
	   '<td>' || '<a href="#reorg_tab">' ||
	   to_char(owners) || ' owners have ' || to_char(anzahl) || ' segments which may be reorganized. Could save ' || to_char(GB) || 'GB' ||
	   '</a></td></tr>'
from (select count(distinct owner) as owners, count(*) as anzahl, round( sum( blocks*block_size/1024/1024/1024-num_rows*avg_row_len/1024/1024/1024) ) GB
	FROM (select * FROM dba_tables WHERE BLOCKS>0 and TEMPORARY='N') dt,
	dba_tablespaces dts
	WHERE dt.tablespace_name=dts.tablespace_name
	AND	(num_rows*avg_row_len/block_size/blocks<0.7	OR blocks*block_size-num_rows*avg_row_len>40*1024*1024)
	AND	blocks*block_size-num_rows*avg_row_len>1*1024*1024
	AND	owner not in ('SYS','SYSTEM','WMSYS')
	AND	table_name not in (select distinct table_name from dba_tab_columns where DATA_TYPE in ('BLOB','CLOB','LONG','LONG RAW','NCLOB')));
-- Statistics Autotask Job
declare
  dynsql varchar2(2000);
  ret    varchar2(1000);
  TYPE cur_typ IS REF CURSOR;
  c cur_typ;
begin
  if :myversion < 11 then
    dbms_output.put_line('<tr><td class="warning">Automatic Statistics Job<td>Not executed since version is below 11g.</td></tr>');
  else
    -- Alert Log general
	dynsql := 'select ''<tr><td'' ||
				   case
					 when status <> ''ENABLED'' then '' class="warning"''
					 else '' class="good"''
				   end ||''>Automatic Statistics Job</td>'' ||
				   ''<td>'' || ''<a href="#autotask">'' ||
				   ''Automatic statistic gathering should be enabled. Current status: '' || status ||
				   ''</a></td></tr>''
			from (select status from dba_autotask_task where client_name=''auto optimizer stats collection'')';
    OPEN c FOR dynsql;
    LOOP
        FETCH c INTO ret;
        EXIT WHEN c%NOTFOUND;
        dbms_output.put_line(ret);
    END LOOP;
    CLOSE c;
  end if;
end;
/
-- Unindexed Keys
select '<tr><td' || case when anzahl > 0 then ' class="warning"' else ' class="good"' end ||'>Unindexed Foreign Keys</td>' || '<td>' || '<a href="#unindexed_keys">' || to_char(owners) || ' owners have ' || to_char(anzahl) || ' unindexed foreign keys.' || '</a></td></tr>'
from (select count(distinct owner) as owners, count(constraint_name) as anzahl
	 from (select b.owner,
				   b.table_name,
				   b.constraint_name,
				   max(decode( position, 1, column_name, null )) cname1,
				   max(decode( position, 2, column_name, null )) cname2,
				   max(decode( position, 3, column_name, null )) cname3,
				   max(decode( position, 4, column_name, null )) cname4,
				   max(decode( position, 5, column_name, null )) cname5,
				   max(decode( position, 6, column_name, null )) cname6,
				   max(decode( position, 7, column_name, null )) cname7,
				   max(decode( position, 8, column_name, null )) cname8,
				   count(*) col_cnt
			  from (select substr(owner,1,30) owner,
						   substr(table_name,1,30) table_name,
						   substr(constraint_name,1,30) constraint_name,
						   substr(column_name,1,30) column_name,
						   position
					  from dba_cons_columns ) a,
				   dba_constraints b
			 where a.constraint_name = b.constraint_name
			 and a.owner = b.owner
			 and b.constraint_type = 'R'
             and a.owner not in ('SYS','SYSTEM','SYSMAN','EXFSYS','DBSNMP')
			 group by b.table_name, b.constraint_name, b.owner) cons
	where col_cnt > ALL
			(select count(*)
				from dba_ind_columns i
			   where i.table_name = cons.table_name
				 and i.table_owner = cons.owner
				 and i.column_name in (cname1, cname2, cname3, cname4, cname5, cname6, cname7, cname8 )
				 and i.column_position <= cons.col_cnt
			   group by i.index_name, i.table_owner));
-- Sequence running out of values
select '<tr><td' ||
       case
	     when anzahl > 0 then ' class="warning"'
		 else ' class="good"'
	   end ||'>Sequences running out of values</td>' ||
	   '<td>' || '<a href="#sequences">' ||
	             to_char(owners) || ' owner have ' || to_char(anzahl) || ' sequences with more than 80% values used.' ||
	   '</a></td></tr>'
from (select count(sequence_name) as anzahl, count(distinct sequence_owner) as owners
from (select SEQUENCE_OWNER, SEQUENCE_NAME, CYCLE_FLAG, LAST_NUMBER, INCREMENT_BY, CACHE_SIZE, decode(MAX_VALUE, -1, 9999999999999999999999999999, MAX_VALUE) MAX_VALUE from dba_sequences) where last_number/max_value>=0.8 and cycle_flag='N');
-- Redolog Switches per Hour
select '<tr><td' ||
       case
	     when anz_critical > 0 or anz_critical_mb > 0 then ' class="critical"'
	     when anz_warn > 0 or anz_warn_mb > 0 then ' class="warning"'
		 else ' class="good"'
	   end ||'>Redo per Hour</td>' || '<td>' || '<a href="#redolog_switches">' || '#' || to_char(anz_critical) || '/ #' || to_char(anz_critical_mb) || '(in MB) critical switches, ' || '#' || to_char(anz_warn) || '/ #' || to_char(anz_warn_mb) || '(in MB) suspicious switches, ' || '</a></td></tr>'
from (select
    sum(case when anz >= :redo_warn     then 1 else 0 end) anz_warn,
    sum(case when anz >= :redo_critical then 1 else 0 end) anz_critical,
    sum(case when MB >= :redo_warn_mb     then 1 else 0 end) anz_warn_mb,
    sum(case when MB >= :redo_critical_mb then 1 else 0 end) anz_critical_mb
  from (select l.thread# thread,
	  trunc(l.first_time,'hh') stunde,
	  count(l.sequence#) anz,
	  sum(al.block_size * al.blocks)/1024/1024 MB
	from gv\$log_history l,
	  (select distinct inst_id, thread#, sequence#, blocks, block_size from gv\$archived_log) al,
	  gv\$instance i
	where i.inst_id = l.inst_id(+)
	  and l.inst_id = al.inst_id(+)
	  and l.thread# = al.thread#(+)
	  and l.sequence# = al.sequence#(+)
	  and sysdate-31 < l.first_time(+)
	group by l.thread#, trunc(l.first_time,'hh')));
-- Redolog Switches per Day
select '<tr><td' || case when anz_critical > 0 or anz_critical_mb > 0 then ' class="critical"' when anz_warn > 0 or anz_warn_mb > 0then ' class="warning"' else ' class="good"' end ||'>Redo per Day</td>' || '<td>' || '<a href="#redolog_switches">' || '#' || to_char(anz_critical) || '/ #' || to_char(anz_critical_mb) || '(in MB) critical switches, ' || '#' || to_char(anz_warn) || '/ #' || to_char(anz_warn_mb) || '(in MB) suspicious switches, ' || '</a></td></tr>'
from (select
    sum(case when anz >= :redo_warn*24     then 1 else 0 end ) anz_warn,
    sum(case when anz >= :redo_critical*24 then 1 else 0 end ) anz_critical,
    sum(case when MB >= :redo_warn_mb*24     then 1 else 0 end ) anz_warn_mb,
    sum(case when MB >= :redo_critical_mb*24 then 1 else 0 end ) anz_critical_mb
  from (select l.thread# thread,
	  trunc(l.first_time) tag,
	  count(l.sequence#) anz,
	  sum(al.block_size * al.blocks)/1024/1024 MB
	from gv\$log_history l,
	  (select distinct inst_id, thread#, sequence#, blocks, block_size from gv\$archived_log) al,
	  gv\$instance i
	where i.inst_id = l.inst_id(+)
	  and l.inst_id = al.inst_id(+)
	  and l.thread# = al.thread#(+)
	  and l.sequence# = al.sequence#(+)
	  and sysdate-31 < l.first_time(+)
	group by l.thread#, trunc(l.first_time)));
-- Audit Table History
select '<tr><td' || case 
  when to_number(cast(systimestamp as date) - cast(min_ts as date)) > 365 then ' class="critical"' 
  when to_number(cast(systimestamp as date) - cast(min_ts as date)) > 180 then ' class="warning"'
  else ' class="good"' end || '>Old Audit Records</td>' || '<td>Oldest Audit Record created ' || round(nvl( cast(systimestamp as date) - cast(min_ts as date), 0)) ||
  ' days ago. Oldest TS: ' ||
  nvl( to_char(min_ts, 'dd/mm/yyyy hh24:mi:ss'), 'null') || 
  ', youngest TS: ' || 
  nvl( to_char(max_ts, 'dd/mm/yyyy hh24:mi:ss'), 'null') || 
  '</td></tr>'
from (select min_ts, max_ts from
     (select min(timestamp) min_ts from dba_audit_trail) minaud,
	 (select max(timestamp) max_ts from dba_audit_trail) maxaud);
-- Audit Table SIZE
select '<tr><td' ||
  case
    when MB > 500 then ' class="critical"'
    when MB > 200 then ' class="warning"'
  else ' class="good"'
  end ||'>Audit Table Size</td>' || '<td>AUD$ size ' || round( to_number(mb) ) || ' MB. Records: ' || nvl( to_char(anz), 'null') || '.</td></tr>'
from (select mb, anz from (select sum(bytes)/1024/1024 MB from dba_segments where segment_name = 'AUD$' and owner = 'SYS' and segment_type='TABLE') audsize, (select count(*) anz from dba_audit_trail) audcnt);
select '</table><br>' from dual;
---------------DB Size------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('abriss');
select '<a name="dbsize"><h3>DB Size</h3></a><br>' FROM dual;
select '<table><tr>
  <th>GB allocated</th>
  <th>GB used</th>
  <th>GB free</th>
  </tr>' 
FROM dual;
select '<tr>
  <td class="number">' || to_char(gb_files, '999g999g999g990d9') || '</td>
  <td class="number">' || to_char(gb_alloc, '999g999g999g990d9') || '</td>
  <td class="number">' || to_char(gb_files-gb_alloc, '999g999g999g990d9') || '</td>
  </tr>' 
from (select round(sum(s.bytes/1024/1024/1024),1) GB_alloc, avg((select round(sum(d.bytes)/1024/1024/1024,1) from v\$datafile d)) GB_files from dba_segments s);
select '</table><br>' FROM dual;
--------------Linklist-------------------------------------------------------------------------------------------
prompt <hr><ul><li><h2>Overview</h2></li>
prompt <ul> -
       <li><a href="#banner">Components</a></li> -
       <li><a href="#database_properties">DB Properties</a></li> -
       <li><a href="#alert_log">Alert Log</a></li> -
       <li><a href="#alert_queue">Outstanding Alerts</a></li> -
       <li><a href="#alert_history">Alert History</a></li> -
       <li><a href="#parameter">Parameter</a></li> -
       <li><a href="#hparameter">Underscore Parameter</a></li> -
       <li><a href="#res_limit">Resource Limits</a></li> -
       <li><a href="#timemodel">Time Model</a></li> -
       </ul>
prompt <li><h2>Maintenance Report</h2></li>
prompt <ul> -
       <li><a href="#sgastat">SGA</a></li> -
       <li><a href="#dynamic_sga">SGA Dynamic Components</a></li> -
       <li><a href="#sgahistory">SGA History</a></li> -
       <li><a href="#hitratios">Hit Ratios</a></li> -
       <li><a href="#libcache">Library Cache</a></li> -
       <li><a href="#wait_event">Wait Events</a></li> -
       <li><a href="#space_management">Tablespace Space Management</a></li> -
       <li><a href="#tablespaces">Tablespaces</a></li> -
       <li><a href="#extend_issues">unable to extend issues</a></li> -
       <li><a href="#quotas">User Quotas</a></li> -
       <li><a href="#sga_advice">SGA Advice</a></li>
prompt <li><a href="#pga_advice">PGA Advice</a></li> -
       <li><a href="#pga_stat">PGA statistics</a></li> -
       <li><a href="#mem_advice">Memory Advice</a></li> -
       <li><a href="#session_cached_cursors">Session Cached Cursors</a></li> -
       <li><a href="#open_cursors">Open Cursors</a></li> -
       <li><a href="#undo">Undo Stats</a></li> -
       <li><a href="#flashback_db">Flashback Database</a></li> -
       <li><a href="#redolog_switches">Redolog Switches</a></li> -
       <li><a href="#file_io_stats">File I/O Statistics</a></li> -
       <li><a href="#file_io_timing">File I/O Timings</a></li> -
       <li><a href="#users">Users</a></li> -
       <li><a href="#users_def_pwd">Users with Default Password</a></li>
prompt <li><a href="#fra">Flash Recovery Area</a></li> -
       <li><a href="#rman_conf">RMAN Configuration</a></li> -
       <li><a href="#backups">Backups</a></li> -
       <li><a href="#all_backups">All Backups</a></li> -
       <li><a href="#missing_backups">Datafiles not backed up</a></li> -
       <li><a href="#unrecoverable">Unrecoverable Datafiles</a></li> -
       <li><a href="#arch_dest">Archive Destinations</a></li> -
       <li><a href="#reorg_tab">Reorg. Tables</a></li> -
       <li><a href="#top_segments">Top 30 Segments by size</a></li> -
       <li><a href="#system_segments">Segments in SYSTEM/SYSAUX not owned by SYS[TEM|MAN]</a></li> -
       <li><a href="#stale_statistics">Segments with stale or missing statistics</a></li> -
       <li><a href="#unindexed_keys">Unindexed Foreign Keys</a></li>
prompt <li><a href="#sequences">Sequences</a></li> -
       <li><a href="#jobs">Jobs</a></li> -
       <li><a href="#scheduler_job_runs">Scheduler Job History</a></li> -
       <li><a href="#autotask">Autotask Jobs</a></li> -
       <li><a href="#inv_obj">Invalid Objects</a></li> -
       <li><a href="#inv_index">Unusable Indexes</a></li> -
       <li><a href="#auditing">Auditing</a></li> -
       <li><a href="#top_sessions">Top Sessions</a></li> -
       <li><a href="#top_sql">Top SQL statements</a></li> -
       <li><a href="#top_sql_awr">Top SQL statements from AWR</a></li> -
       <li><a href="#awr_summary">AWR Summary</a></li> -
       <li><a href="#segs_logical">Top 10 Segments by logical reads</a></li> -
       <li><a href="#segs_physical">Top 10 Segments by physical reads</a></li> -
       <li><a href="#segs_writes">Top 10 Segments by physical writes</a></li> -
       <li><a href="#segs_changes">Top 10 Segments by block changes</a></li> -
       <li><a href="#segs_busy">Top 10 Segments by buffer busy waits</a></li> -
       <li><a href="#latches">Latch Hit Ratios</a></li> -
       <li><a href="#dataguard">Dataguard</a></li> -
       <li><a href="#rac_interconnect">RAC</a></li> -
       <li><a href="#asm">ASM</a></li> -
       </ul>
prompt <li><h2>Database Report</h2></li> -
       <ul> -
       <li><a href="#options">DB Options</a></li> -
       <li><a href="#sessions">DB Sessions</a></li> -
	   <li><a href="#health">Healthchecks</a></li> -
	   <li><a href="#dbsize">DB Size</a></li> -
       <li><a href="#dba_registry">DB-Registry</a></li> -
       <li><a href="#registry_history">Registry History</a></li> -
       <li><a href="#feature_usage">Feature Usage</a></li> -
       <li><a href="#db_growth">DB growth</a></li> -
       <li><a href="#schema_sizes">Schema Sizes</a></li> -
       <li><a href="#size_summary">Size Summary</a></li> -
       <li><a href="#all_files">All Files</a></li> -
       <li><a href="#db_links">Database Links</a></li> -
       <li><a href="#directories">Directories</a></li> -
       <li><a href="#roles">Roles</a></li> -
       <li><a href="#net-acls">Network ACLs</a></li> -
       </ul> -
       </ul>
---------------Components------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('banner');
prompt <hr /><a name="banner"><h3>Components</h3></a>
select '<table><tr><th><b>Components</b></th></tr>' FROM dual;
select '<tr><td>' || banner || '</td></tr>' FROM v\$version;
select '</table><br>' FROM dual;
---------------Database Properties-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('database_properties');
prompt <a name="database_properties"><h3>Database Properties</h3></a>
select '<table><tr><th><b>Name</b></th><th><b>Value</b></th></tr>' FROM dual;
select '<tr>
  <td>' || property_name || '</td>
  <td>' || property_value || '</td>
  </tr>' 
FROM database_properties 
order by property_name;
select '</table><br>' FROM dual;
---------------Alert Log-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('alert_log');
prompt <a name="alert_log"><h3>Alert Log</h3></a>
select '<table class="sortable">
  <tr>
  <th><b>Timestamp</b></th>
  <th><b>Host</b></th>
  <th><b>IP</b></th>
  <th><b>Message</b></th>
  </tr>'
FROM dual;
select '<tr>
  <td>' || to_char(ORIGINATING_TIMESTAMP, 'dd/mm/yyyy hh24:mi:ss') || '</td>
  <td>' || host_id || '</td>
  <td>' || host_address || '</td>
  <td>' || MESSAGE_TEXT || '</td>
  </tr>' 
from sys.X\$DBGALERTEXT
where (lower(MESSAGE_TEXT) like '%ora-%' or lower(MESSAGE_TEXT) like '%checkpoint not complete%') and ORIGINATING_TIMESTAMP > sysdate-:days_back 
order by ORIGINATING_TIMESTAMP desc;
select '</table><br>' FROM dual;
---------------Alert Queue-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('alert_queue');
prompt <a name="alert_queue"><h3>Outstanding Alerts</h3></a>
select '<table class="sortable">
  <tr>
  <th><b>Severity</b></th>
  <th><b>Target Name</b></th>
  <th><b>Target Type</b></th>
  <th><b>Category</b></th>
  <th><b>Name</b></th>
  <th><b>Message</b></th>
  <th><b>Alert Timestamp</b></th>
  </tr>'
FROM dual;
select '<tr><td' 
  || DECODE(alert_state, 'Critical', ' class="critical">', '>') 
  || alert_state || '</td><td>' 
  || target_name || '</td><td>' 
  || (CASE target_type
         WHEN 'oracle_listener' THEN 'Oracle Listener'
         WHEN 'rac_database'    THEN 'Cluster Database'
         WHEN 'cluster'         THEN 'Clusterware'
         WHEN 'host'            THEN 'Host'
         WHEN 'osm_instance'    THEN 'OSM Instance'
         WHEN 'oracle_database' THEN 'Database Instance'
         WHEN 'oracle_emd'      THEN 'Oracle EMD'
         WHEN 'oracle_emrep'    THEN 'Oracle EMREP'
     ELSE target_type END) 
  || '</td><td>' 
  || metric_label || '</td><td>' 
  || column_label || '</td><td>' 
  || message || '</td><td>' 
  || collection_timestamp || '</td></tr>'
FROM mgmt\$alert_current
ORDER BY alert_state, collection_timestamp desc;
select '</table><br>' FROM dual;
---------------DBA_ALERT_HISTORY-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('alert_history');
prompt <a name="alert_history"><h3>Alert History</h3></a><a id="b_alert_history" href="javascript:switchdiv('d_alert_history')">(+)</a><div id="d_alert_history" style="display:none;">
select '<table class="sortable">
  <tr>
  <th><b>Type</b></th>
  <th><b>Object</b></th>
  <th><b>Reason</b></th>
  <th><b>Group</b></th>
  <th><b>Instance</b></th>
  <th><b>Timestamp</b></th>
  <th><b>Resolution</b></th>
  </tr>'
from dual;
select '<tr><td' 
  || DECODE(MESSAGE_TYPE, 'Critical', ' class="critical">', '>') 
  || MESSAGE_TYPE || '</td><td>' 
  || object_name || '</td><td>' 
  || REASON || '</td><td>' 
  || MESSAGE_GROUP || '</td><td>' 
  || INSTANCE_NAME || '</td><td>' 
  || to_char(CREATION_TIME, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>' 
  || RESOLUTION || '</td></tr>' 
FROM dba_alert_history 
ORDER BY MESSAGE_TYPE, CREATION_TIME desc;
select '</table><br>' FROM dual;
prompt </div>
---------------Parameter----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('parameter');
select '<a name="parameter"><h3>Parameter (not default)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Name</th>
  <th>Instance</th>
  <th>Value</th>
  <th>Modified</th>
  <th>Adjusted</th>
  <th>Deprecated</th>
  <th>Comment</th>
  </tr>' 
FROM dual;
select '<tr><td>' 
  || name || '</td><td>' 
  || instance_name || '</td><td>' 
  || display_value || '</td><td>' 
  || ISMODIFIED || '</td><td>' 
  || ISADJUSTED || '</td><td>' 
  || decode(ISDEPRECATED, 'TRUE', ' class="warning"') 
  || ISDEPRECATED || '</td><td>' 
  || UPDATE_COMMENT ||'</td></tr>'
FROM gv\$parameter p, gv\$instance i
where p.inst_id = i.inst_id
and (isdefault = 'FALSE' or ismodified <> 'FALSE') -- catch parameters from init-file as well as system-modified ones
order by name, instance_name;
select '</table><br>' FROM dual;
--------------- Underscore Parameter------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('hidden parameter');
select '<a name="hparameter"><h3>Underscore Parameter</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Name</th>
  <th>Value</th>
  <th>Is Default</th>
  <th>Type</th>
  <th>Description</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || name || '</td><td>' 
  || display_value || '</td><td>' 
  || is_default || '</td><td>' 
  || type || '</td><td>' 
  || description ||	'</td></tr>'
FROM (select a.ksppinm name
        , b.ksppstvl display_value
		, b.ksppstdf is_default
		, decode (a.ksppity, 1,'boolean', 2,'string', 3,'number', 4,'file', a.ksppity) type
		, a.ksppdesc description
	   from sys.x\$ksppi a, sys.x\$ksppcv b
	   where a.indx = b.indx
	   and a.ksppinm like '\_%' escape '\'
	   and b.ksppstdf <> 'TRUE')
order by name;
select '</table><br>' FROM dual;
--------------- Resource Limits------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('resource limits');
select '<a name="res_limit"><h3>Resource Limits</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Resource</th>
  <th>Current</th>
  <th>Max</th>
  <th>Initial</th>
  <th>Limit</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || resource_name || '</td><td class="number">' 
  || current_utilization || '</td><td class="number">' 
  || max_utilization || '</td><td class="number">' 
  || initial_allocation || '</td><td class="number">' 
  || limit_value || '</td></tr>'
FROM gv\$instance i, gv\$resource_limit r
where i.inst_id = r.inst_id
order by i.inst_id, r.resource_name;
select '</table><br>' FROM dual;
--------------- Time Model------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('timemodel');
begin
  dbms_output.put_line('<a name="timemodel"><h3>Time Model (since instance startup)</h3></a>');
  dbms_output.put_line('<table>');
for rec in (select inst_id, instance_name from gv\$instance order by 1) 
loop
  dbms_output.put_line('<tr><th>Instance</th><th>Value (s)</th><th>Pct of parent</th><th>Statistic</th></tr>');
  for tm in 
    (select '<tr><td>' 
	   || rec.instance_name || '</td><td class="number">' 
	   || to_char(round(tm.value/1000000, 1), '999g999g999g990d0') || '</td><td class="number">' 
	   || round(value/ (prior value)*100) || '</td><td>' 
	   || lpad(' ', 2*(level-1), '-') || tm.stat_name 
	   || '</td></tr>' txt 
	 from (select 0 id, null parent, 'DB time' stat_name from dual
      union all
      select 1, 0, 'DB CPU' from dual
      union all
      select 2, null, 'background elapsed time' from dual
      union all
      select 3, 2, 'background cpu time' from dual
      union all
      select 4, 0, 'sequence load elapsed time' from dual
      union all
      select 5, 7, 'parse time elapsed' from dual
      union all
      select 6, 5, 'hard parse elapsed time' from dual
      union all
      select 7, 0, 'sql execute elapsed time' from dual
      union all
      select 8, 0, 'connection management call elapsed time' from dual
      union all
      select 9, 5, 'failed parse elapsed time' from dual
      union all
      select 10, 9, 'failed parse (out of shared memory) elapsed time' from dual
      union all
      select 11, 6, 'hard parse (sharing criteria) elapsed time' from dual
      union all
      select 12, 11,'hard parse (bind mismatch) elapsed time' from dual
      union all
      select 13, 0, 'PL/SQL execution elapsed time' from dual
      union all
      select 14, 0, 'inbound PL/SQL rpc elapsed time' from dual
      union all
      select 15, 0, 'PL/SQL compilation elapsed time' from dual
      union all
      select 16, 0, 'Java execution elapsed time' from dual
      union all
      select 17, 0, 'repeated bind elapsed time' from dual
      union all
      select 18, 3, 'RMAN cpu time (backup/restore)' from dual) lev,
      (select tm1.stat_name, tm1.value from gv\$sys_time_model tm1 where tm1.inst_id = rec.inst_id) tm where lev.stat_name = tm.stat_name
connect by prior id=parent
start with parent is null)
loop
  dbms_output.put_line(tm.txt);
end loop;
  dbms_output.put_line('<!-- Instance ' || rec.instance_name || ' finished. -->');
end loop;
  dbms_output.put_line('</table><br>');
end;
/
--------------- Time Model AWR------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('timemodel');
declare
  begin_snap number;
  end_snap number;
begin
  dbms_output.put_line('<a name="timemodel_awr"><h3>AWR Time Model (last '||to_char(:days_back)||' days)</h3></a>');
  if :is_diag_licensed = 1 
  then
    dbms_output.put_line('<table>');
    for rec in (select inst_id, instance_name from gv\$instance order by 1) loop
-- get first and last snap_id for given instance
    select max(snap_id) into begin_snap
    from  dba_hist_snapshot
    where begin_interval_time <= sysdate - :days_back
    and (dbid, instance_number) = (select dbid, rec.inst_id from v\$database);
  if begin_snap is null 
  then
    select min(snap_id) into begin_snap
    from dba_hist_snapshot
    where (dbid, instance_number) = (select dbid, rec.inst_id from v\$database);
  end if;
  select max(snap_id) into end_snap
  from dba_hist_snapshot
  where (dbid, instance_number) = (select dbid, rec.inst_id from v\$database);
dbms_output.put_line('<!-- Instance ' || rec.instance_name || ' starting, snaps from ' || to_char(begin_snap) || ' till ' || to_char(end_snap) || '. -->');
dbms_output.put_line('<tr><th>Instance</th><th>Value (s)</th><th>Pct of parent</th><th>Statistic</th></tr>');
  for tm in 
  (select '<tr><td>' 
     || rec.instance_name || '</td><td class="number">' 
	 || to_char(round(tm.value/1000000, 1), '999g999g999g990d0') || '</td><td class="number">' 
	 || round(value/ (prior value)*100) || '</td><td>' 
	 || lpad(' ', 2*(level-1), '-') || tm.stat_name ||'</td></tr>' txt 
   from (select 0 id, null parent, 'DB time' stat_name from dual
  union all
  select 1, 0, 'DB CPU' from dual
  union all
  select 2, null, 'background elapsed time' from dual
  union all
  select 3, 2, 'background cpu time' from dual
  union all
  select 4, 0, 'sequence load elapsed time' from dual
  union all
  select 5, 7, 'parse time elapsed' from dual
  union all
  select 6, 5, 'hard parse elapsed time' from dual
  union all
  select 7, 0, 'sql execute elapsed time' from dual
  union all
  select 8, 0, 'connection management call elapsed time' from dual
  union all
  select 9, 5, 'failed parse elapsed time' from dual
  union all
  select 10, 9, 'failed parse (out of shared memory) elapsed time' from dual
  union all
  select 11, 6, 'hard parse (sharing criteria) elapsed time' from dual
  union all
  select 12, 11, 'hard parse (bind mismatch) elapsed time' from dual
  union all
  select 13, 0, 'PL/SQL execution elapsed time' from dual
  union all
  select 14, 0, 'inbound PL/SQL rpc elapsed time' from dual
  union all
  select 15, 0, 'PL/SQL compilation elapsed time' from dual
  union all
  select 16, 0, 'Java execution elapsed time' from dual
  union all
  select 17, 0, 'repeated bind elapsed time' from dual
  union all
  select 18, 3, 'RMAN cpu time (backup/restore)' from dual) lev, 
  (select tm1.stat_name, tm2.value - tm1.value value 
   from dba_hist_sys_time_model tm1, dba_hist_sys_time_model tm2 
   where tm1.stat_name = tm2.stat_name 
   and tm1.snap_id = begin_snap 
   and tm1.INSTANCE_NUMBER = rec.inst_id 
   and tm2.snap_id = end_snap 
   and tm2.INSTANCE_NUMBER = rec.inst_id) tm
   where lev.stat_name = tm.stat_name
   connect by prior id=parent
   start with parent is null)
  loop
    dbms_output.put_line(tm.txt);
  end loop;
    dbms_output.put_line('<!-- Instance ' || rec.instance_name || ' finished. -->');
  end loop;
    dbms_output.put_line('</table><br>');
  end if;
end;
/
---------------SGA------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('sgastat');
prompt <hr>
select '<a name="sgastat"><h3>SGA</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Pool</th>
  <th>Area</th>
  <th>MB</th>
  </tr>' 
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || pool || '</td><td>' 
  || decode(name,'free memory', 'free', 'used') || '</td><td class="number">' 
  || to_char(sum(bytes/1024/1024), '999g999g999g990d999') || '</td></tr>'
from gv\$sgastat sa, gv\$instance i
where sa.inst_id = i.inst_id
group by instance_name, pool, decode(name,'free memory', 'free', 'used')
order by instance_name, pool, decode(name,'free memory', 'free', 'used');
select '</table><br>' FROM dual;
---------------dynamic SGA components------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dynamic_sga');
prompt <hr>
select '<a name="dynamic_sga"><h3>SGA Dynamic Components</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Component</th>
  <th>Current MB</th>
  <th>Min MB</th>
  <th>Max MB</th>
  <th>User-Specified MB</th>
  <th>Operations #</th>
  <th>Last Operation Type</th>
  <th>Last Operation Mode</th>
  <th>Last Operation Time</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || COMPONENT || '</td><td class="number">' 
  || to_char(CURRENT_SIZE/1024/1024, '999g999g999g990d999') || '</td><td class="number">' 
  || to_char(MIN_SIZE/1024/1024, '999g999g999g990d999') || '</td><td class="number">' 
  || to_char(MAX_SIZE/1024/1024, '999g999g999g990d999') || '</td><td class="number">' 
  || to_char(USER_SPECIFIED_SIZE/1024/1024, '999g999g999g990d999') || '</td><td class="number">' 
  || oper_count || '</td><td>'
  || last_oper_type || '</td><td>'
  || last_oper_mode || '</td><td>'
  || last_oper_time || '</td></tr>'
from gv\$sga_dynamic_components sa, gv\$instance i
where sa.inst_id = i.inst_id
order by instance_name, COMPONENT;
select '</table><br>' FROM dual;
---------------Hit ratios--------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('hitratios');
select '<a name="hitratios"><h3>Hit Ratios</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Statistic</th>
  <th>Value %</th>
  </tr>'
FROM dual;
select '<tr><td>Buffercache hit ratio</td>' 
  || '<td class="number' 
  || case when 1-p.value/(c.value+cn.value) < 0.80 then 'critical' when 1-p.value/(c.value+cn.value) < 0.95 then 'warning' else 'good' end || '">' 
  || to_char(ROUND((1-p.value/(c.value+cn.value))*100,3),'990.000') || '</td></tr>'
FROM v\$sysstat p, v\$sysstat c, v\$sysstat cn
WHERE c.name='db block gets'
AND cn.name='consistent gets'
AND p.name='physical reads';
select '<tr><td>Dictionary hit ratio</td>' 
  || '<td class="number' 
  || case when hitratio < 80 then 'critical' when hitratio < 95 then 'warning' else 'good' end || '">' 
  || to_char(hitratio, '990.000') || '</td></tr>'
FROM (select sum(GETS) as Gets, sum(GETMISSES) as Misses, round((1 - (sum(GETMISSES) / sum(GETS))) * 100, 3) as hitratio from gv\$rowcache);
select '<tr><td>SQL hit ratio</td>' 
  || '<td class="number' 
  || case when hitratio < 80 then 'critical' when hitratio < 95 then 'warning' else 'good' end || '">' 
  || TO_CHAR(hitratio, '990.000') || '</td></tr>'
FROM (select sum(PINS) Pins, sum(RELOADS) Reloads, round((sum(PINS) - sum(RELOADS)) / sum(PINS) * 100, 3) as  hitratio from gv\$librarycache);
select '<tr><td>Library miss ratio</td>' 
  || '<td class="number' || case when missratio > 20 then 'critical' when missratio > 5 then 'warning' else 'good' end || '">' 
  || TO_CHAR(missratio, '990.000') || '</td></tr>'
FROM (select sum(PINS) Executions, sum(RELOADS) cache_misses, round(sum(RELOADS) / sum(PINS) * 100, 3) as missratio from gv\$librarycache);
select '<tr><td>Sorts (disk/memory)</td>' 
  || '<td class="number' || case when c.value/cn.value > 0.10 then 'critical' when c.value/cn.value > 0.05 then 'warning' else 'good' end || '">' 
  || TO_CHAR(ROUND(c.value/cn.value*100,3),'990.000') || '</td></tr>'
FROM v\$sysstat c, v\$sysstat cn
WHERE c.name='sorts (disk)'
AND cn.name='sorts (memory)';
select '</table><br>' FROM dual;
---------------LibraryCache hit ratios-------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('libcache');
select '<a name="libcache"><h3>Hit- / Pin-Stats LibraryCache</h3></a>' FROM dual;
select '<table class="sortable"><thead>
  <tr>
  <th>Area</th>
  <th>Gets</th>
  <th>GetHits</th>
  <th>Quote</th>
  <th>Pins</th>
  <th>PinHits</th>
  <th>Ratio</th>
  <th>Reloads</th>
  <th>Reloadrate</th>
  <th>Invalidations</th>
  </tr></thead><tbody>'
FROM dual;
select '<tr><td>' 
  || namespace, '</td><td class="number">' 
  || gets, '</td><td class="number">' 
  || gethits, '</td><td class="number' 
  || case when gets = 0 then 'good' when gethits*100/gets > 95 then 'good' when gethits*100/gets > 80 then 'warning' else 'critical' end || '">' 
  || case when gets = 0 then '-' else TO_CHAR(ROUND(gethits*100/gets,3),'990.000') ||'%' end || '</td><td class="number">' 
  || pins, '</td><td class="number">' 
  || pinhits, '</td><td class="number">' 
  || DECODE(pins,0,'-',CONCAT(TO_CHAR(ROUND(pinhits*100/pins,3),'990.000'),'%')), '</td><td class="number">' 
  || reloads, '</td><td class="number' 
  || case when pins = 0 then 'good' when reloads*100/pins < 0.5 then 'good' when reloads*100/pins < 1 then 'warning' else 'critical' end || '">' 
  || case when pins = 0 then '-' else TO_CHAR(ROUND(reloads*100/pins,3),'990.000') || '%' end 
  || '</td><td class="number">' 
  || invalidations || '</td></tr>'
FROM v\$librarycache
ORDER BY namespace;
select '</tbody><tfoot>' FROM dual;
select '<tr><td><b>Sum', '</td><td class="number"><b>' 
  || SUM(gets), '</td><td class="number"><b>' 
  || SUM(gethits), '</td><td class="number' 
  || case when sum(gets) = 0 then 'good' when sum(gethits)*100/sum(gets) > 95 then 'good' when sum(gethits)*100/sum(gets) > 80 then 'warning' else 'critical' end || '"><b>' 
  || CONCAT(TO_CHAR(ROUND(SUM(gethits)*100/SUM(gets),3),'990.000'),'%'), '</td><td class="number"><b>' 
  || SUM(pins), '</td><td class="number"><b>' 
  || SUM(pinhits), '</td><td class="number"><b>' 
  || CONCAT(TO_CHAR(ROUND(SUM(pinhits)*100/SUM(pins),3),'990.000'),'%'), '</td><td class="number"><b>' 
  || SUM(reloads), '</td><td class="number' 
  || case when sum(pins) = 0 then 'good' when sum(reloads)*100/sum(pins) < 0.5 then 'good' when sum(reloads)*100/sum(pins) < 1 then 'warning' else 'critical' end || '"><b>' 
  || CONCAT(TO_CHAR(ROUND(SUM(reloads)*100/SUM(pins),3),'990.000'),'%'), '</td><td class="number"><b>' 
  || SUM(invalidations) || '</td></tr>'
FROM v\$librarycache;
select '</tfoot></table><br>' FROM dual;
---------------Wait Events-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('wait_event');
select '<a name="wait_event"><h3>Waits (since instance startup)</h3></a><h3>Top 10 Wait Events</h3>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Event</th>
  <th>Waits #</th>
  <th>Wait Time (s)</th>
  <th>Quota %</th>
  <th>Avg Wait (ms)</th>
  <th>Class</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || event || '</td><td class="number">' 
  || TOTAL_WAITS || '</td><td class="number">' 
  || round(TIME_WAITED) || '</td><td class="number' 
  || case when pct_waited >= 0.5 then 'critical' when pct_waited >= 0.2 then 'warning' end || '">' 
  || to_char(round(pct_waited*100,1), '999D0') || '</td><td class="number">'
  || round(AVERAGE_WAIT*10,2)|| '</td><td>'
  || WAIT_CLASS || '</td></tr>'
from (select instance_name
        , event
		, total_waits
		, time_waited
		, TIME_WAITED / sum(time_waited) over () pct_waited
		, average_wait
		, wait_class
      from (select inst_id
	          , event
			  , TOTAL_WAITS
			  , TIME_WAITED/100 time_waited
			  , AVERAGE_WAIT
			  , WAIT_CLASS
	        from (select * from gv\$system_event
 	        where lower(wait_class) != 'idle' 
			and event != 'Null event' 
			and event != 'rdbms ipc message' 
			and event != 'pipe get' 
			and event != 'virtual circuit status' 
			and event not like '%timer%' 
			and event not like 'SQL*Net message from %' 
			and event not like 'SQL*Net vector data from %') e
	        where time_waited > 0
	        UNION ALL
	        select inst_id
			  , 'server CPU' event
			  , null total_waits
			  , SUM (VALUE / 1000000) waited
			  , null average_wait
			  , 'CPU' wait_class
	        FROM gv\$sys_time_model
	        WHERE stat_name IN ('background cpu time', 'DB CPU')
	        GROUP BY inst_id) e,
      gv\$instance i
      where e.inst_id = i.inst_id
      order by 5 desc)
    where rownum <= 10;
select '</table><br>' FROM dual;
select '<h3>Top 5 System Wait Classes</h3>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Event</th>
  <th>Waits #</th>
  <th>Wait Time (s)</th>
  <th>Quota %</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || WAIT_CLASS || '</td><td>' 
  || TOTAL_WAITS || '</td><td class="number">' 
  || TIME_WAITED || '</td><td class="number' 
  || case when pct_waited >= 0.5 then 'critical' when pct_waited >= 0.2 then 'warning' end || '">' 
  || to_char(round(pct_waited*100,1), '999D0') || '</td></tr>'
from (select WAIT_CLASS
        , TOTAL_WAITS
		, TIME_WAITED
		, TIME_WAITED / sum(time_waited) over () pct_waited
	  from (select WAIT_CLASS, sum(TOTAL_WAITS) TOTAL_WAITS, round(sum(TIME_WAITED)/100) AS TIME_WAITED from GV\$SYSTEM_WAIT_CLASS group by WAIT_CLASS)
	  order by 3 desc)
where rownum <=5;
select '</table><br>' FROM dual;
select '<h3>Top 5 DB-CPU Activity</h3>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Event</th>
  <th>Wait Time (s)</th>
  <th>Quota %</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || STAT_NAME || '</td><td class="number">' 
  || TIME_WAITED || '</td><td class="number' 
  || case when pct_waited >= 0.5 then 'critical' when pct_waited >= 0.2 then 'warning' end || '">' 
  || to_char(round(pct_waited*100,1), '999D0') || '</td></tr>'
from (select STAT_NAME
        , time_waited
		, TIME_WAITED / sum(time_waited) over () pct_waited
      from (select STAT_NAME, round(sum(VALUE)/(1000*1000)) AS time_waited from GV\$SYS_TIME_MODEL group by STAT_NAME)
      order by 2 desc)
where rownum <= 5;
select '</table><br>' FROM dual;
select '<h3>DB-Time ratios</h3>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Interval (s)</th>
  <th>Metric</th>
  <th>Value</th>
  <th>Unit</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || intsize || '</td><td>'
  || METRIC_NAME || '</td><td class="number">' 
  || to_char(round(VALUE, 2), '999D0') || '</td><td>'
  || METRIC_UNIT || '</td></tr>'
from (select inst_id
        , round(INTSIZE_CSEC/100) AS intsize
		, METRIC_NAME
		, VALUE
		, METRIC_UNIT 
	  from gv\$sysmetric
	  where METRIC_NAME = 'Database Wait Time Ratio'
	  and round(INTSIZE_CSEC/100) = 60
	  union all
	  select inst_id
	    , round(INTSIZE_CSEC/100) AS "Interval (s)"
		, METRIC_NAME
		, VALUE
		, METRIC_UNIT
	  from gv\$sysmetric
	  where METRIC_NAME = 'Database CPU Time Ratio'
	  and round(INTSIZE_CSEC/100) = 60) m,
gv\$instance i
where i.inst_id = m.inst_id;
select '</table><br>' FROM dual;
---------------Tablespace Space Management------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('tablespace space management');
select '<a name="space_management"><h3>Tablespace Space Management (dictionary managed, no ASSM)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Tablespace</th>
  <th>Extent Mgmt</th>
  <th>Allocation</th>
  <th>Segment Space Mgmt</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || tablespace_name || '</td><td>' 
  || extent_management || '</td><td>' 
  || allocation_type || '</td><td>' 
  || segment_space_management || '</td></tr>'
from dba_tablespaces
where (extent_management <> 'LOCAL' or segment_space_management <> 'AUTO')
order by tablespace_name;
select '</table><br>' FROM dual;
---------------Tablespaces------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('tablespaces');
select '<a name="tablespaces"><h3>Tablespaces (>50% full OR Top 30)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Tablespace</th>
  <th width="100px">Graph</th>
  <th>% full</th>
  <th>MB total</th>
  <th>MB Files</th>
  <th>MB free in Files</th>
  <th>MB free</th>
  <th>% free in Files</th>
  <th># Files</th>
  <th>Extent Mgmt</th>
  <th>Allocation</th>
  <th>Segment Space Mgmt</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || tablespace_name || '</td><td><table class="BarGraph"><tr height="10px"><td class="'
  || case when pct_free <= :ts_pct_free_critical  then 'FullCritical' when pct_free <= :ts_pct_free_warn then 'FullWarning' else 'FullGreen' end || '" width="' 
  || round(100-pct_free) 
  || 'px"></td><td class="EmptyRight" width="' 
  || round(pct_free) || 'px"></td></tr></table>'
  || '</td><td class="number">' 
  || to_char(100-pct_free) 
  || '</td><td class="number">' 
  || to_char(round(mb_gesamt), '999g999g999g999') || '</td><td class="number">' 
  || to_char(round(mb_file), '999g999g999g999') || '</td><td class="number">' 
  || to_char(round(mb_free), '999g999g999g999') || '</td><td class="number">' 
  || to_char(round(mb_free+mb_autoalloc), '999g999g999g999') || '</td><td class="number">' 
  || to_char(pct_free_file) || '</td><td class="number">' 
  || to_char(cnt_files) || '</td><td>' 
  || extent_management || '</td><td>' 
  || allocation_type || '</td><td>' 
  || segment_space_management || '</td></tr>'
from (select mb_file
        , mb_free
        , mb_autoalloc
        , mb_gesamt
        , cnt_files
        , t.tablespace_name
        , t.extent_management
        , t.allocation_type
        , t.segment_space_management
        , round(mb_free/mb_file*100, 1) pct_free_file
        , round((mb_free+mb_autoalloc)/mb_gesamt*100, 1) pct_free
        , row_number() over (order by mb_free/mb_file*100) rn
      from dba_tablespaces t,
      (select sum(greatest(BYTES,MAXBYTES)) / 1024/1024 mb_gesamt
         , sum(bytes)/1024/1024 mb_file
         , sum(greatest(BYTES,MAXBYTES)-BYTES)/1024/1024 mb_autoalloc
         , count(file_name) cnt_files
         , TABLESPACE_NAME 
       from dba_data_files 
       group by TABLESPACE_NAME) f,
        (select sum(BYTES) / 1024/1024 mb_free, TABLESPACE_NAME from dba_free_space group by TABLESPACE_NAME) fs
where t.tablespace_name = f.tablespace_name
and   t.tablespace_name = fs.tablespace_name
and   t.contents = 'PERMANENT')
where pct_free < 50 or rn < 30
order by pct_free;
select '</table><br>' FROM dual;
---------------User Quotas------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('quotas');
select '<a name="quotas"><h3>User Quotas (>50% full OR Top 30)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>User</th>
  <th>Tablespace</th>
  <th width="100px">Graph</th>
  <th>% free</th>
  <th>MB allocated</th>
  <th>MB allowed</th>
  </tr>' 
FROM dual;
select '<tr><td>' 
  || username || '</td><td>' 
  || tablespace_name || '</td><td><table class="BarGraph"><tr height="10px"><td class="'
  || case when pct_free <= 5  then 'FullCritical' when pct_free <= 15 then 'FullWarning' else 'FullGreen' end || '" width="' 
  || round(100-pct_free) || 'px"></td><td class="EmptyRight" width="' 
  || round(pct_free) || 'px"></td></tr></table>' || '</td><td class="number">'
  || to_char(round(pct_free, 1)) || '</td><td class="number">'
  ||to_char(round(mb), '999g999g999g999') || '</td><td class="number">'
  ||to_char(round(mb_max), '999g999g999g999') || '</td></tr>'
from (select /*+RULE*/ USERNAME                   -- RULE hint as fix for Bug 6613821
        , TABLESPACE_NAME
        , BYTES/1024/1024 MB 
        , MAX_BYTES/1024/1024 MB_MAX
        , 100-BYTES/MAX_BYTES*100 pct_free
        , row_number() over (order by BYTES/MAX_BYTES desc) rn
      from dba_ts_quotas
      where max_bytes > 1)                        -- unlimited Quota = -1; no Quota = 0
where pct_free < 50 or rn < 30
order by pct_free;
select '</table><br>' FROM dual;
---------------unable to extend issues----------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('extend issues');
select '<a name="extend_issues"><h3>Unable to Extend Issues (TS>640MB: 1x 64MB must fit, TS<640MB: min 10% space left)</h3></a>' FROM dual;
select '<table class="sortable"><tr><th>Tablespace</th><th>MB total</th><th>MB free</th></tr>' FROM dual;
select /* extent check DMTs, LMTs  */
   '<tr><td>' 
   || tablespace_name || '</td><td>'
   || mb_gesamt || '</td><td>'
   || round(mb_free, 1) || '</td></tr>'
FROM (select t.tablespace_name, mb_gesamt, mb_free+mb_autoalloc mb_free from dba_tablespaces t,
     (select sum(greatest(BYTES,MAXBYTES)) / 1024/1024 mb_gesamt, sum(greatest(BYTES,MAXBYTES)-BYTES)/1024/1024 mb_autoalloc, TABLESPACE_NAME from dba_data_files group by TABLESPACE_NAME) f,
     (select sum(BYTES) / 1024/1024 mb_free, TABLESPACE_NAME from dba_free_space group by TABLESPACE_NAME) fs
where t.tablespace_name = f.tablespace_name
and   t.tablespace_name = fs.tablespace_name
and   t.contents = 'PERMANENT')
where ( mb_free <= 64 /* 64MB */ and mb_gesamt >= 640 ) or ( mb_free < (mb_gesamt/10) and mb_gesamt < 640 )
order by tablespace_name;
select '</table><br>' FROM dual;
---------------SGA Advice------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('sga_advice');
select '<a name="sga_advice"><h3>SGA Advice</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>SGA Size MB</th>
  <th>Size Factor</th>
  <th>Time Factor</th>
  <th>Est. DB-Time</th>
  <th>Diff next size</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td class="number">' 
  || to_char(sga_size, '999g999g999') || '</td><td class="number">' 
  || round(sga_size_factor*100) || '%' || '</td><td class="number">' 
  || round(ESTD_DB_TIME_FACTOR*100) || '%' || '</td><td class="number">' 
  || ESTD_DB_TIME || '</td><td' 
  || case when (diff_next_time) < 0.06 then ' class="good">' when (diff_next_time) is null then ' class="good">' else '>' end 
  || round( diff_next_time*100, 1) || '%' || '</td></tr>'
from (select instance_name, sga_size, sga_size_factor, ESTD_DB_TIME_FACTOR, ESTD_DB_TIME, (ESTD_DB_TIME -lead(ESTD_DB_TIME) over (partition by sa.inst_id order by SGA_SIZE_FACTOR))/ESTD_DB_TIME diff_next_time
  from gv\$sga_target_advice sa, gv\$instance i
  where sa.inst_id = i.inst_id) sga
order by instance_name, sga_size;
select '</table><br>' FROM dual;
---------------PGA advise------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('pga_advice');
select '<a name="pga_advice"><h3>PGA Advice</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>PGA Target MB</th>
  <th>Size Factor</th>
  <th>Status</th>
  <th>Cache Hit %</th>
  <th># Overallocations</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td class="number">' 
  || to_char(PGA_TARGET_FOR_ESTIMATE/1024/1024, '999g999g999') || '</td><td class="number">' 
  || round(PGA_TARGET_FACTOR*100) ||'%'|| '</td><td class="number">' 
  || ADVICE_STATUS || '</td><td' 
  || case when (ESTD_PGA_CACHE_HIT_PERCENTAGE) > 98 then ' class="good">' else '>' end 
  || ESTD_PGA_CACHE_HIT_PERCENTAGE || '</td><td' 
  || case when (ESTD_OVERALLOC_COUNT ) = 0 then ' class="good">' else '>' end 
  || ESTD_OVERALLOC_COUNT || '</td></tr>'
from gv\$pga_target_advice pa, gv\$instance i
where pa.inst_id = i.inst_id
order by instance_name, PGA_TARGET_FOR_ESTIMATE;
select '</table><br>' FROM dual;
---------------PGA stat------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('pga_stat');
select '<a name="pga_stat"><h3>Top 10 PGA usage per instance</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Username</th>
  <th>OS User</th>
  <th>Program</th>
  <th>machine</th>
  <th>PGA allocated (MB)</th>
  <th>max PGA (MB)</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || username || '</td><td>' 
  || osuser || '</td><td>' 
  || program || '</td><td>' 
  || machine || '</td><td class="number">' 
  || to_char(pga_alloc_mb, '999g999g999') || '</td><td class="number">' 
  || to_char(pga_max_mb, '999g999g999') || '</td></tr>'
from (select i.instance_name
        , s.username
        , s.osuser
        , s.program
        , s.machine
        , p.pga_alloc_mem/1024/1024 pga_alloc_mb
        , p.pga_max_mem/1024/1024 pga_max_mb
        , row_number() over (partition by i.instance_name order by pga_alloc_mem desc) ranking
from gv\$instance i, gv\$session s, gv\$process p
where p.inst_id = i.inst_id
and i.inst_id = s.inst_id
and s.username is not null)
where ranking <= 10
order by instance_name, ranking;
select '</table><br>' FROM dual;
---------------MEM Advice------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('pga_stat');
select '<a name="mem_advice"><h3>Memory Advice</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>SGA Size MB</th>
  <th>Size Factor</th>
  <th>Time Factor</th>
  <th>Est. DB-Time</th>
  <th>Diff next size</th>
  </tr>'
FROM dual;
SELECT '<tr><td>' 
  || instance_name || '</td><td class="number">' 
  || to_char(memory_size, '999g999g999') || '</td><td class="number">' 
  || round(memory_size_factor*100) || '%' || '</td><td class="number">' 
  || round(ESTD_DB_TIME_FACTOR*100) || '%' || '</td><td class="number">' 
  || ESTD_DB_TIME || '</td><td' 
  || case when (diff_next_time) < 0.06 then ' class="good">' when (diff_next_time) is null then ' class="good">' else '>' end 
  || round( diff_next_time*100, 1) || '%' || '</td></tr>'
from (select instance_name
        , memory_size
	, memory_size_factor
	, ESTD_DB_TIME_FACTOR
	, ESTD_DB_TIME
	, (ESTD_DB_TIME -lead(ESTD_DB_TIME) over (partition by sa.inst_id order by MEMORY_SIZE_FACTOR))/ESTD_DB_TIME diff_next_time
      from gv\$memory_target_advice sa, gv\$instance i where sa.inst_id = i.inst_id) sga
order by instance_name, memory_size;
select '</table><br>' FROM dual;
---------------Session Cached Cursors-----------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('session_cached_cursors');
select '<a name="session_cached_cursors"><h3>Session Cached Cursors</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Sessions#</th>
  <th>Sessions %</th>
  <th>Cached Cursors#</th>
  </tr>'
FROM dual;
select '<tr><td class="number">'
  || to_char(amount, '999g999') || '</td><td class="number">'
  || to_char(sess_pct, '990d0') || '%' || '</td><td class="number">'
  || to_char(cursors_cached, '999g999') || '</td></tr>'
from (select sum(amount) amount
        , sum(amount)/s.sess#*100 sess_pct
	, trunc(SESSION_CACHED_CURSORS / (p.value/10) ) * (p.value/10) cursors_cached
      from (select trunc(value) SESSION_CACHED_CURSORS,
	  count(*) Amount
	  from gv\$sesstat seval, gv\$session se, v\$statname sname
	  where name = 'session cursor cache count'
	  and   seval.statistic# = sname.statistic#
	  and   seval.sid = se.sid
	  and   seval.inst_id = se.inst_id
	  and   se.username is not null
	  group by trunc(value)
	  order by 1) c,
	(select to_number(value) value from v\$parameter where name='session_cached_cursors') p,
	(select count(*) sess# from v\$session where username is not null) s
	group by  trunc(SESSION_CACHED_CURSORS / (p.value/10) ) * (p.value/10), s.sess#
	order by trunc(SESSION_CACHED_CURSORS / (p.value/10) ) * (p.value/10));
select '</table><br>' FROM dual;
---------------Open Cursors-----------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('open_cursors');
select '<a name="open_cursors"><h3>Top 10 Session by Open Cursors</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Username</th>
  <th>Program</th>
  <th>Machine</th>
  <th>Open Cursors#</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td>'
  || username || '</td><td>'
  || program || '</td><td>'
  || machine || '</td><td class="number' 
  || case when (total_cur/max_cur) > 0.9 then 'critical' when (total_cur/max_cur) > 0.8 then 'warning' else '>' end || '">' 
  || to_char(trunc(total_cur), '999g999') || ' / ' 
  || to_char(trunc(max_cur), '999g999') || '</td></tr>'
from (select i.instance_name
        , s.username
		, s.program
		, s.machine
		, a.value total_cur
		, p.value max_cur
		, row_number() over (partition by i.inst_id order by a.value desc) rn
	  from gv\$sesstat a, v\$statname b, gv\$session s, gv\$instance i, (select to_number(value) value from v\$parameter where name='open_cursors') p
	  where a.statistic# = b.statistic#
	  and s.sid=a.sid
	  and s.inst_id = a.inst_id
	  and s.inst_id = i.inst_id
	  and b.name = 'opened cursors current'
	order by i.instance_name asc, a.value desc)
where rn <= 10;
select '</table><br>' FROM dual;
---------------Undo Stats------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('undo');
select '<a name="undo"><h3>Undo Stats</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Actual UNDO-Tbs Size [MB]</th>
  <th>Undo Retention (min)</th>
  <th>Undo MB per min</th>
  <th>Req. UNDO Space [MB]</th>
  <th>Optimal Undo Retention (min)</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || d.instance_name, '</td><td class="number">' 
  || d.undo_size/(1024*1024) || '</td><td class="number">' 
  || SUBSTR(ur.value/60,1,25) || '</td><td class="number">' 
  || ROUND(us.undo_block_per_sec*bs.value/1024/1024*60) || '</td><td class="number">' 
  || ROUND((us.undo_block_per_sec*bs.value/1024/1024) * ur.value ) || '</td><td class="number">' 
  || ROUND((d.undo_size / (to_number(bs.value) * us.undo_block_per_sec))/60) || '</tr></td>'
FROM (select SUM(a.bytes) undo_size
        , i.instance_name
	    , i.inst_id
      FROM gv\$instance i, gv\$datafile a, gv\$tablespace b, dba_tablespaces c
      WHERE c.contents = 'UNDO'
      AND c.status = 'ONLINE'
      AND b.name = c.tablespace_name
      AND a.ts# = b.ts#
      and i.inst_id = a.inst_id
      and i.inst_id = b.inst_id
      GROUP BY i.instance_name, i.inst_id) d,
      (select value, i.inst_id from gv\$parameter p, gv\$instance i where p.inst_id = i.inst_id and p.name = 'undo_retention') ur,
      (select value, i.inst_id from gv\$parameter p, gv\$instance i where p.inst_id = i.inst_id and p.name = 'db_block_size') bs,
      (select MAX(undoblks/((end_time-begin_time)*3600*24)) undo_block_per_sec, i.inst_id FROM gv\$undostat g, gv\$instance i WHERE g.inst_id = i.inst_id GROUP BY i.inst_id) us
WHERE d.inst_id = ur.inst_id
AND d.inst_id = bs.inst_id
AND d.inst_id = us.inst_id
order by d.instance_name;
select '</table><br>' FROM dual;
---------------Flashback Database------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('flashback_db');
select '<a name="flashback_db"><h3>Flashback Database</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Oldest Flashback Time</th>
  <th>Retention Target (min)</th>
  <th>Current Flashback Size (MB)</th>
  <th>Estimated Flashback Size (MB)</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || OLDEST_FLASHBACK_TIME || '</td><td class="number">'
  || RETENTION_TARGET || '</td><td class="number">'
  || round(FLASHBACK_SIZE/1024/1024) || '</td><td class="number">'
  || round(ESTIMATED_FLASHBACK_SIZE/1024/1024) || '</td></tr>'
from gv\$flashback_database_log fd, gv\$instance i
where fd.inst_id = i.inst_id
order by instance_name;
select '</table><br>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Begin Time</th>
  <th>End Time</th>
  <th>Flashback Data written (MB)</th>
  <th>DB Data read/written (MB)</th>
  <th>Redo Data written (MB)</th>
  <th>Estimated Flashback Size (MB)</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || begin_time || '</td><td>'
  || end_time || '</td><td class="number">'
  || round(FLASHBACK_DATA/1024/1024) || '</td><td class="number">'
  || round(DB_DATA/1024/1024) || '</td><td class="number">'
  || round(REDO_DATA/1024/1024) || '</td><td class="number">'
  || round(ESTIMATED_FLASHBACK_SIZE/1024/1024) || '</td></tr>'
from gv\$flashback_database_stat fs, gv\$instance i
where fs.inst_id = i.inst_id
order by instance_name, fs.begin_time;
select '</table><br>' FROM dual;
---------------Redolog Switches------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('redolog_switches');
prompt <a name="redolog_switches"><h3>Redolog Switches</h3></a><a id="b_redolog_switches" href="javascript:switchdiv('d_redolog_switches')">(+)</a><div id="d_redolog_switches" style="display:none;">
select '<p>Gelb = more than ' || :redo_warn || ' Switches OR more than ' || :redo_warn_mb || 'MB/h (' || :redo_warn_mb_pct || '% of DB size within 24h)</p>' || '<p>Rot = more than ' || :redo_critical || ' Switches OR more than ' || :redo_critical_mb || 'MB/h (' || :redo_critical_mb_pct || '% of DB size within 24h)</p>' FROM dual;
select '<table>
  <tr>
  <th>Thread#</th>
  <th>Date</th>
  <th>#/MB total</th>
  <th>#</th>
  <th>#/MB 00:00</th>
  <th>#/MB 01:00</th>
  <th>#/MB 02:00</th>
  <th>#/MB 03:00</th>
  <th>#/MB 04:00</th>
  <th>#/MB 05:00</th>
  <th>#/MB 06:00</th>
  <th>#/MB 07:00</th>
  <th>#/MB 08:00</th>
  <th>#/MB 09:00</th>
  <th>#/MB 10:00</th>
  <th>#/MB 11:00</th>
  <th>#/MB 12:00</th>
  <th>#/MB 13:00</th>
  <th>#/MB 14:00</th>
  <th>#/MB 15:00</th>
  <th>#/MB 16:00</th>
  <th>#/MB 17:00</th>
  <th>#/MB 18:00</th>
  <th>#/MB 19:00</th>
  <th>#/MB 20:00</th>
  <th>#/MB 21:00</th>
  <th>#/MB 22:00</th>
  <th>#/MB 23:00</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || thread || '</td><td>' 
  || to_char(tag, 'dd/mm/yyyy') || '</td><td' || 
  case
	when ( AA ) > :redo_critical*24 or (MA > :redo_critical_mb*24) then ' class="critical">'
	when ( AA ) > :redo_warn*24 or (MA > :redo_warn_mb*24 ) then ' class="warning">'
	else '>' end || AA || ' / ' || MA || '</td><td/><td' ||
	case
	when ( A00 ) > :redo_critical or (M00 > :redo_critical_mb) then ' class="critical">'
	when ( A00 ) > :redo_warn or (M00 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A00 || ' / ' || M00 || '</td><td' ||
	case
	when ( A01 ) > :redo_critical or (M01 > :redo_critical_mb) then ' class="critical">'
	when ( A01 ) > :redo_warn or (M01 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A01 || ' / ' || M01 || '</td><td' ||
	case
	when ( A02 ) > :redo_critical or (M02 > :redo_critical_mb) then ' class="critical">'
	when ( A02 ) > :redo_warn or (M02 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A02 || ' / ' || M02 || '</td><td' ||
	case
	when ( A03 ) > :redo_critical or (M03 > :redo_critical_mb) then ' class="critical">'
	when ( A03 ) > :redo_warn or (M03 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A03 || ' / ' || M03 || '</td><td' ||
	case
	when ( A04 ) > :redo_critical or (M04 > :redo_critical_mb) then ' class="critical">'
	when ( A04 ) > :redo_warn or (M04 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A04 || ' / ' || M04 || '</td><td' ||
	case
	when ( A05 ) > :redo_critical or (M05 > :redo_critical_mb) then ' class="critical">'
	when ( A05 ) > :redo_warn or (M05 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A05 || ' / ' || M05 || '</td><td' ||
	case
	when ( A06 ) > :redo_critical or (M06 > :redo_critical_mb) then ' class="critical">'
	when ( A06 ) > :redo_warn or (M06 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A06 || ' / ' || M06 || '</td><td' ||
	case
	when ( A07 ) > :redo_critical or (M07 > :redo_critical_mb) then ' class="critical">'
	when ( A07 ) > :redo_warn or (M07 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A07 || ' / ' || M07 || '</td><td' ||
	case
	when ( A08 ) > :redo_critical or (M08 > :redo_critical_mb) then ' class="critical">'
	when ( A08 ) > :redo_warn or (M08 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A08 || ' / ' || M08 || '</td><td' ||
	case
	when ( A09 ) > :redo_critical or (M09 > :redo_critical_mb) then ' class="critical">'
	when ( A09 ) > :redo_warn or (M09 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A09 || ' / ' || M09 || '</td><td' ||
	case
	when ( A10 ) > :redo_critical or (M10 > :redo_critical_mb) then ' class="critical">'
	when ( A10 ) > :redo_warn or (M10 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A10 || ' / ' || M10 || '</td><td' ||
	case
	when ( A11 ) > :redo_critical or (M11 > :redo_critical_mb) then ' class="critical">'
	when ( A11 ) > :redo_warn or (M11 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A11 || ' / ' || M11 || '</td><td' ||
	case
	when ( A12 ) > :redo_critical or (M12 > :redo_critical_mb) then ' class="critical">'
	when ( A12 ) > :redo_warn or (M12 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A12 || ' / ' || M12 || '</td><td' ||
	case
	when ( A13 ) > :redo_critical or (M13 > :redo_critical_mb) then ' class="critical">'
	when ( A13 ) > :redo_warn or (M13 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A13 || ' / ' || M13 || '</td><td' ||
	case
	when ( A14 ) > :redo_critical or (M14 > :redo_critical_mb) then ' class="critical">'
	when ( A14 ) > :redo_warn or (M14 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A14 || ' / ' || M14 || '</td><td' ||
	case
	when ( A15 ) > :redo_critical or (M15 > :redo_critical_mb) then ' class="critical">'
	when ( A15 ) > :redo_warn or (M15 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A15 || ' / ' || M15 || '</td><td' ||
	case
	when ( A16 ) > :redo_critical or (M16 > :redo_critical_mb) then ' class="critical">'
	when ( A16 ) > :redo_warn or (M16 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A16 || ' / ' || M16 || '</td><td' ||
	case
	when ( A17 ) > :redo_critical or (M17 > :redo_critical_mb) then ' class="critical">'
	when ( A17 ) > :redo_warn or (M17 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A17 || ' / ' || M17 || '</td><td' ||
	case
	when ( A18 ) > :redo_critical or (M18 > :redo_critical_mb) then ' class="critical">'
	when ( A18 ) > :redo_warn or (M18 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A18 || ' / ' || M18 || '</td><td' ||
	case
	when ( A19 ) > :redo_critical or (M19 > :redo_critical_mb) then ' class="critical">'
	when ( A19 ) > :redo_warn or (M19 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A19 || ' / ' || M19 || '</td><td' ||
	case
	when ( A20 ) > :redo_critical or (M20 > :redo_critical_mb) then ' class="critical">'
	when ( A20 ) > :redo_warn or (M20 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A20 || ' / ' || M20 || '</td><td' ||
	case
	when ( A21 ) > :redo_critical or (M21 > :redo_critical_mb) then ' class="critical">'
	when ( A21 ) > :redo_warn or (M21 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A21 || ' / ' || M21 || '</td><td' ||
	case
	when ( A22 ) > :redo_critical or (M22 > :redo_critical_mb) then ' class="critical">'
	when ( A22 ) > :redo_warn or (M22 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A22 || ' / ' || M22 || '</td><td' ||
	case
	when ( A23 ) > :redo_critical or (M23 > :redo_critical_mb) then ' class="critical">'
	when ( A23 ) > :redo_warn or (M23 > :redo_warn_mb) then ' class="warning">'
	else '>' end || A23 || ' / ' || M23 ||
	'</td></tr>'
from (select thread, tag,
	max(decode(stunde, '00', anz, null)) A00,
	max(decode(stunde, '01', anz, null)) A01,
	max(decode(stunde, '02', anz, null)) A02,
	max(decode(stunde, '03', anz, null)) A03,
	max(decode(stunde, '04', anz, null)) A04,
	max(decode(stunde, '05', anz, null)) A05,
	max(decode(stunde, '06', anz, null)) A06,
	max(decode(stunde, '07', anz, null)) A07,
	max(decode(stunde, '08', anz, null)) A08,
	max(decode(stunde, '09', anz, null)) A09,
	max(decode(stunde, '10', anz, null)) A10,
	max(decode(stunde, '11', anz, null)) A11,
	max(decode(stunde, '12', anz, null)) A12,
	max(decode(stunde, '13', anz, null)) A13,
	max(decode(stunde, '14', anz, null)) A14,
	max(decode(stunde, '15', anz, null)) A15,
	max(decode(stunde, '16', anz, null)) A16,
	max(decode(stunde, '17', anz, null)) A17,
	max(decode(stunde, '18', anz, null)) A18,
	max(decode(stunde, '19', anz, null)) A19,
	max(decode(stunde, '20', anz, null)) A20,
	max(decode(stunde, '21', anz, null)) A21,
	max(decode(stunde, '22', anz, null)) A22,
	max(decode(stunde, '23', anz, null)) A23,
	round(sum(anz)) AA,
	round(max(decode(stunde, '00', MB, null))) M00,
	round(max(decode(stunde, '01', MB, null))) M01,
	round(max(decode(stunde, '02', MB, null))) M02,
	round(max(decode(stunde, '03', MB, null))) M03,
	round(max(decode(stunde, '04', MB, null))) M04,
	round(max(decode(stunde, '05', MB, null))) M05,
	round(max(decode(stunde, '06', MB, null))) M06,
	round(max(decode(stunde, '07', MB, null))) M07,
	round(max(decode(stunde, '08', MB, null))) M08,
	round(max(decode(stunde, '09', MB, null))) M09,
	round(max(decode(stunde, '10', MB, null))) M10,
	round(max(decode(stunde, '11', MB, null))) M11,
	round(max(decode(stunde, '12', MB, null))) M12,
	round(max(decode(stunde, '13', MB, null))) M13,
	round(max(decode(stunde, '14', MB, null))) M14,
	round(max(decode(stunde, '15', MB, null))) M15,
	round(max(decode(stunde, '16', MB, null))) M16,
	round(max(decode(stunde, '17', MB, null))) M17,
	round(max(decode(stunde, '18', MB, null))) M18,
	round(max(decode(stunde, '19', MB, null))) M19,
	round(max(decode(stunde, '20', MB, null))) M20,
	round(max(decode(stunde, '21', MB, null))) M21,
	round(max(decode(stunde, '22', MB, null))) M22,
	round(max(decode(stunde, '23', MB, null))) M23,
	round(sum(MB)) MA
      from (select l.thread# thread
              , to_char(trunc(l.first_time,'hh')
              , 'hh24') stunde
              , trunc(l.first_time) tag
              , count(l.sequence#) anz
              , sum(al.block_size * al.blocks)/1024/1024 MB 
            from gv\$log_history l,
           (select distinct inst_id
              , thread#
              , sequence#
              , blocks
              , block_size from 
            gv\$archived_log) al, gv\$instance i
	    where i.inst_id = l.inst_id(+)
	    and l.inst_id = al.inst_id(+)
	    and l.thread# = al.thread#(+)
	    and l.sequence# = al.sequence#(+)
	    and sysdate-31 < l.first_time(+)
	group by l.thread#, to_char(trunc(l.first_time,'hh'), 'hh24'), trunc(l.first_time))
	group by thread, tag
	order by thread, tag);
select '</table></div><br>' FROM dual;
---------------File I/O Statistics------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('file_io_stats');
select '<a name="file_io_stats"><h3>File I/O Statistics (Top 30 Reads)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Tablesapce</th>
  <th>File</th>
  <th>Reads</th>
  <th>Reads %</th>
  <th>Writes</th>
  <th>Writes %</th>
  <th>Toal I/O</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || tablespace_name || '</td><td>' 
  || file_name || '</td><td class="number">' 
  || to_char(phyrds, '999g999g999') || '</td><td class="number">' 
  || round(read_pct) || '%' ||	'</td><td class="number">' 
  || to_char(phywrts, '999g999g999') ||	'</td><td class="number">' 
  || round(write_pct) || '%' || '</td><td class="number">' 
  || to_char(total_io, '999g999g999') || '</td></tr>'
from (select i.instance_name
	  , df.tablespace_name
	  , df.file_name
	  , fs.phyrds
	  , ROUND((fs.phyrds * 100) / (fst.pr + tst.pr), 2) read_pct
	  , fs.phywrts phywrts
	  , ROUND((fs.phywrts * 100) / (fst.pw + tst.pw), 2) write_pct
	  , (fs.phyrds + fs.phywrts) total_io
	FROM sys.dba_data_files df, gv\$filestat fs, gv\$instance i
	  , (select sum(f.phyrds) pr, sum(f.phywrts) pw from v\$filestat f) fst
	  , (select sum(t.phyrds) pr, sum(t.phywrts) pw from v\$tempstat t) tst
	WHERE df.file_id = fs.file#
	  AND fs.inst_id = i.inst_id
	UNION ALL
	select i.instance_name
	  , tf.tablespace_name
	  , tf.file_name
	  , ts.phyrds
	  , ROUND((ts.phyrds * 100) / (fst.pr + tst.pr), 2)
	  , ts.phywrts phywrts
	  , ROUND((ts.phywrts * 100) / (fst.pw + tst.pw), 2)
	  , (ts.phyrds + ts.phywrts) total_io
	FROM sys.dba_temp_files  tf
	  , gv\$tempstat ts
	  , gv\$instance i
	  , (select sum(f.phyrds) pr, sum(f.phywrts) pw from v\$filestat f) fst
	  , (select sum(t.phyrds) pr, sum(t.phywrts) pw from v\$tempstat t) tst
	WHERE tf.file_id = ts.file#
	  AND ts.inst_id = i.inst_id
	ORDER BY phyrds DESC)
where rownum<=30;
select '</table><br>' FROM dual;
---------------File I/O Timings------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('file_io_timing');
select '<a name="file_io_timing"><h3>File I/O Timings (Top 30 Readtime)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>File</th>
  <th>Reads</th>
  <th>Read Time per I/O</th>
  <th>Writes</th>
  <th>Write Time per I/O</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || fname || '</td><td class="number">'
  || to_char(phyrds, '999g999g999') || '</td><td class="number' 
  || case when read_rate > 4 then 'warning' when read_rate > 10 then 'critical' end || '">' 
  || to_char(round(read_rate, 1), '999g999g990d0') || 'ms' || '</td><td class="number">'
  || to_char(phywrts, '999g999g999') || '</td><td class="number'
  || case when write_rate > 4 then 'warning' when write_rate > 10 then 'critical' end || '">' 
  || to_char(round(write_rate, 1), '999g999g990d0') || 'ms' || '</td></tr>'
from (select instance_name
	  , d.name fname
	  , s.phyrds
	  , ROUND((s.readtim/GREATEST(s.phyrds,1)), 2)   read_rate
	  , s.phywrts
	  , ROUND((s.writetim/GREATEST(s.phywrts,1)),2)  write_rate
	FROM gv\$filestat s, gv\$datafile d, gv\$instance  i
	WHERE s.file# = d.file#
	  AND s.inst_id = i.inst_id
	  AND s.inst_id = d.inst_id
	UNION ALL
	SELECT instance_name
	  , t.name fname
	  , s.phyrds
	  , ROUND((s.readtim/GREATEST(s.phyrds,1)), 2) read_rate
	  , s.phywrts
	  , ROUND((s.writetim/GREATEST(s.phywrts,1)),2) write_rate
	FROM gv\$tempstat s, gv\$tempfile  t, gv\$instance i
	WHERE s.file# = t.file#
	  AND s.inst_id = i.inst_id
	  AND s.inst_id = t.inst_id
	ORDER BY 4 DESC)
where rownum <= 30;
select '</table><br>' FROM dual;
---------------Users------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('users');
prompt <a name="users"><h3>Users</h3></a><a id="b_users" href="javascript:switchdiv('d_users')">(+)</a><div id="d_users" style="display:none;">
select '<table class="sortable">
  <tr>
  <th>User</th>
  <th>Status</th>
  <th>Lock Date</th>
  <th>Expiry Date</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || Username || '</td><td>' 
  || Account_Status || '</td><td>' 
  || lock_date || '</td><td' 
  || case when expiry_date < sysdate+30 and expiry_date > sysdate-30 then ' class="critical"' when expiry_date < sysdate+60 then ' class="warning"'	end || '>' 
  || expiry_date || '</td></tr>'
FROM dba_users
ORDER BY USERNAME;
select '</table></div><br>' FROM dual;
---------------Users with default PWD--------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('users_def_pwd');
select '<a name="users_def_pwd"><h3>Users with default Password</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>User</th>
  <th>Status</th>
  <th>Lock Date</th>
  <th>Expiry Date</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || u.Username || '</td><td' 
  || case when account_status='OPEN' then ' class="critical"' end || '>' 
  || Account_Status || '</td><td>' || lock_date || '</td><td' 
  || case when expiry_date < sysdate+30 and expiry_date > sysdate-30 then ' class="critical"' when expiry_date < sysdate+60 then ' class="warning"' end || '>' 
  || expiry_date || '</td></tr>'
FROM dba_users u, dba_users_with_defpwd du
WHERE u.username = du.username
ORDER BY u.USERNAME;
select '</table><br>' FROM dual;
--------------FRA--------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('fra');
select '<a name="fra"><h3>Flash Recovery Area</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Type</th>
  <th>% used</th>
  <th>% reclaimable</th>
  <th># Files</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || FILE_TYPE || '</td><td class="number' 
  || case when PERCENT_SPACE_USED > 90 then 'critical' when PERCENT_SPACE_USED > 70 then 'warning' end || '">' 
  || PERCENT_SPACE_USED || '</td><td class="number">'
  || to_char(PERCENT_SPACE_RECLAIMABLE, '990d0') || '</td><td class="number">'
  || to_char(NUMBER_OF_FILES, '990d0') || '</td></tr>'
FROM v\$flash_recovery_area_usage;
select '</table><br>' FROM dual;
--------------RMAN Settings--------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('RMAN Settings');
select '<a name="rman_conf"><h3>non-default RMAN Settings</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Name</th>
  <th>Value</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || Name || '</td><td>' 
  || Value || '</td></tr>'
FROM v\$rman_configuration
order by name;
select '</table><br>' FROM dual;
---------------Backups------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('backups');
select '<a name="backups"><h3>Datafile Backups (Top 30 OR corrupt OR older than ' || to_char(:days_back) || ' days)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>File</th>
  <th>Last Backup</th>
  <th>Phys. Corrupt</th>
  <th>Log. Corrupt</th>
  </tr>'
from dual;
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || fname || '</td><td' 
  || case when completion_time < sysdate-:days_back then ' class="critical"' when completion_time < sysdate-:days_back/2 then ' class="warning"' end || '>' 
  || completion_time ||'</td><td' 
  || case when corrupt_blocks > 0 then ' class="critical"' end || '>' 
  || corrupt_blocks || '</td><td' 
  || case when LOGICALLY_CORRUPT > 0 then ' class="critical"' end || '>' 
  || LOGICALLY_CORRUPT || '</td></tr>'
from (select i.instance_name
        , f.file#
	, f.name fname
	, bd.completion_time
	, bd.MARKED_CORRUPT corrupt_blocks
	, bd.LOGICALLY_CORRUPT
	, row_number() over (partition by f.file# order by bd.completion_time desc) rn
      from gv\$instance i, gv\$datafile f, gv\$backup_datafile bd
      where i.inst_id = f.inst_id
      and i.inst_id = bd.inst_id
      and f.inst_id = bd.inst_id
      and f.file# = bd.file#
      order by i.instance_name, f.name)
where rn=1
and (rownum <=30 or corrupt_blocks > 0 or LOGICALLY_CORRUPT >0 or completion_time < sysdate - :days_back);
select '</table><br>' FROM dual;
---------------All Backups------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('all_backups');
prompt <a name="all_backups"><h3>All Backups</h3></a><a id="b_all_backups" href="javascript:switchdiv('d_all_backups')">(+)</a><div id="d_all_backups" style="display:none;">
select '<table class="sortable">
  <tr>
  <th>Backup Type</th>
  <th>File Type</th>
  <th>Status</th>
  <th>Backupset Status</th>
  <th>Device Type</th>
  <th>Backup Filename</th>
  <th>Filename</th>
  <th>Completion Time</th>
  </tr>'
from dual;
select '<tr><td>'
  ||  bd.backup_type || '</td><td>'
  || bd.file_type || '</td><td>'
  || bd.status || '</td><td>'
  || bd.bs_status || '</td><td>'
  || bd.bs_device_type ||'</td><td>'
  || bd.fname || '</td><td>'
  || f.name || '</td><td' 
  || case when bd.completion_time < sysdate-:days_back then ' class="critical"' when bd.completion_time < sysdate-:days_back/2 then ' class="warning"' end || '>' 
  || bd.completion_time || '</td></tr>'
from v\$backup_files bd, v\$datafile f
where f.file# (+) = bd.df_file#
order by bd.fname;
select '</table><br></div>' FROM dual;
--------------Missing Backups------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('missing_backups');
select '<a name="missing_backups"><h3>Files not backuped up (last '||to_char(:days_back)||' days)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>File</th>
  </tr>'
from dual;
with bdf as (select --+MATERIALIZE
    bd.inst_id, bd.file#
    from gv\$backup_datafile bd
	where bd.completion_time > sysdate-:days_back)
select '<tr><td>' 
  || instance_name || '</td><td>' 
  || fname || '</td></tr>'
from (select i.instance_name
        , f.file#
	, f.name fname 
  from gv\$instance i, gv\$datafile f 
  where i.inst_id = f.inst_id 
  and (f.inst_id, f.file#) not in (select bd.inst_id, bd.file# from bdf bd where f.file# = bd.file# and f.inst_id = bd.inst_id) order by i.instance_name, f.name);
select '</table><br>' FROM dual;
--------------Backups------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('unrecoverable');
select '<a name="unrecoverable"><h3>Unrecoverable Files</h3></a>' FROM dual;
select '<table class="sortable">
<tr>
  <th>File</th>
  <th>Last Backup Time</th>
  <th>Unrecoverable Operation Time</th>
  </tr>'
from dual;
with vd as (select /*+MATERIALIZE*/ * from v\$datafile),
     bd as (select /*+MATERIALIZE*/ * from v\$BACKUP_DATAFILE)
select '<tr><td>'
  || VD.Name || '</td><td>'
  || VBD.COMPLETION_TIME || '</td><td>'
  || VD.UNRECOVERABLE_TIME || '</td></tr>'
FROM VD, (select BD.CREATION_CHANGE#, MAX(BD.COMPLETION_TIME) COMPLETION_TIME FROM BD GROUP BY BD.CREATION_CHANGE#) VBD
WHERE VBD.CREATION_CHANGE# = VD.CREATION_CHANGE#
AND VD.UNRECOVERABLE_TIME > VBD.COMPLETION_TIME
order by vd.name;
select '</table><br>' FROM dual;
---------------Archive Destinations------------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('arch_dest');
select '<a name="arch_dest"><h3>Archive Destinations</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Name</th>
  <th>Status</th>
  <th>Target</th>
  <th>Destination</th>
  <th>Archiver</th>
  <th>Error</th>
  </tr>'
from dual;
select '<tr><td>'
  || i.instance_name ||	'</td><td>'
  || a.dest_name || '</td><td' 
  || case when a.status <> 'VALID' then ' class="critical"'	end || '>' 
  || a.status || '</td><td>'
  || a.target || '</td><td>'
  || a.destination || '</td><td>'
  || a.archiver || '</td><td>'
  || a.error || '</td></tr>'
from gv\$instance i, gv\$archive_dest a
where i.inst_id = a.inst_id
and a.status <> 'INACTIVE'
order by i.inst_id, a.dest_id;
select '</table><br>' FROM dual;
------------------------------Reorg-Tables-----------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('reorg_tab');
prompt <a name="reorg_tab"><h3>Reorg-Tables</h3></a><a id="b_reorg_tab" href="javascript:switchdiv('d_reorg_tab')">(+)</a><div id="d_reorg_tab" style="display:none;">
select 'Tables with >40MB free space below HWM, and/or free space >30%. Segment statistics need to be current for this.</br>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Tablename</th>
  <th>last analyzed</th>
  <th>Rows</th>
  <th>Data</th>
  <th>HWM</th>
  <th>Wasted</th>
  <th>Quota</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner, '</td><td>'
  || table_name, '</td><td>'
  || NVL(TO_CHAR(LAST_ANALYZED,'DD/MM/YYYY'),'no Stats'), '</td><td class="number">' 
  || num_rows, '</td><td class="number">'
  || to_char(round(num_rows*avg_row_len/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(blocks*block_size/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(blocks*block_size/1024/1024-num_rows*avg_row_len/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(100*(1-num_rows*avg_row_len/block_size/blocks),2),'999999990.00') || '%</td></tr>'
FROM (select * FROM dba_tables WHERE BLOCKS > 0 and TEMPORARY='N') dt, dba_tablespaces dts
WHERE dt.tablespace_name=dts.tablespace_name
AND	(num_rows*avg_row_len/block_size/blocks<0.7	OR	blocks*block_size-num_rows*avg_row_len>40*1024*1024)
AND	blocks*block_size-num_rows*avg_row_len>1*1024*1024
AND	owner not in ('SYS','SYSTEM','WMSYS')
AND	table_name not in (select distinct table_name from dba_tab_columns where DATA_TYPE in ('BLOB','CLOB','LONG','LONG RAW','NCLOB')) 
ORDER BY round(blocks*block_size/1024/1024-num_rows*avg_row_len/1024/1024,2) desc;
select '</table><br>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Tablename</th>
  <th>Partition name</th>
  <th>last analyzed</th>
  <th>Rows</th>
  <th>Data</th>
  <th>HWM</th>
  <th>Wasted</th>
  <th>Quota</th>
  </tr>'
FROM dual;
SELECT '<tr><td>'
  || table_owner, '</td><td>'
  || table_name, '</td><td>'
  || partition_name, '</td><td>'
  || NVL(TO_CHAR(LAST_ANALYZED,'DD/MM/YYYY'),'no Stats'),'</td><td class="number">' 
  || num_rows, '</td><td class="number">'
  || to_char(round(num_rows*avg_row_len/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(blocks*block_size/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(blocks*block_size/1024/1024-num_rows*avg_row_len/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(100*(1-num_rows*avg_row_len/block_size/blocks),2),'999999990.00') || '%</td></tr>'
FROM (select * FROM dba_tab_partitions WHERE BLOCKS>0) dt, dba_tablespaces dts
WHERE dt.tablespace_name=dts.tablespace_name
AND (num_rows*avg_row_len/block_size/blocks<0.7	OR	blocks*block_size-num_rows*avg_row_len>40*1024*1024)
AND	blocks*block_size-num_rows*avg_row_len>1*1024*1024
AND	table_owner not in ('SYS','SYSTEM','WMSYS')
AND	table_name not in (select distinct table_name from dba_tab_columns where DATA_TYPE in ('BLOB','CLOB','LONG','LONG RAW','NCLOB')) 
ORDER BY round(blocks*block_size/1024/1024-num_rows*avg_row_len/1024/1024,2) desc;
select '</table><br>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Tablename</th>
  <th>Partition name</th>
  <th>Subpartition name</th>
  <th>Analyse</th>
  <th>Rows</th>
  <th>Data</th>
  <th>HWM</th>
  <th>Wasted</th>
  <th>Quota</th></tr>'
FROM dual;
select '<tr><td>'
  || table_owner, '</td><td>'
  || table_name, '</td><td>'
  || partition_name, '</td><td>'
  || subpartition_name, '</td><td>'
  || NVL(TO_CHAR(LAST_ANALYZED,'DD/MM/YYYY'),'no Stats'), '</td><td class="number">'
  || num_rows,'</td><td class="number">'
  || to_char(round(num_rows*avg_row_len/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(blocks*block_size/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(blocks*block_size/1024/1024-num_rows*avg_row_len/1024/1024,2),'999999990.00') || 'MB', '</td><td class="number">'
  || to_char(round(100*(1-num_rows*avg_row_len/block_size/blocks),2),'999999990.00') || '%</td></tr>'
FROM (select * FROM dba_tab_subpartitions WHERE BLOCKS>0) dt, dba_tablespaces dts
WHERE dt.tablespace_name=dts.tablespace_name
AND (num_rows*avg_row_len/block_size/blocks<0.7	OR	blocks*block_size-num_rows*avg_row_len>40*1024*1024)
AND	blocks*block_size-num_rows*avg_row_len>1*1024*1024
AND table_owner not in ('SYS','SYSTEM','WMSYS')
AND	table_name not in (select distinct table_name from dba_tab_columns where DATA_TYPE in ('BLOB','CLOB','LONG','LONG RAW','NCLOB')) ORDER BY round(blocks*block_size/1024/1024-num_rows*avg_row_len/1024/1024,2) desc;
select '</table></div><br>' FROM dual;
---------------Top Segments-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('top_segments');
select '<a name="top_segments"><h3>Top 30 Segments by Size</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Segment</th>
  <th>Type</th>
  <th>Tablespace</th>
  <th>Size MB</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td>'
  || segment_name || '</td><td>'
  || segment_type || '</td><td>'
  || tablespace_name || '</td><td class="number">'
  || to_char(round(bytes/1024/1024), '999g999g990') || '</td></tr>'
FROM (select * FROM DBA_SEGMENTS ORDER BY bytes desc)
WHERE ROWNUM < 31;
select '</table><br>' FROM dual;
---------------Segments in SYSTEM TS-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('system_segments');
prompt <a name="system_segments"><h3>Segments in SYSTEM / SYSAUX not owned by SYS / SYSTEM </h3></a><a id="b_system_segments" href="javascript:switchdiv('d_system_segments')">(+)</a><div id="d_system_segments" style="display:none;">
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Segment</th>
  <th>Type</th>
  <th>Tablespace</th>
  <th>Size MB</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td>'
  || segment_name || '</td><td>'
  || segment_type || '</td><td>'
  || tablespace_name || '</td><td class="number">'
  || to_char(round(bytes/1024/1024), '999g999g990')
  || '</td></tr>'
FROM DBA_SEGMENTS
WHERE TABLESPACE_NAME IN ('SYS','SYSAUX')
AND   OWNER NOT IN ('SYS','SYSTEM','SYSMAN','TSMSYS','DBSNMP','XDB','CTXSYS','EXFSYS','WMSYS','ORDSYS','MDSYS','OLAPSYS','WKSYS','DMSYS','WK_TEST','ORDDATA','AUDSYS','GSMADMIN_INTERNAL','APPQOSSYS')
AND   OWNER not like 'FLOWS_%'
AND   OWNER not like 'APEX%'
order by owner, segment_name;
select '</table></div><br>' FROM dual;
---------------segments with stale or missing statistics-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('stale_statistics');
prompt <a name="stale_statistics"><h3>Segments with stale or missing statistics</h3></a><a id="b_stale_statistics" href="javascript:switchdiv('d_stale_statistics')">(+)</a><div id="d_stale_statistics" style="display:none;">
select '<h4>Segments without statistics</h4></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Segment Type</th>
  <th>Count</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td>'
  || segment_type || '</td><td>'
  || anzahl || '</td></tr>'
FROM (select owner, 'TABLE' segment_type, count(*) anzahl from dba_tables where last_analyzed is null and owner not in ('SYS','SYSTEM') group by owner
  union all
  select table_owner, 'TABLE PARTITION' segment_type, count(*) anzahl from dba_tab_partitions where last_analyzed is null and table_owner not in ('SYS','SYSTEM') group by table_owner
  union all
  select table_owner, 'TABLE SUBPARTITION' segment_type, count(*) anzahl from dba_tab_subpartitions where last_analyzed is null and table_owner not in ('SYS','SYSTEM') group by table_owner
  union all
  select owner, 'INDEX' segment_type, count(*) anzahl from dba_indexes where last_analyzed is null and owner not in ('SYS','SYSTEM') group by owner
  union all
  select index_owner, 'INDEX PARTITION' segment_type, count(*) anzahl from dba_ind_partitions where last_analyzed is null and index_owner not in ('SYS','SYSTEM') group by index_owner
  union all
  select index_owner, 'INDEX SUBPARTITION' segment_type, count(*) anzahl from dba_ind_subpartitions where last_analyzed is null and index_owner not in ('SYS','SYSTEM') group by index_owner)
order by owner, segment_type;
select '</table><br>' FROM dual;
select '<h4>Segments with stale statistics</h4></a>' FROM dual;
select '<table class="sortable"><tr><th>Owner</th><th>Table Name</th><th>Pct changed</th><th>Last analyzed</th></tr>' FROM dual;
select '<tr><td>' 
  || owner || '</td><td>' 
  || table_name || '</td><td class="number' 
  || case when percent >= 25 then 'critical' when percent >= 10 then 'warning' end || '">' 
  || TO_CHAR(percent,'999G999D99') || '</td><td>' 
  || to_char(last_analyzed, 'dd/mm/yyyy hh24:mi') || '</td></tr>'
FROM (select u.TIMESTAMP
        , d.last_analyzed
		, d.owner
		, u.table_name
		, u.inserts
		, u.updates
		, u.deletes
		, d.num_rows
		, ((U.inserts+u.deletes+u.updates)/ decode(d.num_rows, 0, 1, d.num_rows)) * 100 percent
      from ALL_TAB_MODIFICATIONS u,dba_tables d
      where u.table_name = d.table_name
	  and u.table_owner = d.owner
      and (u.inserts > 10000 or u.updates > 10000 or u.deletes > 10000))
order by percent desc;
select '</table></div><br>' FROM dual;
---------------Unindexed Foreign Keys-----------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('unindexed keys');
prompt <a name="unindexed_keys"><h3>Unindexed Foreign Keys</h3></a><a id="b_unindexed_keys" href="javascript:switchdiv('d_unindexed_keys')">(+)</a><div id="d_unindexed_keys" style="display:none;">
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Table Name</th>
  <th>Constraint Name</th>
  <th>Column List</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td>'
  || table_name || '</td><td>'
  || constraint_name || '</td><td>'
  || columns || '</td></tr>'
from (select owner
        , table_name
		, constraint_name
		, cname1 
		|| nvl2(cname2, ',' || cname2, null) 
		|| nvl2(cname3, ',' || cname3, null) 
		|| nvl2(cname4, ',' || cname4, null) 
		|| nvl2(cname5, ',' || cname5, null) 
		|| nvl2(cname6, ',' || cname6, null) 
		|| nvl2(cname7, ',' || cname7, null) 
		|| nvl2(cname8, ',' || cname8, null) columns
	 from (select b.owner
	         , b.table_name
			 , b.constraint_name
			 , max(decode(position, 1, column_name, null)) cname1
			 , max(decode(position, 2, column_name, null)) cname2
			 , max(decode(position, 3, column_name, null)) cname3
			 , max(decode(position, 4, column_name, null)) cname4
			 , max(decode(position, 5, column_name, null)) cname5
			 , max(decode(position, 6, column_name, null)) cname6
			 , max(decode(position, 7, column_name, null)) cname7
			 , max(decode(position, 8, column_name, null)) cname8
			 , count(*) col_cnt
			from (select substr(owner,1,30) owner
			        , substr(table_name,1,30) table_name
					, substr(constraint_name,1,30) constraint_name
					, substr(column_name,1,30) column_name
					, position
				  from dba_cons_columns) a,
				  dba_constraints b
			 where a.constraint_name = b.constraint_name
			 and a.owner = b.owner
			 and b.constraint_type = 'R'
             and a.owner not in ('SYS','SYSTEM','SYSMAN','EXFSYS','DBSNMP')
			 group by b.table_name, b.constraint_name, b.owner) cons
	where col_cnt > ALL
			(select count(*) from dba_ind_columns i
			 where i.table_name = cons.table_name
			 and i.table_owner = cons.owner
			 and i.column_name in (cname1, cname2, cname3, cname4, cname5, cname6, cname7, cname8 )
			 and i.column_position <= cons.col_cnt
			 group by i.index_name, i.table_owner))
order by owner,table_name, constraint_name;
select '</table></div><br>' FROM dual;
---------------Sequences-----------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('sequences');
prompt <a name="sequences"><h3>Sequences</h3></a><a id="b_sequences" href="javascript:switchdiv('d_sequences')">(+)</a><div id="d_sequences" style="display:none;">
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Sequence</th>
  <th>Max Value</th>
  <th>Current Value</th>
  <th>Increase by</th>
  <th>Cache</th>
  <th>Cycle</th>
  </tr>'
FROM dual;
SELECT '<tr><td>'
  || SEQUENCE_OWNER || '</td><td>'
  || SEQUENCE_NAME || '</td><td class="number">'
  || MAX_VALUE || '</td><td class="number' 
  || case when (CYCLE_FLAG='N' and LAST_NUMBER/MAX_VALUE > 0.9) then 'critical' when (CYCLE_FLAG='N' and LAST_NUMBER/MAX_VALUE > 0.8) then 'warning' else 'good' end || '">'
  || LAST_NUMBER || '</td><td class="number">'
  || INCREMENT_BY || '</td><td class="number">'
  || CACHE_SIZE || '</td><td>'
  || CYCLE_FLAG || '</td></tr>'
from (select SEQUENCE_OWNER
        , SEQUENCE_NAME
		, CYCLE_FLAG
		, LAST_NUMBER
		, INCREMENT_BY
		, CACHE_SIZE
		, decode(MAX_VALUE, -1, 9999999999999999999999999999, MAX_VALUE) MAX_VALUE
      from dba_sequences)
order by LAST_NUMBER/MAX_VALUE desc, SEQUENCE_OWNER,SEQUENCE_NAME;
select '</table></div><br>' FROM dual;
---------------Jobs-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('jobs');
select '<a name="jobs"><h3>DBA Jobs</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Job</th>
  <th>Schema User</th>
  <th>Priv User</th>
  <th>Broken</th>
  <th>Failures</th>
  <th>Last Date</th>
  <th>Next Date</th>
  <th>Interval</th>
  <th>What</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || job || '</td><td>'
  || schema_user || '</td><td>'
  || priv_user || '</td><td'
  || case when broken='Y' then ' class="critical"' else ' class="good"' end || '>' 
  || broken || '</td><td class="number' 
  || case when failures >= 5 then 'critical' when failures >= 1 then 'warning' end || '">' 
  || failures || '</td><td>'
  || last_date || '</td><td>'
  || next_date || '</td><td>'
  || interval || '</td><td>'
  || what || '</td></tr>'
from (select instance_name
        , job
		, schema_user
		, priv_user
		, broken
		, failures
		, last_date
		, next_date
		, interval
		, what
	  from (select i.instance_name, i.inst_id from gv\$instance i
	  union all
	  select 'ANY', 0 from dual) i, dba_jobs j where i.inst_id = j.instance order by schema_user asc, next_date desc);
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('scheduler jobs');
select '<h3>Scheduler Jobs</h3>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Job</th>
  <th>Job Type</th>
  <th>Schedule Name</th>
  <th>Schedule Type</th>
  <th>Enabled</th>
  <th>State</th>
  <th>Run Count</th>
  <th>Last Run Time (s)</th>
  <th>Failures</th>
  <th>Last Date</th>
  <th>Next Date</th>
  <th>Interval</th>
  <th>Action</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td>'
  || job_name || '</td><td>'
  || job_type || '</td><td>'
  || SCHEDULE_NAME || '</td><td>'
  || SCHEDULE_TYPE || '</td><td'
  || case when enabled='FALSE' then ' class="warning"' else ' class="good"' end || '>' 
  || enabled || '</td><td>'
  || state || '</td><td>'
  || run_count || '</td><td>'
  || last_run_duration || '</td><td class="number' 
  || case when failure_count >= 5 then 'critical' when failure_count >= 1 then 'warning' end || '">' 
  || failure_count || '</td><td>'
  || last_start_date || '</td><td>'
  || next_run_date || '</td><td>'
  || Repeat_interval || '</td><td>'
  || Job_Action || '</td></tr>'
from dba_scheduler_jobs
order by owner, job_name desc;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('scheduler job runs');
select '<a name="scheduler_job_runs"><h3>Scheduler Job History (max. 20 per Job)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Log Date</th>
  <th>Owner</th>
  <th>Job</th>
  <th>Status</th>
  <th>Message</th>
  <th>Error Number</th>
  <th>Error Msg</th>
  <th>Start Date</th>
  <th>Duration</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || to_char(log_date, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>' 
  || owner || '</td><td>' 
  || job_name || '</td><td' 
  || case when status='FAILED' then ' class="critical"' else ' class="good"' end || '>' 
  || status || '</td><td>' 
  || output || '</td><td class="number">' 
  || error# || '</td><td>' 
  || errors || '</td><td>' 
  || actual_start_date || '</td><td>' 
  || run_duration || '</td></tr>'
from (select log_date
        , owner
		, job_name
		, status
		, output
		, error#
		, errors
		, actual_start_date
		, run_duration
		, row_number() over (partition by job_name order by log_date desc) rn 
	  from dba_scheduler_job_run_details 
	  where log_date > systimestamp - :days_back)
where rn < 21
order by log_date desc;
select '</table><br>' FROM dual;
---------------Autotask Jobs--------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('autotask');
select '<a name="autotask"><h3>Autotask Jobs</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Job</th>
  <th>Status</th>
  <th>Last Try Date</th>
  <th>Last Good Date</th>
  <th>Next Try Date</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || CLIENT_NAME || '</td><td>'
  || STATUS || '</td class="' 
  || case when LAST_TRY_DATE > LAST_TRY_DATE then 'warning' else 'good' end || '"><td>'
  || to_char(LAST_TRY_DATE, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>'
  || to_char(LAST_TRY_DATE, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>'
  || to_char(NEXT_TRY_DATE, 'dd/mm/yyyy hh24:mi:ss') || '</td></tr>'
from dba_autotask_task
order by CLIENT_NAME asc;
select '</table><br>' FROM dual;
---------------Invalid Objects----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('inv_obj');
select '<a name="inv_obj"><h3>Invalid Objects</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Synonym</th>
  <th>Procedure</th>
  <th>Function</th>
  <th>Trigger</th>
  <th>Package</th>
  <th>Package Body</th>
  <th>Other</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td class="number">'
  || sum(case when object_type='SYNONYM' then 1 end) || '</td><td class="number">'
  || sum(case when object_type='PROCEDURE' then 1 end) || '</td><td class="number">'
  || sum(case when object_type='FUNCTION' then 1 end) || '</td><td class="number">'
  || sum(case when object_type='TRIGGER' then 1 end) || '</td><td class="number">'
  || sum(case when object_type='PACKAGE' then 1 end) || '</td><td class="number">'
  || sum(case when object_type='PACKAGE BODY' then 1 end) || '</td><td class="number">'
  || sum(case when object_type='SYNONYM' 
  then null when object_type='PROCEDURE' 
  then null when object_type='FUNCTION' 
  then null when object_type='TRIGGER' 
  then null when object_type='PACKAGE' 
  then null when object_type='PACKAGE BODY' 
  then null else 1 end) || '</td></tr>'
from dba_objects
where status<>'VALID'
and object_name not like 'BIN$%'
group by owner
order by owner;
select '</table><br>' FROM dual;
---------------Invalid Indexes----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') ||    's -->' from dual;
exec dbms_application_info.set_action('inv_index');
select '<a name="inv_index"><h3>Unusable Indexes</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Index</th>
  <th>Partition</th>
  <th>Subpartition</th>
  <th>Status</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || index_owner || '</td><td>'
  || index_name || '</td><td>'
  || partition_name || '</td><td>'
  || subpartition_name || '</td><td>'
  || status || '</td></tr>'
from (select index_owner
        , index_name
		, partition_name
		, subpartition_name
		, status
      from dba_ind_subpartitions
      where status <> 'USABLE'
      union all
      select index_owner
	    , index_name
		, partition_name
		, ''
		, status
      from dba_ind_partitions
      where status not in ('USABLE', 'N/A')
      union all
      select owner
	    , index_name
		, ''
		, ''
		, status
      from dba_indexes
      where status not in ('VALID', 'N/A'))
order by index_owner, index_name, partition_name, subpartition_name;
select '</table><br>' FROM dual;
---------------Auditing----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('auditing');
select '<a name="auditing"><h3>Auditing</h3></a><h3>Audited Objects</h3>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>Object</th>
  <th>Type</th>
  <th>Alter</th>
  <th>Audit</th>
  <th>Comment</th>
  <th>Delete</th>
  <th>Grant</th>
  <th>Index</th>
  <th>Insert</th>
  <th>Lock</th>
  <th>Rename</th>
  <th>Select</th>
  <th>Update</th>
  <th>Execute</th>
  <th>Create</th>
  <th>Read</th>
  <th>Write</th>
  <th>Flashback</th>
  </tr>' 
FROM dual;
select '<tr><td>' 
  || owner || '</td><td>' 
  || object_name || '</td><td>' 
  || object_type || '</td><td>' 
  || ALT || '</td><td>' 
  || AUD || '</td><td>' 
  || COM || '</td><td>' 
  || DEL || '</td><td>' 
  || GRA || '</td><td>' 
  || IND || '</td><td>' 
  || INS || '</td><td>' 
  || LOC || '</td><td>' 
  || REN || '</td><td>' 
  || SEL || '</td><td>' 
  || UPD || '</td><td>' 
  || EXE || '</td><td>' 
  || CRE || '</td><td>' 
  || REA || '</td><td>' 
  || WRI || '</td><td>' 
  || FBK || '</td></tr>'
from dba_obj_audit_opts
order by owner, object_type, object_name;
select '</table><br>' FROM dual;
select '<h3>Audited Statements</h3>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Username</th>
  <th>Audit Option</th>
  <th>Success</th>
  <th>Failure</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || user_name || '</td><td>'
  || audit_option || '</td><td>'
  || success || '</td><td>'
  || failure || '</td></tr>'
from dba_stmt_audit_opts
order by user_name, audit_option;
select '</table><br>' FROM dual;
--------------- Top Sessions--------------------------------------------------------------------------
DECLARE
  TYPE r_type IS RECORD (
    stat_name     VARCHAR2 (30),
    description   VARCHAR2 (30));
  TYPE tr_type IS TABLE OF r_type;
  l_rarray   tr_type  := tr_type();
  l_rec      r_type;
  mysql varchar2(2000);
  TYPE cur_typ IS REF CURSOR;
  c            cur_typ;
  inst_id      sys.gv_\$session.inst_id%TYPE;
  sid          sys.gv_\$session.sid%TYPE;
  username     sys.gv_\$session.username%TYPE;
  program      sys.gv_\$session.program%TYPE;
  machine      sys.gv_\$session.machine%TYPE;
  module       sys.gv_\$session.module%TYPE;
  action       sys.gv_\$session.action%TYPE;
  logon_time   sys.gv_\$session.logon_time%TYPE;
  statvalue    sys.gv_\$sesstat.value%TYPE;
  pct          number;
  ranking      number;
BEGIN
  l_rarray.extend(4);
  l_rec.stat_name := '''session logical reads''';
  l_rec.description := 'buffer gets';
  l_rarray(1) := l_rec;
  l_rec.stat_name := '''physical reads''';
  l_rec.description := 'physical reads';
  l_rarray(2) := l_rec;
  l_rec.stat_name := '''db block changes''';
  l_rec.description := 'block changes';
  l_rarray(3) := l_rec;
  l_rec.stat_name := '''CPU used by this session''';
  l_rec.description := 'CPU (in 1/100s)';
  l_rarray(4) := l_rec;
  dbms_output.put_line('<a name="top_sessions"></a>');
  FOR col IN l_rarray.FIRST .. l_rarray.LAST
  LOOP
    dbms_application_info.set_action('SESSION_' || l_rarray(col).description );
	dbms_output.put_line('<h3>Top 10 Sessions with high ' || l_rarray(col).description || '</h3>');
	dbms_output.put_line('<table class="sortable">
	<tr>
	<th>Percent</th>
	<th>Inst-ID</th>
	<th>SID</th>
	<th>Username</th>
	<th>Program</th>
	<th>Machine</th>
	<th>Module</th>
	<th>Action</th>
	<th>Logon Time</th>
	<th>' 
	|| l_rarray(col).description 
	|| '</th></tr>');
	mysql := 'select * from (select inst_id,
				  sid,
				  username,
				  program,
				  machine,
				  module,
				  action,
				  logon_time,
				  value,
				  pct,
				  rank() over (partition by inst_id order by value desc)  ranking
				from (select
				  se.inst_id,
				  se.sid,
				  se.username,
				  se.program,
				  se.machine,
				  se.module,
				  se.action,
				  se.logon_time,
				  sum(st.value) value,
				  100 * ratio_to_report(sum(st.value)) over (partition by se.inst_id)  pct
				from sys.gv_\$session  se
				  join sys.gv_\$sesstat st on (se.inst_id = st.inst_id and se.sid = st.sid)
				  join sys.v_\$statname sn on (st.statistic# = sn.statistic#)
				where sn.name in (' || l_rarray(col).stat_name || ')
				  and se.username is not null
				group by se.inst_id,
				  se.sid,
				  se.username,
				  se.program,
				  se.machine,
				  se.module,
				  se.action,
				  se.logon_time)) s
			where s.ranking <= 10
			order by s.inst_id, s.ranking';
    OPEN c FOR mysql;
    LOOP
        FETCH c INTO inst_id, sid, username, program, machine, module, action, logon_time, statvalue, pct, ranking;
        EXIT WHEN c%NOTFOUND;
    	dbms_output.put_line('
    	<tr>
    	<td class="number">' || to_char(round(pct,1), '990D09') || '</td>
    	<td class="number">' || to_char(inst_id, '999') || '</td>
    	<td class="number">' || to_char(sid, '999999') || '</td>
    	<td>' || username || '</td>
    	<td>' || program || '</td>
    	<td>' || machine || '</td>
    	<td>' || module || '</td>
    	<td>' || action || '</td>
    	<td>' || to_char(logon_time, 'dd/mm/yyyy hh24:mi:ss') || '</td>
    	<td class="number">' || to_char(statvalue, '999g999g999g999g999g999') || '</td>
    	</tr>');
    END LOOP;
    CLOSE c;
	dbms_output.put_line('</table>');
  END LOOP;
END;
/
--------------- SQL-----------------------------------------------------------------------------------
DECLARE
  TYPE sqlids_type is table of number index by varchar2(13); -- all SQL-IDs that came along
  mysqlids sqlids_type;
  ids varchar2(13);
  TYPE r_type IS RECORD (
    column_name   VARCHAR2 (30),
    description   VARCHAR2 (30));
  TYPE tr_type IS TABLE OF r_type;
  l_rarray   tr_type  := tr_type();
  l_rec      r_type;
  mysql varchar2(1000);
  TYPE cur_typ IS REF CURSOR;
  c           cur_typ;
  sql_id       varchar2(13);
  inst_id      number;
  buffer_gets  number;
  disk_reads   number;
  executions   number;
  elapsed_time number;
  cpu_time     number;
  pct          number;
  ranking      number;
BEGIN
  l_rarray.extend(4);
  l_rec.column_name := 'buffer_gets';
  l_rec.description := 'buffer gets';
  l_rarray(1) := l_rec;
  l_rec.column_name := 'disk_reads';
  l_rec.description := 'disk reads';
  l_rarray(2) := l_rec;
  l_rec.column_name := 'cpu_time';
  l_rec.description := 'CPU Time';
  l_rarray(3) := l_rec;
  l_rec.column_name := 'elapsed_time';
  l_rec.description := 'Elapsed Time';
  l_rarray(4) := l_rec;
  l_rec.column_name := 'executions';
  l_rec.description := 'Executions';
  l_rarray(4) := l_rec;
  dbms_output.put_line('<a name="top_sql"></a>');
  FOR col IN l_rarray.FIRST .. l_rarray.LAST
  LOOP
    dbms_application_info.set_action('SQL_' || l_rarray(col).column_name );
	dbms_output.put_line('<h3>Top 10 SQL with high ' || l_rarray(col).description || '</h3>');
	dbms_output.put_line('<table class="sortable">
	<tr>
	<th>Percent</th>
	<th>Gets</th>
	<th>Gets / Exec</th>
	<th>Reads</th>
	<th>Reads / Exec</th>
	<th>CPU Time (s)</th>
	<th>CPU Time (s) / Exec</th>
	<th>Elapsed Time (s)</th>
	<th>Elapsed Time (s) / Exec</th>
	<th>Executions #</th>
	<th>SQL-ID</th>
	<th>Inst-ID</th>
	</tr>');
	mysql := 'select * from (select inst_id,
				  sql_id,
				  buffer_gets,
				  disk_reads,
				  executions,
				  elapsed_time,
				  cpu_time,
				  pct,
				  rank() over (partition by inst_id order by ' || l_rarray(col).column_name || ' desc)  ranking
				from (select
				  inst_id,
				  sql_id,
				  buffer_gets,
				  disk_reads,
				  executions,
				  elapsed_time,
				  cpu_time,
				  100 * ratio_to_report(' || l_rarray(col).column_name || ') over (partition by inst_id)  pct
				from sys.gv_\$sql
				where command_type != 47 and
				  executions > 0)) s
			where s.ranking <= 10
			order by inst_id, ranking';
    OPEN c FOR mysql;
    LOOP
        FETCH c INTO inst_id, sql_id, buffer_gets, disk_reads, executions, elapsed_time, cpu_time, pct, ranking;
        EXIT WHEN c%NOTFOUND;
    	dbms_output.put_line('
    	<tr>
    	<td class="number">' || to_char(round(pct,1), '990D09') || '</td>
    	<td class="number">' || to_char(buffer_gets, '999g999g999g999') || '</td>
    	<td class="number">' || to_char(round(buffer_gets/executions), '999g999g999g999') || '</td>
    	<td class="number">' || to_char(disk_reads, '999g999g999g999') || '</td>
    	<td class="number">' || to_char(round(disk_reads/executions), '999g999g999g999') || '</td>
    	<td class="number">' || to_char(round(cpu_time/1000000, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(round(cpu_time/1000000/executions, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(round(elapsed_time/1000000, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(round(elapsed_time/1000000/executions, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(executions, '999g999g999g999') || '</td>
    	<td><a href="#' || sql_id || '">' || sql_id ||'</a></td>
    	<td class="number">' || to_char(inst_id, '999') || '</td>
    	</tr>');
		-- remember SQL-ID
		mysqlids(sql_id) := 1;
    END LOOP;
    CLOSE c;
	dbms_output.put_line('</table>');
  END LOOP;
  -- Full SQL Texts
	dbms_output.put_line('<h3>SQL List</h3>
	<table><tr>
	<th>SQL-ID</th>
	<th>SQL Text</th>
	</tr>');
	-- loop through all SQL-IDs
	ids := mysqlids.first;
	while ids is not null
	loop
    	dbms_output.put_line('
    	<tr>
    	<td><a name="' || ids || '">' || ids || '</a></td>
		<td><pre><code></code>');
		for rec in (select dbms_lob.substr(sql_fulltext, 4000) sql_text from sys.v_\$sql where sql_id=ids and rownum=1)
		loop
		    if :hide_sql <> 'Y' then
		        dbms_output.put_line( replace( replace(rec.sql_text, '<', '&lt;'), '>', '&gt;') );
		    end if;
		end loop;
	    ids := mysqlids.next(ids);
	end loop;
	dbms_output.put_line('</table>');
END;
/
--------------- SQL from AWR--------------------------------------------------------------------------
DECLARE
  TYPE sqlids_type is table of number index by varchar2(13); -- all SQL-IDs that came along
  mysqlids sqlids_type;
  ids varchar2(13);
  TYPE r_type IS RECORD (
    column_name   VARCHAR2 (30),
    description   VARCHAR2 (30));
  TYPE tr_type IS TABLE OF r_type;
  l_rarray   tr_type  := tr_type();
  l_rec      r_type;
  mysql varchar2(2000);
  TYPE cur_typ IS REF CURSOR;
  c           cur_typ;
  sql_id       varchar2(13);
  inst_id      number;
  buffer_gets  number;
  disk_reads   number;
  executions   number;
  elapsed_time number;
  cpu_time     number;
  pct          number;
  ranking      number;
BEGIN
  l_rarray.extend(4);
  l_rec.column_name := 'buffer_gets_delta';
  l_rec.description := 'buffer gets';
  l_rarray(1) := l_rec;
  l_rec.column_name := 'disk_reads_delta';
  l_rec.description := 'disk reads';
  l_rarray(2) := l_rec;
  l_rec.column_name := 'cpu_time_delta';
  l_rec.description := 'CPU Time';
  l_rarray(3) := l_rec;
  l_rec.column_name := 'elapsed_time_delta';
  l_rec.description := 'Elapsed Time';
  l_rarray(4) := l_rec;
  l_rec.column_name := 'executions_delta';
  l_rec.description := 'Executions';
  l_rarray(4) := l_rec;
  dbms_output.put_line('<a name="top_sql_awr"></a>');
  if :is_diag_licensed <> 1 then
	dbms_output.put_line('<h3>Top 10 SQL from AWR</h3>');
	dbms_output.put_line('<p>No Diagnostic Pack Licence.</p>');
  else
  FOR col IN l_rarray.FIRST .. l_rarray.LAST
  LOOP
    dbms_application_info.set_action('SQL_' || l_rarray(col).column_name );
	dbms_output.put_line('<h3>Top 10 SQL from AWR with high ' || l_rarray(col).description || '</h3>');
	dbms_output.put_line('
	<table class="sortable"><tr>
	<th>Percent</th>
	<th>Gets</th>
	<th>Gets / Exec</th>
	<th>Reads</th>
	<th>Reads / Exec</th>
	<th>CPU Time (s)</th>
	<th>CPU Time (s) / Exec</th>
	<th>Elapsed Time (s)</th>
	<th>Elapsed Time (s) / Exec</th>
	<th>Executions #</th>
	<th>SQL-ID</th>
	<th>Inst-ID</th>
	</tr>');
	mysql := 'select * from ( select instance_number inst_id,
				  sql_id,
				  buffer_gets_delta   buffer_gets,
				  disk_reads_delta    disk_reads,
				  executions_delta    executions,
				  elapsed_time_delta  elapsed_time,
				  cpu_time_delta      cpu_time,
				  pct,
				  rank() over (partition by instance_number order by ' || l_rarray(col).column_name || ' desc)  ranking
				from (select instance_number,
					  sql_id,
					  sum(buffer_gets_delta) buffer_gets_delta,
					  sum(disk_reads_delta) disk_reads_delta,
					  sum(executions_delta) executions_delta,
					  sum(elapsed_time_delta) elapsed_time_delta,
					  sum(cpu_time_delta) cpu_time_delta,
					  100 * ratio_to_report(sum(' || l_rarray(col).column_name || ')) over (partition by instance_number)  pct
					from dba_hist_sqlstat
					where executions_delta > 0
					  and snap_id between
					    (select min(snap_id) from dba_hist_snapshot where begin_interval_time > systimestamp - ' || to_char(:days_back) || ')
						and
					    (select max(snap_id) from dba_hist_snapshot)
				    group by instance_number, sql_id)) s
			where s.ranking <= 10
			order by inst_id, ranking';
    OPEN c FOR mysql;
    LOOP
        FETCH c INTO inst_id, sql_id, buffer_gets, disk_reads, executions, elapsed_time, cpu_time, pct, ranking;
        EXIT WHEN c%NOTFOUND;
    	dbms_output.put_line('
    	<tr>
    	<td class="number">' || to_char(round(pct,1), '990D09') || '</td>
    	<td class="number">' || to_char(buffer_gets, '999g999g999g999') || '</td>
    	<td class="number">' || to_char(round(buffer_gets/executions), '999g999g999g999') || '</td>
    	<td class="number">' || to_char(disk_reads, '999g999g999g999') || '</td>
    	<td class="number">' || to_char(round(disk_reads/executions), '999g999g999g999') || '</td>
    	<td class="number">' || to_char(round(cpu_time/1000000, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(round(cpu_time/1000000/executions, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(round(elapsed_time/1000000, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(round(elapsed_time/1000000/executions, 3), '999g999g990D09') || '</td>
    	<td class="number">' || to_char(executions, '999g999g999g999') || '</td>
    	<td><a href="#awr' || sql_id || '">' || sql_id ||'</a></td>
    	<td class="number">' || to_char(inst_id, '999') || '</td>
    	</tr>');
		-- remember SQL-ID
		mysqlids(sql_id) := 1;
    END LOOP;
    CLOSE c;
	dbms_output.put_line('</table>');
  END LOOP;
  -- Full SQL Texts
	dbms_output.put_line('<h3>SQL List</h3>
	<table><tr>
	<th>SQL-ID</th>
	<th>SQL Text</th>
	</tr>');
	-- loop through all SQL-IDs
	ids := mysqlids.first;
	while ids is not null
	loop
    	dbms_output.put_line('
    	<tr>
    	<td><a name="awr' || ids || '">' || ids || '</a></td>
		<td><pre><code></code>');
		for rec in (select dbms_lob.substr(sql_text, 4000) sql_text from DBA_HIST_SQLTEXT where sql_id=ids)
		loop
		    if :hide_sql <> 'Y' then
		        dbms_output.put_line(replace(replace(rec.sql_text, '<', '&lt;'), '>', '&gt;') );
		    end if;
		end loop;
	    ids := mysqlids.next(ids);
	end loop;
	dbms_output.put_line('</table>');
  end if;
END;
/
---------------AWR Summary-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('awr_summary');
begin
  dbms_output.put_line('<a name="awr_summary"><h3>AWR Summary (last '||to_char(:days_back)||' days)</h3></a>');
  if :is_diag_licensed = 1 then
	dbms_output.put_line('<table class="sortable"><thead><tr>
		<th>Begin</th>
		<th>End</th>
		<th>Phys. Reads MB/s</th>
		<th>Phys. Writes MB/s</th>
		<th>Redo MB/s</th>
		<th>Phys. Reads IO/s</th>
		<th>Phys. Writes IO/s</th>
		<th>Phys. Redo IO/s</th>
		<th>OS Load</th>
		<th>DB CPU Usage /s</th>
		<th>CPU Util %</th>
		<th>network MB/s</th>
		</tr></thead><tbody>');
    for	rec in
	  (select '<tr><td>' || begin_time ||
		  '</td><td>' || end_time ||
		  '</td><td class="number">' || to_char(Physical_Read_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number">' || to_char(Physical_Write_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number">' || to_char(Redo_Bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td><td class="number">' || to_char(Physical_Read_IOPS,'999g990D9') ||
		  '</td><td class="number">' || to_char(Physical_write_IOPS,'999g990') ||
		  '</td><td class="number">' || to_char(Physical_redo_IOPS,'999g990') ||
		  '</td><td class="number">' || to_char(OS_LOad,'9g990D9') ||
		  '</td><td class="number">' || to_char(DB_CPU_Usage_per_sec,'990D99') ||
		  '</td><td class="number">' || to_char(Host_CPU_util,'990D99') ||
		  '</td><td class="number">' || to_char(Network_bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td></tr>' print_col
		from (select min(begin_time) begin_time,
			  max(end_time) end_time,
			  sum(case metric_name when 'Physical Read Total Bytes Per Sec' then average end) Physical_Read_Total_Bps,
			  sum(case metric_name when 'Physical Write Total Bytes Per Sec' then average end) Physical_Write_Total_Bps,
			  sum(case metric_name when 'Redo Generated Per Sec' then average end) Redo_Bytes_per_sec,
			  sum(case metric_name when 'Physical Read Total IO Requests Per Sec' then average end) Physical_Read_IOPS,
			  sum(case metric_name when 'Physical Write Total IO Requests Per Sec' then average end) Physical_write_IOPS,
			  sum(case metric_name when 'Redo Writes Per Sec' then average end) Physical_redo_IOPS,
			  sum(case metric_name when 'Current OS Load' then average end) OS_LOad,
			  sum(case metric_name when 'CPU Usage Per Sec' then average end) DB_CPU_Usage_per_sec,
			  sum(case metric_name when 'Host CPU Utilization (%)' then average end) Host_CPU_util,
			  sum(case metric_name when 'Network Traffic Volume Per Sec' then average end) Network_bytes_per_sec,
			  snap_id
			from dba_hist_sysmetric_summary
			where begin_time >= sysdate-:days_back
			group by snap_id
			order by snap_id))
	loop
	  dbms_output.put_line(rec.print_col);
	end loop;
	dbms_output.put_line('</tbody><thead><tr>
		<th>Summary</th>
		<th></th>
		<th>Phys. Reads MB/s</th>
		<th>Phys. Writes MB/s</th>
		<th>Redo MB/s</th>
		<th>Phys. Reads IO/s</th>
		<th>Phys. Writes IO/s</th>
		<th>Phys. Redo IO/s</th>
		<th>OS Load</th>
		<th>DB CPU Usage /s</th>
		<th>CPU Util %</th>
		<th>network MB/s</th>
		</tr></thead><tfoot>');
	-- print averages
    for	rec in
	  (select '<tr><td><b>AVG' ||
		  '</td><td>' ||
		  '</td><td class="number"><b>' ||to_char(Physical_Read_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>' ||to_char(Physical_Write_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>' ||to_char(Redo_Bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>' ||to_char(Physical_Read_IOPS,'999g990D9') ||
		  '</td><td class="number"><b>' ||to_char(Physical_write_IOPS,'999g990') ||
		  '</td><td class="number"><b>' ||to_char(Physical_redo_IOPS,'999g990') ||
		  '</td><td class="number"><b>' ||to_char(OS_LOad,'9g990D9') ||
		  '</td><td class="number"><b>' ||to_char(DB_CPU_Usage_per_sec,'990D99') ||
		  '</td><td class="number"><b>' ||to_char(Host_CPU_util,'990D99') ||
		  '</td><td class="number"><b>' ||to_char(Network_bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td></tr>' print_col
		from (select avg(case metric_name when 'Physical Read Total Bytes Per Sec' then average end) Physical_Read_Total_Bps,
			  avg(case metric_name when 'Physical Write Total Bytes Per Sec' then average end) Physical_Write_Total_Bps,
			  avg(case metric_name when 'Redo Generated Per Sec' then average end) Redo_Bytes_per_sec,
			  avg(case metric_name when 'Physical Read Total IO Requests Per Sec' then average end) Physical_Read_IOPS,
			  avg(case metric_name when 'Physical Write Total IO Requests Per Sec' then average end) Physical_write_IOPS,
			  avg(case metric_name when 'Redo Writes Per Sec' then average end) Physical_redo_IOPS,
			  avg(case metric_name when 'Current OS Load' then average end) OS_LOad,
			  avg(case metric_name when 'CPU Usage Per Sec' then average end) DB_CPU_Usage_per_sec,
			  avg(case metric_name when 'Host CPU Utilization (%)' then average end) Host_CPU_util,
			  avg(case metric_name when 'Network Traffic Volume Per Sec' then average end) Network_bytes_per_sec
			from dba_hist_sysmetric_summary
			where begin_time >= sysdate-:days_back))
	loop
	  dbms_output.put_line(rec.print_col);
	end loop;
	-- print maximum
    for	rec in
	  (select '<tr><td><b>MAX' ||
		  '</td><td>' ||
		  '</td><td class="number"><b>'||to_char(Physical_Read_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>'||to_char(Physical_Write_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>'||to_char(Redo_Bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>'||to_char(Physical_Read_IOPS,'999g990D9') ||
		  '</td><td class="number"><b>'||to_char(Physical_write_IOPS,'999g990') ||
		  '</td><td class="number"><b>'||to_char(Physical_redo_IOPS,'999g990') ||
		  '</td><td class="number"><b>'||to_char(OS_LOad,'9g990D9') ||
		  '</td><td class="number"><b>'||to_char(DB_CPU_Usage_per_sec,'990D99') ||
		  '</td><td class="number"><b>'||to_char(Host_CPU_util,'990D99') ||
		  '</td><td class="number"><b>'||to_char(Network_bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td></tr>' print_col
		from (select max(case metric_name when 'Physical Read Total Bytes Per Sec' then average end) Physical_Read_Total_Bps,
			  max(case metric_name when 'Physical Write Total Bytes Per Sec' then average end) Physical_Write_Total_Bps,
			  max(case metric_name when 'Redo Generated Per Sec' then average end) Redo_Bytes_per_sec,
			  max(case metric_name when 'Physical Read Total IO Requests Per Sec' then average end) Physical_Read_IOPS,
			  max(case metric_name when 'Physical Write Total IO Requests Per Sec' then average end) Physical_write_IOPS,
			  max(case metric_name when 'Redo Writes Per Sec' then average end) Physical_redo_IOPS,
			  max(case metric_name when 'Current OS Load' then average end) OS_LOad,
			  max(case metric_name when 'CPU Usage Per Sec' then average end) DB_CPU_Usage_per_sec,
			  max(case metric_name when 'Host CPU Utilization (%)' then average end) Host_CPU_util,
			  max(case metric_name when 'Network Traffic Volume Per Sec' then average end) Network_bytes_per_sec
			from dba_hist_sysmetric_summary
			where begin_time >= sysdate-:days_back))
	loop
	  dbms_output.put_line(rec.print_col);
	end loop;
	-- print minimum
    for	rec in
	  (select '<tr><td><b>MIN' ||
		  '</td><td>' ||
		  '</td><td class="number"><b>' || to_char(Physical_Read_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>' || to_char(Physical_Write_Total_Bps/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>' || to_char(Redo_Bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td><td class="number"><b>' || to_char(Physical_Read_IOPS,'999g990D9') ||
		  '</td><td class="number"><b>' || to_char(Physical_write_IOPS,'999g990') ||
		  '</td><td class="number"><b>' || to_char(Physical_redo_IOPS,'999g990') ||
		  '</td><td class="number"><b>' || to_char(OS_LOad,'9g990D9') ||
		  '</td><td class="number"><b>' || to_char(DB_CPU_Usage_per_sec,'990D99') ||
		  '</td><td class="number"><b>' || to_char(Host_CPU_util,'990D99') ||
		  '</td><td class="number"><b>' || to_char(Network_bytes_per_sec/1024/1024,'999g990D9') ||
		  '</td></tr>' print_col
		from (select min(case metric_name when 'Physical Read Total Bytes Per Sec' then average end) Physical_Read_Total_Bps,
			  min(case metric_name when 'Physical Write Total Bytes Per Sec' then average end) Physical_Write_Total_Bps,
			  min(case metric_name when 'Redo Generated Per Sec' then average end) Redo_Bytes_per_sec,
			  min(case metric_name when 'Physical Read Total IO Requests Per Sec' then average end) Physical_Read_IOPS,
			  min(case metric_name when 'Physical Write Total IO Requests Per Sec' then average end) Physical_write_IOPS,
			  min(case metric_name when 'Redo Writes Per Sec' then average end) Physical_redo_IOPS,
			  min(case metric_name when 'Current OS Load' then average end) OS_LOad,
			  min(case metric_name when 'CPU Usage Per Sec' then average end) DB_CPU_Usage_per_sec,
			  min(case metric_name when 'Host CPU Utilization (%)' then average end) Host_CPU_util,
			  min(case metric_name when 'Network Traffic Volume Per Sec' then average end) Network_bytes_per_sec
			from dba_hist_sysmetric_summary
			where begin_time >= sysdate-:days_back))
	loop
	  dbms_output.put_line(rec.print_col);
	end loop;
	dbms_output.put_line('</tfoot></table><br>');
  else
    dbms_output.put_line('<p>No Diagnostic Pack License.</p>');
  end if;
end;
/
---------------Segments by logical reads-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('segs_logical');
select '<hr /><a name="segs_logical"><h3>Top 10 Segments by logical reads (since startup)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Owner</th>
  <th>Object Name</th>
  <th>Tablespace</th>
  <th>Reads / sec</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || owner || '</td><td>'
  || object_name || '</td><td>'
  || tablespace_name ||	'</td><td class="number">'
  || round(reads) || '</td></tr>'
from (select instance_name
        , owner
		, object_name
		, tablespace_name
		, value/((sysdate-startup_time)*86400) reads
      from gv\$segment_statistics s, gv\$instance i
      where s.inst_id = i.inst_id
      and s.statistic_name = 'logical reads'
      order by value desc)
where rownum <11;
select '</table><br>' FROM dual;
---------------Segments by physical reads-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('segs_physical');
select '<a name="segs_physical"><h3>Top 10 Segments by physical reads (since startup)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Owner</th>
  <th>Object Name</th>
  <th>Tablespace</th>
  <th>Reads / sec</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || owner || '</td><td>'
  || object_name || '</td><td>'
  || tablespace_name || '</td><td class="number">' 
  || round(reads) ||'</td></tr>'
from (select instance_name
        , owner
		, object_name
		, tablespace_name
		, value/((sysdate-startup_time)*86400) reads
      from gv\$segment_statistics s, gv\$instance i
      where s.inst_id = i.inst_id
      and s.statistic_name = 'physical reads'
      order by value desc)
where rownum <11;
select '</table><br>' FROM dual;
---------------Segments by physical writes-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('segs_writes');
select '<a name="segs_writes"><h3>Top 10 Segments by physical writes (since startup)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Owner</th>
  <th>Object Name</th>
  <th>Tablespace</th>
  <th>Writes / sec</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || owner || '</td><td>'
  || object_name || '</td><td>'
  || tablespace_name || '</td><td class="number">' 
  || round(reads) ||'</td></tr>'
from (select instance_name
        , owner
		, object_name
		, tablespace_name
		, value/((sysdate-startup_time)*86400) reads
      from gv\$segment_statistics s, gv\$instance i
      where s.inst_id = i.inst_id
      and s.statistic_name = 'physical writes'
      order by value desc)
where rownum <11;
select '</table><br>' FROM dual;
---------------Segments by block changes-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('segs_changes');
select '<a name="segs_changes"><h3>Top 10 Segments by block changes (since startup)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Owner</th>
  <th>Object Name</th>
  <th>Tablespace</th>
  <th>Block Changes / sec</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || owner || '</td><td>' 
  || object_name || '</td><td>'
  || tablespace_name || '</td><td class="number">' 
  || round(reads) || '</td></tr>'
from (select instance_name
        , owner
		, object_name
		, tablespace_name
		, value/((sysdate-startup_time)*86400) reads
      from gv\$segment_statistics s, gv\$instance i
      where s.inst_id = i.inst_id
      and s.statistic_name = 'db block changes'
      order by value desc)
where rownum <11;
select '</table><br>' FROM dual;
---------------Segments by buffer busy waits----------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('segs_busy');
select '<a name="segs_busy"><h3>Top 10 Segments by buffer busy waits (since startup)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Owner</th>
  <th>Object Name</th>
  <th>Tablespace</th>
  <th>buffer busy waits / sec</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || owner || '</td><td>'
  || object_name || '</td><td>'
  || tablespace_name || '</td><td class="number">' 
  || round(reads) ||'</td></tr>'
from (select instance_name
        , owner
		, object_name
		, tablespace_name
		, value/((sysdate-startup_time)*86400) reads
      from gv\$segment_statistics s, gv\$instance i
      where s.inst_id = i.inst_id
      and s.statistic_name = 'buffer busy waits'
      order by value desc)
where rownum <11;
select '</table><br>' FROM dual;
---------------Latch Hit ratio-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('latches');
select '<a name="latches"><h3>Latch Hit Ratios (<100%)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Latch Name</th>
  <th>Hit Ratio %</th>
  <th>Sleeps / Miss</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>' 
  || name || '</td><td class="number'
  || case when hit_ratio < 95 then 'critical' when hit_ratio < 99 then 'warning' end || '">' 
  || hit_ratio || '</td><td class="number">'
  || sleep_miss || '</td></tr>'
from (select i.instance_name
        , l.name
		, round((gets-misses)/decode(gets,0,1,gets),3)*100 hit_ratio
		, round(sleeps/decode(misses,0,1,misses),3) sleep_miss
      from gv\$latch l, gv\$instance i
      where l.gets != 0
      and l.inst_id = i.inst_id)
where hit_ratio < 100
order by hit_ratio;
select '</table><br>' FROM dual;
---------------Dataguard-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dataguard');
prompt <hr /><a name="dataguard"><h3>Dataguard</h3></a><a id="b_dataguard" href="javascript:switchdiv('d_dataguard')">(+)</a><div id="d_dataguard" style="display:none;">
select '<h4>Processes</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Process</th>
  <th>Client</th>
  <th>Sequence</th>
  <th>Status</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || i.instance_name || '</td><td>'
  || a.PROCESS || '</td><td>'
  || a.CLIENT_PROCESS || '</td><td>'
  || a.SEQUENCE# || '</td><td>' 
  || a.STATUS || '</td></tr>'
FROM gv\$MANAGED_STANDBY a, gv\$INSTANCE i
where a.inst_id = i.inst_id
order by i.instance_name, a.process;
select '</table><br>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Type</th>
  <th>Status</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || i.instance_name || '</td><td>'
  || a.TYPE || '</td><td>'
  || a.STATUS || '</td></tr>'
FROM gv\$LOGSTDBY_PROCESS a, gv\$INSTANCE i
where a.inst_id = i.inst_id
order by i.instance_name, a.type;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dataguard - Archive Destinations');
select '<h4>Archive Destinations</h4>' FROM	dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>ARCHIVED_THREAD#</th>
  <th>ARCHIVED_SEQ#</th>
  <th>APPLIED_THREAD#</th>
  <th>APPLIED_SEQ#</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || i.instance_name || '</td><td>'
  || a.ARCHIVED_THREAD# || '</td><td>'
  || a.ARCHIVED_SEQ# || '</td><td>'
  || a.APPLIED_THREAD# || '</td><td>'
  || a.APPLIED_SEQ# ||'</td></tr>'
FROM Gv\$ARCHIVE_DEST_STATUS a, Gv\$INSTANCE i
where a.inst_id = i.inst_id
order by i.instance_name, a.ARCHIVED_THREAD#;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dataguard - Archive Log History');
select '<h4>Archive Log History (last '||to_char(:days_back)||' days)</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Thread</th>
  <th>Sequence</th>
  <th>First Time</th>
  <th>archived</th>
  <th>applied</th>
  <th>deleted</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || i.Instance_name || ' @ ' 
  || i.host_name || '</td><td>'
  || a.THREAD# || '</td><td>'
  || a.SEQUENCE# || '</td><td>'
  || to_char(a.first_time, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>'
  || a.archived || '</td><td>' 
  || a.APPLIED ||'</td><td>' 
  || a.deleted ||'</td></tr>'
FROM Gv\$ARCHIVED_LOG a, gv\$instance i
where a.inst_id = i.inst_id
and a.first_time > sysdate-:days_back
order by i.instance_name, a.thread#, a.sequence#;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dataguard - Archive Gap');
select '<h4>Archive Gap</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Thread</th>
  <th>Low Sequence</th>
  <th>High Sequence</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || i.Instance_name || '</td><td>'
  || a.THREAD# || '</td><td>'
  || a.LOW_SEQUENCE# || '</td><td>'
  || a.HIGH_SEQUENCE# || '</td></tr>'
FROM Gv\$ARCHIVE_GAP a, gv\$instance i
where a.inst_id = i.inst_id
order by i.instance_name, a.thread#, a.low_sequence#;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dataguard - Logical Standby Status');
select '<h4>Logical Standby Status</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Applied Time</th>
  <th>Applied SCN</th>
  <th>Mining Time</th>
  <th>Minig SCN</th>
  <th>Latest Time</th>
  <th>Latest SCN</th>
  <th>Apply Lag (s)</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || i.Instance_name || '</td><td>' 
  || to_char(APPLIED_TIME, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>' 
  || a.APPLIED_SCN || '</td><td>' 
  || to_char(MINING_TIME, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>' 
  || a.MINING_SCN || '</td><td>' 
  || to_char(LATEST_TIME, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>'
  || a.LATEST_SCN || '</td><td>'
  || to_char((latest_time - applied_time)*86400, '999g990d9') || '</td></tr>'
FROM Gv\$LOGSTDBY_PROGRESS a, gv\$instance i
where a.inst_id = i.inst_id
order by i.instance_name;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dataguard - Logical Standby Events');
select '<h4>Logical Standby Events</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Event Time</th>
  <th>Status</th>
  <th>Event</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || to_char(EVENT_TIME, 'dd/mm/yyyy hh24:mi:ss') || '</td><td>'
  || STATUS || '</td><td>'
  || dbms_lob.substr(EVENT,200,1) || '</td></tr>'
FROM DBA_LOGSTDBY_EVENTS
where event_time > sysdate-31
ORDER BY EVENT_TIMESTAMP, COMMIT_SCN;
select '</table></div><br>' FROM dual;
---------------RAC-----------------------------------------------------------------------------------
------------- several scripts taken from Note 135714.1-----------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('rac_interconnect');
prompt <hr /><a name="rac_interconnect"><h3>RAC</h3></a><a id="b_rac_interconnect" href="javascript:switchdiv('d_rac_interconnect')">(+)</a><div id="d_rac_interconnect" style="display:none;">
select '<h4>Current Block Transfer Time</h4> ' 
  || '<p>This shows the average latency of a consistent block request. ' 
  || 'AVG CR BLOCK RECEIVE TIME should typically be about 15 milliseconds depending ' 
  || 'on your system configuration and volume, is the average latency of a  ' 
  || 'consistent-read request round-trip from the requesting instance to the holding  ' 
  || 'instance and back to the requesting instance. If your CPU has limited idle time  ' 
  || 'and your system typically processes long-running queries, then the latency may  ' 
  || 'be higher. However, it is possible to have an average latency of less than one  ' 
  || 'millisecond with User-mode IPC. Latency can be influenced by a high value for  ' 
  || 'the DB_MULTI_BLOCK_READ_COUNT parameter. This is because a requesting process  ' 
  || 'can issue more than one request for a block depending on the setting of this  ' 
  || 'parameter. Correspondingly, the requesting process may wait longer.  Also check ' 
  || 'interconnect badwidth, OS tcp settings, and OS udp settings if ' 
  || 'AVG CR BLOCK RECEIVE TIME is high.</p>'
FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Received</th>
  <th>Receive Time</th>
  <th>Avg Receive Time (ms)</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td class="number">'
  || received || '</td><td class="number">'
  || receive_time || '</td><td class="number' 
  || case when avg_receive_time > 20 then 'critical' when avg_receive_time > 10 then 'warning' end || '">' 
  || round(avg_receive_time,1) || '</td></tr>'
from (select b1.inst_id
        , b2.value received
		, b1.value receive_time
		, ((case when b1.value = 0 then null else b1.value end / case when b2.value = 0 then null else b2.value end) * 10) avg_receive_time 
from gv\$sysstat b1, gv\$sysstat b2
where b1.name = 'global cache cr block receive time'
and   b2.name = 'global cache cr blocks received'
and   b1.inst_id = b2.inst_id
or    b1.name = 'gc cr block receive time'
and   b2.name = 'gc cr blocks received'
and   b1.inst_id = b2.inst_id) s, gv\$instance i	  
where s.inst_id = i.inst_id
order by 1;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('rac_interconnect - Global Cache Lock');
select '<h4>Global Cache Lock Performance</h4>' 
  || '<p>This shows the average global enqueue get time. ' 
  || 'Typically AVG GLOBAL LOCK GET TIME should be 20-30 milliseconds. The elapsed ' 
  || 'time for a get includes the allocation and initialization of a new global ' 
  || 'enqueue. If the average global enqueue get (global cache get time) or average '
  || 'global enqueue conversion times are excessive, then your system may be '
  || 'experiencing timeouts.  See the ''WAITING SESSIONS'', ''GES LOCK BLOCKERS'', ' 
  || '''GES LOCK WAITERS'', and ''TOP 10 WAIT EVENTS ON SYSTEM'' sections if the ' 
  || 'AVG GLOBAL LOCK GET TIME is high.</p>'
FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Gets</th>
  <th>Get Time</th>
  <th>Avg Get Time (ms)</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td class="number">'
  || GLOBAL_LOCK_GETS || '</td><td class="number">'
  || GLOBAL_LOCK_GET_TIME || '</td><td class="number' 
  || case when AVG_GLOBAL_LOCK_GET_TIME > 50 then 'critical' when AVG_GLOBAL_LOCK_GET_TIME > 30 then 'warning' end || '">' 
  || round(AVG_GLOBAL_LOCK_GET_TIME,1) || '</td></tr>'
from (select b1.inst_id
        , (case when b1.value = 0 then null else b1.value end + case when b2.value = 0 then null else b2.value end) GLOBAL_LOCK_GETS
		, b3.value GLOBAL_LOCK_GET_TIME
		, (case when b3.value = 0 then null else b3.value end / (case when b1.value = 0 then null else b1.value end + case when b2.value = 0 then null else b2.value end) * 10) AVG_GLOBAL_LOCK_GET_TIME
	  from gv\$sysstat b1, gv\$sysstat b2, gv\$sysstat b3
	  where b1.name = 'global lock sync gets'
	  and   b2.name = 'global lock async gets'
	  and   b3.name = 'global lock get time'
	  and   b1.inst_id = b2.inst_id
	  and   b2.inst_id = b3.inst_id
	  or    b1.name = 'global enqueue gets sync'
	  and   b2.name = 'global enqueue gets async'
	  and   b3.name = 'global enqueue get time'
	  and   b1.inst_id = b2.inst_id
	  and   b2.inst_id = b3.inst_id) s, gv\$instance i
where s.inst_id = i.inst_id
order by 1;
select '</table><br>' FROM dual;
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('rac_interconnect - Resource Allocation');
select '<h4>Resource Allocation</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Instance</th>
  <th>Resource</th>
  <th>Current Util.</th>
  <th>Max Util.</th>
  <th>Initial allocation</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || instance_name || '</td><td>'
  || resource_name || '</td><td class="number">'
  || current_utilization || '</td><td class="number">'
  || max_utilization || '</td><td class="number">'
  || initial_allocation || '</td></tr>'
from  gv\$resource_limit l, gv\$instance i
where l.max_utilization > 0
and   i.inst_id = l.inst_id
order by instance_name, resource_name;
select '</table></div><br>' FROM dual;
---------------ASM----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('asm');
select '<hr /><a name="asm"><h3>ASM</h3></a><h4>Disk Groups</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Name</th>
  <th>Redundancy</th>
  <th>Total MB</th>
  <th>Free MB</th>
  <th>Used Space %</th>
  <th>Offline Disks</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || name || '</td><td>'
  || type || '</td><td class="number">'
  || to_char(total_mb, '999g999g990d0') || '</td><td class="number">'
  || to_char(free_mb, '999g999g990d0') || '</td><td class="number'
  || case when 1-(free_mb/total_mb) > 0.95 then 'critical' when 1-(free_mb/total_mb) > 0.9 then 'warning' end || '">' 
  || to_char(round(100-free_mb/total_mb*100, 1), '990d0') || '</td><td class="number">'
  || offline_disks || '</td></tr>'
FROM v\$asm_diskgroup
order by name;
select '</table><br>' FROM dual;
select '<h4>Disks</h4>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Disk Name</th>
  <th>Group Name</th>
  <th>Failgroup</th>
  <th>Path</th>
  <th>Product</th>
  <th>Mount Status</th>
  <th>Header Status</th>
  <th>Mode Status</th>
  <th>State</th>
  <th>Redundancy</th>
  <th>Read Time (ms)</th>
  <th>Write Time (ms)</th>
  <th>Read Errors</th>
  <th>Write Errors</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || d.name || '</td><td>'
  || g.name || '</td><td>'
  || d.failgroup || '</td><td>'
  || d.path || '</td><td>'
  || d.product || '</td><td>'
  || d.mount_status || '</td><td>'
  || d.header_status || '</td><td>'
  || d.mode_status || '</td><td>'
  || d.state || '</td><td>' 
  || d.redundancy || '</td><td class="number">'
  || round(d.reads/d.read_time*10) || '</td><td class="number">'
  || round(d.writes/d.write_time*10) || '</td><td class="number'
  || case when d.read_errs > 0 then 'critical' end || '">' 
  || d.read_errs || '</td><td class="number'
  || case when d.write_errs > 0 then 'critical' end || '">' 
  || d.write_errs || '</td></tr>' 
from v\$asm_diskgroup g, v\$asm_disk d
where g.group_number = d.group_number
order by g.name, d.name;
select '</table><br>' FROM dual;
---------------v$option----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('options');
select '<table class="sortable">
  <tr>
  <th>Option</th>
  <th>Value</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || parameter || '</td><td>'
  || value || '</td></tr>'
FROM v\$option
order by value desc, parameter asc;
select '</table><br>' FROM dual;
---------------Registy-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('dba_registry');
select '<hr /><a name="dba_registry"><h3>DB-Registy</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Component</th>
  <th>Name</th>
  <th>Version</th>
  <th>Status</th>
  <th>modified</th>
  </tr>' 
FROM dual;
select '<tr><td>'
  || comp_id || '</td><td>'
  || comp_name || '</td><td>'
  || version || '</td><td' 
  || decode(status, 'VALID', '>', 'INVALID', ' class="critical">', ' class="warning">') 
  || status || '</td><td>' 
  || modified || '</td></tr>'
FROM dba_registry;
select '</table><br>' FROM dual;
---------------Registy History-----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('registry_history');
select '<a name="registry_history"><h3>Registy History</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Timestamp</th>
  <th>Action</th>
  <th>namespace</th>
  <th>Version</th>
  <th>ID</th>
  <th>Comments</th>
  </tr>'
FROM dual;
select '<tr><td>' 
  || ACTION_TIME ||'</td><td>' 
  || ACTION || '</td><td>' 
  || NAMESPACE || '</td><td>' 
  || VERSION || '</td><td>' 
  || ID || '</td><td>' 
  || COMMENTS || '</td></tr>'
FROM sys.registry\$history
order by ACTION_TIME desc;
select '</table><br>' FROM dual;
---------------Registy History 12.1c--------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('registry_history_121');
select '<a name="registry_history"><h3>SQL-Patch Registry (12.1c)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Timestamp</th>
  <th>Action</th>
  <th>Status</th>
  <th>Patch ID</th>
  <th>Bundle ID</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || ACTION_TIME || '</td><td>' 
  || ACTION || '</td><td>' 
  || STATUS || '</td><td>' 
  || PATCH_ID || '</td><td>' 
  || DESCRIPTION || '</td></tr>' 
FROM dba_registry_sqlpatch
order by ACTION_TIME desc;
select '</table><br>' FROM dual;
---------------Registy History 12.2c--------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('registry_history_122');
select '<a name="registry_history"><h3>SQL-Patch Registry (12.2c)</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Timestamp</th>
  <th>Action</th>
  <th>Status</th>
  <th>Patch ID</th>
  <th>Source Version</th>
  <th>Target Version</th>
  <th>Bundle ID</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || ACTION_TIME || '</td><td>' 
  || ACTION || '</td><td>' 
  || STATUS || '</td><td>' 
  || PATCH_ID || '</td><td>' 
  || SOURCE_VERSION || '</td><td>' 
  || TARGET_VERSION || '</td><td>' 
  || DESCRIPTION || '</td></tr>' 
FROM dba_registry_sqlpatch
order by ACTION_TIME desc;
select '</table><br>' FROM dual;
---------------DBA_FEATURE_USAGE_STATISTICS----------------------------------------------------------------------------------
--------------MOS Note 1317265.1-------------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('feature_usage');
prompt <a name="feature_usage"><h3>Feature Usage</h3></a>
set define on
-- Prepare settings for pre 12c databases
define DFUS=DBA_
col DFUS_ new_val DFUS noprint
define DCOL1=CON_ID
col DCOL1_ new_val DCOL1 noprint
define DCID=-1
col DCID_ new_val DCID noprint
define DCOL2=CON_NAME
col DCOL2_ new_val DCOL2 noprint
define DCNA=to_char(NULL)
col DCNA_ new_val DCNA noprint
select 'CDB_' as DFUS_
  , 'CON_ID' as DCID_
  , '(select NAME from v\$CONTAINERS xz where xz.CON_ID=xy.CON_ID)' as DCNA_
  , 'XXXXXX' as DCOL1_
  , 'XXXXXX' as DCOL2_ 
from CDB_FEATURE_USAGE_STATISTICS 
where exists (select 1 from v\$DATABASE where CDB='YES')
and rownum=1;
select '<table class="sortable">
  <tr>
  <th>Container</th>
  <th>Feature</th>
  <th>Usage</th>
  <th>Last Sample Date</th>
  <th>First Usage Date</th>
  <th>Last Usage Date</th>
  </tr>'
FROM dual;
with
MAP as (
-- mapping between features tracked by DBA_FUS and their corresponding database products (options or packs)
select '' PRODUCT, '' feature, '' MVERSION, '' CONDITION from dual union all
select 'Active Data Guard'                                   , 'Active Data Guard - Real-Time Query on Physical Standby' , '11.2'       , ' '       from dual union all
select 'Active Data Guard'                                   , 'Active Data Guard - Real-Time Query on Physical Standby' , '12.1'       , ' '       from dual union all
select 'Active Data Guard'                                   , 'Global Data Services'                                    , '12.1'       , ' '       from dual union all
select 'Advanced Analytics'                                  , 'Data Mining'                                             , '11.2'       , ' '       from dual union all
select 'Advanced Analytics'                                  , 'Data Mining'                                             , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'ADVANCED Index Compression'                              , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Advanced Index Compression'                              , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup HIGH Compression'                                 , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup HIGH Compression'                                 , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup LOW Compression'                                  , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup LOW Compression'                                  , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup MEDIUM Compression'                               , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup MEDIUM Compression'                               , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup ZLIB Compression'                                 , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup ZLIB Compression'                                 , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Data Guard'                                              , '11.2'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Data Guard'                                              , '12.1'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Flashback Data Archive'                                  , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Flashback Data Archive'                                  , '11.2.0.4'   , 'INVALID' from dual union all -- licensing required by Optimization for Flashback Data Archive
select 'Advanced Compression'                                , 'Flashback Data Archive'                                  , '12.1'       , 'INVALID' from dual union all -- licensing required by Optimization for Flashback Data Archive
select 'Advanced Compression'                                , 'HeapCompression'                                         , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'HeapCompression'                                         , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Heat Map'                                                , '12.1'       , ' '       from dual union all --
select 'Advanced Compression'                                , 'Hybrid Columnar Compression Row Level Locking'           , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Information Lifecycle Management'                        , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Oracle Advanced Network Compression Service'             , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Export)'                        , '11.2'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Export)'                        , '12.1'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Import)'                        , '11.2'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Import)'                        , '12.1'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'SecureFile Compression (user)'                           , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'SecureFile Compression (user)'                           , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'SecureFile Deduplication (user)'                         , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'SecureFile Deduplication (user)'                         , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Backup Encryption'                                       , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Backup Encryption'                                       , '12.1'       , 'INVALID' from dual union all -- licensing required only by encryption to disk
select 'Advanced Security'                                   , 'Data Redaction'                                          , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Encrypted Tablespaces'                                   , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Encrypted Tablespaces'                                   , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Export)'                        , '11.2'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Export)'                        , '12.1'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Import)'                        , '11.2'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Import)'                        , '12.1'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'SecureFile Encryption (user)'                            , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'SecureFile Encryption (user)'                            , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Transparent Data Encryption'                             , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Transparent Data Encryption'                             , '12.1'       , ' '       from dual union all
select 'Change Management Pack'                              , 'Change Management Pack'                                  , '11.2'       , ' '       from dual union all
select 'Configuration Management Pack for Oracle Database'   , 'EM Config Management Pack'                               , '11.2'       , ' '       from dual union all
select 'Data Masking Pack'                                   , 'Data Masking Pack'                                       , '11.2'       , ' '       from dual union all
select '.Database Gateway'                                   , 'Gateways'                                                , '12.1'       , ' '       from dual union all
select '.Database Gateway'                                   , 'Transparent Gateway'                                     , '12.1'       , ' '       from dual union all
select 'Database In-Memory'                                  , 'In-Memory Aggregation'                                   , '12.1'       , ' '       from dual union all
select 'Database In-Memory'                                  , 'In-Memory Column Store'                                  , '12.1.0.2'   , 'BUG'     from dual union all
select 'Database Vault'                                      , 'Oracle Database Vault'                                   , '11.2'       , ' '       from dual union all
select 'Database Vault'                                      , 'Oracle Database Vault'                                   , '12.1'       , ' '       from dual union all
select 'Database Vault'                                      , 'Privilege Capture'                                       , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'ADDM'                                                    , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'ADDM'                                                    , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline'                                            , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline'                                            , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline Template'                                   , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline Template'                                   , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Report'                                              , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Report'                                              , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Automatic Workload Repository'                           , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Adaptive Thresholds'                            , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Adaptive Thresholds'                            , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Static Computations'                            , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Static Computations'                            , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Diagnostic Pack'                                         , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'EM Performance Page'                                     , '12.1'       , ' '       from dual union all
select '.Exadata'                                            , 'Exadata'                                                 , '11.2'       , ' '       from dual union all
select '.Exadata'                                            , 'Exadata'                                                 , '12.1'       , ' '       from dual union all
select '.GoldenGate'                                         , 'GoldenGate'                                              , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'Hybrid Columnar Compression'                             , '12.1'       , 'BUG'     from dual union all
select '.HW'                                                 , 'Hybrid Columnar Compression Row Level Locking'           , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'Sun ZFS with EHCC'                                       , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'ZFS Storage'                                             , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'Zone maps'                                               , '12.1'       , ' '       from dual union all
select 'Label Security'                                      , 'Label Security'                                          , '11.2'       , ' '       from dual union all
select 'Label Security'                                      , 'Label Security'                                          , '12.1'       , ' '       from dual union all
select 'Multitenant'                                         , 'Oracle Multitenant'                                      , '12.1'       , 'C003'    from dual union all -- licensing required only when more than one PDB containers are created
select 'Multitenant'                                         , 'Oracle Pluggable Databases'                              , '12.1'       , 'C003'    from dual union all -- licensing required only when more than one PDB containers are created
select 'OLAP'                                                , 'OLAP - Analytic Workspaces'                              , '11.2'       , ' '       from dual union all
select 'OLAP'                                                , 'OLAP - Analytic Workspaces'                              , '12.1'       , ' '       from dual union all
select 'OLAP'                                                , 'OLAP - Cubes'                                            , '12.1'       , ' '       from dual union all
select 'Partitioning'                                        , 'Partitioning (user)'                                     , '11.2'       , ' '       from dual union all
select 'Partitioning'                                        , 'Partitioning (user)'                                     , '12.1'       , ' '       from dual union all
select 'Partitioning'                                        , 'Zone maps'                                               , '12.1'       , ' '       from dual union all
select '.Pillar Storage'                                     , 'Pillar Storage'                                          , '12.1'       , ' '       from dual union all
select '.Pillar Storage'                                     , 'Pillar Storage with EHCC'                                , '12.1'       , ' '       from dual union all
select '.Provisioning and Patch Automation Pack'             , 'EM Standalone Provisioning and Patch Automation Pack'    , '11.2'       , ' '       from dual union all
select 'Provisioning and Patch Automation Pack for Database' , 'EM Database Provisioning and Patch Automation Pack'      , '11.2'       , ' '       from dual union all
select 'RAC or RAC One Node'                                 , 'Quality of Service Management'                           , '12.1'       , ' '       from dual union all
select 'Real Application Clusters'                           , 'Real Application Clusters (RAC)'                         , '11.2'       , ' '       from dual union all
select 'Real Application Clusters'                           , 'Real Application Clusters (RAC)'                         , '12.1'       , ' '       from dual union all
select 'Real Application Clusters One Node'                  , 'Real Application Cluster One Node'                       , '12.1'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Capture'                       , '11.2'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Capture'                       , '12.1'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Replay'                        , '11.2'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Replay'                        , '12.1'       , ' '       from dual union all
select 'Real Application Testing'                            , 'SQL Performance Analyzer'                                , '11.2'       , ' '       from dual union all
select 'Real Application Testing'                            , 'SQL Performance Analyzer'                                , '12.1'       , ' '       from dual union all
select '.Secure Backup'                                      , 'Oracle Secure Backup'                                    , '12.1'       , 'INVALID' from dual union all  -- does not differentiate usage of Oracle Secure Backup Express, which is free
select 'Spatial and Graph'                                   , 'Spatial'                                                 , '11.2'       , 'INVALID' from dual union all  -- does not differentiate usage of Locator, which is free
select 'Spatial and Graph'                                   , 'Spatial'                                                 , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Automatic Maintenance - SQL Tuning Advisor'              , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Automatic SQL Tuning Advisor'                            , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Automatic SQL Tuning Advisor'                            , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Real-Time SQL Monitoring'                                , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Real-Time SQL Monitoring'                                , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Access Advisor'                                      , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Access Advisor'                                      , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Monitoring and Tuning pages'                         , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Profile'                                             , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Profile'                                             , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Tuning Advisor'                                      , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Tuning Advisor'                                      , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Tuning Set (user)'                                   , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Tuning Pack'                                             , '11.2'       , ' '       from dual union all
select '.WebLogic Server Management Pack Enterprise Edition' , 'EM AS Provisioning and Patch Automation Pack'            , '11.2'       , ' '       from dual union all
select '' PRODUCT, '' FEATURE, '' MVERSION, '' CONDITION from dual),
FUS as (
-- the current data set to be used: DBA_FEATURE_USAGE_STATISTICS or CDB_FEATURE_USAGE_STATISTICS for Container Databases(CDBs)
select
    &&DCID as CON_ID,
    &&DCNA as CON_NAME,
    -- Detect and mark with Y the current DBA_FUS data set = Most Recent Sample based on LAST_SAMPLE_DATE
      case when DBID || '#' || VERSION || '#' || to_char(LAST_SAMPLE_DATE, 'YYYYMMDDHH24MISS') =
                first_value (DBID    ) over (partition by &&DCID order by LAST_SAMPLE_DATE desc nulls last, DBID desc) || '#' ||
                first_value (VERSION ) over (partition by &&DCID order by LAST_SAMPLE_DATE desc nulls last, DBID desc) || '#' ||
                first_value (to_char(LAST_SAMPLE_DATE, 'YYYYMMDDHH24MISS')) over (partition by &&DCID order by LAST_SAMPLE_DATE desc nulls last, DBID desc)
           then 'Y'
           else 'N'
    end as CURRENT_ENTRY,
    NAME            ,
    LAST_SAMPLE_DATE,
    DBID            ,
    VERSION         ,
    DETECTED_USAGES ,
    TOTAL_SAMPLES   ,
    CURRENTLY_USED  ,
    FIRST_USAGE_DATE,
    LAST_USAGE_DATE ,
    AUX_COUNT       ,
    FEATURE_INFO
from &&DFUS.FEATURE_USAGE_STATISTICS xy),
PFUS as (
-- Product-Feature Usage Statitsics = DBA_FUS entries mapped to their corresponding database products
select CON_ID,
    CON_NAME,
    PRODUCT,
    NAME as FEATURE_BEING_USED,
    case  when CONDITION = 'BUG'
               --suppressed due to exceptions/defects
            then '3.SUPPRESSED_DUE_TO_BUG'
          when detected_usages > 0               -- some usage detection - current or past
           and(trim(CONDITION) is null
               -- if special conditions (coded on the MAP.CONDITION column) are required, check if entries satisfy the condition
               -- C001 = compression has been used
               or CONDITION = 'C001' and regexp_like(to_char(FEATURE_INFO), 'compression used: *TRUE', 'i')
               -- C002 = encryption has been used
               or CONDITION = 'C002' and regexp_like(to_char(FEATURE_INFO), 'encryption used: *TRUE', 'i')
               -- C003 = more than one PDB are created
               or CONDITION = 'C003' and CON_ID=1 and AUX_COUNT > 1
              )
            then decode(CURRENT_ENTRY || '#' || CURRENTLY_USED, 'Y#TRUE', '6.CURRENT_USAGE', '4.PAST_USAGE')
          when detected_usages > 0               -- some usage detection - current or past
           and(
               -- if special counter conditions (coded on the MAP.CONDITION column) are required, check if the counter value is not 0
               -- C001 = compression has been used at least once
                  CONDITION = 'C001' and regexp_like(to_char(FEATURE_INFO), 'compression used:[ 0-9]*[1-9][ 0-9]*time', 'i')
               -- C002 = encryption has been used at least once
               or CONDITION = 'C002' and regexp_like(to_char(FEATURE_INFO), 'encryption used:[ 0-9]*[1-9][ 0-9]*time', 'i')
              )
            then decode(CURRENT_ENTRY || '#' || CURRENTLY_USED, 'Y#TRUE', '5.PAST_OR_CURRENT_USAGE', '4.PAST_USAGE') -- FEATURE_INFO counters indicate current or past usage
          when CURRENT_ENTRY = 'Y' then '2.NO_CURRENT_USAGE'   -- detectable feature shows no current usage
          else '1.NO_PAST_USAGE'
    end as USAGE,
    LAST_SAMPLE_DATE,
    DBID            ,
    VERSION         ,
    DETECTED_USAGES ,
    TOTAL_SAMPLES   ,
    CURRENTLY_USED  ,
    FIRST_USAGE_DATE,
    LAST_USAGE_DATE
from (select m.PRODUCT, m.CONDITION, m.MVERSION, first_value (m.MVERSION) over (partition by f.CON_ID, f.NAME, f.VERSION order by m.MVERSION desc nulls last) as MMVERSION, f.*
  from MAP m
  join FUS f on m.FEATURE = f.NAME and m.MVERSION = substr(f.VERSION, 1, length(m.MVERSION))
  where nvl(f.TOTAL_SAMPLES, 0) > 0                        -- ignore features that have never been sampled
)
  where MVERSION = MMVERSION                               -- retain only the MAP entry that mathces the most to the DBA_FUS version = the "most matching version"
  and nvl(CONDITION, '-') != 'INVALID'                   -- ignore entries that are invalidated by bugs or known issues or correspond to features which became free of charge
  and not (CONDITION = 'C003' and CON_ID not in (0, 1))  -- multiple PDBs are visible only in CDB$ROOT
)
select '<tr><td>' 
  || CON_NAME || '</td><td>' 
  || PRODUCT || '</td><td' 
  || DECODE(usage, 'CURRENT_USAGE', ' class="critical">', 'PAST_OR_CURRENT_USAGE', ' class="warning">', '>') 
  || usage || '</td><td>' 
  || LAST_SAMPLE_DATE || '</td><td>' 
  || FIRST_USAGE_DATE || '</td><td>' 
  || LAST_USAGE_DATE || '</td></tr>'
from (select grouping_id(CON_ID) as gid,
    CON_ID   ,
    decode(grouping_id(CON_ID), 1, '--ALL--', max(CON_NAME)) as CON_NAME,
    PRODUCT  ,
    decode(max(USAGE),
          '1.NO_PAST_USAGE'        , 'NO_USAGE'             ,
          '2.NO_CURRENT_USAGE'     , 'NO_USAGE'             ,
          '3.SUPPRESSED_DUE_TO_BUG', 'SUPPRESSED_DUE_TO_BUG',
          '4.PAST_USAGE'           , 'PAST_USAGE'           ,
          '5.PAST_OR_CURRENT_USAGE', 'PAST_OR_CURRENT_USAGE',
          '6.CURRENT_USAGE'        , 'CURRENT_USAGE'        ,
          'UNKNOWN') as USAGE,
    max(LAST_SAMPLE_DATE) as LAST_SAMPLE_DATE,
    min(FIRST_USAGE_DATE) as FIRST_USAGE_DATE,
    max(LAST_USAGE_DATE)  as LAST_USAGE_DATE
  from PFUS
  where USAGE in ('2.NO_CURRENT_USAGE', '4.PAST_USAGE', '5.PAST_OR_CURRENT_USAGE', '6.CURRENT_USAGE')   -- ignore '1.NO_PAST_USAGE', '3.SUPPRESSED_DUE_TO_BUG'
  group by rollup(CON_ID), PRODUCT
  having not (max(CON_ID) in (-1, 0) and grouping_id(CON_ID) = 1)            -- aggregation not needed for non-container databases
order by GID desc, CON_ID, decode(substr(PRODUCT, 1, 1), '.', 2, 1), PRODUCT);
select '</table></div><br>' FROM dual;
---------------Feature Usage Details----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('feature_usage_details');
select '<a name="feature_usage_details"><h3>Featue Usage Details</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Container</th>
  <th>Product</th>
  <th>Feature</th>
  <th>Last Sample Date</th>
  <th>Version</th>
  <th>Detected Usages</th>
  <th>currently used</th>
  <th>First Usage Date</th>
  <th>Last Usage Date</th>
  <th>Extra Info</th>
  </tr>'
FROM dual;
with
MAP as (
-- mapping between features tracked by DBA_FUS and their corresponding database products (options or packs)
select '' PRODUCT, '' feature, '' MVERSION, '' CONDITION from dual union all
select 'Active Data Guard'                                   , 'Active Data Guard - Real-Time Query on Physical Standby' , '11.2'       , ' '       from dual union all
select 'Active Data Guard'                                   , 'Active Data Guard - Real-Time Query on Physical Standby' , '12.1'       , ' '       from dual union all
select 'Active Data Guard'                                   , 'Global Data Services'                                    , '12.1'       , ' '       from dual union all
select 'Advanced Analytics'                                  , 'Data Mining'                                             , '11.2'       , ' '       from dual union all
select 'Advanced Analytics'                                  , 'Data Mining'                                             , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'ADVANCED Index Compression'                              , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Advanced Index Compression'                              , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup HIGH Compression'                                 , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup HIGH Compression'                                 , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup LOW Compression'                                  , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup LOW Compression'                                  , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup MEDIUM Compression'                               , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup MEDIUM Compression'                               , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup ZLIB Compression'                                 , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Backup ZLIB Compression'                                 , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Data Guard'                                              , '11.2'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Data Guard'                                              , '12.1'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Flashback Data Archive'                                  , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Flashback Data Archive'                                  , '11.2.0.4'   , 'INVALID' from dual union all -- licensing required by Optimization for Flashback Data Archive
select 'Advanced Compression'                                , 'Flashback Data Archive'                                  , '12.1'       , 'INVALID' from dual union all -- licensing required by Optimization for Flashback Data Archive
select 'Advanced Compression'                                , 'HeapCompression'                                         , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'HeapCompression'                                         , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Heat Map'                                                , '12.1'       , ' '       from dual union all --
select 'Advanced Compression'                                , 'Hybrid Columnar Compression Row Level Locking'           , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Information Lifecycle Management'                        , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Oracle Advanced Network Compression Service'             , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Export)'                        , '11.2'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Export)'                        , '12.1'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Import)'                        , '11.2'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'Oracle Utility Datapump (Import)'                        , '12.1'       , 'C001'    from dual union all
select 'Advanced Compression'                                , 'SecureFile Compression (user)'                           , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'SecureFile Compression (user)'                           , '12.1'       , ' '       from dual union all
select 'Advanced Compression'                                , 'SecureFile Deduplication (user)'                         , '11.2'       , ' '       from dual union all
select 'Advanced Compression'                                , 'SecureFile Deduplication (user)'                         , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Backup Encryption'                                       , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Backup Encryption'                                       , '12.1'       , 'INVALID' from dual union all -- licensing required only by encryption to disk
select 'Advanced Security'                                   , 'Data Redaction'                                          , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Encrypted Tablespaces'                                   , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Encrypted Tablespaces'                                   , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Export)'                        , '11.2'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Export)'                        , '12.1'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Import)'                        , '11.2'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'Oracle Utility Datapump (Import)'                        , '12.1'       , 'C002'    from dual union all
select 'Advanced Security'                                   , 'SecureFile Encryption (user)'                            , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'SecureFile Encryption (user)'                            , '12.1'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Transparent Data Encryption'                             , '11.2'       , ' '       from dual union all
select 'Advanced Security'                                   , 'Transparent Data Encryption'                             , '12.1'       , ' '       from dual union all
select 'Change Management Pack'                              , 'Change Management Pack'                                  , '11.2'       , ' '       from dual union all
select 'Configuration Management Pack for Oracle Database'   , 'EM Config Management Pack'                               , '11.2'       , ' '       from dual union all
select 'Data Masking Pack'                                   , 'Data Masking Pack'                                       , '11.2'       , ' '       from dual union all
select '.Database Gateway'                                   , 'Gateways'                                                , '12.1'       , ' '       from dual union all
select '.Database Gateway'                                   , 'Transparent Gateway'                                     , '12.1'       , ' '       from dual union all
select 'Database In-Memory'                                  , 'In-Memory Aggregation'                                   , '12.1'       , ' '       from dual union all
select 'Database In-Memory'                                  , 'In-Memory Column Store'                                  , '12.1.0.2'   , 'BUG'     from dual union all
select 'Database Vault'                                      , 'Oracle Database Vault'                                   , '11.2'       , ' '       from dual union all
select 'Database Vault'                                      , 'Oracle Database Vault'                                   , '12.1'       , ' '       from dual union all
select 'Database Vault'                                      , 'Privilege Capture'                                       , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'ADDM'                                                    , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'ADDM'                                                    , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline'                                            , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline'                                            , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline Template'                                   , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Baseline Template'                                   , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Report'                                              , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'AWR Report'                                              , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Automatic Workload Repository'                           , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Adaptive Thresholds'                            , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Adaptive Thresholds'                            , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Static Computations'                            , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Baseline Static Computations'                            , '12.1'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'Diagnostic Pack'                                         , '11.2'       , ' '       from dual union all
select 'Diagnostics Pack'                                    , 'EM Performance Page'                                     , '12.1'       , ' '       from dual union all
select '.Exadata'                                            , 'Exadata'                                                 , '11.2'       , ' '       from dual union all
select '.Exadata'                                            , 'Exadata'                                                 , '12.1'       , ' '       from dual union all
select '.GoldenGate'                                         , 'GoldenGate'                                              , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'Hybrid Columnar Compression'                             , '12.1'       , 'BUG'     from dual union all
select '.HW'                                                 , 'Hybrid Columnar Compression Row Level Locking'           , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'Sun ZFS with EHCC'                                       , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'ZFS Storage'                                             , '12.1'       , ' '       from dual union all
select '.HW'                                                 , 'Zone maps'                                               , '12.1'       , ' '       from dual union all
select 'Label Security'                                      , 'Label Security'                                          , '11.2'       , ' '       from dual union all
select 'Label Security'                                      , 'Label Security'                                          , '12.1'       , ' '       from dual union all
select 'Multitenant'                                         , 'Oracle Multitenant'                                      , '12.1'       , 'C003'    from dual union all -- licensing required only when more than one PDB containers are created
select 'Multitenant'                                         , 'Oracle Pluggable Databases'                              , '12.1'       , 'C003'    from dual union all -- licensing required only when more than one PDB containers are created
select 'OLAP'                                                , 'OLAP - Analytic Workspaces'                              , '11.2'       , ' '       from dual union all
select 'OLAP'                                                , 'OLAP - Analytic Workspaces'                              , '12.1'       , ' '       from dual union all
select 'OLAP'                                                , 'OLAP - Cubes'                                            , '12.1'       , ' '       from dual union all
select 'Partitioning'                                        , 'Partitioning (user)'                                     , '11.2'       , ' '       from dual union all
select 'Partitioning'                                        , 'Partitioning (user)'                                     , '12.1'       , ' '       from dual union all
select 'Partitioning'                                        , 'Zone maps'                                               , '12.1'       , ' '       from dual union all
select '.Pillar Storage'                                     , 'Pillar Storage'                                          , '12.1'       , ' '       from dual union all
select '.Pillar Storage'                                     , 'Pillar Storage with EHCC'                                , '12.1'       , ' '       from dual union all
select '.Provisioning and Patch Automation Pack'             , 'EM Standalone Provisioning and Patch Automation Pack'    , '11.2'       , ' '       from dual union all
select 'Provisioning and Patch Automation Pack for Database' , 'EM Database Provisioning and Patch Automation Pack'      , '11.2'       , ' '       from dual union all
select 'RAC or RAC One Node'                                 , 'Quality of Service Management'                           , '12.1'       , ' '       from dual union all
select 'Real Application Clusters'                           , 'Real Application Clusters (RAC)'                         , '11.2'       , ' '       from dual union all
select 'Real Application Clusters'                           , 'Real Application Clusters (RAC)'                         , '12.1'       , ' '       from dual union all
select 'Real Application Clusters One Node'                  , 'Real Application Cluster One Node'                       , '12.1'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Capture'                       , '11.2'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Capture'                       , '12.1'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Replay'                        , '11.2'       , ' '       from dual union all
select 'Real Application Testing'                            , 'Database Replay: Workload Replay'                        , '12.1'       , ' '       from dual union all
select 'Real Application Testing'                            , 'SQL Performance Analyzer'                                , '11.2'       , ' '       from dual union all
select 'Real Application Testing'                            , 'SQL Performance Analyzer'                                , '12.1'       , ' '       from dual union all
select '.Secure Backup'                                      , 'Oracle Secure Backup'                                    , '12.1'       , 'INVALID' from dual union all  -- does not differentiate usage of Oracle Secure Backup Express, which is free
select 'Spatial and Graph'                                   , 'Spatial'                                                 , '11.2'       , 'INVALID' from dual union all  -- does not differentiate usage of Locator, which is free
select 'Spatial and Graph'                                   , 'Spatial'                                                 , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Automatic Maintenance - SQL Tuning Advisor'              , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Automatic SQL Tuning Advisor'                            , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Automatic SQL Tuning Advisor'                            , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Real-Time SQL Monitoring'                                , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Real-Time SQL Monitoring'                                , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Access Advisor'                                      , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Access Advisor'                                      , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Monitoring and Tuning pages'                         , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Profile'                                             , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Profile'                                             , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Tuning Advisor'                                      , '11.2'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Tuning Advisor'                                      , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'SQL Tuning Set (user)'                                   , '12.1'       , ' '       from dual union all
select 'Tuning Pack'                                         , 'Tuning Pack'                                             , '11.2'       , ' '       from dual union all
select '.WebLogic Server Management Pack Enterprise Edition' , 'EM AS Provisioning and Patch Automation Pack'            , '11.2'       , ' '       from dual union all
select '' PRODUCT, '' FEATURE, '' MVERSION, '' CONDITION from dual),
FUS as (
-- the current data set to be used: DBA_FEATURE_USAGE_STATISTICS or CDB_FEATURE_USAGE_STATISTICS for Container Databases(CDBs)
select
    &&DCID as CON_ID,
    &&DCNA as CON_NAME,
    -- Detect and mark with Y the current DBA_FUS data set = Most Recent Sample based on LAST_SAMPLE_DATE
      case when DBID || '#' || VERSION || '#' || to_char(LAST_SAMPLE_DATE, 'YYYYMMDDHH24MISS') =
                first_value (DBID    ) over (partition by &&DCID order by LAST_SAMPLE_DATE desc nulls last, DBID desc) || '#' ||
                first_value (VERSION ) over (partition by &&DCID order by LAST_SAMPLE_DATE desc nulls last, DBID desc) || '#' ||
                first_value (to_char(LAST_SAMPLE_DATE, 'YYYYMMDDHH24MISS')) over (partition by &&DCID order by LAST_SAMPLE_DATE desc nulls last, DBID desc)
           then 'Y'
           else 'N'
    end as CURRENT_ENTRY,
    NAME            ,
    LAST_SAMPLE_DATE,
    DBID            ,
    VERSION         ,
    DETECTED_USAGES ,
    TOTAL_SAMPLES   ,
    CURRENTLY_USED  ,
    FIRST_USAGE_DATE,
    LAST_USAGE_DATE ,
    AUX_COUNT       ,
    FEATURE_INFO
from &&DFUS.FEATURE_USAGE_STATISTICS xy),
PFUS as (
-- Product-Feature Usage Statitsics = DBA_FUS entries mapped to their corresponding database products
select CON_ID,
    CON_NAME,
    PRODUCT,
    NAME as FEATURE_BEING_USED,
    case  when CONDITION = 'BUG'
               --suppressed due to exceptions/defects
            then '3.SUPPRESSED_DUE_TO_BUG'
          when detected_usages > 0               -- some usage detection - current or past
           and(trim(CONDITION) is null
               -- if special conditions (coded on the MAP.CONDITION column) are required, check if entries satisfy the condition
               -- C001 = compression has been used
               or CONDITION = 'C001' and regexp_like(to_char(FEATURE_INFO), 'compression used: *TRUE', 'i')
               -- C002 = encryption has been used
               or CONDITION = 'C002' and regexp_like(to_char(FEATURE_INFO), 'encryption used: *TRUE', 'i')
               -- C003 = more than one PDB are created
               or CONDITION = 'C003' and CON_ID=1 and AUX_COUNT > 1
              )
            then decode(CURRENT_ENTRY || '#' || CURRENTLY_USED, 'Y#TRUE', '6.CURRENT_USAGE', '4.PAST_USAGE')
          when detected_usages > 0               -- some usage detection - current or past
           and (
               -- if special counter conditions (coded on the MAP.CONDITION column) are required, check if the counter value is not 0
               -- C001 = compression has been used at least once
                  CONDITION = 'C001' and regexp_like(to_char(FEATURE_INFO), 'compression used:[ 0-9]*[1-9][ 0-9]*time', 'i')
               -- C002 = encryption has been used at least once
               or CONDITION = 'C002' and regexp_like(to_char(FEATURE_INFO), 'encryption used:[ 0-9]*[1-9][ 0-9]*time', 'i')
              )
            then decode(CURRENT_ENTRY || '#' || CURRENTLY_USED, 'Y#TRUE', '5.PAST_OR_CURRENT_USAGE', '4.PAST_USAGE') -- FEATURE_INFO counters indicate current or past usage
          when CURRENT_ENTRY = 'Y' then '2.NO_CURRENT_USAGE'   -- detectable feature shows no current usage
          else '1.NO_PAST_USAGE'
    end as USAGE,
    LAST_SAMPLE_DATE,
    DBID            ,
    VERSION         ,
    DETECTED_USAGES ,
    TOTAL_SAMPLES   ,
    CURRENTLY_USED  ,
    FIRST_USAGE_DATE,
    LAST_USAGE_DATE,
    case when CONDITION = 'C001' then regexp_substr(to_char(FEATURE_INFO), 'compression used:(.*?)(times|TRUE|FALSE)', 1, 1, 'i')
         when CONDITION = 'C002' then regexp_substr(to_char(FEATURE_INFO), 'encryption used:(.*?)(times|TRUE|FALSE)', 1, 1, 'i')
         when CONDITION = 'C003' then 'AUX_COUNT=' || AUX_COUNT
         else '' end as EXTRA_FEATURE_INFO
from (select m.PRODUCT, m.CONDITION, m.MVERSION, first_value (m.MVERSION) over (partition by f.CON_ID, f.NAME, f.VERSION order by m.MVERSION desc nulls last) as MMVERSION, f.*
  from MAP m
  join FUS f on m.FEATURE = f.NAME and m.MVERSION = substr(f.VERSION, 1, length(m.MVERSION))
  where nvl(f.TOTAL_SAMPLES, 0) > 0                      -- ignore features that have never been sampled
)
  where MVERSION = MMVERSION                             -- retain only the MAP entry that mathces the most to the DBA_FUS version = the "most matching version"
  and nvl(CONDITION, '-') != 'INVALID'                   -- ignore entries that are invalidated by bugs or known issues or correspond to features which became free of charge
  and not (CONDITION = 'C003' and CON_ID not in (0, 1))  -- multiple PDBs are visible only in CDB$ROOT
)
select '<tr><td>' 
  || CON_NAME ||'</td><td>' 
  || PRODUCT || '</td><td>' 
  || FEATURE_BEING_USED || '</td><td>' 
  || LAST_SAMPLE_DATE || '</td><td>' 
  || VERSION || '</td><td' 
  || DECODE(DETECTED_USAGES, 0, '>', ' class="critical">') 
  || DETECTED_USAGES || '</td><td' 
  || DECODE(CURRENTLY_USED, 'TRUE', ' class="critical">', '>') 
  || CURRENTLY_USED || '</td><td>' 
  || FIRST_USAGE_DATE || '</td><td>' 
  || LAST_USAGE_DATE || '</td><td>' 
  || EXTRA_FEATURE_INFO ||
  '</td></tr>'
from (select CON_ID            ,
    CON_NAME          ,
    PRODUCT           ,
    FEATURE_BEING_USED,
    decode(USAGE,
          '1.NO_PAST_USAGE'        , 'NO_PAST_USAGE'        ,
          '2.NO_CURRENT_USAGE'     , 'NO_CURRENT_USAGE'     ,
          '3.SUPPRESSED_DUE_TO_BUG', 'SUPPRESSED_DUE_TO_BUG',
          '4.PAST_USAGE'           , 'PAST_USAGE'           ,
          '5.PAST_OR_CURRENT_USAGE', 'PAST_OR_CURRENT_USAGE',
          '6.CURRENT_USAGE'        , 'CURRENT_USAGE'        ,
          'UNKNOWN') as USAGE,
    LAST_SAMPLE_DATE  ,
    DBID              ,
    VERSION           ,
    DETECTED_USAGES   ,
    TOTAL_SAMPLES     ,
    CURRENTLY_USED    ,
    FIRST_USAGE_DATE  ,
    LAST_USAGE_DATE   ,
    EXTRA_FEATURE_INFO
  from PFUS
  where USAGE in ('2.NO_CURRENT_USAGE', '3.SUPPRESSED_DUE_TO_BUG', '4.PAST_USAGE', '5.PAST_OR_CURRENT_USAGE', '6.CURRENT_USAGE')  -- ignore '1.NO_PAST_USAGE'
order by CON_ID, decode(substr(PRODUCT, 1, 1), '.', 2, 1), PRODUCT, FEATURE_BEING_USED, LAST_SAMPLE_DATE desc, PFUS.USAGE);
select '</table></div><br>' FROM dual;
set define off
---------------DB growth----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('DB growth');
select '<a name="DB growth"><h3>DB growth</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Month</th>
  <th>Growth MB</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || month || '</td><td class="number">' 
  || to_char(growth_mb,'999g999g999') 
  || '</td></tr>'
FROM (select trunc(creation_time, 'MM') month, round(SUM(bytes/1024/1024)) growth_mb
FROM v\$datafile
GROUP BY trunc(creation_time, 'MM')
ORDER BY trunc(creation_time, 'MM'));
select '</table></div><br>' FROM dual;
---------------Schema Sizes----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('schema_sizes');
select '<a name="schema_sizes"><h3>Schema Sizes / # segments</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>MB Tables</th>
  <th># Tables</th>
  <th>MB Index</th>
  <th># Index</th>
  <th>MB Lob</th>
  <th># Lob</th>
  <th>MB Other</th>
  <th># Other</th>
  <th>MB Total</th>
  <th># Total</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td class="number">' 
  || sum(decode(SEG_TYPE, 'TABLE', mbytes, 0)) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'TABLE', mbytes, 0)) || '</td><td class="number">'
  || sum(decode(SEG_TYPE, 'INDEX', mbytes, 0)) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'INDEX', mbytes, 0)) ||'</td><td class="number">'
  || sum(decode(SEG_TYPE, 'LOB', mbytes, 0)) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'LOB', mbytes, 0)) || '</td><td class="number">'
  || sum(decode(SEG_TYPE, 'OTHER', mbytes, 0)) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'OTHER', mbytes, 0)) || '</td><td class="number">'
  || sum(mbytes) || '</td><td class="number">'
  || count(mbytes) || '</td></tr>'
from (select owner, round(bytes/1024/1024,2) mbytes,
 (case
  when SEGMENT_TYPE like 'TABLE%' then 'TABLE'
  when SEGMENT_TYPE like 'INDEX%' then 'INDEX'
  when SEGMENT_TYPE like 'LOB%' then 'LOB'
  else 'OTHER'
 end) SEG_TYPE
from dba_segments)
group by owner
order by sum(mbytes) desc;
select '</table><br>' FROM dual;
---------------Size Summary----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('size_summary');
select '<a name="size_summary"><h3>Size Summary</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>MB Tables</th>
  <th># Tables</th>
  <th>MB Index</th>
  <th># Index</th>
  <th>MB Lob</th>
  <th># Lob</th>
  <th>MB Other</th>
  <th># Other</th>
  <th>MB Total</th>
  <th># Total</th>
  <th>MB Datafiles</th>
  </tr>'
FROM dual;
select '<tr><td class="number">'
  || round(sum(decode(SEG_TYPE, 'TABLE', mbytes, 0))) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'TABLE', mbytes, 0)) || '</td><td class="number">'
  || round(sum(decode(SEG_TYPE, 'INDEX', mbytes, 0))) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'INDEX', mbytes, 0)) || '</td><td class="number">'
  || round(sum(decode(SEG_TYPE, 'LOB', mbytes, 0))) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'LOB', mbytes, 0)) || '</td><td class="number">'
  || round(sum(decode(SEG_TYPE, 'OTHER', mbytes, 0))) || '</td><td class="number">'
  || count(decode(SEG_TYPE, 'OTHER', mbytes, 0)) || '</td><td class="number">'
  || round(sum(mbytes)) || '</td><td class="number">'
  || count(mbytes) || '</td><td class="number">'
  || avg((select round(sum(bytes)/1024/1024) from v\$datafile)) || '</td></tr>'
from (select owner, round(bytes/1024/1024,2) mbytes,
 (case
  when SEGMENT_TYPE like 'TABLE%' then 'TABLE'
  when SEGMENT_TYPE like 'INDEX%' then 'INDEX'
  when SEGMENT_TYPE like 'LOB%' then 'LOB'
  else 'OTHER'
 end) SEG_TYPE
from dba_segments)
order by sum(mbytes) desc;
select '</table><br>' FROM dual;
---------------All Files----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char( (sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('all_files');
prompt <hr /><a name="all_files"><h3>All Files</h3></a><a id="b_all_files" href="javascript:switchdiv('d_all_files')">(+)</a><div id="d_all_files" style="display:none;">
select '<table class="sortable">
  <tr>
  <th>Type</th>
  <th>Tablespace</th>
  <th>Filename</th>
  <th>Group</th>
  <th>Thread</th>
  <th>Size (MB)</th>
  <th>Max Size (MB)</th>
  <th>Autoextensible</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || FILETYPE || '</td><td>'
  || TABLESPACE || '</td><td>'
  || Filename || '</td><td>'
  || group# || '</td><td>'
  || thread# || '</td><td>'
  || to_char(round(Filesize),'999g999g999g999') || '</td><td>'
  || to_char(round(MaxFileSize),'999g999g999g999') || '</td><td>'
  || AUTOEXTENSIBLE || '</td></tr>'
from (select 'DATAFILE' FILETYPE
        , TABLESPACE_NAME as TABLESPACE
		, FILE_NAME as Filename
		, null as group#
		, null as thread#
		, bytes/1024/1024 Filesize
		, decode(AUTOEXTENSIBLE, 'YES', maxbytes/1024/1024, bytes/1024/1024) MaxFileSize
		, AUTOEXTENSIBLE
	from dba_data_files
	union all
	select 'TEMPFILE' FILETYPE
	  , TABLESPACE_NAME 
	  , FILE_NAME 
	  , null as group#
	  , null as thread#
	  , bytes/1024/1024
	  , decode(AUTOEXTENSIBLE, 'YES', maxbytes/1024/1024, bytes/1024/1024) 
	  , AUTOEXTENSIBLE
	from dba_temp_files
	union all
	select 'CONTROLFILE' FILETYPE
	  , '' TABLESPACE
	  , NAME
	  , null as group#
	  , null as thread#
	  , 0 
	  , 0 
	  , '' AUTOEXTENSIBLE
	from v\$controlfile
	union all
	select 'REDO' FILETYPE
	  , '' TABLESPACE
	  , MEMBER
	  , l.group#
	  , l.thread#
	  , bytes/1024/1024
	  , bytes/1024/1024
	  , '' AUTOEXTENSIBLE
	from gv\$log l, gv\$logfile lf
	where lf.group# = l.group#
	and lf.inst_id = l.inst_id
	union all
	select 'STANDBY REDO' FILETYPE
	  , '' TABLESPACE
	  , MEMBER
	  , l.group#
	  , l.thread#
	  , bytes/1024/1024
	  , bytes/1024/1024
	  , '' AUTOEXTENSIBLE
	from gv\$standby_log l, gv\$logfile lf
	where lf.group# = l.group#
	and lf.inst_id = l.inst_id)
order by FILETYPE, TABLESPACE, FILENAME;
select '</table></div><br>' FROM dual;
---------------DB Links----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('db_links');
select '<a name="db_links"><h3>Database Links</h3></a>' FROM dual;
select '<table class="sortable">
  <tr>
  <th>Owner</th>
  <th>DB Link</th>
  <th>Host</th>
  <th>Username</th>
  <th>Created</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td>'
  || db_link || '</td><td>'
  || host || '</td><td>'
  || username || '</td><td>'
  || created || '</td></tr>'
from dba_db_links
order by owner, db_link;
select '</table><br>' FROM dual;
---------------Directories----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('directories');
select '<a name="directories"><h3>Directories</h3></a>' FROM dual;
select '<table class="sortable">
 <tr>
  <th>Owner</th>
  <th>Directory</th>
  <th>Path</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || owner || '</td><td>'
  || directory_name || '</td><td>'
  || directory_path || '</td></tr>'
from dba_directories
order by owner, directory_name;
select '</table><br>' FROM dual;
---------------Roles----------------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('roles');
prompt <hr /><a name="roles"><h3>Roles</h3></a><a id="b_roles" href="javascript:switchdiv('d_roles')">(+)</a><div id="d_roles" style="display:none;">
select '<table class="sortable">
  <tr>
  <th>Role</th>
  <th>Pwd equired</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || role || '</td><td>'
  || PASSWORD_REQUIRED || '</td></tr>'
from dba_roles
order by role;
select '</table></div><br>' FROM dual;
---------------Network ACLs---------------------------------------------------------------------------
select '<!-- Time: ' || to_char(sysdate,'hh24:mi:ss') || ' - since start: ' || to_char((sysdate - to_date(:starttime, 'dd/mm/yyyy hh24:mi:ss'))*86400, '999g999d0') || 's -->' from dual;
exec dbms_application_info.set_action('net-acls');
prompt <hr /><a name="net-acls"><h3>Network ACLs</h3></a>
select '<table class="sortable">
  <tr>
  <th>ACL</th>
  <th>Hostname</th>
  <th>lower port</th>
  <th>upper port</th>
  <th>Grantee</th>
  <th>Privilege</th>
  <th>is grant</th>
  </tr>'
FROM dual;
select '<tr><td>'
  || a.acl || '</td><td>'
  || a.host || '</td><td>'
  || a.lower_port || '</td><td>'
  || a.upper_port || '</td><td>'
  || p.principal || '</td><td>'
  || p.privilege || '</td><td>'
  || p.is_grant || '</td></tr>'
from dba_network_acls a, dba_network_acl_privileges p
where a.aclid = p.aclid
order by a.acl, p.principal;
select '</table><br>' FROM dual;
exec dbms_application_info.set_action('End');
---------------done------------------------------------------------------------------------------------------
prompt </BODY>
prompt </HTML>
spool off
EOF
#
# ---------------Exec Script-----------------------------------------------------------------------------------
# Execute the Script
# ---------------Exec Script-----------------------------------------------------------------------------------
#
sqlplus -S /nolog <<EOF
conn / as sysdba
set colsep ''
@/tmp/ribas_report.sql
quit;
EOF
rm /tmp/ribas_report.sql
}
#
#########################################################################################################
# DATABASE Variables
#########################################################################################################
#
DBMODE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBMODE varchar2(100);
begin
select status into :DBMODE from v\\$instance;
end;
/
print DBMODE
exit
EOF`
DDBMODE=`echo ${DBMODE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBMODE} ${BLACK}"
# "-----------------------------------------------------------------------------------------------------"
if [ ${DDBMODE} = "OPEN" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} " -- THE INSTANCE: ${RED} ${ORACLE_SID} ${BLACK} IS AVAILABLE IN STATUS: ${RED} ${DDBMODE} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
sleep 2
elif [ ${DDBMODE} = "OPEN READ ONLY" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} " -- THE INSTANCE: ${RED} ${ORACLE_SID} ${BLACK} IS AVAILABLE IN STATUS: ${RED} ${DDBMODE} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
sleep 2
elif [ ${DDBMODE} = "MOUNTED" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} " -- THE INSTANCE: ${RED} ${ORACLE_SID} ${BLACK} IS AVAILABLE IN STATUS: ${RED} ${DDBMODE} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
sleep 2
else
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} " -- THE INSTANCE: ${RED} ${ORACLE_SID} ${BLACK} IS ${RED} NOT ${BLACK} AVAILABLE AT THIS MOMENT OR IS ON THIS MODE: ${DDBMODE} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
exit 1
fi
#########################################################################################################
ISASM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var asm varchar2(100);
begin
select case when count(instance_name) > 0 then 'TRUE' else 'FALSE' END "Is ASM" into :asm from gv\\$ASM_CLIENT; 
end;
/
print asm
exit
EOF`
ISASMOK=`echo ${ISASM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ISASM} ${BLACK}"
#########################################################################################################
ISEXADATA=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var exadata varchar2(100);
begin
select case when count(cell_name) > 0 then 'TRUE' else 'FALSE' END "Is Exadata" into :exadata from gv\\$cell_state; 
end;
/
print exadata
exit
EOF`
ISEXADATAOK=`echo ${ISEXADATA}`
#
# alter system set "_exadata_feature_on" = true scope=spfile;
#
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ISEXADATAOK} ${BLACK}"
# select distinct case when cell_name = 0 then 'FALSE' when cell_name <> 0 then 'TRUE' else 'TRUE' end as "VALUE" into :exadata from gv\\$cell_state
# select distinct case when DETECTED_USAGES = 0 then 'FALSE' when DETECTED_USAGES <> 0 then 'TRUE' else 'TRUE' end as "VALUE" into :exadata from dba_feature_usage_statistics a, v\\$instance b where name  = 'Exadata' and a.version = b.version;
#########################################################################################################
ORAMULTIMEDIA=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var multimedia varchar2(100);
begin
select distinct case when DETECTED_USAGES = 0 then 'FALSE' when DETECTED_USAGES <> 0 then 'TRUE' else 'TRUE' end as "VALUE" into :multimedia from dba_feature_usage_statistics a, v\\$instance b where name  = 'Oracle Multimedia' and a.version = b.version;
end;
/
print multimedia
exit
EOF`
OORAMULTIMEDIA=`echo ${ORAMULTIMEDIA}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OORAMULTIMEDIA} ${BLACK}"
#########################################################################################################
ORATEXT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var oratext varchar2(100);
begin
select distinct case when DETECTED_USAGES = 0 then 'FALSE' when DETECTED_USAGES <> 0 then 'TRUE' else 'TRUE' end as "VALUE" into :oratext from dba_feature_usage_statistics a, v\\$instance b where name  = 'Oracle Text' and a.version = b.version;
end;
/
print oratext
exit
EOF`
OORATEXT=`echo ${ORATEXT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OORATEXT} ${BLACK}"
#########################################################################################################
VER_OGG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var OGG varchar2(100);
begin
select distinct value into :OGG from v\\$parameter where name = 'enable_goldengate_replication';
end;
/
print OGG
exit
EOF`
OOGG=`echo ${VER_OGG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OOGG} ${BLACK}"
#########################################################################################################
DBSIZEK=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBSIZEK varchar2(100);
begin
select distinct value into :DBSIZEK from v\\$parameter where name = 'db_block_size';
end;
/
print DBSIZEK
exit
EOF`
DDBSIZEK=`echo ${DBSIZEK}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBSIZEK} ${BLACK}"
#########################################################################################################
DBSIZEM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBSIZEM varchar2(100);
begin
select value/1024 into :DBSIZEM from v\\$parameter where name = 'db_block_size';
end;
/
print DBSIZEM
exit
EOF`
DDBSIZEM=`echo ${DBSIZEM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBSIZEM} ${BLACK}"
#########################################################################################################
DBBUFFERK=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBBUFFERK varchar2(100);
begin
select value/1024 into :DBBUFFERK from GV_\\$SGA where name = 'Database Buffers';
end;
/
print DBBUFFERK
exit
EOF`
DDBBUFFERK=`echo ${DBBUFFERK}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBBUFFERK} ${BLACK}"
#########################################################################################################
DBVER=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBVER varchar2(100);
begin
select substr(value, 1,2) as value into :DBVER from v\\$parameter where name = 'optimizer_features_enable';
end;
/
print DBVER
exit
EOF`
DBVERSION=`echo ${DBVER}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DBVERSION} ${BLACK}"
#########################################################################################################
DBRELEASE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBRELEASE varchar2(100);
begin
select value into :DBRELEASE from v\\$parameter where name = 'optimizer_features_enable';
end;
/
print DBRELEASE
exit
EOF`
ODBRELEASE=`echo ${DBRELEASE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ODBRELEASE} ${BLACK}"
#########################################################################################################
ISCDB=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var iscdb varchar2(100);
begin
select case when cdb = 'YES' then 'TRUE' else 'FALSE' end as "VALUE" into :iscdb from v\\$DATABASE;
end;
/
print iscdb
exit
EOF`
ISCONTAINERDB=`echo ${ISCDB}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ISCONTAINERDB} ${BLACK}"
#########################################################################################################
ARCHLAG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ARCHLAG varchar2(100);
begin
select distinct value into :ARCHLAG from v\\$parameter where name = 'archive_lag_target';
end;
/
print ARCHLAG
exit
EOF`
AARCHLAG=`echo ${ARCHLAG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${AARCHLAG} ${BLACK}"
#########################################################################################################
ARCHLAGTIMEM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ARCHLAGTIMEM varchar2(100);
begin
select to_char(value/60) into :ARCHLAGTIMEM from v\\$parameter where name = 'archive_lag_target';
end;
/
print ARCHLAGTIMEM
exit
EOF`
AARCHLAGTIMEM=`echo ${ARCHLAGTIMEM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${AARCHLAGTIMEM} ${BLACK}"
#########################################################################################################
ARCHLAGTIMEH=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ARCHLAGTIMEH varchar2(100);
begin
select to_char(round(value/60/60, 2)) into :ARCHLAGTIMEH from v\\$parameter where name = 'archive_lag_target';
end;
/
print ARCHLAGTIMEH
exit
EOF`
AARCHLAGTIMEH=`echo ${ARCHLAGTIMEH}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${AARCHLAGTIMEH} ${BLACK}"
#########################################################################################################
ARCHLAGTIMED=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ARCHLAGTIMED varchar2(100);
begin
select to_char(round(value/60/60/24, 2)) into :ARCHLAGTIMED from v\\$parameter where name = 'archive_lag_target';
end;
/
print ARCHLAGTIMED
exit
EOF`
AARCHLAGTIMED=`echo ${ARCHLAGTIMED}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${AARCHLAGTIMED} ${BLACK}"
#########################################################################################################
OPENCUR=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var OPENCUR varchar2(100);
begin
select distinct value into :OPENCUR from v\\$parameter where name = 'open_cursors';
end;
/
print OPENCUR
exit
EOF`
OOPENCUR=`echo ${OPENCUR}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OOPENCUR} ${BLACK}"
#########################################################################################################
PROCESS=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PROCESS varchar2(100);
begin
select distinct value into :PROCESS from v\\$parameter where name = 'processes';
end;
/
print PROCESS
exit
EOF`
PPROCESS=`echo ${PROCESS}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPROCESS} ${BLACK}"
#########################################################################################################
LOGARCHDEST1=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var LOGARCHDEST1 varchar2(100);
begin
select distinct value into :LOGARCHDEST1 from v\\$parameter where name = 'log_archive_dest_1';
end;
/
print LOGARCHDEST1
exit
EOF`
LLOGARCHDEST1=`echo ${LOGARCHDEST1}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${LLOGARCHDEST1} ${BLACK}"
#########################################################################################################
LOGARCHFOR=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var LOGARCHFOR varchar2(100);
begin
select distinct value into :LOGARCHFOR from v\\$parameter where name = 'log_archive_format';
end;
/
print LOGARCHFOR
exit
EOF`
LLOGARCHFOR=`echo ${LOGARCHFOR}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${LLOGARCHFOR} ${BLACK}"
#########################################################################################################
RECYCLEBIN=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var RECYCLEBIN varchar2(100);
begin
select distinct upper(value) as value into :RECYCLEBIN from v\\$parameter where name = 'recyclebin';
end;
/
print RECYCLEBIN
exit
EOF`
RRECYCLEBIN=`echo ${RECYCLEBIN}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${RRECYCLEBIN} ${BLACK}"
#########################################################################################################
MEMMAXM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var MEMMAXM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :MEMMAXM from v\\$parameter where name = 'memory_max_target';
end;
/
print MEMMAXM
exit
EOF`
MMEMMAXM=`echo ${MEMMAXM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMEMMAXM} ${BLACK}"
#########################################################################################################
MEMMAXG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var MEMMAXG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999')  into :MEMMAXG from v\\$parameter where name = 'memory_max_target';
end;
/
print MEMMAXG
exit
EOF`
MMEMMAXG=`echo ${MEMMAXG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMEMMAXG} ${BLACK}"
#########################################################################################################
MEMMAXT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var MEMMAXT varchar2(100);
begin
select to_char(value/1024/1024/1024/1024, '9G999G999D999') into :MEMMAXT from v\\$parameter where name = 'memory_max_target';
end;
/
print MEMMAXT
exit
EOF`
MMEMMAXT=`echo ${MEMMAXT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMEMMAXT} ${BLACK}"
#########################################################################################################
MENTARGETM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var MENTARGETM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :MENTARGETM from v\\$parameter where name = 'memory_target';
end;
/
print MENTARGETM
exit
EOF`
MMENTARGETM=`echo ${MENTARGETM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMENTARGETM} ${BLACK}"
#########################################################################################################
MENTARGETG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var MENTARGETG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :MENTARGETG from v\\$parameter where name = 'memory_target';
end;
/
print MENTARGETG
exit
EOF`
MMENTARGETG=`echo ${MENTARGETG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMENTARGETG} ${BLACK}"
#########################################################################################################
MENTARGETT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var MENTARGETT varchar2(100);
begin
select to_char(value/1024/1024/1024/1024, '9G999G999D999') into :MENTARGETT from v\\$parameter where name = 'memory_target';
end;
/
print MENTARGETT
exit
EOF`
MMENTARGETT=`echo ${MENTARGETT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMENTARGETT} ${BLACK}"
#########################################################################################################
SGAMAXM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SGAMAXM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :SGAMAXM from v\\$parameter where name = 'sga_max_size';
end;
/
print SGAMAXM
exit
EOF`
SSGAMAXM=`echo ${SGAMAXM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSGAMAXM} ${BLACK}"
#########################################################################################################
SGAMAXG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SGAMAXG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :SGAMAXG from v\\$parameter where name = 'sga_max_size';
end;
/
print SGAMAXG
exit
EOF`
SSGAMAXG=`echo ${SGAMAXG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSGAMAXG} ${BLACK}"
#########################################################################################################
SGAMAXT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SGAMAXT varchar2(100);
begin
select to_char(value/1024/1024/1024/1024, '9G999G999D999') into :SGAMAXT from v\\$parameter where name = 'sga_max_size';
end;
/
print SGAMAXT
exit
EOF`
SSGAMAXT=`echo ${SGAMAXT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSGAMAXT} ${BLACK}"
#########################################################################################################
STBYFILEMAN=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var STBYFILEMAN varchar2(100);
begin
select distinct value into :STBYFILEMAN from v\\$parameter where name = 'standby_file_management';
end;
/
print STBYFILEMAN
exit
EOF`
SSTBYFILEMAN=`echo ${STBYFILEMAN}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSTBYFILEMAN} ${BLACK}"
#########################################################################################################
SGATARGETM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SGATARGETM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :SGATARGETM from v\\$parameter where name = 'sga_target';
end;
/
print SGATARGETM
exit
EOF`
SSGATARGETM=`echo ${SGATARGETM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSGATARGETM} ${BLACK}"
#########################################################################################################
SGATARGETG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SGATARGETG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :SGATARGETG from v\\$parameter where name = 'sga_target';
end;
/
print SGATARGETG
exit
EOF`
SSGATARGETG=`echo ${SGATARGETG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSGATARGETG} ${BLACK}"
#########################################################################################################
SGATARGETT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SGATARGETT varchar2(100);
begin
select to_char(value/1024/1024/1024/1024, '9G999G999D999') into :SGATARGETT from v\\$parameter where name = 'sga_target';
end;
/
print SGATARGETT
exit
EOF`
SSGATARGETT=`echo ${SGATARGETT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSGATARGETT} ${BLACK}"
#########################################################################################################
DBCACHESIZEK=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBCACHESIZEK varchar2(100);
begin
select to_char(value/1024, '999G999G999G999D999') into :DBCACHESIZEK from v\\$parameter where name = 'db_cache_size';
end;
/
print DBCACHESIZEK
exit
EOF`
DDBCACHESIZEK=`echo ${DBCACHESIZEK}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBCACHESIZEK} ${BLACK}"
#########################################################################################################
DBCACHESIZEM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBCACHESIZEM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :DBCACHESIZEM from v\\$parameter where name = 'db_cache_size';
end;
/
print DBCACHESIZEM
exit
EOF`
DDBCACHESIZEM=`echo ${DBCACHESIZEM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBCACHESIZEM} ${BLACK}"
#########################################################################################################
DBCACHESIZEG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBCACHESIZEG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :DBCACHESIZEG from v\\$parameter where name = 'db_cache_size';
end;
/
print DBCACHESIZEG
exit
EOF`
DDBCACHESIZEG=`echo ${DBCACHESIZEG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBCACHESIZEG} ${BLACK}"
#########################################################################################################
SHAREDPOOLK=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SHAREDPOOLK varchar2(100);
begin
select to_char(value/1024, '999G999G999D999') into :SHAREDPOOLK from v\\$parameter where name = 'shared_pool_size';
end;
/
print SHAREDPOOLK
exit
EOF`
SSHAREDPOOLK=`echo ${SHAREDPOOLK}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSHAREDPOOLK} ${BLACK}"
#########################################################################################################
SHAREDPOOLM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SHAREDPOOLM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :SHAREDPOOLM from v\\$parameter where name = 'shared_pool_size';
end;
/
print SHAREDPOOLM
exit
EOF`
SSHAREDPOOLM=`echo ${SHAREDPOOLM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSHAREDPOOLM} ${BLACK}"
#########################################################################################################
SHAREDPOOLG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SHAREDPOOLG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :SHAREDPOOLG from v\\$parameter where name = 'shared_pool_size';
end;
/
print SHAREDPOOLG
exit
EOF`
SSHAREDPOOLG=`echo ${SHAREDPOOLG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSHAREDPOOLG} ${BLACK}"
#########################################################################################################
PGATARGETK=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PGATARGETK varchar2(100);
begin
select to_char(value/1024, '999G999G999D999') into :PGATARGETK from v\\$parameter where name = 'pga_aggregate_target';
end;
/
print PGATARGETK
exit
EOF`
PPGATARGETK=`echo ${PGATARGETK}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPGATARGETK} ${BLACK}"
#########################################################################################################
PGATARGETM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PGATARGETM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :PGATARGETM from v\\$parameter where name = 'pga_aggregate_target';
end;
/
print PGATARGETM
exit
EOF`
PPGATARGETM=`echo ${PGATARGETM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPGATARGETM} ${BLACK}"
#########################################################################################################
PGATARGETG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PGATARGETG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :PGATARGETG from v\\$parameter where name = 'pga_aggregate_target';
end;
/
print PGATARGETG
exit
EOF`
PPGATARGETG=`echo ${PGATARGETG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPGATARGETG} ${BLACK}"
#########################################################################################################
PGALIMITK=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PGALIMITK varchar2(100);
begin
select to_char(value/1024, '999G999G999D999') into :PGALIMITK from v\\$parameter where name = 'pga_aggregate_limit';
end;
/
print PGALIMITK
exit
EOF`
PPGALIMITK=`echo ${PGALIMITK}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPGALIMITK} ${BLACK}"
#########################################################################################################
PGALIMITM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PGALIMITM varchar2(100);
begin
select to_char(value/1024/1024, '9G999G999D999') into :PGALIMITM from v\\$parameter where name = 'pga_aggregate_limit';
end;
/
print PGALIMITM
exit
EOF`
PPGALIMITM=`echo ${PGALIMITM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPGALIMITM} ${BLACK}"
#########################################################################################################
PGALIMITG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PGALIMITG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :PGALIMITG from v\\$parameter where name = 'pga_aggregate_limit';
end;
/
print PGALIMITG
exit
EOF`
PPGALIMITG=`echo ${PGALIMITG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPGALIMITG} ${BLACK}"
#########################################################################################################
ARCHMODE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ARCHMODE varchar2(100);
begin
select case when log_mode = 'ARCHIVELOG' then 'TRUE' else 'FALSE' end as "VALUE" into :ARCHMODE from v\\$DATABASE;
end;
/
print ARCHMODE
exit
EOF`
ARCH=`echo ${ARCHMODE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ARCH} ${BLACK}"
#########################################################################################################
### select product from product_component_version where product like 'Oracle Database %';
### select substr(banner,21,19) as banner from v$version where banner like 'Oracle Database %';
### Oracle Database 11g
### Enterprise Edition
### Standard Edition
if [ ${DBVERSION} -ge "12" ]
then
EDITION=""
EDITION=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var EDITION varchar2(100);
begin
select EDITION into :EDITION from v\\$instance;
end;
/
print EDITION
exit
EOF`
EEDITION=`echo ${EDITION}`
elif [ ${DBVERSION} -le "11" ]
then
EDITION=""
EDITION=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var BANNER varchar2(100);
begin
select substr(BANNER,21,19) as BANNER into :BANNER from v\\$version where BANNER like 'Oracle Database %';
end;
/
print BANNER
exit
EOF`
EEDITION=`echo ${EDITION}`
else
EEDITION="EDITION NOT DIFINED"
fi
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${EEDITION} ${BLACK}"
#########################################################################################################
ACTSTATE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ACTSTATE varchar2(100);
begin
select ACTIVE_STATE into :ACTSTATE from v\\$instance;
end;
/
print ACTSTATE
exit
EOF`
AACTSTATE=`echo ${ACTSTATE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${AACTSTATE} ${BLACK}"
#########################################################################################################
if [ ${DBVERSION} = "12" ]
then
VERSIONTIME=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var VERSIONTIME varchar2(100);
alter session set nls_date_format='dd/mm/yyyy';
begin
select to_char(max(action_time), 'dd/mm/yyyy') into :VERSIONTIME from DBA_REGISTRY_SQLPATCH where action in ('APPLY','UPGRADE','RU_APPLY');
end;
/
print VERSIONTIME
exit
EOF`
VVERSIONTIME=`echo ${VERSIONTIME}`
else
VERSIONTIME=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var VERSIONTIME varchar2(100);
alter session set nls_date_format='dd/mm/yyyy';
begin
select to_char(max(action_time), 'dd/mm/yyyy') into :VERSIONTIME from registry\\$history where action in ('APPLY','UPGRADE','RU_APPLY');
end;
/
print VERSIONTIME
exit
EOF`
VVERSIONTIME=`echo ${VERSIONTIME}`
fi
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${VVERSIONTIME} ${BLACK}"
#########################################################################################################
if [ ${DBVERSION} = "12" ]
then
VERSIONTIMED=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var VERSIONTIMED varchar2(100);
alter session set nls_date_format='dd/mm/yyyy';
begin
select ltrim(lpad(substr(substr(to_char((select sysdate from dual) - (select max(action_time) from DBA_REGISTRY_SQLPATCH where action in ('APPLY','UPGRADE','RU_APPLY'))),3),2), 16, '0'), '0') as value into :VERSIONTIMED from dual;
end;
/
print VERSIONTIMED
exit
EOF`
VVERSIONTIMED=`echo ${VERSIONTIMED}`
else
VERSIONTIMED=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var VERSIONTIMED varchar2(100);
alter session set nls_date_format='dd/mm/yyyy';
begin
select ltrim(lpad(substr(substr(to_char((select sysdate from dual) - (select max(action_time) from registry\\$history where action in ('APPLY','UPGRADE','RU_APPLY'))),3),2), 16, '0'), '0') as value into :VERSIONTIMED from dual;
end;
/
print VERSIONTIMED
exit
EOF`
VVERSIONTIMED=`echo ${VERSIONTIMED}`
fi
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${VVERSIONTIMED} ${BLACK}"
#########################################################################################################
ISRAC=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var israc varchar2(100);
begin
select distinct value into :israc from v\\$parameter where name = 'cluster_database';
end;
/
print israc
exit
EOF`
ISRACDB=`echo ${ISRAC}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ISRACDB} ${BLACK}"
#########################################################################################################
ISDG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ISDG varchar2(100);
begin
select distinct value into :ISDG from v\\$parameter where name = 'dg_broker_start';
end;
/
print ISDG
exit
EOF`
ISDGDB=`echo ${ISDG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ISDGDB} ${BLACK}"
#########################################################################################################
DG_ACT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DG_ACT varchar2(100);
begin
select case when open_mode = 'READ ONLY WITH APPLY' then 'TRUE' else 'FALSE' end as value into :DG_ACT from v\\$database;
end;
/
print DG_ACT
exit
EOF`
ISDG_ACT=`echo ${DG_ACT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ISDG_ACT} ${BLACK}"
#########################################################################################################
DBUNAME=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var dbuname varchar2(100);
begin
select distinct value into :dbuname from v\\$parameter where name = 'db_unique_name';
end;
/
print dbuname
exit
EOF`
DBUNNAME=`echo ${DBUNAME}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DBUNNAME} ${BLACK}"
#########################################################################################################
DBSRVAME=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBSRVAME varchar2(100);
begin
select distinct value into :DBSRVAME from v\\$parameter where name = 'service_names';
end;
/
print DBSRVAME
exit
EOF`
DBSERVNAME=`echo ${DBSRVAME}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DBSERVNAME} ${BLACK}"
#########################################################################################################
DBROLE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBROLE varchar2(100);
begin
select DATABASE_ROLE into :DBROLE from v\\$DATABASE;
end;
/
print DBROLE
exit
EOF`
DDBROLE=`echo ${DBROLE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBROLE} ${BLACK}"
#########################################################################################################
NLS_LANG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_LANG varchar2(100);
begin
select distinct value into :NLS_LANG from nls_database_parameters where parameter = 'NLS_LANGUAGE';
end;
/
print NLS_LANG
exit
EOF`
NLS_LANGUAGE=`echo ${NLS_LANG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NLS_LANGUAGE} ${BLACK}"
#########################################################################################################
NLS_CHARACTE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_CHARACTE varchar2(100);
begin
select distinct value into :NLS_CHARACTE from nls_database_parameters where parameter = 'NLS_CHARACTERSET';
end;
/
print NLS_CHARACTE
exit
EOF`
NLS_CHARACTERSET=`echo ${NLS_CHARACTE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NLS_CHARACTERSET} ${BLACK}"
#########################################################################################################
NLS_DATEL=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_DATEL varchar2(100);
begin
select distinct value into :NLS_DATEL from nls_database_parameters where parameter = 'NLS_DATE_LANGUAGE';
end;
/
print NLS_DATEL
exit
EOF`
NLS_DATE_LANGUAGE=`echo ${NLS_DATEL}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NLS_DATE_LANGUAGE} ${BLACK}"
#########################################################################################################
NLS_DATEF=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_DATEF varchar2(100);
begin
select distinct value into :NLS_DATEF from nls_database_parameters where parameter = 'NLS_DATE_FORMAT';
end;
/
print NLS_DATEF
exit
EOF`
NLS_DATE_FORMAT=`echo ${NLS_DATEF}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NLS_DATE_FORMAT} ${BLACK}"
#########################################################################################################
DBPART=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBPART varchar2(100);
begin
select decode(count(*), 0, 'FALSE', 'TRUE') Partitioning into :DBPART from dba_part_tables where owner not in ('SYSMAN', 'SH', 'SYS', 'SYSTEM') and rownum = 1;
end;
/
print DBPART
exit
EOF`
DDBPART=`echo ${DBPART}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBPART} ${BLACK}"
#########################################################################################################
DBSPAT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBSPAT varchar2(100);
begin
select value into :DBSPAT FROM v\\$option where parameter like ('Spatial');
end;
/
print DBSPAT
exit
EOF`
DDBSPAT=`echo ${DBSPAT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBSPAT} ${BLACK}"
#########################################################################################################
REDO=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var REDO varchar2(100);
begin
select count(*) into :REDO from v\\$logfile where TYPE  = 'ONLINE';
end;
/
print REDO
exit
EOF`
RREDO=`echo ${REDO}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${RREDO} ${BLACK}"
#########################################################################################################
SREDO=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SREDO varchar2(100);
begin
select count(*) into :SREDO from v\\$logfile where TYPE  = 'STANDBY';
end;
/
print SREDO
exit
EOF`
SSREDO=`echo ${SREDO}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSREDO} ${BLACK}"
#########################################################################################################
VAULT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var VAULT varchar2(100);
begin
select distinct value into :VAULT FROM v\\$option where PARAMETER = 'Oracle Database Vault';
end;
/
print VAULT
exit
EOF`
OVAULT=`echo ${VAULT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OVAULT} ${BLACK}"
#########################################################################################################
ASM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ASM varchar2(100);
begin
select distinct value into :ASM FROM v\\$option where PARAMETER = 'Automatic Storage Management';
end;
/
print ASM
exit
EOF`
ISASM=`echo ${ASM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${ISASM} ${BLACK}"
#########################################################################################################
CTRL=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var CTRL varchar2(2000);
begin
select distinct value into :CTRL from v\\$parameter where name = 'control_files';
end;
/
print CTRL
exit
EOF`
CCTRL=`echo ${CTRL}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${CCTRL} ${BLACK}"
#########################################################################################################
CPU_COUNT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var CPU_COUNT varchar2(100);
begin
select distinct value into :CPU_COUNT from gv\\$parameter where name = 'cpu_count';
end;
/
print CPU_COUNT
exit
EOF`
CCPU_COUNT=`echo ${CPU_COUNT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${CCPU_COUNT} ${BLACK}"
#########################################################################################################
SPFILE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SPFILE varchar2(100);
begin
select distinct value into :SPFILE from gv\\$parameter where name = 'spfile';
end;
/
print SPFILE
exit
EOF`
SSPFILE=`echo ${SPFILE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSPFILE} ${BLACK}"
#########################################################################################################
COMPATIBLE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var COMPATIBLE varchar2(100);
begin
select distinct value into :COMPATIBLE from gv\\$parameter where name = 'compatible';
end;
/
print COMPATIBLE
exit
EOF`
CCOMPATIBLE=`echo ${COMPATIBLE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${CCOMPATIBLE} ${BLACK}"
#########################################################################################################
STBY_ARCH_DEST=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var STBY_ARCH_DEST varchar2(100);
begin
select distinct value into :STBY_ARCH_DEST from gv\\$parameter where name = 'standby_archive_dest';
end;
/
print STBY_ARCH_DEST
exit
EOF`
SSTBY_ARCH_DEST=`echo ${STBY_ARCH_DEST}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSTBY_ARCH_DEST} ${BLACK}"
#########################################################################################################
FAL_CLIENT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var FAL_CLIENT varchar2(100);
begin
select distinct value into :FAL_CLIENT from gv\\$parameter where name = 'fal_client';
end;
/
print FAL_CLIENT
exit
EOF`
FFAL_CLIENT=`echo ${FAL_CLIENT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFAL_CLIENT} ${BLACK}"
#########################################################################################################
FAL_SERVER=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var FAL_SERVER varchar2(100);
begin
select distinct value into :FAL_SERVER from gv\\$parameter where name = 'fal_server';
end;
/
print FAL_SERVER
exit
EOF`
FFAL_SERVER=`echo ${FAL_SERVER}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFAL_SERVER} ${BLACK}"
#########################################################################################################
DB_FILES=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_FILES varchar2(100);
begin
select distinct value into :DB_FILES from gv\\$parameter where name = 'db_files';
end;
/
print DB_FILES
exit
EOF`
DDB_FILES=`echo ${DB_FILES}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_FILES} ${BLACK}"
#########################################################################################################
DB_FILES_NOW=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_FILES_NOW varchar2(100);
begin
select count(*) into :DB_FILES_NOW from dba_data_files;
end;
/
print DB_FILES_NOW
exit
EOF`
DDB_FILES_NOW=`echo ${DB_FILES_NOW}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_FILES_NOW} ${BLACK}"
#########################################################################################################
PARALLEL_SERV=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_SERV varchar2(100);
begin
select distinct value into :PARALLEL_SERV from gv\\$parameter where name = 'parallel_server';
-- select distinct value into :PARALLEL_SERV from gv\\$parameter where name = 'parallel_servers_target';
end;
/
print PARALLEL_SERV
exit
EOF`
PPARALLEL_SERV=`echo ${PARALLEL_SERV}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_SERV} ${BLACK}"
#########################################################################################################
DB_REC_FILE_DEST=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_REC_FILE_DEST varchar2(100);
begin
select distinct value into :DB_REC_FILE_DEST from gv\\$parameter where name = 'db_recovery_file_dest';
end;
/
print DB_REC_FILE_DEST
exit
EOF`
DDB_REC_FILE_DEST=`echo ${DB_REC_FILE_DEST}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_REC_FILE_DEST} ${BLACK}"
#########################################################################################################
DB_REC_FILE_SIZEG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_REC_FILE_SIZEG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :DB_REC_FILE_SIZEG from gv\\$parameter where name = 'db_recovery_file_dest_size';
end;
/
print DB_REC_FILE_SIZEG
exit
EOF`
DDB_REC_FILE_SIZEG=`echo ${DB_REC_FILE_SIZEG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_REC_FILE_SIZEG} ${BLACK}"
#########################################################################################################
DB_REC_FILE_SIZET=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_REC_FILE_SIZET varchar2(100);
begin
select to_char(value/1024/1024/1024/1024, '9G999G999D999') into :DB_REC_FILE_SIZET from gv\\$parameter where name = 'db_recovery_file_dest_size';
end;
/
print DB_REC_FILE_SIZET
exit
EOF`
DDB_REC_FILE_SIZET=`echo ${DB_REC_FILE_SIZET}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_REC_FILE_SIZET} ${BLACK}"
#########################################################################################################
FAST_START_MTTR=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var FAST_START_MTTR varchar2(100);
begin
select distinct value into :FAST_START_MTTR from gv\\$parameter where name = 'fast_start_mttr_target';
end;
/
print FAST_START_MTTR
exit
EOF`
FFAST_START_MTTR=`echo ${FAST_START_MTTR}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFAST_START_MTTR} ${BLACK}"
#########################################################################################################
UNDO_MANAG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var UNDO_MANAG varchar2(100);
begin
select distinct value into :UNDO_MANAG from gv\\$parameter where name = 'undo_management';
end;
/
print UNDO_MANAG
exit
EOF`
UUNDO_MANAG=`echo ${UNDO_MANAG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${UUNDO_MANAG} ${BLACK}"
#########################################################################################################
PARALLEL_MIN_SERV=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_MIN_SERV varchar2(100);
begin
select distinct value into :PARALLEL_MIN_SERV from gv\\$parameter where name = 'parallel_min_servers';
end;
/
print PARALLEL_MIN_SERV
exit
EOF`
PPARALLEL_MIN_SERV=`echo ${PARALLEL_MIN_SERV}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_MIN_SERV} ${BLACK}"
#########################################################################################################
PARALLEL_MAX_SERV=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_MAX_SERV varchar2(100);
begin
select distinct value into :PARALLEL_MAX_SERV from gv\\$parameter where name = 'parallel_max_servers';
end;
/
print PARALLEL_MAX_SERV
exit
EOF`
PPARALLEL_MAX_SERV=`echo ${PARALLEL_MAX_SERV}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_MAX_SERV} ${BLACK}"
#########################################################################################################
AUDIT_FILE_DEST=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var AUDIT_FILE_DEST varchar2(100);
begin
select distinct value into :AUDIT_FILE_DEST from gv\\$parameter where name = 'audit_file_dest';
end;
/
print AUDIT_FILE_DEST
exit
EOF`
AAUDIT_FILE_DEST=`echo ${AUDIT_FILE_DEST}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${AAUDIT_FILE_DEST} ${BLACK}"
#########################################################################################################
PARALLEL_DEG_POL=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_DEG_POL varchar2(100);
begin
select distinct value into :PARALLEL_DEG_POL from gv\\$parameter where name = 'parallel_degree_policy';
end;
/
print PARALLEL_DEG_POL
exit
EOF`
PPARALLEL_DEG_POL=`echo ${PARALLEL_DEG_POL}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_DEG_POL} ${BLACK}"
#########################################################################################################
PARALLEL_ADAP_M=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_ADAP_M varchar2(100);
begin
select distinct value into :PARALLEL_ADAP_M from gv\\$parameter where name = 'parallel_adaptive_multi_user';
end;
/
print PARALLEL_ADAP_M
exit
EOF`
PPARALLEL_ADAP_M=`echo ${PARALLEL_ADAP_M}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_ADAP_M} ${BLACK}"
#########################################################################################################
PARALLEL_THREAD_CPU=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_THREAD_CPU varchar2(100);
begin
select distinct value into :PARALLEL_THREAD_CPU from gv\\$parameter where name = 'parallel_threads_per_cpu';
end;
/
print PARALLEL_THREAD_CPU
exit
EOF`
PPARALLEL_THREAD_CPU=`echo ${PARALLEL_THREAD_CPU}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_THREAD_CPU} ${BLACK}"
#########################################################################################################
PARALLEL_AUTO_TUNING=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_AUTO_TUNING varchar2(100);
begin
select distinct value into :PARALLEL_AUTO_TUNING from gv\\$parameter where name = 'parallel_automatic_tuning';
end;
/
print PARALLEL_AUTO_TUNING
exit
EOF`
PPARALLEL_AUTO_TUNING=`echo ${PARALLEL_AUTO_TUNING}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_AUTO_TUNING} ${BLACK}"
#########################################################################################################
PARALLEL_IO_CAP=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_IO_CAP varchar2(100);
begin
select distinct value into :PARALLEL_IO_CAP from gv\\$parameter where name = 'parallel_io_cap_enabled';
end;
/
print PARALLEL_IO_CAP
exit
EOF`
PPARALLEL_IO_CAP=`echo ${PARALLEL_IO_CAP}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_IO_CAP} ${BLACK}"
#########################################################################################################
OPTIMIZER_INDEX_COST=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var OPTIMIZER_INDEX_COST varchar2(100);
begin
select distinct value into :OPTIMIZER_INDEX_COST from gv\\$parameter where name = 'optimizer_index_cost_adj';
end;
/
print OPTIMIZER_INDEX_COST
exit
EOF`
OOPTIMIZER_INDEX_COST=`echo ${OPTIMIZER_INDEX_COST}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OOPTIMIZER_INDEX_COST} ${BLACK}"
#########################################################################################################
OPTIMIZER_INDEX_COST_CACH=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var OPTIMIZER_INDEX_COST_CACH varchar2(100);
begin
select distinct value into :OPTIMIZER_INDEX_COST_CACH from gv\\$parameter where name = 'optimizer_index_caching';
end;
/
print OPTIMIZER_INDEX_COST_CACH
exit
EOF`
OOPTIMIZER_INDEX_COST_CACH=`echo ${OPTIMIZER_INDEX_COST_CACH}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OOPTIMIZER_INDEX_COST_CACH} ${BLACK}"
#########################################################################################################
PARALLEL_SERV_TARGET=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PARALLEL_SERV_TARGET varchar2(100);
begin
select distinct value into :PARALLEL_SERV_TARGET from gv\\$parameter where name = 'parallel_servers_target';
end;
/
print PARALLEL_SERV_TARGET
exit
EOF`
PPARALLEL_SERV_TARGET=`echo ${PARALLEL_SERV_TARGET}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPARALLEL_SERV_TARGET} ${BLACK}"
#########################################################################################################
DG_BROKER_1=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DG_BROKER_1 varchar2(100);
begin
select distinct value into :DG_BROKER_1 from gv\\$parameter where name = 'dg_broker_config_file1';
end;
/
print DG_BROKER_1
exit
EOF`
DDG_BROKER_1=`echo ${DG_BROKER_1}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDG_BROKER_1} ${BLACK}"
#########################################################################################################
DG_BROKER_2=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DG_BROKER_2 varchar2(100);
begin
select distinct value into :DG_BROKER_2 from gv\\$parameter where name = 'dg_broker_config_file2';
end;
/
print DG_BROKER_2
exit
EOF`
DDG_BROKER_2=`echo ${DG_BROKER_2}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDG_BROKER_2} ${BLACK}"
#########################################################################################################
NLS_TERRITORY=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_TERRITORY varchar2(100);
begin
select distinct value into :NLS_TERRITORY from gv\\$parameter where name = 'nls_territory';
end;
/
print NLS_TERRITORY
exit
EOF`
NNLS_TERRITORY=`echo ${NLS_TERRITORY}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_TERRITORY} ${BLACK}"
#########################################################################################################
NNLS_SORT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_SORT varchar2(100);
begin
select distinct value into :NLS_SORT from gv\\$parameter where name = 'nls_sort';
end;
/
print NLS_SORT
exit
EOF`
NNLS_SORT=`echo ${NLS_SORT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_SORT} ${BLACK}"
#########################################################################################################
NLS_CURRENCY=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_CURRENCY varchar2(100);
begin
select distinct value into :NLS_CURRENCY from gv\\$parameter where name = 'nls_currency';
end;
/
print NLS_CURRENCY
exit
EOF`
NNLS_CURRENCY=`echo ${NLS_CURRENCY}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_CURRENCY} ${BLACK}"
#########################################################################################################
NLS_NUM_CHAR=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_NUM_CHAR varchar2(100);
begin
select distinct value into :NLS_NUM_CHAR from gv\\$parameter where name = 'nls_numeric_characters';
end;
/
print NLS_NUM_CHAR
exit
EOF`
NNLS_NUM_CHAR=`echo ${NLS_NUM_CHAR}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_NUM_CHAR} ${BLACK}"
#########################################################################################################
NLS_ISO_CURRENCY=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_ISO_CURRENCY varchar2(100);
begin
select distinct value into :NLS_ISO_CURRENCY from gv\\$parameter where name = 'nls_iso_currency';
end;
/
print NLS_ISO_CURRENCY
exit
EOF`
NNLS_ISO_CURRENCY=`echo ${NLS_ISO_CURRENCY}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_ISO_CURRENCY} ${BLACK}"
#########################################################################################################
NLS_CALENDAR=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_CALENDAR varchar2(100);
begin
select distinct value into :NLS_CALENDAR from gv\\$parameter where name = 'nls_calendar';
end;
/
print NLS_CALENDAR
exit
EOF`
NNLS_CALENDAR=`echo ${NLS_CALENDAR}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_CALENDAR} ${BLACK}"
#########################################################################################################
NLS_TIME_FORMAT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_TIME_FORMAT varchar2(100);
begin
select distinct value into :NLS_TIME_FORMAT from gv\\$parameter where name = 'nls_time_format';
end;
/
print NLS_TIME_FORMAT
exit
EOF`
NNLS_TIME_FORMAT=`echo ${NLS_TIME_FORMAT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_TIME_FORMAT} ${BLACK}"
#########################################################################################################
NLS_TIMESTAMP_FOR=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_TIMESTAMP_FOR varchar2(100);
begin
select distinct value into :NLS_TIMESTAMP_FOR from gv\\$parameter where name = 'nls_timestamp_format';
end;
/
print NLS_TIMESTAMP_FOR
exit
EOF`
NNLS_TIMESTAMP_FOR=`echo ${NLS_TIMESTAMP_FOR}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_TIMESTAMP_FOR} ${BLACK}"
#########################################################################################################
NLS_TIME_TZ=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_TIME_TZ varchar2(100);
begin
select distinct value into :NLS_TIME_TZ from gv\\$parameter where name = 'nls_time_tz_format';
end;
/
print NLS_TIME_TZ
exit
EOF`
NNLS_TIME_TZ=`echo ${NLS_TIME_TZ}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_TIME_TZ} ${BLACK}"
#########################################################################################################
NLS_TIMESTAMP_TZ=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_TIMESTAMP_TZ varchar2(100);
begin
select distinct value into :NLS_TIMESTAMP_TZ from gv\\$parameter where name = 'nls_timestamp_tz_format';
end;
/
print NLS_TIMESTAMP_TZ
exit
EOF`
NNLS_TIMESTAMP_TZ=`echo ${NLS_TIMESTAMP_TZ}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_TIMESTAMP_TZ} ${BLACK}"
#########################################################################################################
NLS_DUAL_CURRENCY=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_DUAL_CURRENCY varchar2(100);
begin
select distinct value into :NLS_DUAL_CURRENCY from gv\\$parameter where name = 'nls_dual_currency';
end;
/
print NLS_DUAL_CURRENCY
exit
EOF`
NNLS_DUAL_CURRENCY=`echo ${NLS_DUAL_CURRENCY}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_DUAL_CURRENCY} ${BLACK}"
#########################################################################################################
NLS_COMP=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var NLS_COMP varchar2(100);
begin
select distinct value into :NLS_COMP from gv\\$parameter where name = 'nls_comp';
end;
/
print NLS_COMP
exit
EOF`
NNLS_COMP=`echo ${NLS_COMP}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${NNLS_COMP} ${BLACK}"
#########################################################################################################
SID=${ORACLE_SID}
#########################################################################################################
#
#########################################################################################################
clear
while true
do
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
func_load 100
#########################################################################################################
UUPTIME=""                                # Server Uptime
KKERNEL=""                                # Server Kernel Version
DF_STATUS=""                              # Monitoring DF -H
DDF_STATUS=""                             # Monitor DF -H
PCPU=""                                   # Physical CPUs
CCPU=""                                   # Server CPUs
PFAMILY=""                                # Processor Family
PFPU_TYPE=""                              # Processor Type
TMEM=""                                   # Server Physical Memory (TOTAL)
UMEM=""                                   # Server Physical Memory Used
FMEM=""                                   # Server Physical Memory Free
STMEM=""                                  # Server Swap Memory (TOTAL)
SUMEM=""                                  # Server Swap Memory Used
SFMEM=""                                  # Server Swap Memory Free
ARCHIT=""                                 # Server Architecture         # Architecture:          x86_64
CPU_OP=""                                 # Server CPU Operation Mode   # CPU op-mode(s):        32-bit, 64-bit
BYTE_ORD=""                               # Server Byte Order           # Byte Order:            Little Endian
THREADS=""                                # Server Threads per CORE     # Thread(s) per core:    1
CORES=""                                  # Server Cores per Sockets    # Core(s) per socket:    2
SOCKETS=""                                # Server CPUs Sockets         # CPU socket(s):         2
VENDOR=""                                 # Server Vendor               # Vendor ID:             GenuineIntel
CPU_FAMILY=""                             # Server CPU Family           # CPU family:            6
MODEL=""                                  # Server Model                # Model:                 37
CPU_MHZ=""                                # Server CPU MHZ              # CPU MHz:               2663.778
#########################################################################################################
if [ `uname` = "SunOS" ]
then
  UUPTIME=`uptime | sed 's/.*up \([^,]*\), .*/\1/'`
  KERNEL=`uname -r`
  KKERNEL=`uname -a`
  DF_STATUS=`df -h | awk '{ print $5}' | sed s/%// | grep -v "capacity"`
  PCPU=`/usr/sbin/psrinfo -p`
  # if [ -f "/usr/bin/nproc" ]
  # then
  #  CCPU=`/usr/bin/kstat -m cpu_info | egrep "chip_id|core_id|module: cpu_info" | grep cpu_info | wc -l | tr -d ' '`
  # else
  #  CCPU=`/usr/bin/nproc`
  # fi
  CCPU=`/usr/bin/kstat -m cpu_info | egrep "chip_id|core_id|module: cpu_info" | grep cpu_info | wc -l | tr -d ' '`
  PFAMILY=`/usr/bin/kstat -m cpu_info | grep brand | awk '{ print $2, '' $3, '' $4, '' $5, '' $6 }' | tail -1`
  PFPU_TYPE=`/usr/bin/kstat -m cpu_info | grep fpu_type | awk '{ print $2, '' $3 }' | tail -1`
  TMEM=`/usr/sbin/prtconf | egrep "Memory size:" | head | awk '{ foo = $3/1024; print foo "G"}' | grep .[0-9]* | head -2 | tail -1`             # Total of Memory
  UMEM=`/usr/bin/prstat -Z 1 1 | tail -2 | awk '{print $4}' | head -1`                                                                          # Total of Used Memory
  FMEM=`/usr/bin/kstat -p unix:0:system_pages:freemem | awk '{ print $2 }' | awk '{ foo = $1/1024/1024 ; print foo "M" }'`                      # Total of Free Memory
  STMEM=`df -kh swap | grep swap | awk '{ print $2 }'`  # `/usr/sbin/swap -s | awk '{ print $2 }'`                                              # Total of Swap Memory
  SUMEM=`df -kh swap | grep swap | awk '{ print $3 }'`  # `/usr/bin/prstat -Z 1 1 | tail -2 | awk '{print $3}' | head -1`                       # Total of Swap Used Memory
  SFMEM=`df -kh swap | grep swap | awk '{ print $4 }'`  # `/usr/sbin/sysdef | grep swap | awk '{ print $5 }' | tail -1`                         # Total of Swap Free Memory
  ARCHIT=""
  CPU_OP=""
  BYTE_ORD=""
  THREADS=""
  CORES=`/usr/sbin/psrinfo -pv | grep "physical processor" | head -1 | awk '{ print $5 }'`
  SOCKETS=`/usr/sbin/psrinfo -pv | grep "The physical processor has" | wc -l`
  VENDOR=`/usr/sbin/psrinfo -pv | grep "CPU" | head -1 | awk '{ print $1 }'`
  CPU_FAMILY=`/usr/sbin/psrinfo -pv | grep "CPU" | head -1 | awk '{ print $2 }'`
  MODEL=`/usr/sbin/psrinfo -pv | grep "CPU" | head -1 | awk '{ print $4 }'`
  CPU_MHZ=`/usr/sbin/psrinfo -pv | grep "CPU" | head -1 | awk '{ print $7 }'`
#########################################################################################################
elif [ `uname` = "AIX" ]
then
  UUPTIME=`uptime | sed 's/.*up \([^,]*\), .*/\1/'`
  KERNEL=`oslevel`
  KKERNEL=`oslevel`
  DF_STATUS=`df -h | awk '{ print $5 }' | sed s/%//`
  PCPU=""
  CCPU=`pmcycles -m | wc -l`                                          # lparstat -i | grep CPU #  lsattr -El proc0 # prtconf | pg
  PFAMILY=""
  PFPU_TYPE=""
  TMEM=`svmon | grep memory | awk '{ print $2 }'`                     # prtconf -m | awk '{ print $3 }'
  UMEM=`svmon | grep memory | awk '{ print $3 }'`
  FMEM=`svmon | grep memory | awk '{ print $4 }'`
  STMEM=`lsps -s | awk '{ print $1 }' | tail -1`                      # svmon -Pt10 | perl -e 'while(<>){print if($.==2||$&&&!$s++);$.=0 if(/^-+$/)}'
  SUMEM=`lsps -s | awk '{ print $1 }' | tail -1`
  SFMEM=`lsps -s | awk '{ print $1 }' | tail -1`
  ARCHIT=""
  CPU_OP=""
  BYTE_ORD=""
  THREADS=""
  CORES=""
  SOCKETS=""
  VENDOR=""
  CPU_FAMILY=""
  MODEL=""
  CPU_MHZ=""
#########################################################################################################
elif [ `uname` = "Linux" ]
then
  UUPTIME=`uptime | sed 's/.*up \([^,]*\), .*/\1/'`                    # uptime | awk '{ print $3 " " $4}'
  KERNEL=`uname -r | cut -c -1,2,3,4,5,6`
  KKERNEL=`uname -r | cut -c -1,2,3,4,5,6`
  DF_STATUS=`df -h | awk '{ print $5 }' | sed s/%//`
  if [ -f /usr/bin/nproc ]
  then
    PCPU=`nproc`
    CCPU=`nproc`                                                       # lscpu
  else
    PCPU=`cat /proc/cpuinfo | grep "physical id" | sort -u | wc -l`
    CCPU=`cat /proc/cpuinfo | grep processor | wc -l`
  fi
  PFAMILY=`cat /proc/cpuinfo |grep vendor_id | tail -1 | awk '{ print $3 }'`
  PFPU_TYPE=`cat /proc/cpuinfo |grep "model name" | tail -1 | awk '{ print $4, $5, $6, $7, $8, $9 }'`
  TMEM=`free -g | grep Mem | awk '{ print $2 }'`
  UMEM=`free -m | grep Mem | awk '{ print $3 }'`
  FMEM=`free -m | grep Mem | awk '{ print $4 }'`
  STMEM=`free -g | grep Swap | awk '{ print $2 }'`
  SUMEM=`free -m | grep Swap | awk '{ print $3 }'`
  SFMEM=`free -m | grep Swap | awk '{ print $4 }'`
  if [ -f /usr/bin/lscpu ]
  then
    ARCHIT=`lscpu | grep Architecture | awk '{ print $2 }'`
    CPU_OP=`lscpu | grep "CPU op-mode(s)" | awk '{ print $3, $4 }'`
    BYTE_ORD=`lscpu | grep "Byte Order" | awk '{ print $3, $4 }'`
    THREADS=`lscpu | grep "Thread(s) per core" | awk '{ print $4 }'`
    CORES=`lscpu | grep "Core(s) per socket" | awk '{ print $4 }'`
    SOCKETS=`lscpu | grep "CPU socket(s)" | awk '{ print $3 }'`
    VENDOR=`lscpu | grep "Vendor" | awk '{ print $3 }'`
    CPU_FAMILY=`lscpu | grep "CPU family:" | awk '{ print $3 }'`
    MODEL=`lscpu | grep "Model" | awk '{ print $2 }'`
    CPU_MHZ=`lscpu | grep "CPU MHz:" | awk '{ print $3 }'`
  else
    ARCHIT=`cat /proc/cpuinfo | grep "cache_alignment" | awk '{ print $3 }' | tail -1`
    CPU_OP=`cat /proc/cpuinfo | grep "cache_alignment" | awk '{ print "32-bit, " $3"-bit" }' | tail -1`
    BYTE_ORD="Not Informed"
    THREADS="Not Informed"
    CORES=`cat /proc/cpuinfo | grep "cpu cores" | awk '{ print $4 }' | tail -1`
    SOCKETS="Not Informed"
    VENDOR=`cat /proc/cpuinfo | grep "vendor_id" | awk '{ print $3 }' | tail -1`
    CPU_FAMILY=`cat /proc/cpuinfo | grep "cpu family" | awk '{ print $4 }' | tail -1`
    MODEL="Not Informed"
    CPU_MHZ=`cat /proc/cpuinfo | grep "cpu MHz" | awk '{ print $4 }' | tail -1`
  fi
#########################################################################################################
elif [ `uname` = "Darwin" ]
then
  UUPTIME=`uptime | sed 's/.*up \([^,]*\), .*/\1/'`
  KERNEL=`uname -r`
  KKERNEL=`uname -r`
  DF_STATUS=`df -h | awk '{ print $5 }' | sed s/%//`
  PCPU=""
  CCPU=`cat /proc/cpuinfo | grep processor | wc -l`
  PFAMILY=""
  PFPU_TYPE=""
  TMEM=`free -m | grep Mem | awk '{ print $2 }'`
  UMEM=""
  FMEM=""
  STMEM=""
  SUMEM=""
  SFMEM=""
  ARCHIT=""
  CPU_OP=""
  BYTE_ORD=""
  THREADS=""
  CORES=""
  SOCKETS=""
  VENDOR=""
  CPU_FAMILY=""
  MODEL=""
  CPU_MHZ=""
else
  UUPTIME=`uptime | sed 's/.*up \([^,]*\), .*/\1/'`
  KERNEL=`uname -r`
  KKERNEL=`uname -r`
  DF_STATUS=`df -h | awk '{ print $5 }' | sed s/%//`
  PCPU=""
  CCPU=`cat /proc/cpuinfo | grep processor | wc -l`
  PFAMILY=""
  PFPU_TYPE=""
  TMEM=`free -m | grep Mem | awk '{ print $2 }'`
  UMEM=""
  FMEM=""
  STMEM=""
  SUMEM=""
  SFMEM=""
  ARCHIT=""
  CPU_OP=""
  BYTE_ORD=""
  THREADS=""
  CORES=""
  SOCKETS=""
  VENDOR=""
  CPU_FAMILY=""
  MODEL=""
  CPU_MHZ=""
fi
#########################################################################################################
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
WARNING=80
CRITICAL=90
### df -P -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read OUTPUT
df -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d'%' -f1  )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }' )
  if [[ "${USEP}" -ge ${CRITICAL} ]]
  then
    echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Disk Space Critical: \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  elif [[ "${USEP}" -ge ${WARNING} ]]
  then
    echo ${ECHO} "${YEL} Disk Space Warning: \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  else
    echo ${ECHO} "${GREEN} Disk Space OK: \"${PARTITION} [ ${USEP}% ]\" ${BLACK}"
  fi
done
#########################################################################################################
CCRITICAL=`
WARNING=80
CRITICAL=90
### df -P -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read OUTPUT
df -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d'%' -f1  )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }' )
  if [[ "${USEP}" -ge ${CRITICAL} ]]
  then
    echo "Disk Space Critical: \"${PARTITION} [ ${USEP}% ]\""
  elif [[ "${USEP}" -ge ${WARNING} ]]
  then
    echo "Disk Space Warning: \"${PARTITION} [ ${USEP}% ]\""
  else
    echo "Disk Space OK: \"${PARTITION} [ ${USEP}% ]\""
  fi
done | grep "Disk Space Critical"  | tail -1`
CRITICAL_SPACE=`
if [ "${CCRITICAL}" = "" ]
then
  DISK_CRITICAL="NOT Critical"
else
  DISK_CRITICAL="Critical"
fi
echo ${DISK_CRITICAL}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${CRITICAL_SPACE} ${BLACK}"
#########################################################################################################
WWARNING=`
WARNING=80
CRITICAL=90
### df -P -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read OUTPUT
df -h | grep -v '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read OUTPUT
do
  USEP=$(echo ${OUTPUT} | awk '{ print $1 }' | cut -d'%' -f1  )
  PARTITION=$(echo ${OUTPUT} | awk '{ print $2 }' )
  if [[ "${USEP}" -ge ${CRITICAL} ]]
  then
    echo "Disk Space Critical: \"${PARTITION} [ ${USEP}% ]\""
  elif [[ "${USEP}" -ge ${WARNING} ]]
  then
    echo "Disk Space Warning: \"${PARTITION} [ ${USEP}% ]\""
  else
    echo "Disk Space OK: \"${PARTITION} [ ${USEP}% ]\""
  fi
done | grep "Disk Space Warning" | tail -1`
WARNING_SPACE=`
if [ "${WWARNING}" = "" ]
then
  DISK_WARNING="NOT Warning"
else
  DISK_WARNING="Warning"
fi
echo ${DISK_WARNING}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${WARNING_SPACE} ${BLACK}"
#########################################################################################################
if [ "$CRITICAL_SPACE" = "Critical" ]
then
  DISK_SPACE_STATUS="Critical"
elif [ "$WARNING_SPACE" = "Warning" ]
then
  DISK_SPACE_STATUS="Warning"
else
  DISK_SPACE_STATUS="Disk Space OK"
fi
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DISK_SPACE_STATUS} ${BLACK}"
#########################################################################################################
DBSCN=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBSCN varchar2(100);
begin
select CURRENT_SCN into :DBSCN from v\\$DATABASE;
end;
/
print DBSCN
exit
EOF`
DDBSCN=`echo ${DBSCN}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBSCN} ${BLACK}"
#########################################################################################################
if [ "${ISCONTAINERDB}" = "TRUE" ]
then 
MAX_PDB=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var MAX_PDB varchar2(100);
begin
select value into :MAX_PDB from gv\\$parameter where name = 'max_pdbs';
end;
/
print MAX_PDB
exit
EOF`
MMAX_PDB=`echo ${MAX_PDB}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMAX_PDB} ${BLACK}"
#########################################################################################################
QTD_PDB=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var QTD_PDB varchar2(100);
begin
select count(*) into :QTD_PDB from gv\\$containers where CON_ID not in (1,2);
end;
/
print QTD_PDB
exit
EOF`
QQTD_PDB=`echo ${QTD_PDB}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${QQTD_PDB} ${BLACK}"
#########################################################################################################
else
clear
MMAX_PDB="NO PDBS"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${MMAX_PDB} ${BLACK}"
clear
QQTD_PDB="NO PDBS"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${QQTD_PDB} ${BLACK}"
fi
#########################################################################################################
DB_SIZEM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_SIZEM varchar2(100);
begin
select to_char(sum(bytes)/1024/1024,'9G999G999D999') "SIZE MB" into :DB_SIZEM from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\\$log
union all
select sum(block_size * file_size_blks) from v\\$controlfile);
end;
/
print DB_SIZEM
exit
EOF`
#########################################################################################################
DB_SIZEG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_SIZEG varchar2(100);
begin
select to_char(sum(bytes)/1024/1024/1024,'9G999G999D999') "SIZE GB" into :DB_SIZEG from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\\$log
union all
select sum(block_size * file_size_blks) from v\\$controlfile);
end;
/
print DB_SIZEG
exit
EOF`
#########################################################################################################
DB_SIZET=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DB_SIZET varchar2(100);
begin
select to_char(sum(bytes)/1024/1024/1024/1024,'9G999G999D999') "SIZE TB" into :DB_SIZET from (select sum(bytes) bytes from dba_data_files
union all
select sum(bytes) bytes from dba_temp_files
union all
select sum(bytes * members) from v\\$log
union all
select sum(block_size * file_size_blks) from v\\$controlfile);
end;
/
print DB_SIZET
exit
EOF`
if [ ${DDBMODE} = "OPEN" ]
then
  DDB_SIZEM=`echo ${DB_SIZEM}`
  DDB_SIZEG=`echo ${DB_SIZEG}`
  DDB_SIZET=`echo ${DB_SIZET}`
else
  DDB_SIZEM=`echo ${ECHO} "0"`
  DDB_SIZEG=`echo ${ECHO} "0"`
  DDB_SIZET=`echo ${ECHO} "0"`
fi
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_SIZEM} ${BLACK}"
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_SIZEG} ${BLACK}"
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDB_SIZET} ${BLACK}"
#########################################################################################################
PROTMODE=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var PROTMODE varchar2(100);
begin
select protection_mode into :PROTMODE from v\\$database;
end;
/
print PROTMODE
exit
EOF`
PPROTMODE=`echo ${PROTMODE}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${PPROTMODE} ${BLACK}"
#########################################################################################################
DBFLOG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBFLOG varchar2(100);
begin
select FORCE_LOGGING into :DBFLOG from v\\$DATABASE;
end;
/
print DBFLOG
exit
EOF`
DDBFLOG=`echo ${DBFLOG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBFLOG} ${BLACK}"
#########################################################################################################
DBFLASHB=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBFLASHB varchar2(100);
begin
select FLASHBACK_ON into :DBFLASHB from v\\$DATABASE;
end;
/
print DBFLASHB
exit
EOF`
DDBFLASHB=`echo ${DBFLASHB}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBFLASHB} ${BLACK}"
#########################################################################################################
FLASHRET=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var FLASHRET varchar2(100);
begin
select distinct value into :FLASHRET from v\\$parameter where name = 'db_flashback_retention_target';
end;
/
print FLASHRET
exit
EOF`
FFLASHRETM=`echo ${FLASHRET}`
FFLASHRETH=$((FLASHRET/60))
FFLASHRETD=$((FLASHRET/60/24))
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFLASHRETM} ${BLACK}"
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFLASHRETH} ${BLACK}"
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFLASHRETD} ${BLACK}"
#########################################################################################################
FLASHSIZEM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var FLASHSIZEM varchar2(100);
begin
select to_char(space_limit/1024/1024, '9G999G999D999') into :FLASHSIZEM from v\\$recovery_file_dest;
end;
/
print FLASHSIZEM
exit
EOF`
FFLASHSIZEM=`echo ${FLASHSIZEM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFLASHSIZEM} ${BLACK}"
#########################################################################################################
FLASHSIZEG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var FLASHSIZEG varchar2(100);
begin
select to_char(space_limit/1024/1024/1024, '9G999G999D999') into :FLASHSIZEG from v\\$recovery_file_dest;
end;
/
print FLASHSIZEG
exit
EOF`
FFLASHSIZEG=`echo ${FLASHSIZEG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFLASHSIZEG} ${BLACK}"
#########################################################################################################
FLASHSIZET=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var FLASHSIZET varchar2(100);
begin
select to_char(space_limit/1024/1024/1024/1024, '9G999G999D999') into :FLASHSIZET from v\\$recovery_file_dest;
end;
/
print FLASHSIZET
exit
EOF`
FFLASHSIZET=`echo ${FLASHSIZET}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${FFLASHSIZET} ${BLACK}"
#########################################################################################################
SQLTUN=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SQLTUN varchar2(100);
begin
select distinct case when a.DETECTED_USAGES = 0 then 'FALSE' when a.DETECTED_USAGES <> 0 then 'TRUE' else 'N/A' end as "VALUE" into :SQLTUN from dba_feature_usage_statistics a, v\\$instance b where a.name = 'SQL Tuning Advisor' and a.version = b.version;
end;
/
print SQLTUN
exit
EOF`
SSQLTUN=`echo ${SQLTUN}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSQLTUN} ${BLACK}"
#########################################################################################################
VOGG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var VOGG varchar2(100);
begin
select distinct case when DETECTED_USAGES = 0 then 'FALSE' when DETECTED_USAGES <> 0 then 'TRUE' else 'N/A' end as "VALUE" into :VOGG from dba_feature_usage_statistics a, v\\$instance b where a.name  = 'GoldenGate' and a.version = b.version;
end;
/
print VOGG
exit
EOF`
VOOGG=`echo ${VOGG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${VOOGG} ${BLACK}"
#########################################################################################################
DBRECSIZEG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBRECSIZEG varchar2(100);
begin
select to_char(value/1024/1024/1024, '9G999G999D999') into :DBRECSIZEG from v\\$parameter where name = 'db_recovery_file_dest_size';
end;
/
print DBRECSIZEG
exit
EOF`
DDBRECSIZEG=`echo ${DBRECSIZEG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBRECSIZEG} ${BLACK}"
#########################################################################################################
DBRECSIZET=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBRECSIZET varchar2(100);
begin
select to_char(value/1024/1024/1024/1024, '9G999G999D999') into :DBRECSIZET from v\\$parameter where name = 'db_recovery_file_dest_size';
end;
/
print DBRECSIZET
exit
EOF`
DDBRECSIZET=`echo ${DBRECSIZET}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBRECSIZET} ${BLACK}"
#########################################################################################################
DBRECSIZEUM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBRECSIZEUM varchar2(100);
begin
select to_char(space_used/1024/1024, '9G999G999D999') into :DBRECSIZEUM from v\\$recovery_file_dest;
end;
/
print DBRECSIZEUM
exit
EOF`
DDBRECSIZEUM=`echo ${DBRECSIZEUM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBRECSIZEUM} ${BLACK}"
#########################################################################################################
DBRECSIZEUG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBRECSIZEUG varchar2(100);
begin
select to_char(space_used/1024/1024/1024, '9G999G999D999') into :DBRECSIZEUG from v\\$recovery_file_dest;
end;
/
print DBRECSIZEUG
exit
EOF`
DDBRECSIZEUG=`echo ${DBRECSIZEUG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBRECSIZEUG} ${BLACK}"
#########################################################################################################
DBRECSIZEUP=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBRECSIZEUP varchar2(100);
begin
select to_char(decode(nvl(space_used, 0), 0, 0, ceil((space_used/space_limit) * 100))) into :DBRECSIZEUP from v\\$recovery_file_dest;
end;
/
print DBRECSIZEUP
exit
EOF`
DDBRECSIZEUP=`echo ${DBRECSIZEUP}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBRECSIZEUP} ${BLACK}"
#########################################################################################################
UNDO=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var UNDO varchar2(100);
begin
select distinct value into :UNDO from v\\$parameter where name = 'undo_retention';
end;
/
print UNDO
exit
EOF`
UUNDOS=`echo ${UNDO}`
UUNDOM=$((UNDO/60))
UUNDOH=$((UNDO/60/60))
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${UUNDOS} ${BLACK}"
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${UUNDOM} ${BLACK}"
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${UUNDOH} ${BLACK}"
#########################################################################################################
DBUPTIME=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBUPTIME varchar2(100);
alter session set nls_date_format='dd/mm/yyyy';
begin
select STARTUP_TIME into :DBUPTIME from v\\$instance;
end;
/
print DBUPTIME
exit
EOF`
DDBUPTIME=`echo ${DBUPTIME}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBUPTIME} ${BLACK}"
#########################################################################################################
DBUPTIMED=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DBUPTIMED varchar2(100);
alter session set nls_date_format='dd/mm/yyyy hh24:mi';
begin
select to_date(sysdate, 'dd/mm/yyyy hh24:mi') - to_date(startup_time, 'dd/mm/yyyy hh24:mi') into :DBUPTIMED from v\\$instance;
end;
/
print DBUPTIMED
exit
EOF`
DDBUPTIMED=`echo ${DBUPTIMED} | cut -c -2`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDBUPTIMED} ${BLACK}"
#########################################################################################################
RMANFULL=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var RMANFULL varchar2(100);
begin
select case when decode(status, 'COMPLETED', 0,1) = 0 then 'Backup Not Running' else 'Backup Running' end as "Running Y/N" into :RMANFULL from v\\$RMAN_BACKUP_JOB_DETAILS where session_key = (select max(session_key) from v\\$RMAN_BACKUP_JOB_DETAILS where START_TIME > sysdate - 30 and input_type in('DB FULL', 'DB INCR','CONTROLFILE'));
end;
/
print RMANFULL
quit;
EOF`
RRMANFULL=`echo ${RMANFULL}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${RRMANFULL} ${BLACK}"
#########################################################################################################
RMANARCH=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var RMANARCH varchar2(100);
begin
select case when decode(status, 'COMPLETED', 0,1) = 0 then 'Backup Not Running' else 'Backup Running' end as "Running Y/N" into :RMANARCH from v\\$RMAN_BACKUP_JOB_DETAILS where session_key = (select max(session_key) from v\\$RMAN_BACKUP_JOB_DETAILS where START_TIME > sysdate - 30 and input_type in ('ARCHIVELOG'));
end;
/
print RMANARCH
quit;
EOF`
RRMANARCH=`echo ${RMANARCH}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${RRMANARCH} ${BLACK}"
#
#########################################################################################################
#
#########################################################################################################
#
if [ "${ISDGDB}" = "TRUE" ]
then
DG_NAME=`dgmgrl -silent / "show configuration" | grep "Configuration - " | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_NAME} ${BLACK}"
#########################################################################################################
DG_STATUS=`dgmgrl -silent / "show configuration" | awk '/Configuration Status/ { getline; print $1; }'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_STATUS} ${BLACK}"
#########################################################################################################
DG_PROTECT=`dgmgrl -silent / "show configuration" | awk '/Protection Mode/ {print $3 }'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_PROTECT} ${BLACK}"
#########################################################################################################
DG_FAST=`dgmgrl -silent / "show configuration" | grep "Fast-Start Failover" | awk '{print $3 }'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_FAST} ${BLACK}"
#########################################################################################################
DG_FAST_THRES=`dgmgrl -silent / "show configuration verbose" | awk '/FastStartFailoverThreshold/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_FAST_THRES} ${BLACK}"
#########################################################################################################
DG_OPER_TIME=`dgmgrl -silent / "show configuration verbose" | awk '/OperationTimeout/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_OPER_TIME} ${BLACK}"
#########################################################################################################
DG_FAST_LIMIT=`dgmgrl -silent / "show configuration verbose" | awk '/FastStartFailoverLagLimit/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_FAST_LIMIT} ${BLACK}"
#########################################################################################################
DG_COMM_TIME=`dgmgrl -silent / "show configuration verbose" | awk '/CommunicationTimeout/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_COMM_TIME} ${BLACK}"
#########################################################################################################
DG_OBSER_RECO=`dgmgrl -silent / "show configuration verbose" | awk '/ObserverReconnect/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_OBSER_RECO} ${BLACK}"
#########################################################################################################
DG_FAST_A_R=`dgmgrl -silent / "show configuration verbose" | awk '/FastStartFailoverAutoReinstate/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_FAST_A_R} ${BLACK}"
#########################################################################################################
DG_FAST_SHUT=`dgmgrl -silent / "show configuration verbose" | awk '/FastStartFailoverPmyShutdown/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_FAST_SHUT} ${BLACK}"
#########################################################################################################
DG_BYST_CHANG=`dgmgrl -silent / "show configuration verbose" | awk '/BystandersFollowRoleChange/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_BYST_CHANG} ${BLACK}"
#########################################################################################################
DG_OBSER_OVER=`dgmgrl -silent / "show configuration verbose" | awk '/ObserverOverride/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_OBSER_OVER} ${BLACK}"
#########################################################################################################
DG_EXT_DEST1=`dgmgrl -silent / "show configuration verbose" | awk '/ExternalDestination1/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_EXT_DEST1} ${BLACK}"
#########################################################################################################
DG_EXT_DEST=`dgmgrl -silent / "show configuration verbose" | awk '/ExternalDestination2/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_EXT_DEST} ${BLACK}"
#########################################################################################################
DG_PRIMARY_ACT=`dgmgrl -silent / "show configuration verbose" | awk '/PrimaryLostWriteAction/' | awk '{print $3}'`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DG_PRIMARY_ACT} ${BLACK}"
else
  DG_NAME="NOT CONFIGURED"
  DG_STATUS="NOT CONFIGURED"
  DG_PROTECT="NOT CONFIGURED"
  DG_FAST="NOT CONFIGURED"
  DG_FAST_THRES="NOT CONFIGURED"
  DG_OPER_TIME="NOT CONFIGURED"
  DG_FAST_LIMIT="NOT CONFIGURED"
  DG_COMM_TIME="NOT CONFIGURED"
  DG_OBSER_RECO="NOT CONFIGURED"
  DG_FAST_A_R="NOT CONFIGURED"
  DG_FAST_SHUT="NOT CONFIGURED"
  DG_BYST_CHANG="NOT CONFIGURED"
  DG_OBSER_OVER="NOT CONFIGURED"
  DG_EXT_DEST1="NOT CONFIGURED"
  DG_EXT_DEST="NOT CONFIGURED"
  DG_PRIMARY_ACT="NOT CONFIGURED"
fi
#
# dgmgrl -silent / "show configuration" | awk '/Databases:/ { getline; while ( NF > 0 ) { printf "[ DATABASE_NAME..................: ] [ %s - %s %s \n",$1,$3,$4 " ]"; getline; } }'
# dgmgrl -silent / "show configuration" | awk '/Databases:/ { getline; while ( NF > 0 ) { print "[ DATABASE_NAME..................: ] [ " $1 " ]"; getline; } }'
#
#########################################################################################################
RMANLAST=`sqlplus -S '/ as sysdba' <<EOF | tail -2
alter session set nls_date_format='dd/mm/yyyy';
var RMANLAST varchar2(100);
begin
select END_TIME into :RMANLAST from v\\$RMAN_BACKUP_JOB_DETAILS where session_key = (select max(session_key) from v\\$RMAN_BACKUP_JOB_DETAILS where END_TIME > sysdate - 30);
end;
/
print RMANLAST
quit;
EOF`
RRMANLAST=`echo ${RMANLAST}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${RRMANLAST} ${BLACK}"
#########################################################################################################
ERRORS=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ERRORS varchar2(100);
var days_back number;
exec :days_back := 15;
begin
select decode(count(*), 0, 'NO ERRORS', 'WITH ERRORS') ERRORS into :ERRORS
from sys.X\\$DBGALERTEXT
where (lower(MESSAGE_TEXT) like '%ora-%' or lower(MESSAGE_TEXT) like '%error%' or lower(MESSAGE_TEXT) like '%checkpoint not complete%' or lower(MESSAGE_TEXT) like '%fail%')
and ORIGINATING_TIMESTAMP > sysdate-:days_back
and rownum = 1;
end;
/
print ERRORS
quit;
EOF`
EERRORS=`echo ${ERRORS}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${EERRORS} ${BLACK}"
#########################################################################################################
ORA600=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var ORA600 varchar2(100);
var days_back number;
exec :days_back := 30;
begin
select decode(count(*), 0, 'NO ERRORS', 'WITH ERRORS') ERRORS into :ORA600
from sys.X\\$DBGALERTEXT
where MESSAGE_TEXT like '%ORA-00600%'
and ORIGINATING_TIMESTAMP > sysdate-:days_back
and rownum = 1;
end;
/
print ORA600
quit;
EOF`
OORA600=`echo ${ORA600}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${OORA600} ${BLACK}"
#########################################################################################################
TBS_WARNING=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var TBS_WARNING varchar2(100);
begin
select decode(count(*), 0, 'SIZE OK', 'WARNING') as Tablespaces into :TBS_WARNING from dba_tablespace_usage_metrics where used_percent >= 80 and rownum = 1;
end;
/
print TBS_WARNING
quit;
EOF`
TTBS_WARNING=`echo ${TBS_WARNING}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${TTBS_WARNING} ${BLACK}"
#########################################################################################################
TBS_CRITICAL=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var TBS_CRITICAL varchar2(100);
begin
select decode(count(*), 0, 'SIZE OK', 'CRITICAL') as Tablespaces into :TBS_CRITICAL from dba_tablespace_usage_metrics where used_percent >= 90 and rownum = 1;
end;
/
print TBS_CRITICAL
quit;
EOF`
TTBS_CRITICAL=`echo ${TBS_CRITICAL}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${TTBS_CRITICAL} ${BLACK}"
#########################################################################################################
LOG_GROUPT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var LOG_GROUPT varchar2(100);
begin
select count(*) into :LOG_GROUPT from v\\$log;
end;
/
print LOG_GROUPT
quit;
EOF`
LLOG_GROUPT=`echo ${LOG_GROUPT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${LLOG_GROUPT} ${BLACK}"
#########################################################################################################
LOG_STB_GROUPT=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var LOG_STB_GROUPT varchar2(100);
begin
select count(*) into :LOG_STB_GROUPT from v\\$standby_log;
end;
/
print LOG_STB_GROUPT
quit;
EOF`
LLOG_STB_GROUPT=`echo ${LOG_STB_GROUPT}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${LLOG_STB_GROUPT} ${BLACK}"
#########################################################################################################
LOG_GROUPA=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var LOG_GROUPA varchar2(100);
begin
select count(STATUS) into :LOG_GROUPA from v\\$log where status = 'CURRENT';
end;
/
print LOG_GROUPA
quit;
EOF`
LLOG_GROUPA=`echo ${LOG_GROUPA}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${LLOG_GROUPA} ${BLACK}"
#########################################################################################################
LOG_GROUPI=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var LOG_GROUPI varchar2(100);
begin
select count(STATUS) into :LOG_GROUPI from v\\$log where status = 'INACTIVE';
end;
/
print LOG_GROUPI
quit;
EOF`
LLOG_GROUPI=`echo ${LOG_GROUPI}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${LLOG_GROUPI} ${BLACK}"
#########################################################################################################
REDOM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var REDOM varchar2(100);
begin
select to_char(sum(bytes)/1024/1024, '9G999G999D999') into :REDOM from sys.v_\\$log;
end;
/
print REDOM
quit;
EOF`
RREDOM=`echo ${REDOM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${RREDOM} ${BLACK}"
#########################################################################################################
REDOG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var REDOG varchar2(100);
begin
select to_char(sum(bytes)/1024/1024/1024, '9G999G999D999') into :REDOG from sys.v_\\$log;
end;
/
print REDOG
quit;
EOF`
RREDOG=`echo ${REDOG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${RREDOG} ${BLACK}"
#########################################################################################################
SREDOM=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SREDOM varchar2(100);
begin
select to_char(sum(bytes)/1024/1024, '9G999G999D999') into :SREDOM from sys.v_\\$STANDBY_LOG;
end;
/
print SREDOM
quit;
EOF`
SSREDOM=`echo ${SREDOM}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSREDOM} ${BLACK}"
#########################################################################################################
SREDOG=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var SREDOG varchar2(100);
begin
select to_char(sum(bytes)/1024/1024/1024, '9G999G999D999') into :SREDOG from sys.v_\\$STANDBY_LOG;
end;
/
print SREDOG
quit;
EOF`
SSREDOG=`echo ${SREDOG}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${SSREDOG} ${BLACK}"
#########################################################################################################
INVOBJ=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var INVOBJ varchar2(100);
begin
select count(*) into :INVOBJ from dba_objects where status <> 'VALID';
end;
/
print INVOBJ
quit;
EOF`
IINVOBJ=`echo ${INVOBJ}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${IINVOBJ} ${BLACK}"
#########################################################################################################
DASH_EXISTS=`sqlplus -S '/ as sysdba' <<EOF | tail -2
var DASH_EXISTS varchar2(100);
begin
select object_name into :DASH_EXISTS from all_objects where owner = 'SYSTEM' and object_name = 'JSS' and object_type = 'PACKAGE';
end;
/
print DASH_EXISTS
exit
EOF`
DDASH_EXISTS=`echo ${DASH_EXISTS}`
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------"
echo ${ECHO} "${RED} Variable: ${DDASH_EXISTS} ${BLACK}"
#########################################################################################################
# RMAN_TYPE=$(sqlplus -s <<EOF
# conn / as sysdba
# set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
# select distinct INPUT_TYPE ||"|| into :RMAN_TYPE from v\$RMAN_BACKUP_JOB_DETAILS;
# quit;
# EOF
# )
#
#########################################################################################################
# SHOW THE PDB
#########################################################################################################
#
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
PDB=$(sqlplus -s <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
select NAME FROM V\$CONTAINERS ORDER BY CON_ID, NAME;
quit;
EOF
)
fi
#
#########################################################################################################
# MAIN MENU #
#########################################################################################################
#
DDATE=`date +%d\/%m\/%Y`
TTIME=`date +%H\:%M`
#########################################################################################################
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK} DATABASE VERSION                                  |+|-${RED}  2 ${BLACK} VERIFY INSTALLED PATCHES                       |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK} INSTANCE INFORMATION + PGA & SGA                  |+|-${RED}  4 ${BLACK} VERIFY DISKS SPACE AND MEMORY [ SO ]           |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK} UPTIME SERVER + LOAD AVERAGE + OS USERS           |+|-${RED}  6 ${BLACK} GENERAL TUNING VIEW                            |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|+${RED}  7 ${BLACK} DATABASE GROWN ON LASTS MONTHS                    |+|+${RED}  8 ${BLACK} CONNECTIONS AVERAGE PER HOUR                   |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK} TOP 20 DB-CPU ACTIVITY                            |+|+${RED} 10 ${BLACK} VERIFY SESSIONS PER MEMORY                     |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|+${RED} 11 ${BLACK} DATABASE SIZE                                     |+|+${RED} 12 ${BLACK} VERIFY SESSIONS PER I/O                        |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK} HIT RATIO THE LASTS                               |+|+${RED} 14 ${BLACK} VERIFY LONG OPERATIONS                         |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK} LOAD LASTS 1/5/10 MINUTES                         |+|+${RED} 16 ${BLACK} INVALIDS OBJECTS [ @ ]                         |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|+${RED} 17 ${BLACK} JOBS CONTROL OF THE CLIENT [ @ ]                  |+|-${RED} 18 ${BLACK} MATERIALIZEDS VIEWS DISABLED                   |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|+${RED} 19 ${BLACK} VERIFY RUNNING JOBS                               |+|+${RED} 20 ${BLACK} KILL A RUNNING SESSION [ @ ]                   |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|+${RED} 21 ${BLACK} VERIFY PROFILE INFORMATION                        |+|+${RED} 22 ${BLACK} BACKUP STATISTICS                              |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK} QTD OF ARCHIVES PER HOUR                          |+|-${RED} 24 ${BLACK} LAST FILE OF LAST BACKUP ARCH - RMAN           |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK} LAST FILE OF LAST BACKUP FULL - RMAN              |+|-${RED} 26 ${BLACK} ARCHIVES GENERATED PER DAY                     |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK} BACKUP LOG OF LAST BACKUP FULL - RMAN             |+|-${RED} 28 ${BLACK} BACKUP LOG OF LASTS ARCHIVES - RMAN            |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK} ERRORS ON ALERT LOG FILE                          |+|-${RED} 30 ${BLACK} OEM ALERT                                      |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK} CAPTURE STATISTICS OF DATA DICTIONARY             |+|-${RED} 32 ${BLACK} CAPTURE STATISTICS ALL DATABASE                |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK} BLOCKING LOCKS                                    |+|-${RED} 34 ${BLACK} LOCKED OBJECTS                                 |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK} BLOCKING LOCKS [ SUMARY ]                         |+|-${RED} 36 ${BLACK} BLOCKING LOCKS [ USER DETAILS ]                |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK} BLOCKING LOCKS [ WAITING SQL ]                    |+|-${RED} 38 ${BLACK} LOCKED OBJECTS [ DETAILS ]                     |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK} DML AND DDL LOCKS                                 |+|-${RED} 40 ${BLACK} DML TABLE LOCKS TIME                           |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|+${RED} 41 ${BLACK} VERIFY SESSIONS [ @ ]                             |+|+${RED} 42 ${BLACK} TOP 20 DATABASE SESSIONS                       |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|+${RED} 43 ${BLACK} VERIFY TABLESPACES                                |+|-${RED} 44 ${BLACK} VERIFY ASM                                     |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK} VERIFY STATISTICS - TABLES [ @ ]                  |+|+${RED} 46 ${BLACK} VERIFY STATISTICS - INDEXES [ @ ]              |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK} CAPTURE STATISTICS - OWNER [ @ ]                  |+|-${RED} 48 ${BLACK} VALIDATE OBJECTS FROM ONE OWNER [ @ ]          |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|+${RED} 49 ${BLACK} VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS [ @ ]   |+|-${RED} 50 ${BLACK} VERIFY INSTANCE CHARACTERSET                   |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK} CACHE HIT RATIO [ GOOD: > 90% ]                   |+|-${RED} 52 ${BLACK} VERIFY INSTANCE INSTALLED PRODUCTS             |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK} INSTANCE PROPERTIES                               |+|-${RED} 54 ${BLACK} INSTANCE OPTIONS                               |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK} INSTANCE DIFERENTS PARAMETERS                     |+|-${RED} 56 ${BLACK} INSTANCE MODIFICABLES PARAMETERS               |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|+${RED} 57 ${BLACK} VERIFY DEAD LOCKS                                 |+|+${RED} 58 ${BLACK} VERIFY SESSIONS PER I/O CONSUME                |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK} VERIFY FREE SEGMENTS ON DATAFILES                 |+|+${RED} 60 ${BLACK} VERIFY WHICH DATAFILE CAN BE RESIZED [ @ ]     |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK} VERIFY RECYCLEBIN                                 |+|-${RED} 62 ${BLACK} CLEAR REYICLEBIN                               |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|+${RED} 63 ${BLACK} VERIFY DATABASE SESSIONS                          |+|+${RED} 64 ${BLACK} VERIFY ACTIVES SESSIONS PER OWNER              |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK} UNLOCKING A USER [ @ ]                            |+|-${RED} 66 ${BLACK} LOCKING A USER [ @ ]                           |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK} REDO GROUPS INFORMATIONS                          |+|-${RED} 68 ${BLACK} VERIFY ALL GRID INFRASTRUTURE SERVICES         |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK} VERIFY SPACE OF FLASH RECOVERY AREA               |+|-${RED} 70 ${BLACK} VERIFY PLUGGABLE DATABASES                     |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK} VERIFY CONTROLFILES                               |+|-${RED} 72 ${BLACK} VERIFY DATAGUARD STATUS                        |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK} VERIFY DATAGUARD PARAMETERS                       |+|-${RED} 74 ${BLACK} DATAGUARD STATUS APPLYING                      |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK} VERIFY CONSUME PER CPU                            |+|-${RED} 76 ${BLACK} QUICK TUNE                                     |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK} VERIFY RECOMENDATIONS TUNING TOP 20 [ @ ]         |+|+${RED} 78 ${BLACK} VERIFY TOP 20 TUNING HISTORY [ @ ]             |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK} VERIFY BACKGROUND PROCESSESS                      |+|-${RED} 80 ${BLACK} TOP 100 QUERY RECOMENDATIONS                   |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|-|-${RED} 81 ${BLACK} VERIFY GOLDEN GATE CONFIGURATION                  |-|-${RED} 82 ${BLACK} VERIFY GOLDEN GATE STATUS                      |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK} VERIFY DINAMICS PARAMETERS [ SPFILE ]             |+|-${RED} 84 ${BLACK} VERIFY DBA FEATURES USAGE STATISTICS           |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK} CALCULATE HUGE PAGES                              |+|-${RED} 86 ${BLACK} VERIFY DBA HIGH WATER MARK STATISTICS          |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK} GLOBAL INFORMATION ABOUT I/O                      |+|-${RED} 88 ${BLACK} WHICH SEG. HAVE TOP LOGICAL I/O - PHYSICAL I/O |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK} VERIFY DBLINKS & FOLDERS INFO                     |+|+${RED} 90 ${BLACK} OWNER X OBJECTS X TYPE X QTD                   |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|+${RED} 91 ${BLACK} IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED      |+|-${RED} 92 ${BLACK} VERIFY UNDO SEGMENTS                           |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK} VERIFY DATAGUARD HEALTH CHECK                     |+|+${RED} 94 ${BLACK} VERIFY ALL SQL STATEMENTS                      |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|+${RED} 95 ${BLACK} CLONE USER COMMANDS [ @ ]                         |+|-${RED} 96 ${BLACK} VERIFY ALL INFOS ABOUT SYSAUX                  |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK} VERIFY ALL INFOS ABOUT I/O & LATENCY              |+|-${RED} 98 ${BLACK} VERIFY MAIN TOP WAIT EVENTS PER WEEK           |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|+${RED} 99 ${BLACK} VERIFY OBJECTS SIZE                               |+|-${RED}  0 ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${RED} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${RED} ${DDATE} ${TTIME} ${BLACK}
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
OPTION=""
read OPTION
clear
case "${OPTION}"
in
#########################################################################################################
1) # "DATABASE VERSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} DATABASE VERSION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_001
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # "VERIFY INSTALLED PATCHES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY INSTALLED PATCHES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_002
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY INSTALLED PATCHES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
${ORACLE_HOME}/OPatch/opatch lsinventory -detail
# ${ORACLE_HOME}/OPatch/opatch lsinventory -detail -jdk $ORACLE_HOME/jdk/ ???
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # "INSTANCE INFORMATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSTANCE INFORMATION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_003
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # "VERIFY DISKS SPACE AND MEMORY (SO)"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DISKS SPACE AND MEMORY (SO) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- DISK SPACE --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
if [ `uname` = "SunOS" ]
then
  disk_space
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- MEMORY --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
/usr/sbin/prtconf | egrep "Memory size:"
elif [ `uname` = "AIX" ]
then
  disk_space
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- MEMORY --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
svmon -G
elif [ `uname` = "Linux" ]
then
hash pydf &> /dev/null
if [ $? -eq 1 ]
then
  disk_space
else
pydf=`which pydf`
fi
if [ -f $pydf ]
then
$pydf
else
  disk_space
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- MEMORY --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
free -m
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
free -g
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- This Operation System is Unknown --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # "UPTIME SERVER + LOAD AVERAGE + OS USERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} UPTIME SERVER + LOAD AVERAGE + OS USERS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_005
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "USERS CONNECTED RIGHT NOW"
w
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # "GENERAL TUNING VIEW"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} GENERAL TUNING VIEW ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_006
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # "DATABASE GROWN ON LASTS MONTHS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} DATABASE GROWN ON LASTS MONTHS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_007_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7b) # "DATABASE GROWN ON LASTS MONTHS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} DATABASE GROWN ON LASTS MONTHS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_007_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # "CONNECTIONS AVARAGE PER HOUR"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CONNECTIONS AVARAGE PER HOUR ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_008_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8b) # "CONNECTIONS AVARAGE PER HOUR"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CONNECTIONS AVARAGE PER HOUR ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_008_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # "TOP 10 DB-CPU ACTIVITY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} TOP 20 DB-CPU ACTIVITY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_009
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # "VERIFY SESSIONS PER MEMORY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY SESSIONS PER MEMORY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_010_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10b) # "VERIFY SESSIONS PER MEMORY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY SESSIONS PER MEMORY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_010_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # "DATABASE SIZE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} DATABASE SIZE ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_011_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11b) # "DATABASE SIZE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} DATABASE SIZE ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_011_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # "VERIFY SESSIONS PER I/O"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} VERIFY SESSIONS PER I/O ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_012_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12b) # "VERIFY SESSIONS PER I/O"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} VERIFY SESSIONS PER I/O ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_012_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # "HIT RATIO THE LASTS 30 DAYS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} HIT RATIO THE LASTS 30 DAYS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_013
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # "VERIFY LONG OPERATIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} VERIFY LONG OPERATIONS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_014_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} INSERT A SQL_ID ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- THE ${RED} ${SQL_ID} ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${BLUE} SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14b) # "VERIFY LONG OPERATIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} VERIFY LONG OPERATIONS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_014_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} INSERT A SQL_ID ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- THE ${RED} ${SQL_ID} ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${BLUE} SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # "LOAD LASTS 1/5/10 MINUTES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} LOAD LASTS 1/5/10 MINUTES ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_015
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # "INVALIDS OBJECTS ( @ )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} INVALIDS OBJECTS ( @ ) ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_016_a
# @?/rdbms/admin/utlrp.sql
# execute dbms_utility.compile_schema('OWNER',false);
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE OWNER OF THE OWNER or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=""
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE VALIDATION IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset -u OWNER
func_dba_val_obj_user
OWNER=""
fi
func_dba_016_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16b) # "INVALIDS OBJECTS ( @ )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} INVALIDS OBJECTS ( @ ) ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_016_b
# @?/rdbms/admin/utlrp.sql
# execute dbms_utility.compile_schema('OWNER',false);
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE OWNER OF THE OWNER or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=""
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE VALIDATION IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset -u OWNER
func_dba_val_obj_user
OWNER=""
fi
func_dba_016_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # "JOBS CONTROL OF THE CLIENT [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} JOBS CONTROL OF THE CLIENT ( @ ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_017_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE JOB or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read JOB
if [ "${JOB}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO JOB SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE SEARCH IS RUNNING --"
JOB=$(echo ${JOB} | tr [a-z] [A-Z])
typeset JOB
func_dba_jobs_db_sched
fi
JOB=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17b) # "JOBS CONTROL OF THE CLIENT [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} JOBS CONTROL OF THE CLIENT ( @ ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_017_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE JOB or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read JOB
if [ "${JOB}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO JOB SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE SEARCH IS RUNNING --"
JOB=$(echo ${JOB} | tr [a-z] [A-Z])
typeset JOB
func_dba_jobs_db_sched
fi
JOB=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # "MATERIALIZEDS VIEWS DISABLEDS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} MATERIALIZEDS VIEWS DISABLEDS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_018
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # "VERIFY RUNNING JOBS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY RUNNING JOBS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_019_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19b) # "VERIFY RUNNING JOBS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY RUNNING JOBS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_019_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # "KILL A RUNNING SESSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} KILL A RUNNING SESSION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_020_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NUMBER OF THE SESSION or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SESSION
if [ "${SESSION}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SESSION SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE PROCESS IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SESSION=$(echo ${SESSION} | tr [a-z] [A-Z])
typeset SESSION
func_dba_kill_session
fi
SESSION=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20b) # "KILL A RUNNING SESSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} KILL A RUNNING SESSION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_020_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NUMBER OF THE SESSION or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SESSION
if [ "${SESSION}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SESSION SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE PROCESS IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SESSION=$(echo ${SESSION} | tr [a-z] [A-Z])
typeset SESSION
func_dba_kill_session
fi
SESSION=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # "VERIFY PROFILE INFORMATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY PROFILE INFORMATION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_021_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21b) # "VERIFY PROFILE INFORMATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY PROFILE INFORMATION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_021_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # "BACKUP STATISTICS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BACKUP STATISTICS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_022_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22b) # "BACKUP STATISTICS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BACKUP STATISTICS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_022_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # "QTD OF ARCHIVES PER HOUR"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} QTD OF ARCHIVES PER HOUR ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_023
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # "LAST FILE OF LAST BACKUP ARCH - RMAN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} LAST FILE OF LAST BACKUP ARCH - RMAN ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_024
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # "LAST FILE OF LAST BACKUP FULL - RMAN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} LAST FILE OF LAST BACKUP FULL - RMAN ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_025
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # "ARCHIVES GENERATED PER DAY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} ARCHIVES GENERATED PER DAY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_026
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # "BACKUP LOG OF LAST BACKUP FULL - RMAN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BACKUP LOG OF LAST BACKUP FULL - RMAN ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_027
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # "BACKUP LOG OF LASTS ARCHIVES - RMAN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BACKUP LOG OF LASTS ARCHIVES - RMAN ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_028
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # "ERRORS ON ALERT LOG FILE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} ERRORS ON ALERT LOG FILE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_029
#########################################################################################################
###tail -1000 ${ALERTLOG} | grep ORA- -A3 -B3
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # "OEM ALERT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} OEM ALERT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_030
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # "CAPTURE STATISTICS OF DATA DICTIONARY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CAPTURE STATISTICS OF DATA DICTIONARY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_031
#########################################################################################################
# exec DBMS_STATS.SET_PARAM(AUTOSTATS_TARGET,'ORACLE');
# exec dbms_stats.gather_system_stats();
# exec dbms_stats.gather_system_stats('start');
# exec dbms_stats.gather_system_stats('stop');
# exec dbms_stats.gather_system_stats('interval',60);
# exec DBMS_STATS.GATHER_SCHEMA_STATS ('SYS');
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # "CAPTURE STATISTICS ALL DATABASE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CAPTURE STATISTICS ALL DATABASE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_032
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # "BLOCKING LOCKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BLOCKING LOCKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_033
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # "LOCKED OBJECTS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} LOCKED OBJECTS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_034
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # "BLOCKING LOCKS ( SUMARY )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BLOCKING LOCKS ( SUMARY ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_035
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # "BLOCKING LOCKS ( USER DETAILS )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BLOCKING LOCKS ( USER DETAILS ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_036
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # "BLOCKING LOCKS ( WAITING SQL )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} BLOCKING LOCKS ( WAITING SQL ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_037
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # "LOCKED OBJECTS [ DETAILS ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} LOCKED OBJECTS [ DETAILS ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_038
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # "DML AND DDL LOCKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} DML AND DDL LOCKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_039
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # "DML TABLE LOCKS TIME"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} DML TABLE LOCKS TIME ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_040
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # "VERIFY SESSIONS [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY SESSIONS ( @ ) ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_041_a
#########################################################################################################
# select substr(a.spid,1,9) pid
#   ,    substr(b.sid,1,5) sid
#   ,    substr(b.serial#,1,5) ser#
#   ,    substr(b.machine,1,6) box
#   ,    substr(b.username,1,10) username
#   ,    b.server
#   ,    substr(b.osuser,1,8) os_user
#   ,    substr(b.program,1,30) program
# from v$session b, v$process a
# where b.paddr = a.addr
# and type='USER'
# order by spid;
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- ENTER THE NAME OF THE SCHEMA or ENTER TO FINISH -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=""
read SCHEMA
if [ "${SCHEMA}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- NO SCHEMA SELECTED -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- WAIT A MOMENT PLEASE, THE SEARCH IS RUNNING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=$(echo ${SCHEMA} | tr [a-z] [A-Z])
typeset SCHEMA
func_dba_verify_sessions
fi
SCHEMA=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41b) # "VERIFY SESSIONS [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY SESSIONS ( @ ) ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_041_b
#########################################################################################################
# select substr(a.spid,1,9) pid
#   ,    substr(b.sid,1,5) sid
#   ,    substr(b.serial#,1,5) ser#
#   ,    substr(b.machine,1,6) box
#   ,    substr(b.username,1,10) username
#   ,    b.server
#   ,    substr(b.osuser,1,8) os_user
#   ,    substr(b.program,1,30) program
# from v$session b, v$process a
# where b.paddr = a.addr
# and type='USER'
# order by spid;
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- ENTER THE NAME OF THE SCHEMA or ENTER TO FINISH -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=""
read SCHEMA
if [ "${SCHEMA}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- NO SCHEMA SELECTED -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- WAIT A MOMENT PLEASE, THE SEARCH IS RUNNING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=$(echo ${SCHEMA} | tr [a-z] [A-Z])
typeset SCHEMA
func_dba_verify_sessions
fi
SCHEMA=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # "TOP 20 DATABASE SESSIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} TOP 20 DATABASE SESSIONS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_042_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} THE SQL_ID WAS NOT INSERTED ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${BLUE} THE SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42b) # "TOP 20 DATABASE SESSIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} TOP 20 DATABASE SESSIONS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_042_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} THE SQL_ID WAS NOT INSERTED ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${BLUE} THE SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # "VERIFY TABLESPACES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY TABLESPACES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_043_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43b) # "VERIFY TABLESPACES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY TABLESPACES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_043_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # "VERIFY ASM"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY ASM ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ "${GRID_HOME}" = "" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} " -- THE GRID_HOME WAS NOT CONFIGURED YET OR YOU ARE NOT USING GRID INFRASTRUCTURE --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_044
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # "VERIFY STATISTICS - TABLES [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY STATISTICS - TABLES ( @ ) ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_045_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE SCHEMA or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SCHEMA
if [ "${SCHEMA}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SCHEMA SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE JOB IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=$(echo ${SCHEMA} | tr [a-z] [A-Z])
typeset SCHEMA
func_dba_verify_statistics_table
fi
SCHEMA=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # "VERIFY STATISTICS - TABLES [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY STATISTICS - TABLES ( @ ) ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_045_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE SCHEMA or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SCHEMA
if [ "${SCHEMA}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SCHEMA SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE JOB IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=$(echo ${SCHEMA} | tr [a-z] [A-Z])
typeset SCHEMA
func_dba_verify_statistics_table
fi
SCHEMA=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46b) # "VERIFY STATISTICS - INDEXES [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY STATISTICS - INDEXES ( @ ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_046_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE SCHEMA or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SCHEMA
if [ "${SCHEMA}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SCHEMA SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE JOB IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=$(echo ${SCHEMA} | tr [a-z] [A-Z])
typeset SCHEMA
func_dba_verify_statistics_index
fi
SCHEMA=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # "CAPTURE STATISTICS - OWNER [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CAPTURE STATISTICS - OWNER ( @ ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
OWNER=""
func_dba_047
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE OWNER  or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE STATISTICS COLLECT IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset -u OWNER
func_dba_collect_owner_statistic
fi
OWNER=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # "VALIDATE OBJECTS FROM ONE OWNER [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VALIDATE OBJECTS FROM ONE OWNER ( @ ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
OWNER=""
func_dba_048
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE OWNER or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE VALIDATION IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset -u OWNER
func_dba_compile_schema
fi
OWNER=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # "VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS ( @ )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS ( @ ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_049_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE OWNER OF THE OWNER or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE VALIDATION IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset -u OWNER
func_dba_val_obj_user
fi
OWNER=""
func_dba_016_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49b) # "VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS ( @ )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY TABLES SIZE, VALIDATE OBJ - OWNERS ( @ ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_049_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE OWNER OF THE OWNER or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE VALIDATION IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset -u OWNER
func_dba_val_obj_user
fi
OWNER=""
func_dba_016_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # "VERIFY INSTANCE CHARACTERSET"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY INSTANCE CHARACTERSET ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_050
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # "CACHE HIT RATIO (GOOD: > 90%)"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CACHE HIT RATIO (GOOD: > 90%) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_051
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # "VERIFY INSTANCE INSTALLED PRODUCTS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY INSTANCE INSTALLED PRODUCTS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_052
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # "INSTANCE PROPERTIES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSTANCE PROPERTIES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_053
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # "INSTANCE OPTIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSTANCE OPTIONS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_054
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # "INSTANCE DIFERENTS PARAMETERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSTANCE DIFERENTS PARAMETERS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_055
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # "INSTANCE MODIFICABLES PARAMETERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSTANCE MODIFICABLES PARAMETERS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_056
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # "VERIFY DEAD LOCKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DEAD LOCKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_057_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NUMBER OF THE SESSION or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SESSION
if [ "${SESSION}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SESSION SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE PROCESS IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_dba_kill_session
fi
SESSION=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57b) # "VERIFY DEAD LOCKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DEAD LOCKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_057_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NUMBER OF THE SESSION or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SESSION
if [ "${SESSION}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SESSION SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE PROCESS IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_dba_kill_session
fi
SESSION=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # "VERIFY SESSIONS PER I/O CONSUME"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY SESSIONS PER I/O CONSUME ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_058_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58b) # "VERIFY SESSIONS PER I/O CONSUME"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY SESSIONS PER I/O CONSUME ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_058_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # "VERIFY FREE SEGMENTS ON DATAFILES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY FREE SEGMENTS ON DATAFILES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_059
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # "VERIFY WHICH DATAFILES CAN BE RESIZED"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY WHICH DATAFILES CAN BE RESIZED ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_060_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE DATAFILE TO RESIZE or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
DATAFILE=""
read DATAFILE
if [ "${DATAFILE}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO DATAFILE SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE JOB IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_dba_resize_datafile
fi
DATAFILE=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60b) # "VERIFY WHICH DATAFILES CAN BE RESIZED"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY WHICH DATAFILES CAN BE RESIZED ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_060_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE DATAFILE TO RESIZE or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
DATAFILE=""
read DATAFILE
if [ "${DATAFILE}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO DATAFILE SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE JOB IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_dba_resize_datafile
fi
DATAFILE=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # "VERIFY RECYCLEBIN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY RECYCLEBIN ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_061
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # "CLEAR REYICLEBIN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CLEAR REYICLEBIN ${BLACK}"
func_load 100
func_dba_062
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # "VERIFY DATABASE SESSIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DATABASE SESSIONS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_063_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63b) # "VERIFY DATABASE SESSIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DATABASE SESSIONS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_063_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # "VERIFY ACTIVES SESSIONS PER OWNER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ACTIVES SESSIONS PER OWNER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_064_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64b) # "VERIFY ACTIVES SESSIONS PER OWNER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ACTIVES SESSIONS PER OWNER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_064_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # "UNLOCKING A USUER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} UNLOCKING A USUER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_065
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE OWNER or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=""
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE JOB IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset OWNER
func_dba_unlock_user
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_dba_verify_status_user
fi
OWNER=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # "LOCKING A USER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} LOCKING A USER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_066
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE OWNER or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
OWNER=""
read OWNER
if [ "${OWNER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO OWNER SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE JOB IS RUNNING --"
OWNER=$(echo ${OWNER} | tr [a-z] [A-Z])
typeset OWNER
func_dba_lock_user
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_dba_verify_status_user
fi
OWNER=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # "REDO GROUPS INFORMATIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} REDO GROUPS INFORMATIONS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_067
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # "VERIFY ALL GRID INFRASTRUTURE SERVICES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL GRID INFRASTRUTURE SERVICES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_os_068
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68b) # "VERIFY ALL GRID INFRASTRUTURE SERVICES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL GRID INFRASTRUTURE SERVICES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_os_068_b
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # "VERIFY SPACE OF FLASH RECOVERY AREA"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY SPACE OF FLASH RECOVERY AREA ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_069_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # "VERIFY SPACE OF FLASH RECOVERY AREA"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY SPACE OF FLASH RECOVERY AREA ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_069_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # "VERIFY PLUGGABLE DATABASES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY PLUGGABLE DATABASES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_070
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # "VERIFY CONTROLFILES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY CONTROLFILES ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_071
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # "VERIFY DATAGUARD STATUS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- VERIFY DATAGUARD STATUS -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_072
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # "VERIFY DATAGUARD PARAMETERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- VERIFY DATAGUARD PARAMETERS -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_073
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # "DATAGUARD STATUS APPLYING"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} DATAGUARD STATUS APPLYING ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_074
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # "VERIFY CONSUME PER CPU"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY CONSUME PER CPU ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_075
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # "QUICK TUNE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} QUICK TUNE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_076
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # "VERIFY RECOMENDATIONS TUNING TOP 20"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY RECOMENDATIONS TUNING TOP 20 ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_077
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- THE ${RED} SQL_ID ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "${BLUE} SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # "VERIFY TOP 20 TUNING HISTORY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY TOP 20 TUNING HISTORY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_078_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- THE ${RED} SQL_ID ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "${BLUE} SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78b) # "VERIFY TOP 20 TUNING HISTORY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY TOP 20 TUNING HISTORY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_078_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- THE ${RED} SQL_ID ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "${BLUE} SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # "VERIFY BACKGROUND PROCESSESS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY BACKGROUND PROCESSESS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_079
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # "TOP 100 QUERY RECOMENDATIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} TOP 100 QUERY RECOMENDATIONS ${BLACK}"
func_load 100
echo ${ECHO} " -- TO USE THIS FEATURE; YOU HAVE TO HAVE TO INSTALL THIS PACKAGES --"
echo ${ECHO} "### yum -y install perl perl-DBI perl-ExtUtils-MakeMaker perl-CPAN perl-CGI perl-Apache"
echo ${ECHO} "### export HTTP_PROXY and http_proxy"
echo ${ECHO} "### perl -MCPAN -e shell"
echo ${ECHO} "### get CGI"
echo ${ECHO} "### get DBD::Oracle"
echo ${ECHO} "### get DBI::Oracle"
echo ${ECHO} "### install CGI"
echo ${ECHO} "### install DBD::Oracle"
echo ${ECHO} "### install DBI::Oracle"
echo ${ECHO} "### install Bundle::CPAN"
echo ${ECHO} "### upgrade"
echo ${ECHO} "### TEST: $ORACLE_HOME/perl/bin/perl -le 'use DBD::Oracle; print $DBD::Oracle::VERSION'"
echo ${ECHO} "### TEST: $ORACLE_HOME/perl/bin/perl -le 'use DBI::Oracle; print $DBI::Oracle::VERSION'"
echo ${ECHO} " -- AFTER THIS PACKAGE INSTALL, THEN YOU CAN USE THIS FEATURE WITHOUT PROBLEMS --"
echo ${ECHO} " -- DIGITE THE ${RED} SYS ${BLACK} PASSWORD TO EXECUTE THE PERL SCRIPT --"
SYS_PASS=""
read -s SYS_PASS
if [ "${SYS_PASS}" = "" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} " -- THE ${RED} SYS ${BLACK} PASSWORD IS NOT DIGITED --"
  echo ${ECHO} " -- TRY AGAIN --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_080
SYS_PASS=""
fi
#
# HOSTNAME SERVICE PORT USERNAME PASSWORD SCHEMA AUTOIMPLEMENT TOPSQL
#
#########################################################################################################
##
##
# set long 9999;
# DECLARE RET_VAL VARCHAR2(4000);
# BEGIN
# RET_VAL := DBMS_SQLTUNE.CREATE_TUNING_TASK (
#     SQL_ID      => 'b1f6gxnskcy5q'
#   , SCOPE       => DBMS_SQLTUNE.SCOPE_COMPREHENSIVE
#   , TIME_LIMIT  => 60
#   , TASK_NAME   => 'Ribas Tuning Task'
#   , DESCRIPTION => 'Ribas Tuning Task');
# END;
# /
# BEGIN DBMS_SQLTUNE.EXECUTE_TUNING_TASK('Ribas Tuning Task'); END;
# /
# select DBMS_SQLTUNE.REPORT_TUNING_TASK('Ribas Tuning Task') RECOMMENTATION FROM DUAL;
# /
# select DBMS_SQLTUNE.SCRIPT_TUNING_TASK('Ribas Tuning Task') RECOMMENTATION FROM DUAL;
# /
# BEGIN DBMS_SQLTUNE.DROP_TUNING_TASK('Ribas Tuning Task'); END;
# /
##
##
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # "VERIFY GOLDENGATE CONFIGURATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY GOLDENGATE CONFIGURATION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_081
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # "VERIFY GOLDEN GATE STATUS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY GOLDENGATE STATUS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_082
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # "VERIFY DINAMICS PARAMETERS ( SPFILE )"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DINAMICS PARAMETERS ( SPFILE ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_083
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # "VERIFY DBA FEATURES USAGE STATISTICS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DBA FEATURES USAGE STATISTICS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_084
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # "CALCULATE HUGE PAGES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CALCULATE HUGE PAGES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_085
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # "VERIFY DBA HIGH WATER MARK STATISTICS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DBA HIGH WATER MARK STATISTICS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_086
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # "GLOBAL INFORMATION ABOUT I/O"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} GLOBAL INFORMATION ABOUT I/O ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_087
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- THE ${RED} SQL_ID ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "${BLUE} SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # "WHICH SEGMENTS HAVE TOP LOGICAL I/O & PHYSICAL I/O"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} WHICH SEGMENTS HAVE TOP LOGICAL I/O & PHYSICAL I/O ( LIO = LOGICAL I/O | PIO = PHYSICAL I/O ) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_088
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # "VERIFY DBLINKS & FOLDERS INFO"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DBLINKS & FOLDERS INFO ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_089
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # "OWNER X OBJECTS X TYPE X QTD"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} OWNER X OBJECTS X TYPE X QTD ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_090_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90b) # "OWNER X OBJECTS X TYPE X QTD"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} OWNER X OBJECTS X TYPE X QTD ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_090_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # "IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_091_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91b) # "IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} IDENTIFYING WHEN A PASSWORD WAS LAST CHANGED ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_091_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # "VERIFY UNDO SEGMENTS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY UNDO SEGMENTS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_092
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # "VERIFY DATAGUARD HEALTH CHECK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY DATAGUARD HEALTH CHECK ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_093
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # VERIFY ALL SQL STATEMENTS
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL SQL STATEMENTS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_094_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94b) # VERIFY ALL SQL STATEMENTS
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL SQL STATEMENTS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_094_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # "CLONE USER COMMANDS [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CLONE USER COMMANDS [ @ ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_095_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE ${RED} USERNAME ${BLACK} ORIGINAL and ${RED} NEW USERNAME ${BLACK} or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
FROM_USER=""
DEST_USER=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} ENTER ORIGINAL USERNAME: ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read FROM_USER
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} ENTER NEW USERNAME: ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read DEST_USER
if [ "${FROM_USER}" = "" ] || [ "${DEST_USER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOU DID NOT SELECTED ANY USERNAME --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_clone_user
FROM_USER=""
DEST_USER=""
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95b) # "CLONE USER COMMANDS [ @ ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CLONE USER COMMANDS [ @ ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_095_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE ${RED} USERNAME ${BLACK} ORIGINAL and ${RED} NEW USERNAME ${BLACK} or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
FROM_USER=""
DEST_USER=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} ENTER ORIGINAL USERNAME: ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read FROM_USER
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} ENTER NEW USERNAME: ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read DEST_USER
if [ "${FROM_USER}" = "" ] || [ "${DEST_USER}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOU DID NOT SELECTED ANY USERNAME --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_clone_user
FROM_USER=""
DEST_USER=""
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # "VERIFY ALL INFOS ABOUT SYSAUX"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL INFOS ABOUT SYSAUX ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_096
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # "VERIFY ALL INFOS ABOUT I/O & LATENCY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL INFOS ABOUT I/O & LATENCY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_097
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # "VERIFY MAIN TOP WAIT EVENTS PER WEEK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY MAIN TOP WAIT EVENTS PER WEEK ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_098
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # "VERIFY SCHEMAS SIZE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY SCHEMAS SIZE ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_099_a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99b) # "VERIFY SCHEMAS SIZE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY SCHEMAS SIZE ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_099_b
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
general) # "GENERAL INFORMATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} GENERAL INFORMATION ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_general_infos
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
services) # "VERIFY SERVICES STATUS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY SERVICES STATUS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} -- Oracle Database(s) Status on: ${BLUE} `hostname` ${BLACK} ${GREEN} ${OS} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
db_inst=`egrep -i ":Y|:N" ${ORATAB} | cut -d":" -f1 | grep -v "\#" | grep -v "\*"`
pslist="`ps -ef | grep pmon | grep -v grep`"
{
  for i in ${db_inst}
do
  echo ${ECHO} "${pslist}" | grep  "ora_pmon_$i" > /dev/null
if (( $? ))
  then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} -- Oracle Instance/Agent: ${BLUE} $i: ${BLACK} ${RED} Down ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} -- Oracle Instance/Agent: ${BLUE} $i: ${BLACK} ${GREEN} Up ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
done
}
if [ ${ISRACDB} = "TRUE" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} -- Oracle Cluster Status on: ${BLUE} `hostname` ${BLACK} ${GREEN} ${OS} ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  crsctl stat res -t
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} -- NO Oracle Cluster Configured on: ${BLACK} ${BLUE} `hostname` ${BLACK} ${GREEN} ${OS} ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} -- Oracle Listener(s) Status on: ${BLACK} ${BLUE} `hostname` ${BLACK} ${GREEN} ${OS} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
lsnrctl status | grep Service

if [ ${ISDGDB} = "TRUE" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  dgmgrl -silent / "show configuration verbose"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  dgmgrl -silent / "show configuration" | grep "Configuration - " | awk '{print "Configuration Name: " $3}'
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  # dgmgrl -silent / "show configuration" | awk '/Configuration Status/ { getline; print "Configuration Status: " $1; }'
  DGStatus=`dgmgrl -silent / "show configuration" | awk '/Configuration Status/ { getline; print $1; }'`
  if [ "${DGStatus}" = "SUCCESS" ]
  then
    echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Configuration Status: ${BLACK} ${GREEN} ${DGStatus} ${BLACK}"
  else
    echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Configuration Status: ${BLACK} ${RED} ${DGStatus} ${BLACK}"
  fi
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  if [ ${DBVERSION} = "12" ]
  then
    dgmgrl -silent / "show configuration" | awk '/Members:/ { getline; while ( NF > 0 ) { printf "Database Name: %s - %s %s \n",$1,$3,$4; getline; } }'
  else
    dgmgrl -silent / "show configuration" | awk '/Databases:/ { getline; while ( NF > 0 ) { printf "Database Name: %s - %s %s \n",$1,$3,$4; getline; } }'
  fi
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  if [ ${DBVERSION} = "12" ]
  then
    dgmgrl -silent / "show configuration" | awk '/Members:/ { getline; while ( NF > 0 ) { print "Database Name: ",$1; getline; } }'
  else
    dgmgrl -silent / "show configuration" | awk '/Databases:/ { getline; while ( NF > 0 ) { print "Database Name: ",$1; getline; } }'
  fi
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  dgmgrl -silent / "show configuration" | awk '/Fast-Start Failover/'
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  dgmgrl -silent / "show configuration" | awk '/Protection Mode/ {print "Protection Mode: " $3}'
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} `date +%d\/%m\/%Y\ %H\:%M\:%S` ${BLACK} ${BLUE} Hostname: ${BLACK} ${GREEN} `hostname` ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' serveroutput on feed off
DECLARE
v_spfile VARCHAR(10);
BEGIN
  dbms_output.put(chr(10));
  dbms_output.put_line('Database');
  dbms_output.put(chr(10));
  select DECODE(COUNT(*),0,'PFILE','SPFILE') INTO v_spfile FROM v\$spparameter WHERE isspecified != 'FALSE';
for lst in ( select distinct dbid, db_unique_name, created, resetlogs_time, log_mode FROM gv\$database)
loop
  dbms_output.put_line('DBID.............: ' || lst.dbid);
  dbms_output.put_line('Unique Name......: ' || lst.db_unique_name);
  dbms_output.put_line('DB Created.......: ' || lst.created);
  dbms_output.put_line('Last ResetLogs...: ' || lst.resetlogs_time);
  dbms_output.put_line('Archive Mode.....: ' || lst.log_mode);
end loop;
  dbms_output.put_line('Inicialized with.: ' || v_spfile);
  dbms_output.put_line('.........................................');
for lst in (select THREAD#, INSTANCE_NUMBER, INSTANCE_NAME, VERSION, STATUS, STARTUP_TIME, HOST_NAME, LOGINS from gv\$instance order by INSTANCE_NUMBER)
loop
  dbms_output.put_line('Instance ID......: ' || lst.instance_number);
  dbms_output.put_line('Instance name....: ' || lst.instance_name);
  dbms_output.put_line('DB Version.......: ' || lst.version);
  dbms_output.put_line('Status...........: ' || lst.status);
  dbms_output.put_line('Logins...........: ' || lst.logins);
  dbms_output.put_line('Hostname.........: ' || lst.host_name);
  dbms_output.put_line('Last Startup.....: ' || lst.startup_time);
  dbms_output.put_line('.........................................');
end loop;
for lst in (select * from database_properties)
loop
if lst.property_name = 'DEFAULT_TEMP_TABLESPACE' then
  dbms_output.put_line('Temp default.....: ' || lst.property_value);
end if;
end loop;
for lst in (select global_name from global_name)
loop
  dbms_output.put_line('Global name......: ' || lst.global_name);
end loop;
for lst in (select distinct ((length(addr)*4)||'-Bits') as version FROM v\$process)
loop
  dbms_output.put_line('OS Version.......: ' || lst.version);
end loop;
for lst in (select distinct PLATFORM_NAME from gv\$database)
loop
  dbms_output.put_line('Plataforma.......: ' || lst.platform_name);
end loop;
  dbms_output.put_line('.........................................');
  dbms_output.put_line('Database Version.:');
for lst in (select min(inst_id) as inst_id, substr(banner,1,60) version from gv\$version group by substr(banner,1,60) order by substr(banner,1,60))
loop
  dbms_output.put_line('.................: ' || lst.version);
end loop;
  dbms_output.put_line('.........................................');
  dbms_output.put_line('Database Properties.:');
for lst in (select RPAD(property_name,30,'.') as property_name, property_value from database_properties order by property_name)
loop
  dbms_output.put_line(lst.property_name || ': ' || lst.property_value);
end loop;
end;
/
set feed on
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exaasmdu) # "Show Exadata ASM DU"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata ASM DU ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_asmdu
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exacellstatus) # "Show Exadata Cell Server Status"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata Cell Server Status ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_cell_status
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exahowsmart) # "Show Exadata How Smart"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata How Smart ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_how_smart
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exaracklayout) # "Show Exadata Rack Layout"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata Rack Layout ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_rack_layout
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
examanyracklayout) # "Show Exadata Many Rack Layout"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata Many Rack Layout ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_many_rack_layout
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
hugepages) # "Show Huge Pages "
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Huge Pages ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_set_hugepages
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exaversion) # "Show Exadata Version"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata Version ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_version
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exalspatches) # "Show Exadata LS Patches"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata LS Patches ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_lspatches
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
examanylspatches) # "Show Exadata Many LS Patches"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata Many LS Patches ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_many_lspatches
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exanbfiles) # "Show Exadata NB Files"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata NB Files ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_nbfiles
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exaracstatus) # "Show Exadata RAC Status"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata RAC Status ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_rac_status
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exaracmonitor) # "Show Exadata RAC Monitor"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata RAC Monitor ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_rac_monitor
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exaracalldb) # "Show Exadata RAC on All DBs"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata RAC on All DBs ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_rac_on_all_db
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
exaredeftab) # "Show Exadata Redefinition OnLine Table"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Exadata Redefinition OnLine Table${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_exa_redef_online_table
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
jobs) # "Show All Submited RDBMS Jobs"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show All Submited RDBMS Jobs ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|' numwidth 20 feedback on
col proc format a50    heading 'Proc'
col job  format 99999  heading 'job#'
col subu format a10    heading 'Submiter' trunc
col lsd  format a10    heading 'Last|OK|Date'
col lst  format a5     heading 'Last|OK|Time'
col nrd  format a10    heading 'Next|Run|Date'
col nrt  format a5     heading 'Next|Run|Time'
col fail format 999    heading 'Errors'
col ok   format a2     heading 'OK'
select job
  , log_user as subu
  , what as proc
  , to_char(last_date,'MM/DD/YYYY') as lsd
  , substr(last_sec,1,5) as lst
  , to_char(next_date,'MM/DD/YYYY') as nrd
  , substr(next_sec,1,5) as nrt
  , failures as fail
  , decode(broken,'Y','N','Y') ok
from sys.dba_jobs;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
listener) # "Show All Listener Configurations"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show All Listener Configurations ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${GRID_HOME} != "" ]
then
  srvctl status listener
else
  lsnrctl status
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
rman) # "VERIFY ALL RMAN CONFIGURATIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RMAN CONFIGURATIONS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
rman target / <<EOF
show all;
list incarnation of database;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
dnfs) # "Show All DNFS Information"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show All DNFS Information ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${DBVERSION} -ge "12" ]
then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' serveroutput on feed off
prompt ##############################################################
prompt # Displays information about the NFS servers accessed by Direct NFS
prompt ##############################################################
set pages 700 lines 700 timing on colsep '|'
col svrname for a50
col dirname for a50
col nfsversion for a10
select id
  , svrname
  , dirname
  , mntport
  , nfsport
  , nfsversion
  , wtmax
  , rtmax
  , con_id
  , rdmaenable
  , rdmaport
from v\$dnfs_servers
order by 1,2;
prompt
prompt ##############################################################
prompt # Displays information about the Oracle files opened using Direct NFS
prompt ##############################################################
column "Size_MB" format 9g999g999g990 heading 'Size_MB'
column "Size_GB" format 9g999g999g990 heading 'Size_GB'
col filename for a100
select filename
  , filesize/1024/1024 as Size_MB
  , filesize/1024/1024/1024 as Size_GB
  , pnum
  , svr_id
  , con_id
from v\$dnfs_files
order by 1;
prompt
prompt ##############################################################
prompt # Displays information about the network connections (channels) open to the NFS servers
prompt ##############################################################
col svrname for a40
col path for a40
col local for a15
select PNUM
  , SVRNAME
  , PATH
  , LOCAL
  , CH_ID
  , SVR_ID
  , SENDS
  , RECVS
  , PINGS
  , CON_ID
  , RDMA
  , RDMA_CREDITS
  , ACTIVE_SPEED
  , CURRENT_FMR
from v\$dnfs_channels
order by 1,2,3;
quit;
EOF
elif [ ${DBVERSION} -ge "11" ]
then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|' serveroutput on feed off
prompt ##############################################################
prompt # Displays information about the NFS servers accessed by Direct NFS
prompt ##############################################################
set pages 700 lines 700 timing on colsep '|'
col svrname for a50
col dirname for a50
col nfsversion for a10
select id
  , svrname
  , dirname
  , mntport
  , nfsport
  , wtmax
  , rtmax
from v\$dnfs_servers
order by 1,2;
prompt
prompt ##############################################################
prompt # Displays information about the Oracle files opened using Direct NFS
prompt ##############################################################
column "Size_MB" format 9g999g999g990 heading 'Size_MB'
column "Size_GB" format 9g999g999g990 heading 'Size_GB'
col filename for a100
select filename
  , filesize/1024/1024 as Size_MB
  , filesize/1024/1024/1024 as Size_GB
  , pnum
  , svr_id
from v\$dnfs_files
order by 1;
prompt
prompt ##############################################################
prompt # Displays information about the network connections (channels) open to the NFS servers
prompt ##############################################################
col svrname for a40
col path for a40
col local for a15
select PNUM
  , SVRNAME
  , PATH
  , LOCAL
  , CH_ID
  , SVR_ID
  , SENDS
  , RECVS
  , PINGS
  , RECO
from v\$dnfs_channels
order by 1,2,3;
prompt
prompt ##############################################################
prompt # Displays information about Statistics of the different NFS Operation
prompt ##############################################################
select * from v\$dnfs_stats;
quit;
EOF
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- THIS OPTION IS NOT AVAILABLE ON THIS DATABASE --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
#########################################################################################################
# v$dnfs_stats - Displays statistics of the different NFS operations issued by Direct NFS (dNFS does not expose statistics per mount point, but rather per process).
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
dgstatus) # "VERIFY ALL DATAGUARD BROKEN CONFIGURATIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL DATAGUARD BROKEN CONFIGURATIONS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${ISDGDB} = "TRUE" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  dgmgrl -silent / "show configuration verbose"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo "DATAGUARD STATUS: " `dgmgrl -silent / "show configuration verbose" | awk '{ print $1 }' | egrep -i "SUCCESS|WARNING|ERROR"`
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo "DATAGUARD VALIDATE NETWORK CONFIGURATION:"
  dgmgrl -silent / "validate network configuration for all;"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo "DATAGUARD VALIDATE STATIC CONNECT IDENTIFIER:"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  dgmgrl -silent / "validate static connect identifier for all;"
  for DG in `dgmgrl -silent / "show configuration" | egrep -i "Primary database|Physical standby database|Logical standby database|Snapshot standby database" | awk '{ print $1 }'`
  do
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
    dgmgrl -silent / "SHOW DATABASE '${DG}';"
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
    echo "DATAGUARD DATABASE $DG:" `dgmgrl -silent / "SHOW DATABASE '$DG';" | awk '{ print $1 }' | egrep -i "SUCCESS|WARNING|ERROR"`
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'logxptmode';"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'StatusReport';"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'StandbyFileManagement';"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'InconsistentProperties';"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'LogArchiveMaxProcesses';"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'InconsistentLogXptProps';"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'LogArchiveMinSucceedDest';"
    dgmgrl -silent / "SHOW DATABASE '${DG}' 'TransportDisconnectedThreshold';"
    echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  done
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} " -- YOUR ENVIRONMENT DO NOT HAVE A DATAGUARD CONFIGURED --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
#########################################################################################################
# dgmgrl -silent / "show configuration" | egrep -i "Primary database|Physical standby database" | awk '{ print $1 }'
# SHOW DATABASE 'ccbp12' 'InconsistentProperties';
# SHOW DATABASE 'ccbp1' 'InconsistentProperties';
# SHOW DATABASE 'ccbp11' 'InconsistentProperties';
# SHOW DATABASE 'ccbp12' 'InconsistentLogXptProps';
# SHOW DATABASE 'ccbp1' 'InconsistentLogXptProps';
# SHOW DATABASE 'ccbp11' 'InconsistentLogXptProps';
# SHOW DATABASE 'ccbp12' 'StatusReport';
# SHOW DATABASE 'ccbp1' 'StatusReport';
# SHOW DATABASE 'ccbp11' 'StatusReport';
# SHOW OBSERVER; # on 12.2
# select * FROM v$dataguard_stats;
# ALTER SESSION SET nls_date_format='dd/mm/yyyy hh24:mi:ss';
# SET lines 500 pages 500
# col METRIC_NAME for a40
# col METRIC_UNIT for a40
# select * FROM (select * FROM DBA_HIST_SYSMETRIC_HISTORY  WHERE metric_name='Redo Generated Per Sec' ORDER BY snap_id DESC) WHERE rownum <= 10;
# select dest_id, status, database_mode, recovery_mode FROM v$archive_dest_status WHERE status <> 'INACTIVE';
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
kernel) # "VERIFY KERNEL PARAMETERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY KERNEL PARAMETERS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ `uname` = "SunOS" ]
then
  echo ${ECHO} "Solaris"
elif [ `uname` = "AIX" ]
then
  echo ${ECHO} "AIX"
elif [ `uname` = "Linux" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ACTUAL KERNEL PARAMETERS CONFIGURATION --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
cat /etc/sysctl.conf
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NEW KERNEL PARAMETERS CONFIGURATION ${RED} RECOMENDED ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
mem=$(free | grep Mem | awk '{print$2}')
totmem=$(echo "${mem}*1024" | bc)
huge=$(grep Hugepagesize /proc/meminfo | awk '{print $2}')
max=$(echo "${totmem}*75/100" | bc)
all=$(echo "${max}/${huge}" | bc)
echo ${ECHO} "echo \"# ORACLE SINGLE/RAC/RAC_ONE_NODE PARAMETERS\"                            >> /etc/sysctl.conf"
echo ${ECHO} "echo \"#\"                                                                      >> /etc/sysctl.comf"
echo ${ECHO} "echo \"fs.aio-max-nr = 1048576\"                                                >> /etc/sysctl.conf"
echo ${ECHO} "echo \"fs.file-max = 6815744\"                                                  >> /etc/sysctl.conf"
echo ${ECHO} "echo \"vm.swappiness = 0\"                                                      >> /etc/sysctl.conf"
echo ${ECHO} "echo \"vm.dirty_background_ratio = 3\"                                          >> /etc/sysctl.conf"
echo ${ECHO} "echo \"vm.dirty_ratio = 15\"                                                    >> /etc/sysctl.conf"
echo ${ECHO} "echo \"vm.dirty_expire_centisecs = 500\"                                        >> /etc/sysctl.conf"
echo ${ECHO} "echo \"vm.dirty_writeback_centisecs = 100\"                                     >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.core.rmem_default = 262144\"                                         >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.core.rmem_max = 4194304\"                                            >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.core.wmem_default = 262144\"                                         >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.core.wmem_max = 4194304\"                                            >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.tcp_rmem = 4096 262144 4194304\"                                >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.tcp_wmem = 4096 262144 4194304\"                                >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.ip_local_port_range = 9000 65500\"                              >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.tcp_keepalive_time = 30\"                                       >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.tcp_keepalive_intvl = 60\"                                      >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.tcp_keepalive_probes = 9\"                                      >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.tcp_retries2 = 3\"                                              >> /etc/sysctl.conf"
echo ${ECHO} "echo \"net.ipv4.tcp_syn_retries = 2\"                                           >> /etc/sysctl.conf"
echo ${ECHO} "echo \"kernel.sem = 250 32000 100 128\"                                         >> /etc/sysctl.conf"
echo ${ECHO} "echo \"#kernel.panic_on_oops = 1\"                                              >> /etc/sysctl.conf"
echo ${ECHO} "echo \"kernel.shmmax = $max\"                                                   >> /etc/sysctl.conf"
echo ${ECHO} "echo \"kernel.shmmni = 4096\"                                                   >> /etc/sysctl.conf"
echo ${ECHO} "echo \"kernel.shmall = $all\"                                                   >> /etc/sysctl.conf"
echo ${ECHO} "echo \"#vm.nr_hugepages = 32768\"                                               >> /etc/sysctl.conf"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- JUST COPY THESE INFO AND PAST WITH ROOT USER -- "
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- This Operation System is Unknown --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
dmesg) # "Show All Informations of Operation System DMESG"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show All Informations of Operation System DMESG ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ `uname` = "SunOS" ]
then
  dmesg | egrep -i 'error|critical|failed'
elif [ `uname` = "AIX" ]
then
  dmesg | egrep -i --color 'error|critical|failed'
elif [ `uname` = "Linux" ]
then
  dmesg | egrep -i --color 'error|critical|failed'
elif [ `uname` = "Darwin" ]
then
  dmesg | egrep -i --color 'error|critical|failed'
else
  dmesg | egrep -i --color 'error|critical|failed'
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
corrupted) # "Show All Corrupted Objects"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show All Corrupted Objects ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_corrupted
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
cron) # "VERIFY ALL CRONTAB CONFIGURATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL CRONTAB CONFIGURATION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
crontab -l
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
sqlid) # "VERIFY ALL SQL ID's STATEMENTS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} VERIFY ALL SQL ID's STATEMENTS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
prompt ##############################################################
prompt # Session related Queries                                    #
prompt ##############################################################
prompt # Last/Latest Running SQL                                    #
prompt ##############################################################
set pages 50000 lines 32767 timing on feedback on echo on heading on verify on colsep '|'
col "Last SQL" for a130
select t.inst_id
  , s.username
  , s.sid
  , s.serial#
  , t.sql_id
  , t.sql_text "Last SQL"
FROM gv\$session s, gv\$sqlarea t
WHERE s.sql_address = t.address
AND s.sql_hash_value = t.hash_value;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
prompt ##############################################################
prompt # Session related Queries                                    #
prompt ##############################################################
prompt # Last/Latest Running SQL                                    #
prompt ##############################################################
set pages 50000 lines 32767 timing on colsep '|'
col "Last SQL" for a130
select t.inst_id
  , s.username
  , s.sid
  , s.serial#
  , t.sql_id
  , t.sql_text "Last SQL"
FROM gv\$session s, gv\$sqlarea t
WHERE s.sql_address = t.address
AND s.sql_hash_value = t.hash_value;
quit;
EOF
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- THE ${RED} SQL_ID ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_sql_id
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "${BLUE} SQL_ID: ${BLACK} ${RED} ${SQL_ID} ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
SQL_ID=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
bind) # "Show BIND Variables of a SQL ID"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} Show BIND Variables of a SQL ID ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
sqlplus -s '/ as sysdba' <<EOF
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
select sql_id
  , b. LAST_CAPTURED
  , t.sql_text sql_text
  , b.HASH_VALUE
  , b.name bind_name
  , b.value_string bind_value
FROM gv\$sql t
JOIN gv\$sql_bind_capture b  using (sql_id)
WHERE b.value_string is not null
AND sql_id='&sqlid':
quit:
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
### ???
execplan) # "Change The Execution Plan of a SQL ID"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} Change The Execution Plan of a SQL ID ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -s '/ as sysdba' <<EOF
set autotrace on autotrace trace stat autotrace on exp autotrace off
#########################################################################################################
alter session set sql_trace = true;
alter session set sql_trace = false;
#########################################################################################################
exec DBMS_monitor.session_trace_enable ( null, null, true, true );
***your code here***
exec DBMS_monitor.session_trace_disable;
#########################################################################################################
tkprof <trace_file_name> <output_file_name> sort=prsela,exeela,fchela
tkprof <trace_file_name> <output_file_name>
#########################################################################################################
alter session set statistics_level = all;
#########################################################################################################
select * from table(dbms_xplan.display_cursor);
#########################################################################################################
select * from table(dbms_xplan.display_cursor('sql_id', null, 'ALLSTATS LAST'));
#########################################################################################################
select * from table(dbms_xplan.display_awr('sql_id', null, null, 'ALLSTATS LAST'));
#########################################################################################################
select * from dba_sql_plan_baselines;
#########################################################################################################
select dbms_sqltune.report_sql_monitor(sql_id => 'gbgfuyqwht3n4', type => 'TEXT', report_level => 'ALL') as report from dual;
#########################################################################################################
select sample_time
  , session_id
  , sql_id
  , temp_space_allocated
from v\$active_session_history
where sample_time > to_date('12/09/2014 01:16:00','dd/mm/yyyy hh24:mi:ss')
and sample_time < to_date('12/09/2014 01:19:00','dd/mm/yyyy hh24:mi:ss')
and temp_space_allocated > 0;
#########################################################################################################
set lines 155
col execs for 999,999,999
col min_etime for 999,999.99
col max_etime for 999,999.99
col avg_etime for 999,999.999
col avg_lio for 999,999,999.9
col norm_stddev for 999,999.9999
col begin_interval_time for a30
col node for 99999
break on plan_hash_value on startup_time skip 1
select * from (
  select sql_id, sum(execs), min(avg_etime) min_etime, max(avg_etime) max_etime, stddev_etime/min(avg_etime) norm_stddev from (
  select sql_id, plan_hash_value, execs, avg_etime, stddev(avg_etime) over (partition by sql_id) stddev_etime from (
  select sql_id, plan_hash_value, sum(nvl(executions_delta,0)) execs, (sum(elapsed_time_delta)/decode(sum(nvl(executions_delta,0)),0,1,sum(executions_delta))/1000000) avg_etime
-- sum((buffer_gets_delta/decode(nvl(buffer_gets_delta,0),0,1,executions_delta))) avg_lio
from DBA_HIST_SQLSTAT S, DBA_HIST_SNAPSHOT SS
where ss.snap_id = S.snap_id
and ss.instance_number = S.instance_number
and executions_delta > 0
group by sql_id, plan_hash_value))
group by sql_id, stddev_etime)
where norm_stddev > nvl(to_number('&min_stddev'),2)
and max_etime > nvl(to_number('&min_etime'),.1)
order by norm_stddev
/
#########################################################################################################
SDS_sqlid="'SQLID1','SQLID2'"
SDS_hash_values="HASH1,HASH2"
SDS_range=1
#########################################################################################################
set pagesize 0
set feedback off
set linesize 128
set heading off
set echo off
select distinct PLAN_HASH_VALUE
FROM dba_hist_sqlstat q, (select /*+ NO_MERGE */ MIN(snap_id) min_snap, MAX(snap_id) max_snap FROM dba_hist_snapshot ss WHERE ss.begin_interval_time BETWEEN (SYSDATE - $SDS_range) AND SYSDATE) s
WHERE q.snap_id BETWEEN s.min_snap AND s.max_snap
  AND q.sql_id IN ( $SDS_sqlid)
  AND q.plan_hash_value not in ($SDS_hash_values)
/
exit;
EOF
#########################################################################################################
# if [ -z "$SDS_output" ];
# then
#   echo "All, Explain Plan Change for SQLIDs: $SDS_sqlid - No Regards" | mailx -s "Explain Plan Alert Report $SDS_date" $SDS_mail_addr
# else
#   echo "All, Explain Plan Change for SQLIDs: $SDS_sqlid - Yes DBA to investigate. Plan Hash Values: $SDS_output Regards" | mailx -s "Explain Plan Alert Report $SDS_date" $SDS_mail_addr
# fi
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
ddl) # "Show All DDLs"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} Show All DDL's ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pagesize 0 long 90000 timing on feedback off echo off heading on verify on colsep '|'
select DBMS_METADATA.GET_DDL('TABLE','<table_name>','<OWNER>') from DUAL;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 long 90000 timing on feedback off echo off heading on verify on colsep '|'
select DBMS_METADATA.GET_DDL('TABLE','<table_name>','<OWNER>') from DUAL;
quit;
EOF
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
concurrency) # "Show All SQL With Conncurency"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ${RED} Show All SQL With Conncurency ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${DBVERSION} -ge "12" ] && [ ${ISCONTAINERDB} = "TRUE" ]
then
# echo -e "\n${PDB}" | tail +2
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- select YOUR DATABASE [ CDB$ROOT / PDB ] ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
select SET_PDB in ${PDB}
do
  PPDB=${SET_PDB}
  break 1
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOUR DATABASE SELECTED IS: ${RED} ${PPDB} ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set pagesize 0 linesize 32767 feedback off verify off heading off echo off timing off
alter session set container=${PPDB};
prompt ##############################################################
select '# Database: ' || NAME FROM V\$CONTAINERS WHERE NAME = '${PPDB}' ORDER BY CON_ID, NAME;
prompt ##############################################################
prompt
set pages 700 lines 700 timing on feedback on echo on heading on verify on colsep '|'
prompt ##############################################################
prompt # Concurrent Program Queries for Apps DBA:                   #
prompt # Query 1:For checking the locks in concurrent jobs          #
prompt ##############################################################
select DECODE(request,0,'Holder: ','Waiter: ') || sid sess
  , inst_id
  , id1
  , id2
  , lmode
  , request
  , type
FROM GV\$LOCK
WHERE (id1, id2, type) IN (select id1, id2, type FROM GV\$LOCK WHERE request > 0)
ORDER BY id1, request;
prompt
prompt ##############################################################
prompt # Query 2:For checking the concurrent programs running currently with Details of Processed time -- and Start Date
prompt ##############################################################
select DISTINCT c.USER_CONCURRENT_PROGRAM_NAME
  , round(((sysdate-a.actual_start_date)*24*60*60/60),2) AS Process_time
  , a.request_id,a.parent_request_id
  , a.request_date
  , a.actual_start_date
  , a.actual_completion_date
  , (a.actual_completion_date-a.request_date)*24*60*60 AS end_to_end
  , (a.actual_start_date-a.request_date)*24*60*60 AS lag_time
  , d.user_name
  , a.phase_code
  , a.status_code
  , a.argument_text
  , a.priority
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_programs b
  , apps.FND_CONCURRENT_PROGRAMS_TL c
  , apps.fnd_user d
WHERE a.concurrent_program_id = b.concurrent_program_id
AND b.concurrent_program_id = c.concurrent_program_id
AND a.requested_by = d.user_id
AND status_code = 'R'
order by Process_time desc;
prompt
prompt ##############################################################
prompt # Query 3:For checking last run of a Concurrent Program along with Processed time
prompt # Useful to find the Details of Concurrent programs which run daily and comparison purpose
prompt ##############################################################
select DISTINCT c.USER_CONCURRENT_PROGRAM_NAME
  , round(((a.actual_completion_date-a.actual_start_date)*24*60*60/60),2) AS Process_time
  , a.request_id
  , a.parent_request_id
  , To_Char(a.request_date,'dd/mm/yyyy HH24:MI:SS')
  , To_Char(a.actual_start_date,'dd/mm/yyyy HH24:MI:SS')
  , To_Char(a.actual_completion_date,'dd/mm/yyyy HH24:MI:SS')
  , (a.actual_completion_date-a.request_date)*24*60*60 AS end_to_end
  , (a.actual_start_date-a.request_date)*24*60*60 AS lag_time
  , d.user_name
  , a.phase_code
  , a.status_code
  , a.argument_text
  , a.priority
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_programs b
  , apps.FND_CONCURRENT_PROGRAMS_TL c
  , apps.fnd_user d
WHERE a.concurrent_program_id= b.concurrent_program_id
AND b.concurrent_program_id = c.concurrent_program_id
AND a.requested_by = d.user_id
AND
-- trunc(a.actual_completion_date) = '24-AUG-2005'
c.USER_CONCURRENT_PROGRAM_NAME = 'Incentive Compensation Analytics - ODI'
-- and argument_text like  '%, , , , ,%';
-- and status_code!='C';
prompt
prompt ##############################################################
prompt # Query 4:For Checking the last run of concurrent Program.
prompt # Use below query to check all the concurrent request running which may refer given package
prompt # This is very useful check before compiling any package on given instance.
prompt # The query can be modified as per requirement.
prompt # Remove FND_CONCURRENT_REQUESTS table and joins to check all program dependent on given package.
prompt ##############################################################
select FCR.REQUEST_ID
  , FCPV.USER_CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_ID
  , FCR.STATUS_CODE
  , FCR.PHASE_CODE
FROM FND_CONCURRENT_PROGRAMS_VL FCPV
  , FND_EXECUTABLES FE
  , SYS.DBA_DEPENDENCIES DD
  , FND_CONCURRENT_REQUESTS FCR
WHERE FCPV.EXECUTABLE_ID = FE.EXECUTABLE_ID
AND FE.EXECUTION_METHOD_CODE = 'I'
AND SUBSTR(FE.EXECUTION_FILE_NAME,1,INSTR(FE.EXECUTION_FILE_NAME, '.', 1, 1) - 1) = UPPER(DD.NAME)
AND DD.REFERENCED_TYPE IN ('VIEW', 'TABLE', 'TRIGGER', 'PACKAGE') -- add as required
-- AND referenced_owner = 'XXCUS'
-- AND DD.REFERENCED_NAME = UPPER('&Package_name')
AND FCR.CONCURRENT_PROGRAM_ID = FCPV.CONCURRENT_PROGRAM_ID
AND fcr.phase_code NOT IN ( 'C','P');
prompt
prompt ##############################################################
prompt # Query 5:The following query will display the time taken to execute the concurrent Programs
prompt # for a particular user with the latest concurrent programs sorted in least time taken
prompt # to complete the request.
prompt ##############################################################
select f.request_id
  , pt.user_concurrent_program_name user_conc_program_name
  , f.actual_start_date start_on
  , f.actual_completion_date end_on
  , floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600) || ' HOURS ' ||
        floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60) || ' MINUTES ' ||
        round((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600 -
        (floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60)*60) )) || ' SECS ' time_difference
  , p.concurrent_program_name concurrent_program_name
  , decode(f.phase_code,'R','Running','C','Complete',f.phase_code) Phase
  , f.status_code
from apps.fnd_concurrent_programs p
  , apps.fnd_concurrent_programs_tl pt
  , apps.fnd_concurrent_requests f
where f.concurrent_program_id = p.concurrent_program_id
and f.program_application_id = p.application_id
and f.concurrent_program_id = pt.concurrent_program_id
and f.program_application_id = pt.application_id
AND pt.language = USERENV('Lang')
and f.actual_start_date is not null
order by f.actual_start_date desc;
prompt
prompt ##############################################################
prompt # Query 6: By using the below Query we can get sid,serial#,spid of the concurrent Request..
prompt ##############################################################
select a.request_id
  , d.sid
  , d.serial#
  , c.SPID
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_processes b
  , v\$process c
  , v\$session d
WHERE a.controlling_manager = b.concurrent_process_id
AND c.pid = b.oracle_process_id
AND b.session_id=d.audsid
AND a.request_id = &Request_ID
AND a.phase_code = 'R';
prompt
prompt ##############################################################
prompt # Query 7: By using below Concurrent Manager and Program rules...
prompt # Gives Detail of the Concurrent_queue_name and User_concurrent_program_name
prompt ##############################################################
select b.concurrent_queue_name
  , c.user_concurrent_program_name
FROM FND_CONCURRENT_QUEUE_CONTENT a
  , fnd_concurrent_queues b
  , fnd_concurrent_programs_vl c
WHERE a.queue_application_id = 283
and a.concurrent_queue_id = b.concurrent_queue_id
and a.type_id = c.concurrent_program_id
order by decode(INCLUDE_FLAG, 'I', 1, 2), type_code;
prompt
prompt ##############################################################
prompt # Query 8: Gives Details of Running Concurrent jobs          #
prompt ##############################################################
select DISTINCT c.USER_CONCURRENT_PROGRAM_NAME
  , round(((sysdate-a.actual_start_date)*24*60*60/60),2) AS Process_time
  , a.request_id
  , a.parent_request_id
  , a.request_date
  , a.actual_start_date
  , a.actual_completion_date
  , (a.actual_completion_date-a.request_date)*24*60*60 AS end_to_end
  , (a.actual_start_date-a.request_date)*24*60*60 AS lag_time
  , d.user_name
  , a.phase_code
  , a.status_code
  , a.argument_text
  , a.priority
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_programs b
  , apps.FND_CONCURRENT_PROGRAMS_TL c
  , apps.fnd_user d
WHERE a.concurrent_program_id = b.concurrent_program_id
AND b.concurrent_program_id = c.concurrent_program_id
AND a.requested_by = d.user_id
AND status_code='R'
order by Process_time desc;
prompt
prompt ##############################################################
prompt # Query 9: Gives detail of Concurrent job completed and pending
prompt ##############################################################
select FCR.REQUEST_ID
  , FCPV.USER_CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_ID
  , FCR.STATUS_CODE
  , FCR.PHASE_CODE
FROM FND_CONCURRENT_PROGRAMS_VL FCPV
  , FND_EXECUTABLES FE
  , SYS.DBA_DEPENDENCIES DD
  , FND_CONCURRENT_REQUESTS FCR
WHERE FCPV.EXECUTABLE_ID = FE.EXECUTABLE_ID
AND FE.EXECUTION_METHOD_CODE = 'I'
AND SUBSTR(FE.EXECUTION_FILE_NAME,1,INSTR(FE.EXECUTION_FILE_NAME, '.', 1, 1) - 1) = UPPER(DD.NAME)
AND DD.REFERENCED_TYPE IN ('VIEW', 'TABLE', 'TRIGGER', 'PACKAGE') -- add as required
-- AND referenced_owner = 'XXCUS'
AND DD.REFERENCED_NAME = UPPER('&Package_name')
AND FCR.CONCURRENT_PROGRAM_ID = FCPV.CONCURRENT_PROGRAM_ID
AND fcr.phase_code NOT IN ( 'C','P');
prompt
prompt ##############################################################
prompt # Query 10:Gives Detail of Running and Completed Concurrent jobs with Start date and end date
prompt # Latest one at the top
prompt ##############################################################
select f.request_id
  , pt.user_concurrent_program_name user_conc_program_name
  , f.actual_start_date start_on
  , f.actual_completion_date end_on
  , floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600) || ' HOURS ' ||
        floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60) || ' MINUTES ' ||
        round((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600 -
        (floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60)*60))) || ' SECS ' time_difference
  , p.concurrent_program_name concurrent_program_name
  , decode(f.phase_code,'R','Running','C','Complete',f.phase_code) Phase
  , f.status_code
from apps.fnd_concurrent_programs p
 , apps.fnd_concurrent_programs_tl pt
 , apps.fnd_concurrent_requests f
where f.concurrent_program_id = p.concurrent_program_id
and f.program_application_id = p.application_id
and f.concurrent_program_id = pt.concurrent_program_id
and f.program_application_id = pt.application_id
AND pt.language = USERENV('Lang')
and f.actual_start_date is not null
order by f.actual_start_date desc;
prompt
prompt ##############################################################
prompt # Query 11 wait events details related with Concurrent programs
prompt ##############################################################
select s.saddr
  , s.SID
  , s.serial#
  , s.audsid
  , s.paddr
  , s.user#
  , s.username
  , s.command
#  , s.ownerid
#  , s.taddr
#  , s.lockwait
  , s.status
#  , s.server
  , s.schema#
  , s.schemaname
  , s.osuser
#  , s.process
  , s.machine
#  , s.terminal
  , upper(s.program) program
#  , s.TYPE
#  , s.sql_address
#  , s.sql_hash_value
  , s.sql_id
#  , s.sql_child_number
#  , s.sql_exec_start
#  , s.sql_exec_id
#  , s.prev_sql_addr
#  , s.prev_hash_value
#  , s.prev_sql_id
#  , s.prev_child_number
#  , s.prev_exec_start
#  , s.prev_exec_id
#  , s.plsql_entry_object_id
#  , s.plsql_entry_subprogram_id
#  , s.plsql_object_id
#  , s.plsql_subprogram_id
#  , s.module
#  , s.module_hash
#  , s.action
#  , s.action_hash
#  , s.client_info
#  , s.fixed_table_sequence
#  , s.row_wait_obj#
#  , s.row_wait_file#
#  , s.row_wait_block#
#  , s.row_wait_row#
#  , s.logon_time
#  , s.last_call_et
#  , s.pdml_enabled
#  , s.failover_type
#  , s.failover_method
#  , s.failed_over
#  , s.resource_consumer_group
#  , s.pdml_status
#  , s.pddl_status
#  , s.pq_status
#  , s.current_queue_duration
#  , s.client_identifier
#  , s.blocking_session_status
#  , s.blocking_instance
#  , s.blocking_session
#  , s.seq#
#  , s.event#
#  , s.event
#  , s.p1text
#  , s.p1
#  , s.p1raw
#  , s.p2text
#  , s.p2
#  , s.p2raw
#  , s.p3text
#  , s.p3
#  , s.p3raw
#  , s.wait_class_id
#  , s.wait_class#
#  , s.wait_class
#  , s.wait_time
#  , s.seconds_in_wait
#  , s.state
#  , s.wait_time_micro
#  , s.time_remaining_micro
#  , s.time_since_last_wait_micro
#  , s.service_name
#  , s.sql_trace
#  , s.sql_trace_waits
#  , s.sql_trace_binds
#  , s.sql_trace_plan_stats
#  , s.session_edition_id
#  , s.creator_addr
#  , s.creator_serial#
FROM v\$session s
WHERE ((s.username IS NOT NULL)
AND (NVL (s.osuser, 'x') <> 'SYSTEM')
AND (s.TYPE <> 'BACKGROUND')
AND STATUS='ACTIVE')
ORDER BY "PROGRAM";
prompt
prompt ##############################################################
prompt # Query 12 To find the pid of the Concurrent job and kill it.#
prompt ##############################################################
select a.inst_id
  , sid
  , b.spid
from gv\$session a
  , gv\$process b
  , apps.fnd_concurrent_requests c
where a.paddr = b.addr
and request_ID ='31689665'
and a.inst_id = b.inst_id
and c.os_process_id = a.process;
prompt
prompt ##############################################################
prompt # Query 13:To find the Database SID of the Concurrent job    #
prompt # We need our concurrent request ID as an input.             #
prompt # c.SPID= is the operating system process id                 #
prompt # d.sid= is the Oracle process id                            #
prompt ##############################################################
column process heading "FNDLIBR PID"
select a.request_id
  , d.sid
  , d.serial#
  , d.osuser
  , d.process
  , c.SPID
from apps.fnd_concurrent_requests a,
apps.fnd_concurrent_processes b,
v\$process c,
v\$session d
where a.controlling_manager = b.concurrent_process_id
and c.pid = b.oracle_process_id
and b.session_id=d.audsid
and a.request_id = &Request_ID
and a.phase_code = 'R';
prompt
prompt ##############################################################
prompt # Query 14:To find the currently running SQL after finding SID from Query 12
prompt ##############################################################
select SQL_TEXT
FROM V\$SQLAREA
WHERE (ADDRESS, HASH_VALUE) IN (select SQL_ADDRESS, SQL_HASH_VALUE FROM V\$SESSION WHERE SID=11710);
prompt ##############################################################
prompt # Query 15:To find what exactly the program,module and the SQL it is executing
prompt # P2 column should change that means Concurrent program is changing blocks and moving
prompt ##############################################################
select sid
  , serial#
  , p2
  , program
  , module
from gv\$session
where sid=11710;
prompt
prompt ##############################################################
prompt # Query 16:To find any blocking is there in RAC or non-RAC Database
prompt ##############################################################
select process
  , sid
  , blocking_session
  , BLOCKING_INSTANCE
from gv\$session
where blocking_session is not null;
prompt
prompt ##############################################################
prompt # Query17:To check the SID and concurrent program details, where 5991=SID
prompt ##############################################################
select sid
  , serial#
  , program
  , module
  , p2
from gv\$session
where SID=5991;
prompt
prompt ##############################################################
prompt # Query 18: To check time remaining in minutes and elapsed  in minutes for long running job
prompt ##############################################################
select round(sofar*100/totalwork,2) "finished(%)"
  , sid
  , serial#
  , opname
  , target
  , sofar
  , totalwork
  , units
  , (Time_Remaining/60) Time_Rem_Mins
  , (Elapsed_Seconds/60) Elapsed_Time_Mins
From GV\$session_Longops
where TIME_REMAINING > 0;
prompt
prompt ##############################################################
prompt # Query 19:To get the location of the trace file for Concurrent request id,eg:The Request ID --(205979614)
prompt ##############################################################
select 'Request id: ' || request_id
  , 'Trace id: ' || oracle_Process_id
  , 'Trace Flag: ' || req.enable_trace
  , 'Trace Name: ' || dest.value || '/' || lower(dbnm.value) || '_ora_' || oracle_process_id || '.trc'
  , 'Prog. Name: ' || prog.user_concurrent_program_name
  , 'File Name: ' || execname.execution_file_name || execname.subroutine_name
  , 'Status : ' || decode(phase_code,'R','Running') || '-' || decode(status_code,'R','Normal')
  , 'SID Serial: ' || ses.sid||','|| ses.serial#
  , 'Module : ' || ses.module
from fnd_concurrent_requests req
  , v\$session ses
  , v\$process proc
  , v\$parameter dest
  , v\$parameter dbnm
  , fnd_concurrent_programs_vl prog
  , fnd_executables execname
where req.request_id = &request
and req.oracle_process_id = proc.spid(+)
and proc.addr = ses.paddr(+)
and dest.name = 'user_dump_dest'
and dbnm.name = 'db_name'
and req.concurrent_program_id = prog.concurrent_program_id
and req.program_application_id = prog.application_id
--- and prog.application_id = execname.application_id
and prog.executable_application_id = execname.application_id
and prog.executable_id=execname.executable_id;
prompt
prompt ##############################################################
prompt # Note:We can use the above query to diagnose the Concurrent job failure by enabling trace on that job first and than running that concurrent job again.
prompt ##############################################################
prompt # Query 20:To list the concurrent programs that run today,Giving details about status and logs
prompt ##############################################################
select DISTINCT fcp.user_concurrent_program_name
  , fcp.concurrent_program_name
  , fcr.request_id
  , fcr.request_date
  , flv.meaning status
  , fcr.status_code
  , fcr.completion_text
  , fcr.logfile_name
  , fcr.outfile_name
  , fcr.argument_text
FROM apps.fnd_concurrent_programs_vl fcp
  , apps.fnd_concurrent_requests fcr
  , apps.fnd_lookup_values flv
WHERE fcr.concurrent_program_id = fcp.concurrent_program_id
AND trunc(fcr.last_update_date) = trunc(SYSDATE)
AND flv.lookup_code = fcr.status_code
AND flv.lookup_type = 'CP_STATUS_CODE'
AND flv.language = 'US'
ORDER BY fcr.request_date,
fcr.request_id DESC;
quit;
EOF
else
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
prompt ##############################################################
prompt # Concurrent Program Queries for Apps DBA:                   #
prompt # Query 1:For checking the locks in concurrent jobs          #
prompt ##############################################################
select DECODE(request,0,'Holder: ','Waiter: ') || sid sess
  , inst_id
  , id1
  , id2
  , lmode
  , request
  , type
FROM GV\$LOCK
WHERE (id1, id2, type) IN (select id1, id2, type FROM GV\$LOCK WHERE request > 0)
ORDER BY id1, request;
prompt
prompt ##############################################################
prompt # Query 2:For checking the concurrent programs running currently with Details of Processed time -- and Start Date
prompt ##############################################################
select DISTINCT c.USER_CONCURRENT_PROGRAM_NAME
  , round(((sysdate-a.actual_start_date)*24*60*60/60),2) AS Process_time
  , a.request_id,a.parent_request_id
  , a.request_date
  , a.actual_start_date
  , a.actual_completion_date
  , (a.actual_completion_date-a.request_date)*24*60*60 AS end_to_end
  , (a.actual_start_date-a.request_date)*24*60*60 AS lag_time
  , d.user_name
  , a.phase_code
  , a.status_code
  , a.argument_text
  , a.priority
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_programs b
  , apps.FND_CONCURRENT_PROGRAMS_TL c
  , apps.fnd_user d
WHERE a.concurrent_program_id = b.concurrent_program_id
AND b.concurrent_program_id = c.concurrent_program_id
AND a.requested_by = d.user_id
AND status_code = 'R'
order by Process_time desc;
prompt
prompt ##############################################################
prompt # Query 3:For checking last run of a Concurrent Program along with Processed time
prompt # Useful to find the Details of Concurrent programs which run daily and comparison purpose
prompt ##############################################################
select DISTINCT c.USER_CONCURRENT_PROGRAM_NAME
  , round(((a.actual_completion_date-a.actual_start_date)*24*60*60/60),2) AS Process_time
  , a.request_id
  , a.parent_request_id
  , To_Char(a.request_date,'dd/mm/yyyy HH24:MI:SS')
  , To_Char(a.actual_start_date,'dd/mm/yyyy HH24:MI:SS')
  , To_Char(a.actual_completion_date,'dd/mm/yyyy HH24:MI:SS')
  , (a.actual_completion_date-a.request_date)*24*60*60 AS end_to_end
  , (a.actual_start_date-a.request_date)*24*60*60 AS lag_time
  , d.user_name
  , a.phase_code
  , a.status_code
  , a.argument_text
  , a.priority
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_programs b
  , apps.FND_CONCURRENT_PROGRAMS_TL c
  , apps.fnd_user d
WHERE a.concurrent_program_id = b.concurrent_program_id
AND b.concurrent_program_id = c.concurrent_program_id
AND a.requested_by = d.user_id
AND
-- trunc(a.actual_completion_date) = '24-AUG-2005'
c.USER_CONCURRENT_PROGRAM_NAME = 'Incentive Compensation Analytics - ODI'
-- and argument_text like  '%, , , , ,%';
-- and status_code!='C';
prompt
prompt ##############################################################
prompt # Query 4:For Checking the last run of concurrent Program.
prompt # Use below query to check all the concurrent request running which may refer given package
prompt # This is very useful check before compiling any package on given instance.
prompt # The query can be modified as per requirement.
prompt # Remove FND_CONCURRENT_REQUESTS table and joins to check all program dependent on given package.
prompt ##############################################################
select FCR.REQUEST_ID
  , FCPV.USER_CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_ID
  , FCR.STATUS_CODE
  , FCR.PHASE_CODE
FROM FND_CONCURRENT_PROGRAMS_VL FCPV
  , FND_EXECUTABLES FE
  , SYS.DBA_DEPENDENCIES DD
  , FND_CONCURRENT_REQUESTS FCR
WHERE FCPV.EXECUTABLE_ID = FE.EXECUTABLE_ID
AND FE.EXECUTION_METHOD_CODE = 'I'
AND SUBSTR(FE.EXECUTION_FILE_NAME,1,INSTR(FE.EXECUTION_FILE_NAME, '.', 1, 1) - 1) = UPPER(DD.NAME)
AND DD.REFERENCED_TYPE IN ('VIEW', 'TABLE', 'TRIGGER', 'PACKAGE') -- add as required
-- AND referenced_owner = 'XXCUS'
-- AND DD.REFERENCED_NAME = UPPER('&Package_name')
AND FCR.CONCURRENT_PROGRAM_ID = FCPV.CONCURRENT_PROGRAM_ID
AND fcr.phase_code NOT IN ( 'C','P');
prompt
prompt ##############################################################
prompt # Query 5:The following query will display the time taken to execute the concurrent Programs
prompt # for a particular user with the latest concurrent programs sorted in least time taken
prompt # to complete the request.
prompt ##############################################################
select f.request_id
  , pt.user_concurrent_program_name user_conc_program_name
  , f.actual_start_date start_on
  , f.actual_completion_date end_on
  , floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600) || ' HOURS ' ||
        floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60) || ' MINUTES ' ||
        round((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600 -
        (floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60)*60) )) || ' SECS ' time_difference
  , p.concurrent_program_name concurrent_program_name
  , decode(f.phase_code,'R','Running','C','Complete',f.phase_code) Phase
  , f.status_code
from apps.fnd_concurrent_programs p
  , apps.fnd_concurrent_programs_tl pt
  , apps.fnd_concurrent_requests f
where f.concurrent_program_id = p.concurrent_program_id
and f.program_application_id = p.application_id
and f.concurrent_program_id = pt.concurrent_program_id
and f.program_application_id = pt.application_id
AND pt.language = USERENV('Lang')
and f.actual_start_date is not null
order by f.actual_start_date desc;
prompt
prompt ##############################################################
prompt # Query 6: By using the below Query we can get sid,serial#,spid of the concurrent Request..
prompt ##############################################################
select a.request_id
  , d.sid
  , d.serial#
  , c.SPID
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_processes b
  , v\$process c
  , v\$session d
WHERE a.controlling_manager = b.concurrent_process_id
AND c.pid = b.oracle_process_id
AND b.session_id=d.audsid
AND a.request_id = &Request_ID
AND a.phase_code = 'R';
prompt
prompt ##############################################################
prompt # Query 7: By using below Concurrent Manager and Program rules...
prompt # Gives Detail of the Concurrent_queue_name and User_concurrent_program_name
prompt ##############################################################
select b.concurrent_queue_name
  , c.user_concurrent_program_name
FROM FND_CONCURRENT_QUEUE_CONTENT a
  , fnd_concurrent_queues b
  , fnd_concurrent_programs_vl c
WHERE a.queue_application_id = 283
and a.concurrent_queue_id = b.concurrent_queue_id
and a.type_id = c.concurrent_program_id
order by decode(INCLUDE_FLAG, 'I', 1, 2), type_code;
prompt
prompt ##############################################################
prompt # Query 8: Gives Details of Running Concurrent jobs          #
prompt ##############################################################
select DISTINCT c.USER_CONCURRENT_PROGRAM_NAME
  , round(((sysdate-a.actual_start_date)*24*60*60/60),2) AS Process_time
  , a.request_id
  , a.parent_request_id
  , a.request_date
  , a.actual_start_date
  , a.actual_completion_date
  , (a.actual_completion_date-a.request_date)*24*60*60 AS end_to_end
  , (a.actual_start_date-a.request_date)*24*60*60 AS lag_time
  , d.user_name
  , a.phase_code
  , a.status_code
  , a.argument_text
  , a.priority
FROM apps.fnd_concurrent_requests a
  , apps.fnd_concurrent_programs b
  , apps.FND_CONCURRENT_PROGRAMS_TL c
  , apps.fnd_user d
WHERE a.concurrent_program_id = b.concurrent_program_id
AND b.concurrent_program_id = c.concurrent_program_id
AND a.requested_by = d.user_id
AND status_code='R'
order by Process_time desc;
prompt
prompt ##############################################################
prompt # Query 9: Gives detail of Concurrent job completed and pending
prompt ##############################################################
select FCR.REQUEST_ID
  , FCPV.USER_CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_NAME
  , FCPV.CONCURRENT_PROGRAM_ID
  , FCR.STATUS_CODE
  , FCR.PHASE_CODE
FROM FND_CONCURRENT_PROGRAMS_VL FCPV
  , FND_EXECUTABLES FE
  , SYS.DBA_DEPENDENCIES DD
  , FND_CONCURRENT_REQUESTS FCR
WHERE FCPV.EXECUTABLE_ID = FE.EXECUTABLE_ID
AND FE.EXECUTION_METHOD_CODE = 'I'
AND SUBSTR(FE.EXECUTION_FILE_NAME,1,INSTR(FE.EXECUTION_FILE_NAME, '.', 1, 1) - 1) = UPPER(DD.NAME)
AND DD.REFERENCED_TYPE IN ('VIEW', 'TABLE', 'TRIGGER', 'PACKAGE') -- add as required
-- AND referenced_owner = 'XXCUS'
AND DD.REFERENCED_NAME = UPPER('&Package_name')
AND FCR.CONCURRENT_PROGRAM_ID = FCPV.CONCURRENT_PROGRAM_ID
AND fcr.phase_code NOT IN ( 'C','P');
prompt
prompt ##############################################################
prompt # Query 10:Gives Detail of Running and Completed Concurrent jobs with Start date and end date
prompt # Latest one at the top
prompt ##############################################################
select f.request_id
  , pt.user_concurrent_program_name user_conc_program_name
  , f.actual_start_date start_on
  , f.actual_completion_date end_on
  , floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600) || ' HOURS ' ||
        floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60) || ' MINUTES ' ||
        round((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600 -
        (floor((((f.actual_completion_date-f.actual_start_date)*24*60*60) -
        floor(((f.actual_completion_date-f.actual_start_date)*24*60*60)/3600)*3600)/60)*60))) || ' SECS ' time_difference
  , p.concurrent_program_name concurrent_program_name
  , decode(f.phase_code,'R','Running','C','Complete',f.phase_code) Phase
  , f.status_code
from apps.fnd_concurrent_programs p
 , apps.fnd_concurrent_programs_tl pt
 , apps.fnd_concurrent_requests f
where f.concurrent_program_id = p.concurrent_program_id
and f.program_application_id = p.application_id
and f.concurrent_program_id = pt.concurrent_program_id
and f.program_application_id = pt.application_id
AND pt.language = USERENV('Lang')
and f.actual_start_date is not null
order by f.actual_start_date desc;
prompt
prompt ##############################################################
prompt # Query 11 wait events details related with Concurrent programs
prompt ##############################################################
select s.saddr
  , s.SID
  , s.serial#
  , s.audsid
  , s.paddr
  , s.user#
  , s.username
  , s.command
  , s.ownerid
  , s.taddr
  , s.lockwait
  , s.status
  , s.server
  , s.schema#
  , s.schemaname
  , s.osuser
  , s.process
  , s.machine
  , s.terminal
  , upper(s.program) program
  , s.TYPE
  , s.sql_address
  , s.sql_hash_value
  , s.sql_id
  , s.sql_child_number
  , s.sql_exec_start
  , s.sql_exec_id
  , s.prev_sql_addr
  , s.prev_hash_value
  , s.prev_sql_id
  , s.prev_child_number
  , s.prev_exec_start
  , s.prev_exec_id
  , s.plsql_entry_object_id
  , s.plsql_entry_subprogram_id
  , s.plsql_object_id
  , s.plsql_subprogram_id
  , s.module
  , s.module_hash
  , s.action
  , s.action_hash
  , s.client_info
  , s.fixed_table_sequence
  , s.row_wait_obj#
  , s.row_wait_file#
  , s.row_wait_block#
  , s.row_wait_row#
  , s.logon_time
  , s.last_call_et
  , s.pdml_enabled
  , s.failover_type
  , s.failover_method
  , s.failed_over
  , s.resource_consumer_group
  , s.pdml_status
  , s.pddl_status
  , s.pq_status
  , s.current_queue_duration
  , s.client_identifier
  , s.blocking_session_status
  , s.blocking_instance
  , s.blocking_session
  , s.seq#
  , s.event#
  , s.event
  , s.p1text
  , s.p1
  , s.p1raw
  , s.p2text
  , s.p2
  , s.p2raw
  , s.p3text
  , s.p3
  , s.p3raw
  , s.wait_class_id
  , s.wait_class#
  , s.wait_class
  , s.wait_time
  , s.seconds_in_wait
  , s.state
  , s.wait_time_micro
  , s.time_remaining_micro
  , s.time_since_last_wait_micro
  , s.service_name
  , s.sql_trace
  , s.sql_trace_waits
  , s.sql_trace_binds
  , s.sql_trace_plan_stats
  , s.session_edition_id
  , s.creator_addr
  , s.creator_serial#
FROM v\$session s
WHERE ((s.username IS NOT NULL)
AND (NVL (s.osuser, 'x') <> 'SYSTEM')
AND (s.TYPE <> 'BACKGROUND')
AND STATUS='ACTIVE')
ORDER BY "PROGRAM";
prompt
prompt ##############################################################
prompt # Query 12 To find the pid of the Concurrent job and kill it.#
prompt ##############################################################
select a.inst_id
  , sid
  , b.spid
from gv\$session a
  , gv\$process b
  , apps.fnd_concurrent_requests c
where a.paddr = b.addr
and request_ID ='31689665'
AND a.inst_id = b.inst_id
and c.os_process_id = a.process;
prompt
prompt ##############################################################
prompt # Query 13:To find the Database SID of the Concurrent job    #
prompt # We need our concurrent request ID as an input.             #
prompt # c.SPID= is the operating system process id                 #
prompt # d.sid= is the Oracle process id                            #
prompt ##############################################################
column process heading "FNDLIBR PID"
select a.request_id
  , d.sid
  , d.serial#
  , d.osuser
  , d.process
  , c.SPID
FROM apps.fnd_concurrent_requests a,
apps.fnd_concurrent_processes b,
v\$process c,
v\$session d
WHERE a.controlling_manager = b.concurrent_process_id
AND c.pid = b.oracle_process_id
AND b.session_id=d.audsid
AND a.request_id = &Request_ID
AND a.phase_code = 'R';
prompt
prompt ##############################################################
prompt # Query 14:To find the currently running SQL after finding SID from Query 12
prompt ##############################################################
select SQL_TEXT
FROM V\$SQLAREA
WHERE (ADDRESS, HASH_VALUE) IN (select SQL_ADDRESS, SQL_HASH_VALUE FROM V\$SESSION WHERE SID=11710);
prompt
prompt ##############################################################
prompt # Query 15:To find what exactly the program,module and the SQL it is executing
prompt # P2 column should change that means Concurrent program is changing blocks and moving
prompt ##############################################################
select sid
  , serial#
  , p2
  , program
  , module
from gv\$session
where sid=11710;
prompt
prompt ##############################################################
prompt # Query 16:To find any blocking is there in RAC or non-RAC Database
prompt ##############################################################
select process
  , sid
  , blocking_session
  , BLOCKING_INSTANCE
from gv\$session
where blocking_session is not null;
prompt
prompt ##############################################################
prompt # Query17:To check the SID and concurrent program details, where 5991=SID
prompt ##############################################################
select sid
  , serial#
  , program
  , module
  , p2
from gv\$session
where SID=5991;
prompt
prompt ##############################################################
prompt # Query 18: To check time remaining in minutes and elapsed  in minutes for long running job
prompt ##############################################################
select round(sofar*100/totalwork,2) "finished(%)"
  , sid
  , serial#
  , opname
  , target
  , sofar
  , totalwork
  , units
  , (Time_Remaining/60) Time_Rem_Mins
  , (Elapsed_Seconds/60) Elapsed_Time_Mins
From GV\$session_Longops
where TIME_REMAINING > 0;
prompt
prompt ##############################################################
prompt # Query 19:To get the location of the trace file for Concurrent request id,eg:The Request ID --(205979614)
prompt ##############################################################
select 'Request id: ' || request_id
  , 'Trace id: ' || oracle_Process_id
  , 'Trace Flag: ' || req.enable_trace
  , 'Trace Name: ' || dest.value || '/' || lower(dbnm.value) || '_ora_' || oracle_process_id || '.trc'
  , 'Prog. Name: ' || prog.user_concurrent_program_name
  , 'File Name: ' || execname.execution_file_name || execname.subroutine_name
  , 'Status : ' || decode(phase_code, 'R', 'Running') || '-' || decode(status_code, 'R', 'Normal')
  , 'SID Serial: ' || ses.sid||','|| ses.serial#
  , 'Module : ' || ses.module
from fnd_concurrent_requests req
  , v\$session ses
  , v\$process proc
  , v\$parameter dest
  , v\$parameter dbnm
  , fnd_concurrent_programs_vl prog
  , fnd_executables execname
where req.request_id = &request
and req.oracle_process_id = proc.spid(+)
and proc.addr = ses.paddr(+)
and dest.name = 'user_dump_dest'
and dbnm.name = 'db_name'
and req.concurrent_program_id = prog.concurrent_program_id
and req.program_application_id = prog.application_id
--- and prog.application_id = execname.application_id
and prog.executable_application_id = execname.application_id
and prog.executable_id=execname.executable_id;
prompt
prompt ##############################################################
prompt # Note:We can use the above query to diagnose the Concurrent job failure by enabling trace on that job first and than running that concurrent job again.
prompt ##############################################################
prompt # Query 20:To list the concurrent programs that run today,Giving details about status and logs
prompt ##############################################################
select DISTINCT fcp.user_concurrent_program_name
  , fcp.concurrent_program_name
  , fcr.request_id
  , fcr.request_date
  , flv.meaning status
  , fcr.status_code
  , fcr.completion_text
  , fcr.logfile_name
  , fcr.outfile_name
  , fcr.argument_text
FROM apps.fnd_concurrent_programs_vl fcp
  , apps.fnd_concurrent_requests fcr
  , apps.fnd_lookup_values flv
WHERE fcr.concurrent_program_id = fcp.concurrent_program_id
AND trunc(fcr.last_update_date) = trunc(SYSDATE)
AND flv.lookup_code = fcr.status_code
AND flv.lookup_type = 'CP_STATUS_CODE'
AND flv.language = 'US'
ORDER BY fcr.request_date,
fcr.request_id DESC;
quit;
EOF
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
password) # "Password Informations"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Password Informations ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on feedback on colsep '|'
col USERNAME for a10
col SYSDBA for a10
col SYSOPER for a10
col SYSASM for a10
col SYSBACKUP for a10
col SYSDG for a10
col SYSKM for a10
col ACCOUNT_STATUS for a10
col PASSWORD_PROFILE for a10
col LAST_LOGIN for a20
col LOCK_DATE for a10
col EXPIRY_DATE for a20
col EXTERNAL_NAME for a15
col AUTHENTICATION_TYPE for a10
select USERNAME
  , SYSDBA
  , SYSOPER
  , SYSASM
  , SYSBACKUP
  , SYSDG
  , SYSKM
  , ACCOUNT_STATUS
  , PASSWORD_PROFILE
  , to_char(LAST_LOGIN, 'dd/mm/yyyy hh24:mi:ss') LAST_LOGIN
  , LOCK_DATE
  , to_char(EXPIRY_DATE, 'dd/mm/yyyy hh24:mi:ss') EXPIRY_DATE
  , EXTERNAL_NAME
  , AUTHENTICATION_TYPE
  , COMMON
from v\$pwfile_users
order by 1;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
restore) # "Show the Information About Lost Datafiles, Controlfiles and Redolog Files"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show the Information About Lost Datafiles, Controlfiles and Redolog Files ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
PATH_PID=$(ps -ef | grep ora_dbw | head -n 1 | head -n 1 | awk '{print $2}' | grep -v grep)/fd
PATH_PID_REDO=$(ps -ef | grep ora_lgwr | head -n 1 | head -n 1 | awk '{print $2}' | grep -v grep)/fd
TAGFILE=*.dbf\|*.ctl
TAGFILE_REDO=*.log
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "${YEL} -- Datafiles can be restored -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"

for DBFLIST in `ls -l "${PATH_PID}" | egrep -e "${TAGFILE}" | grep "(deleted)" | sed "s, ,#,g"`
do
  PID=$(echo ${DBFLIST} | sed "s,#, ,g" | awk '{ print $9 }')
  FILE=$(echo ${DBFLIST} | sed "s,#, ,g" | awk '{ print $11 }')
  echo ${ECHO} "cat ${PATH_PID}/${PID} > ${FILE}"
done

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "${YEL} -- Redologs can be restored -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"

for DBFLIST in `ls -l "${PATH_PID_REDO}" | egrep -e "${TAGFILE_REDO}" | grep "(deleted)" | sed "s, ,#,g"`
do
  PID=$(echo ${DBFLIST} | sed "s,#, ,g" | awk '{ print $9 }')
  FILE=$(echo ${DBFLIST} | sed "s,#, ,g" | awk '{ print $11 }')
  echo ${ECHO} "cat ${PATH_PID}/${PID} > ${FILE}"
done

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
restpoint) # "Show Restore Points in Your Database"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Restore Points in Your Database ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
col name for a50
col scn for a15
prompt ##############################################################
Prompt # Normal Restore Points                                      #
prompt ##############################################################
select NAME
  , to_char(SCN) as SCN
  , to_char(TIME, 'DD/MM/YYYY HH24:MI:SS') as TIME
  , DATABASE_INCARNATION#
  , GUARANTEE_FLASHBACK_DATABASE
  , STORAGE_SIZE
FROM GV\$RESTORE_POINT;
prompt
prompt ##############################################################
Prompt # Guaranteed Restore Points                                  #
prompt ##############################################################
select NAME
  , to_char(SCN) as SCN
  , to_char(TIME, 'DD/MM/YYYY HH24:MI:SS') as TIME
  , DATABASE_INCARNATION#
  , GUARANTEE_FLASHBACK_DATABASE
  , STORAGE_SIZE
FROM GV\$RESTORE_POINT
WHERE GUARANTEE_FLASHBACK_DATABASE='YES';
quit;
EOF
#########################################################################################################
# create restore point BEFORE_UPGRADE;
# create restore point BEFORE_UPGRADE guarantee flashback database;
# flashback database to restore point BEFORE_UPGRADE;
# drop restore point BEFORE_UPGRADE;
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
performance) # "Show the Informations About ASH, AWR and Tuning"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show the Informations About ASH, AWR and Tuning ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_perform_001
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- YOU NEED TO select THE SNAPSHOT ID INITIAL AND FINAL TO CONTINUE -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} EX: ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SNAPSHOT ID INITIAL..: 1111 [ ENTER ]${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SNAPSHOT ID FINAL....: 2222 [ ENTER ]${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SNAP_IN=""
SNAP_OU=""
read SNAP_IN
read SNAP_OU
if [ "${SNAP_IN}" = "" ] && [ "${SNAP_OU}" = "" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- YOU DID NOT INSERTET ANY SNAPSHOT ID -- ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_perform_002
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} INSERT A SQL_ID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SQL_ID=""
read SQL_ID
if [ "${SQL_ID}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- THE ${RED} SQL_ID ${BLACK} WAS NOT INSERTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
func_dba_perform_003
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
flashback) # "Show the Informations About Flashback Logs"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show the Informations About Flashback Logs ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|' numwidth 20 feedback on
prompt ##############################################################
prompt # How Far Back Can We Flashback To (Time)?                   #
prompt ##############################################################
select to_char(oldest_flashback_time, 'dd-mm-yyyy hh24:mi:ss') "Oldest Flashback Time"
from v\$flashback_database_log;
prompt
prompt ##############################################################
prompt # How Far Back Can We Flashback To (SCN)?                    #
prompt ##############################################################
col oldest_flashback_scn format 99999999999999999999999999
select oldest_flashback_scn from v\$flashback_database_log;
prompt
prompt ##############################################################
prompt # Flashback Area Usage                                       #
prompt ##############################################################
select * FROM V\$FLASH_RECOVERY_AREA_USAGE;
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
col ROUND(SPACE_LIMIT/1048576) heading "Space Allocated (MB)" format 99999999
col round(space_used/1048576) heading "Space Used (MB)" format 9999999
col name Heading "Flashback Location" format a40
select name
  , round(space_limit/1048576)
  , round(space_used/1048576)
from v\$RECOVERY_FILE_DEST;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
platform) # "Show All About Your Platform System"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show All About Your Platform System ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_cross_platform
#
#########################################################################################################
# How to Convert Platforms Datafile
#########################################################################################################
# $ rman target /
# Convert the datafiles – syntax here
# CONVERT
# Staging location
# DATAFILE '/tmp/${DATABASE_NAME}system01.dbf'
# Desired final location
# FORMAT '/m001/oradata/${DATABASE_NAME}/${DATABASE_NAME}system01.dbf'
# FROM PLATFORM 'Solaris[tm] OE (64-bit)' ;
# Repeat this for all the datafiles that need conversion. Or make (generate!) one single ‘run’ instruction as below:
#
# RUN {
# 	CONVERT DATAFILE '/tmp/${DATABASE_NAME}system01.dbf' FROM PLATFORM 'Solaris[tm] OE (64-bit)' FORMAT '/m001/oradata/${DATABASE_NAME}/${DATABASE_NAME}system01.dbf';
# 	CONVERT DATAFILE '/tmp/${DATABASE_NAME}undotbs01.dbf' FROM PLATFORM 'Solaris[tm] OE (64-bit)' FORMAT '/m001/oradata/${DATABASE_NAME}/${DATABASE_NAME}undo01.dbf';
# }
#
# SQL> SHUTDOWN IMMEDIATE;
# SQL> STARTUP UPGRADE;
# SQL> @ ?/rdbms/admin/utlirp
# SQL> SHUTDOWN IMMEDIATE;
# SQL> STARTUP;
# SQL> @ ?/rdbms/admin/utlrp
#
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
sysaux) # "Run Shrink Space on SYSAUX TBS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Run Shrink Space on SYSAUX TBS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
alter session set nls_date_format='dd/mm/yyyy';
set pages 700 lines 700 timing on colsep '|'
prompt ##############################################################
prompt # Retention History                                          #
prompt ##############################################################
select dbms_stats.get_stats_history_retention from dual;
prompt
prompt ##############################################################
prompt # Availability History                                       #
prompt ##############################################################
select dbms_stats.get_stats_history_availability from dual;
prompt
prompt ##############################################################
prompt # Duration Time of SnapShots                                 #
prompt ##############################################################
col "Start Time" for a25
col "End Time" for a25
select min(snap_id) as "First Snap ID"
  , max(snap_id) as "Last Snap ID"
  , min(to_char(begin_interval_time,'DD/MM/YYYY HH24:MI:SS')) as "Start Time"
  , max(to_char(end_interval_time,'DD/MM/YYYY HH24:MI:SS')) as "End Time"
from dba_hist_snapshot;
prompt
prompt ##############################################################
prompt # Infos About SYSAUX TBS                                     #
prompt ##############################################################
COLUMN "Item" FORMAT A25
COLUMN "Space Used (GB)" FORMAT 999.99
COLUMN "Schema" FORMAT A25
COLUMN "Move Procedure" FORMAT A40
select occupant_name "Item"
  , space_usage_kbytes/1048576 "Space Used (GB)"
  , schema_name "Schema"
  , move_procedure "Move Procedure"
FROM v\$sysaux_occupants
ORDER BY 1;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- IF YOU WANT TO SHRINK WRH$ OBJECTS --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
YESNO=""
read YESNO
if [ "${YESNO}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- YOU NEED TO SET AN OPTION [ n ] or [ y ] --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
elif [ "${YESNO}" = "y" ] || [ "${YESNO}" = "Y" ]
then
sqlplus -S /nolog <<EOF
conn / as sysdba
set pages 700 lines 700 timing on colsep '|'
declare
 v_sql1 varchar2(2000);
 v_sql2 varchar2(2000);
 begin
 for rec in
 (select TABLE_NAME from dba_tables where TABLE_NAME like 'WRH$%')
 loop
 v_sql1 := 'alter table ' || rec.TABLE_NAME || ' enable row movement ';
 execute immediate v_sql1;
 v_sql2 := 'alter table ' || rec.TABLE_NAME || ' shrink space cascade ';
 execute immediate v_sql2;
 end loop;
end ;
/
quit;
EOF
fi
#########################################################################################################
# exec dbms_stats.alter_stats_history_retention(10);
# exec DBMS_STATS.PURGE_STATS(sysdate - 10);
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
indexes) # "Identify Indexes can be rebuild (Candidates)"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Identify Indexes can be rebuild (Candidates) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
sqlplus -S /nolog <<EOF
conn / as sysdba
set feedback off timing off
-- select only those indexes with an estimated space saving percent greater than 25%
VAR savings_percent NUMBER;
EXEC :savings_percent := 25;
-- select only indexes with current size (as per cbo stats) greater then 1MB
VAR minimum_size_mb NUMBER;
EXEC :minimum_size_mb := 1;
SET SERVEROUT ON ECHO OFF FEED OFF VER OFF TAB OFF LINES 300;
COL report_date NEW_V report_date;
set pages 700 lines 700 timing on feedback on colsep '|'
prompt
prompt ##############################################################
prompt # INDEXES CAN BE REBUILD                                     #
prompt ##############################################################
select TO_CHAR(SYSDATE, 'DD/MM/YYYY"T"HH24:MI:SS') report_date FROM DUAL;
DECLARE
l_used_bytes NUMBER;
l_alloc_bytes NUMBER;
l_percent NUMBER;
BEGIN
DBMS_OUTPUT.PUT_LINE('PDB: '||SYS_CONTEXT('USERENV', 'CON_NAME'));
DBMS_OUTPUT.PUT_LINE('---');
DBMS_OUTPUT.PUT_LINE(
RPAD('OWNER.INDEX_NAME', 35)||' '||
LPAD('SAVING %', 10)||' '||
LPAD('CURRENT SIZE', 20)||' '||
LPAD('ESTIMATED SIZE', 20));
DBMS_OUTPUT.PUT_LINE(
RPAD('-', 35, '-')||' '||
LPAD('-', 10, '-')||' '||
LPAD('-', 20, '-')||' '||
LPAD('-', 20, '-'));
FOR i IN (select x.owner, x.index_name, SUM(s.leaf_blocks) * TO_NUMBER(p.value) index_size,
REPLACE(DBMS_METADATA.GET_DDL('INDEX',x.index_name,x.owner),CHR(10),CHR(32)) ddl
FROM dba_ind_statistics s, dba_indexes x, dba_users u, v\$parameter p
WHERE u.oracle_maintained = 'N'
AND x.owner = u.username
AND x.tablespace_name NOT IN ('SYSTEM','SYSAUX')
AND x.index_type LIKE '%NORMAL%'
AND x.table_type = 'TABLE'
AND x.status = 'VALID'
AND x.temporary = 'N'
AND x.dropped = 'NO'
AND x.visibility = 'VISIBLE'
AND x.segment_created = 'YES'
AND x.orphaned_entries = 'NO'
AND p.name = 'db_block_size'
AND s.owner = x.owner
AND s.index_name = x.index_name
GROUP BY x.owner, x.index_name, p.value
HAVING SUM(s.leaf_blocks) * TO_NUMBER(p.value) > :minimum_size_mb * POWER(2,20)
ORDER BY index_size DESC)
LOOP
DBMS_SPACE.CREATE_INDEX_COST(i.ddl,l_used_bytes,l_alloc_bytes);
IF i.index_size * (100 - :savings_percent) / 100 > l_alloc_bytes
THEN
l_percent := 100 * (i.index_size - l_alloc_bytes) / i.index_size;
DBMS_OUTPUT.PUT_LINE(
RPAD(i.owner||'.'||i.index_name, 35)||' '||
LPAD(TO_CHAR(ROUND(l_percent, 1), '990.0')||' % ', 10)||' '||
LPAD(TO_CHAR(ROUND(i.index_size / POWER(2,20), 1), '999,999,990.0')||' MB', 20)||' '||
LPAD(TO_CHAR(ROUND(l_alloc_bytes / POWER(2,20), 1), '999,999,990.0')||' MB', 20));
END IF;
END LOOP;
END;
/
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select TO_NUMBER(EXTRACTVALUE(VALUE(d), '/info')) index_size
FROM XMLTABLE('/*/info'
PASSING (select XMLTYPE(other_xml) FROM plan_table WHERE other_xml LIKE '%index_size%')) d
WHERE EXTRACTVALUE(VALUE(d), '/info/@type') = 'index_size';
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
monitor.install) # "MONITOR INSTALLATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} MONITORING INSTALLATION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#################################################################################################
# Create Table
sqlplus -S /nolog <<EOF
conn / as sysdba
prompt
prompt ##############################################################
prompt # INSTALLING MONITORING                                      #
prompt ##############################################################
CREATE TABLE TABLESPACE_STATS
(
  TABLESPACE_NAME  VARCHAR2(30 BYTE),
  TABLESPACE_SIZE  NUMBER,
  USED_SPACE       NUMBER,
  USED_PERCENT     NUMBER,
  COLLECTION_DATE  DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (INITIAL          1M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT)
LOGGING
NOCOMPRESS
NOCACHE
NOPARALLEL
MONITORING;
prompt
prompt ##############################################################
prompt # Create Index                                               #
prompt ##############################################################
CREATE INDEX DATE_IDX ON TABLESPACE_STATS (COLLECTION_DATE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (INITIAL          1M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT)
NOPARALLEL;
prompt
prompt ##############################################################
prompt # Create Index                                               #
prompt ##############################################################
CREATE INDEX NAME_IDX ON TABLESPACE_STATS (TABLESPACE_NAME)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (INITIAL          1M
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT)
NOPARALLEL;
prompt
prompt ##############################################################
prompt # Insert Values                                              #
prompt ##############################################################
INSERT INTO TABLESPACE_STATS (TABLESPACE_NAME, USED_SPACE, TABLESPACE_SIZE, USED_PERCENT, COLLECTION_DATE)
select A.TABLESPACE_NAME
  , A.USED_SPACE * B.BLOCK_SIZE
  , A.TABLESPACE_SIZE * B.BLOCK_SIZE
  , A.USED_PERCENT
  , SYSDATE
FROM DBA_TABLESPACE_USAGE_METRICS A, DBA_TABLESPACES B
WHERE A.TABLESPACE_NAME = B.TABLESPACE_NAME;
prompt
prompt ##############################################################
prompt # View Values                                                #
prompt ##############################################################
select TRUNC(COLLECTION_DATE) "DATE"
  , TABLESPACE_NAME
  , ROUND(TABLESPACE_SIZE/1024/1024, 2) "SIZE MB"
  , ROUND(USED_SPACE/1024/1024, 2) "USED SPACE MB"
  , ROUND(USED_PERCENT, 2) "USED %"
FROM TABLESPACE_STATS
ORDER BY 1, 2;
prompt
prompt ##############################################################
prompt # View Values With Comparing                                 #
prompt ##############################################################
select LAST.TABLESPACE_NAME
  , ROUND((LAST.TABLESPACE_SIZE - FIRST.TABLESPACE_SIZE)/1024/1024, 2) "SIZE GROWTH MB"
  , ROUND((LAST.USED_SPACE - FIRST.USED_SPACE)/1024/1024, 2) "USED SPACE GROWTH MB"
  , ROUND(LAST.USED_PERCENT - FIRST.USED_PERCENT, 2) "USED % GROWTH"
FROM (select TABLESPACE_NAME
        , TABLESPACE_SIZE
		, USED_SPACE
		, USED_PERCENT
      FROM TABLESPACE_STATS
      WHERE TRUNC(COLLECTION_DATE) = '16-JUL-12') LAST
	  , (select TABLESPACE_NAME
	       , TABLESPACE_SIZE
		   , USED_SPACE
		   , USED_PERCENT
         FROM TABLESPACE_STATS
         WHERE TRUNC(COLLECTION_DATE) = '02-JUL-2012') FIRST
WHERE LAST.TABLESPACE_NAME = FIRST.TABLESPACE_NAME
ORDER BY 1;
prompt
prompt ##############################################################
prompt # CREATE TABLESPACE DBA_LOG_DATA datafile '+DATA' SIZE 100M autoextend on next 200M maxsize 32000M;
prompt ##############################################################
prompt
prompt ##############################################################
prompt # CREATING USER DBA_LOG TO MONITORING THE ENVIRONMENT        #
prompt ##############################################################
CREATE USER dba_log IDENTIFIED BY pwddba DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS temporary tablespace temp ACCOUNT LOCK;
GRANT CREATE PROCEDURE TO dba_log;
GRANT CREATE TABLE TO dba_log;
GRANT select ON dba_objects to dba_log;
GRANT select ON dba_segments to dba_log;
GRANT select ON dba_data_files to dba_log;
GRANT select ON dba_free_space to dba_log;
GRANT select ON dba_tables to dba_log;
prompt
prompt ##############################################################
prompt # CREATING SEQUENCE                                          #
prompt ##############################################################
CREATE SEQUENCE dba_log.log_seq;
prompt
prompt ##############################################################
prompt # CREATING TABLES                                            #
prompt ##############################################################
CREATE TABLE dba_log.log(
    id_log      number(10),
    routine     varchar2(100),
    user        varchar2(30) DEFAULT USER,
    begin       date DEFAULT SYSDATE,
    end         date,
    CONSTRAINT  log_pk PRIMARY KEY(id_log)
);
CREATE TABLE dba_log.errors (
    id_log      number(10),
    cod_error   number(10),
    message     varchar2(64),
    date        TIMESTAMP DEFAULT SYSTIMESTAMP
);
CREATE TABLE dba_log.tablespace (
    name        varchar2(30),
    maximum     number(8) NOT NULL,
    allocated   number(8) NOT NULL,
    utilized    number(8) NOT NULL,
    free        number(8) NOT NULL,
    date        date DEFAULT SYSDATE,
    CONSTRAINT  tablespaces_pk PRIMARY KEY (name,date)
);
CREATE TABLE dba_log.object_qt (
    type        varchar2(200),
    schema      varchar2(50),
    status      varchar2(7),
    qt          number(5) NOT NULL,
    date        date DEFAULT SYSDATE,
    CONSTRAINT object_qt_pk PRIMARY KEY (type, schema, status, date)
);
CREATE TABLE dba_log.object_invalid (
    type        varchar2(200),
    schema      varchar2(50),
    name        varchar2(128),
    date        date DEFAULT SYSDATE,
    CONSTRAINT object_invalid_pk PRIMARY KEY (type, schema, name, date)
);
CREATE TABLE dba_log.object_size (
    type        varchar2(200),
    tablespace  varchar2(30),
    schema      varchar2(50),
    name_part   varchar2(112),
    size        number(8),
    extents     number(5),
    num_reg     number(10),
    date        date DEFAULT SYSDATE,
    CONSTRAINT  objects_size_pk PRIMARY KEY (type, schema, name_part, date)
);
prompt
prompt ##############################################################
prompt # CREATING PROCEDURES                                        #
prompt ##############################################################
CREATE OR REPLACE PROCEDURE dba_log.tablespace_load AS
  v_log_seq number(10);
  v_code number(10);
  v_errm varchar2(64);
BEGIN
  select dba_log.log_seq.nextval INTO v_log_seq FROM dual;
  INSERT INTO dba_log.log (id_log, routine) VALUES (v_log_seq,'tablespace_load');
  INSERT INTO dba_log.tablespace (name, maximum, allocated, utilized, free)
  select u.tablespace_name,
      m.maximum,
      m.allocated,
      u.utilized,
      l.free
      FROM
        (select tablespace_name, CEIL(SUM(bytes)/1048576) utilized FROM dba_segments GROUP BY tablespace_name) u,
        (select tablespace_name, CEIL(SUM(bytes)/1048576) allocated, CEIL (SUM (DECODE (autoextensible, 'NO', bytes, maxbytes))/1048576) maximum FROM dba_data_files GROUP BY tablespace_name) m,
        (select tablespace_name, CEIL(SUM(bytes)/1048576) free FROM dba_free_space GROUP BY tablespace_name) l
      WHERE l.tablespace_name = u.tablespace_name AND l.tablespace_name = m.tablespace_name;
  UPDATE dba_log.log SET end = SYSDATE WHERE id_log = v_log_seq;
  COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      v_code := SQLCODE;
      v_errm := SUBSTR(SQLERRM, 1, 64);
      INSERT INTO dba_log.errors (id_log, cod_error, message) VALUES (v_log_seq, v_code, v_errm);
END;
/
CREATE OR REPLACE PROCEDURE dba_log.object_qt_load AS
  v_log_seq number(10);
  v_code number(10);
  v_errm varchar2(64);
BEGIN
  select dba_log.log_seq.nextval INTO v_log_seq FROM dual;
  INSERT INTO dba_log.log (id_log, routine) VALUES (v_log_seq,'object_qt_load');
  INSERT INTO dba_log.object_qt (type, schema, status, qt)
    select b.type, b.schema, b.status, b.qt
      FROM
        (select object_type type, owner schema, status FROM dba_objects
         MINUS
         select type, schema, status FROM dba_log.object_qt) a,
        (select object_type type, owner schema, status, count(*) qt FROM dba_objects GROUP BY owner, object_type, status) b
      WHERE
        a.type = b.type AND
        a.schema = b.schema AND
        a.status = b.status
      ORDER BY schema, type, status;
  INSERT INTO dba_log.object_qt (type, schema, status, qt)
    select o.type, o.schema, o.status, o.qt
      FROM dba_log.object_qt q,
        (select object_type type, owner schema, status, count(*) qt FROM dba_objects GROUP BY owner, object_type, status) o,
        (select type, schema, status, max(date) date FROM dba_log.object_qt GROUP BY type, schema, status) d
      WHERE
        o.type = q.type AND
        o.type = d.type AND
        o.schema = q.schema AND
        o.schema = d.schema AND
        o.status = q.status AND
        o.status = d.status AND
        q.date = d.date AND
        o.qt != q.qt
        order by o.schema, o.type, o.status;
  UPDATE dba_log.log SET end = SYSDATE WHERE id_log = v_log_seq;
  COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      v_code := SQLCODE;
      v_errm := SUBSTR(SQLERRM, 1 , 64);
      INSERT INTO errors (id_log, cod_error, message) VALUES (v_log_seq, v_code, v_errm);
END;
/
CREATE OR REPLACE PROCEDURE dba_log.object_invalid_load AS
  v_log_seq number(10);
  v_code number(10);
  v_errm varchar2(64);
BEGIN
  select dba_log.log_seq.nextval INTO v_log_seq FROM dual;
  INSERT INTO dba_log.log (id_log, routine) VALUES (v_log_seq,'object_invalid_load');
  INSERT INTO dba_log.object_invalid (type, schema, name)
  select object_type type, owner schema, object_name name FROM dba_objects WHERE status != 'VALID'
  MINUS
  select type, schema, name FROM dba_log.object_invalid;
  UPDATE dba_log.log SET end = SYSDATE WHERE id_log = v_log_seq;
  COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      v_code := SQLCODE;
      v_errm := SUBSTR(SQLERRM, 1, 64);
      INSERT INTO dba_log.errors (id_log, cod_error, message) VALUES (v_log_seq, v_code, v_errm);
END;
/
CREATE OR REPLACE PROCEDURE dba_log.object_size_load AS
  v_log_seq number(10);
  v_code number(10);
  v_errm varchar2(64);
BEGIN
  select dba_log.log_seq.nextval INTO v_log_seq FROM dual;
  INSERT INTO dba_log.log (id_log, routine) VALUES (v_log_seq,'object_size_load');
  INSERT INTO dba_log.object_size (type, tablespace, schema, name_part, size, extents, num_reg)
    select b.type, b.tablespace, b.schema, b.name_part, b.size, b.extents, b.num_reg
    FROM
     (select segment_type type, owner schema, NVL2(partition_name, segment_name || '/' || partition_name, segment_name) name_part FROM dba_segments
      MINUS
      select type, schema, name_part FROM dba_log.object_size) a,
     (select s.segment_type type, s.tablespace_name tablespace, s.owner schema, NVL2(s.partition_name, s.segment_name || '/' || s.partition_name, s.segment_name) name_part, CEIL(s.bytes/1048576) size, s.extents, t.num_rows num_reg FROM dba_segments s, dba_tables t WHERE (s.bytes > 67108864 OR s.extents > 50 OR t.num_rows > 1000000) AND s.owner = t.owner (+)AND s.segment_name = t.table_name (+)) b
    WHERE
      a.type = b.type AND
      a.schema = b.schema AND
      a.name_part = b.name_part;
  INSERT INTO dba_log.object_size (type, tablespace, schema, name_part, size, extents, num_reg)
    select o.type, o.tablespace, o.schema, o.name_part, o.size, o.extents, o.num_reg FROM dba_log.object_size l,
    (select type, schema, name_part, max(date) date FROM dba_log.object_size GROUP BY type, schema, name_part) d,
    (select s.segment_type type, s.tablespace_name tablespace, s.owner schema, NVL2(s.partition_name, s.segment_name || '/' || s.partition_name, s.segment_name) name_part, CEIL(s.bytes/1048576) size, s.extents, t.num_rows num_reg
    FROM dba_segments s, dba_tables t WHERE (s.bytes > 67108864 OR s.extents > 50 OR t.num_rows > 1000000) AND s.owner = t.owner (+)AND s.segment_name = t.table_name (+)) o
    WHERE
        l.type = d.type AND
        l.type = o.type AND
        l.schema = d.schema AND
        l.schema = o.schema AND
        l.name_part = d.name_part AND
        l.name_part = o.name_part AND
        l.date = d.date AND
        (o.size != CEIL(l.size) OR l.extents != o.extents OR l.num_reg != o.num_reg)
      ORDER BY o.schema, o.tablespace, o.type desc;
  UPDATE dba_log.log SET end = SYSDATE WHERE id_log = v_log_seq;
  COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      v_code := SQLCODE;
      v_errm := SUBSTR(SQLERRM, 1, 64);
      INSERT INTO dba_log.errors (id_log, cod_error, message) VALUES (v_log_seq, v_code, v_errm);
END;
/
prompt
prompt ##############################################################
prompt # CREATING SCHEDULER                                         #
prompt ##############################################################
BEGIN
  DBMS_SCHEDULER.CREATE_WINDOW(
    window_name        => 'SYS.MONTH_START_WINDOW',
    resource_plan      => 'DEFAULT_PLAN',
    start_date         => SYSTIMESTAMP,
    duration           => numtodsinterval(240, 'minute'),
    repeat_interval    => 'FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=3',
    end_date           => null,
    window_priority    => 'LOW',
    comments           => 'Start of the month window for maintenance task'
  );
  DBMS_SCHEDULER.CREATE_JOB(
    job_name           => 'DBA_LOG.TABLESPACE_LOAD_MONTHLY',
    job_type           => 'STORED_PROCEDURE',
    job_action         => 'DBA_LOG.TABLESPACE_LOAD',
    schedule_name      => 'SYS.MONTH_START_WINDOW',
    enabled            => TRUE
  );
  DBMS_SCHEDULER.SET_ATTRIBUTE(
    name               => '"DBA_LOG"."TABLESPACE_LOAD_MONTHLY"',
    attribute          => 'job_priority',
    value              => 4
  );
  DBMS_SCHEDULER.CREATE_JOB(
    job_name           => 'DBA_LOG.OBJECT_SIZE_LOAD_WEEKLY',
    job_type           => 'STORED_PROCEDURE',
    job_action         => 'DBA_LOG.OBJECT_SIZE_LOAD',
    schedule_name      => 'SYS.WEEKEND_WINDOW',
    enabled            => TRUE
  );
  DBMS_SCHEDULER.SET_ATTRIBUTE(
    name               => 'DBA_LOG.OBJECT_SIZE_LOAD_WEEKLY',
    attribute          => 'job_priority',
    value              => 4
  );
  DBMS_SCHEDULER.CREATE_JOB(
    job_name           => 'DBA_LOG.OBJECT_INVALID_LOAD_DAILY',
    job_type           => 'STORED_PROCEDURE',
    job_action         => 'DBA_LOG.OBJECT_INVALID_LOAD',
    schedule_name      => 'SYS.WEEKNIGHT_WINDOW',
    enabled            => TRUE
  );
  DBMS_SCHEDULER.SET_ATTRIBUTE(
    name               => 'DBA_LOG.OBJECT_INVALID_LOAD_DAILY',
    attribute          => 'job_priority',
    value              => 4
  );
  DBMS_SCHEDULER.CREATE_JOB(
    job_name           => 'DBA_LOG.OBJECT_QT_LOAD_DAILY',
    job_type           => 'STORED_PROCEDURE',
    job_action         => 'DBA_LOG.OBJECT_QT_LOAD',
    schedule_name      => 'SYS.WEEKNIGHT_WINDOW',
    enabled            => TRUE
  );
  DBMS_SCHEDULER.SET_ATTRIBUTE(
    name               => 'DBA_LOG.OBJECT_QT_LOAD_DAILY',
    attribute          => 'job_priority',
    value              => 4
  );
END;
/
prompt
prompt ##############################################################
prompt # CREATING JOB                                               #
prompt ##############################################################
VARIABLE jobno NUMBER;
BEGIN
  DBMS_JOB.SUBMIT(:jobno, 'BEGIN DBA_LOG.OBJECT_QT_LOAD; END;',
  TRUNC(SYSDATE) + 1/24, 'TRUNC(SYSDATE) + 1/24 + 30');
  COMMIT;
END;
/
VARIABLE jobno NUMBER;
BEGIN
  DBMS_JOB.SUBMIT(:jobno, 'BEGIN DBA_LOG.TABLESPACE_LOAD; END;',
  TRUNC(SYSDATE) + 1/24, 'TRUNC(SYSDATE) + 1/24 + 30');
  COMMIT;
END;
/
VARIABLE jobno NUMBER;
BEGIN
  DBMS_JOB.SUBMIT(:jobno, 'BEGIN DBA_LOG.OBJECT_SIZE_LOAD; END;',
  TRUNC(SYSDATE) + 1/24, 'TRUNC(SYSDATE) + 1/24 + 30');
  COMMIT;
END;
/
VARIABLE jobno NUMBER;
BEGIN
  DBMS_JOB.SUBMIT(:jobno, 'BEGIN DBA_LOG.OBJECT_INVALID_LOAD; END;',
  TRUNC(SYSDATE) + 1/24, 'TRUNC(SYSDATE) + 1/24 + 30');
  COMMIT;
END;
/
VARIABLE jobno NUMBER;
BEGIN
  DBMS_JOB.SUBMIT(:jobno, 'BEGIN DBA_LOG.OBJECT_QT_LOAD; END;',
  TRUNC(SYSDATE) + 1/24, 'TRUNC(SYSDATE) + 1/24 + 30');
  COMMIT;
END;
/
prompt
prompt ##############################################################
prompt # MONITORING INSTALLED SUCESSFULY                            #
prompt ##############################################################
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
monitor) # "MONITOR ALL DATABASE INFORMATIONS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} MONITOR ALL DATABASE INFORMATIONS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
echo ${ECHO} ">--------------------------------------------------------------------------------------------------
${RED} SERVER_HOST_NAME...................: ${BLACK} ${GREEN} ${HOST} ${BLACK}
${RED} SERVER_IP_ADDR.....................: ${BLACK} ${GREEN} ${IPADDR} ${BLACK}
${RED} SERVER_OPERATION_SYSTEM............: ${BLACK} ${GREEN} ${OS} ${BLACK}
${RED} SERVER_HARDWARE....................: ${BLACK} ${GREEN} ${SRVHARDWARE} ${BLACK}
${RED} OPERATION_SYSTEM_DISTRIBUTION......: ${BLACK} ${GREEN} ${OSDISTRO} ${BLACK}
${RED} SERVER_KERNEL_VERSION..............: ${BLACK} ${GREEN} ${KKERNEL} ${BLACK}
${RED} SERVER_PROCESSES_FAMILY............: ${BLACK} ${GREEN} ${PFAMILY} ${BLACK}
${RED} SERVER_PROCESSES_TYPE..............: ${BLACK} ${GREEN} ${PFPU_TYPE} ${BLACK}
${RED} SERVER_PHYSICAL_PROCESSES..........: ${BLACK} ${GREEN} ${PCPU} ${BLACK}
${RED} SERVER_PROCESSES...................: ${BLACK} ${GREEN} ${CCPU} ${BLACK}
${RED} SERVER_DISK_SPACE_WARNING..........: ${BLACK} ${RED} ${WARNING_SPACE} ${BLACK}
${RED} SERVER_DISK_SPACE_CRITICAL.........: ${BLACK} ${RED} ${CRITICAL_SPACE} ${BLACK}
${RED} SERVER_MEMORY......................: ${BLACK} ${RED} ${TMEM} ${BLACK}
${RED} SERVER_MEMORY_USED.................: ${BLACK} ${BLUE} ${UMEM} ${BLACK}
${RED} SERVER_MEMORY_FREE.................: ${BLACK} ${GREEN} ${FMEM} ${BLACK}
${RED} SERVER_SWAP........................: ${BLACK} ${RED} ${STMEM} ${BLACK}
${RED} SERVER_SWAP_USED...................: ${BLACK} ${BLUE} ${SUMEM} ${BLACK}
${RED} SERVER_SWAP_FREE...................: ${BLACK} ${GREEN} ${SFMEM} ${BLACK}
${RED} SERVER_UPTIME......................: ${BLACK} ${GREEN} ${UUPTIME} ${BLACK}
${RED} SERVER_TEMPERATURE.................: ${BLACK} ${RED} ${SRVTEMP} ${BLACK}
${RED} SERVER_MEMORY_BANKS................: ${BLACK} ${GREEN} ${SRVMEMBANK} ${BLACK}
${RED} SERVER_DISKS_BANKS.................: ${BLACK} ${GREEN} ${SRVDISKS} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} ORACLE_VERSION.....................: ${BLACK} ${GREEN} ${DBVERSION} ${BLACK}
${RED} ORACLE_RELEASE.....................: ${BLACK} ${GREEN} ${ODBRELEASE} ${BLACK}
${RED} ORACLE_EDITION.....................: ${BLACK} ${GREEN} ${EEDITION} ${BLACK}
${RED} ORACLE_HOME........................: ${BLACK} ${GREEN} ${ORACLE_HOME} ${BLACK}
${RED} CONTAINER_DATABASE.................: ${BLACK} ${GREEN} ${ISCONTAINERDB} ${BLACK}
${RED} MAX_PDBS...........................: ${BLACK} ${GREEN} ${MMAX_PDB} ${BLACK}
${RED} MAX_PDBS...........................: ${BLACK} ${GREEN} ${QQTD_PDB} ${BLACK}
${RED} DATABASE_UPTIME....................: ${BLACK} ${GREEN} ${DDBUPTIME} ${BLACK} ${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
${RED} DATABASE_WAS_UPDATED_ON............: ${BLACK} ${GREEN} ${VVERSIONTIME} ${BLACK} ${BLUE} ${VVERSIONTIMED} Day(s) AGO ${BLACK}
${RED} ORA-00600_LASTS_30_DAY(S)..........: ${BLACK} ${RED} ${OORA600} ${BLACK}
${RED} ERRORS_ON_ALERTLOG_LASTS_15_DAY(S).: ${BLACK} ${RED} ${EERRORS} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} DATABASE_OPEN_MODE.................: ${BLACK} ${GREEN} ${DDBMODE} ${BLACK}
${RED} DATABASE_ACTIVE_STATE..............: ${BLACK} ${GREEN} ${AACTSTATE} ${BLACK}
${RED} DATABASE_ROLE......................: ${BLACK} ${GREEN} ${DDBROLE} ${BLACK}
${RED} DATABASE_NAME......................: ${BLACK} ${GREEN} ${ORACLE_SID} ${BLACK}
${RED} DATABASE_UNIQUE_NAME...............: ${BLACK} ${GREEN} ${DBUNNAME} ${BLACK}
${RED} DATABASE_SERVICE_NAME..............: ${BLACK} ${GREEN} ${DBSERVNAME} ${BLACK}
${RED} DATABASE_BUFFER_CACHE..............: ${BLACK} ${GREEN} ${DDBBUFFERK}(K) ${BLACK}
${RED} DATABASE_BLOCK_SIZE................: ${BLACK} ${GREEN} ${DDBSIZEK}(K) ${BLACK} ${BLUE} ${DDBSIZEM}(M) ${BLACK}
${RED} DATABASE_SIZE......................: ${BLACK} ${GREEN} ${DDB_SIZEM}(M) ${BLACK} ${BLUE} ${DDB_SIZEG}(G) ${BLACK} ${YEL} ${DDB_SIZET}(T) ${BLACK}
${RED} DATABASE_CACHE_SIZE................: ${BLACK} ${GREEN} ${DDBCACHESIZEK}(K) ${BLACK} ${BLUE} ${DDBCACHESIZEM}(M) ${BLACK} ${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
${RED} TABLESPACE_SIZE_WARNING............: ${BLACK} ${RED} ${TTBS_WARNING} ${BLACK}
${RED} TABLESPACE_SIZE_CRITICAL...........: ${BLACK} ${RED} ${TTBS_CRITICAL} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} INSTANCE_SCN.......................: ${BLACK} ${GREEN} ${DDBSCN} ${BLACK}
${RED} INSTANCE_MEM_MAX_TARGET............: ${BLACK} ${GREEN} ${MMEMMAXM}(M) ${BLACK} ${BLUE} ${MMEMMAXG}(G) ${BLACK} ${YEL} ${MMEMMAXT}(T) ${BLACK}
${RED} INSTANCE_MEM_TARGET................: ${BLACK} ${GREEN} ${MMENTARGETM}(M) ${BLACK} ${BLUE} ${MMENTARGETG}(G) ${BLACK} ${YEL} ${MMENTARGETT}(T) ${BLACK}
${RED} INSTANCE_SGA_MAX_SIZE..............: ${BLACK} ${GREEN} ${SSGAMAXM}(M) ${BLACK} ${BLUE} ${SSGAMAXG}(G) ${BLACK} ${YEL} ${SSGAMAXT}(T) ${BLACK}
${RED} INSTANCE_SGA_TARGET................: ${BLACK} ${GREEN} ${SSGATARGETM}(M) ${BLACK} ${BLUE} ${SSGATARGETG}(G) ${BLACK} ${YEL} ${SSGATARGETT}(T) ${BLACK}
${RED} INSTANCE_PGA_AGGREGATE_TARGET......: ${BLACK} ${GREEN} ${PPGATARGETK}(K) ${BLACK} ${BLUE} ${PPGATARGETM}(M) ${BLACK} ${YEL} ${PPGATARGETG}(G) ${BLACK}
${RED} INSTANCE_PGA_AGGREGATE_LIMIT.......: ${BLACK} ${GREEN} ${PPGALIMITK}(K) ${BLACK} ${BLUE} ${PPGALIMITM}(M) ${BLACK} ${YEL} ${PPGALIMITG}(G) ${BLACK}
${RED} INSTANCE_SHARED_POOL_SIZE..........: ${BLACK} ${GREEN} ${SSHAREDPOOLK}(K) ${BLACK} ${BLUE} ${SSHAREDPOOLM}(M) ${BLACK} ${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} ASM................................: ${BLACK} ${GREEN} ${ISASM} ${BLACK}
${RED} ARCHIVE............................: ${BLACK} ${GREEN} ${ARCH} ${BLACK}
${RED} ACTIVE_DATAGUARD...................: ${BLACK} ${GREEN} ${ISDG_ACT} ${BLACK}
${RED} DATAGUARD..........................: ${BLACK} ${GREEN} ${ISDGDB} ${BLACK}
${RED} EXADATA............................: ${BLACK} ${GREEN} ${ISEXADATAOK} ${BLACK}
${RED} GOLDENGATE.........................: ${BLACK} ${GREEN} ${OOGG} ${BLACK}
${RED} MULTIMEDIA_( < 19c )...............: ${BLACK} ${GREEN} ${OORAMULTIMEDIA} ${BLACK}
${RED} ORACLE_VAULT.......................: ${BLACK} ${GREEN} ${OVAULT} ${BLACK}
${RED} PARTITIONING.......................: ${BLACK} ${GREEN} ${DDBPART} ${BLACK}
${RED} CLUSTER_DATABASE...................: ${BLACK} ${GREEN} ${ISRACDB} ${BLACK}
${RED} SPATIAL............................: ${BLACK} ${GREEN} ${DDBSPAT} ${BLACK}
${RED} SQL_TUNING.........................: ${BLACK} ${GREEN} ${SSQLTUN} ${BLACK}
${RED} TEXT...............................: ${BLACK} ${GREEN} ${OORATEXT} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} INVALID_OBJECTS....................: ${BLACK} ${RED} ${IINVOBJ} ${BLACK}
${RED} TOTAL_LOG_GROUP....................: ${BLACK} ${RED} ${LLOG_GROUPT} ${BLACK}
${RED} TOTAL_STANDBY_LOG_GROUP............: ${BLACK} ${RED} ${LLOG_STB_GROUPT} ${BLACK}
${RED} LOG_GROUP_ACTIVE...................: ${BLACK} ${RED} ${LLOG_GROUPA} ${BLACK}
${RED} LOG_GROUP_INACTIVE.................: ${BLACK} ${RED} ${LLOG_GROUPI} ${BLACK}
${RED} ONLINE_REDOLOG.....................: ${BLACK} ${GREEN} ${RREDO} ${BLACK}
${RED} STANDBY_REDOLOG....................: ${BLACK} ${GREEN} ${SSREDO} ${BLACK}
${RED} ONLYNE_REDOLOG_SIZE................: ${BLACK} ${GREEN} ${RREDOM}(M) ${BLACK} ${BLUE} ${RREDOG}(G) ${BLACK}
${RED} STANDBY_REDOLOG_SIZE...............: ${BLACK} ${GREEN} ${SSREDOM}(M) ${BLACK} ${BLUE} ${SSREDOG}(G) ${BLACK}
${RED} PROTECTION_MODE....................: ${BLACK} ${GREEN} ${PPROTMODE} ${BLACK}
${RED} STBY_FILE_MANAGEMENT...............: ${BLACK} ${GREEN} ${SSTBYFILEMAN} ${BLACK}
${RED} FORCE_LOGGING......................: ${BLACK} ${GREEN} ${DDBFLOG} ${BLACK}
${RED} FLASHBACK..........................: ${BLACK} ${GREEN} ${DDBFLASHB} ${BLACK}
${RED} FLASHBACK_SIZE.....................: ${BLACK} ${GREEN} ${FFLASHSIZEM}(M) ${BLACK} ${BLUE} ${FFLASHSIZEG}(G) ${BLACK} ${YEL} ${FFLASHSIZET}(T) ${BLACK}
${RED} FLASHBACK_RETENTION................: ${BLACK} ${GREEN} ${FFLASHRETM}(M) ${BLACK} ${BLUE} ${FFLASHRETH}(H) ${BLACK} ${YEL} ${FFLASHRETD}(D) ${BLACK}
${RED} UNDO_RETENTION.....................: ${BLACK} ${GREEN} ${UUNDOS}(S) ${BLACK} ${BLUE} ${UUNDOM}(M) ${BLACK} ${YEL} ${UUNDOH}(H) ${BLACK}
${RED} UNDO_MANAGEMENT....................: ${BLACK} ${GREEN} ${UUNDO_MANAG} ${BLACK}
${RED} ARCH_LAG_TARGET....................: ${BLACK} ${RED} ${AARCHLAG} ${BLACK} ${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK} ${YEL} ${AARCHLAGTIMEH}(H) ${BLACK} ${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
${RED} LOG_ARCH_FORMAT....................: ${BLACK} ${GREEN} ${LLOGARCHFOR} ${BLACK}
${RED} OPEN_CURSORS.......................: ${BLACK} ${GREEN} ${OOPENCUR} ${BLACK}
${RED} PROCESSES..........................: ${BLACK} ${GREEN} ${PPROCESS} ${BLACK}
${RED} RECYCLEBIN.........................: ${BLACK} ${GREEN} ${RRECYCLEBIN} ${BLACK}
${RED} CONTROL_FILE.......................: ${BLACK} ${GREEN} ${CCTRL} ${BLACK}
${RED} CPU_COUNT:.........................: ${BLACK} ${GREEN} ${CCPU_COUNT} ${BLACK}
${RED} SPFILE.............................: ${BLACK} ${GREEN} ${SSPFILE} ${BLACK}
${RED} COMPATIBLE.........................: ${BLACK} ${GREEN} ${CCOMPATIBLE} ${BLACK}
${RED} STBY_ARCH_DEST.....................: ${BLACK} ${GREEN} ${SSTBY_ARCH_DEST} ${BLACK}
${RED} FAL_CLIENT.........................: ${BLACK} ${GREEN} ${FFAL_CLIENT} ${BLACK}
${RED} FAL_SERVER.........................: ${BLACK} ${GREEN} ${FFAL_SERVER} ${BLACK}
${RED} DB_FILES_TOTAL.....................: ${BLACK} ${GREEN} ${DDB_FILES} ${BLACK}
${RED} DB_FILES_NOW.......................: ${BLACK} ${GREEN} ${DDB_FILES_NOW} ${BLACK}
${RED} PARALLEL_SERVER....................: ${BLACK} ${GREEN} ${PPARALLEL_SERV} ${BLACK}
${RED} DB_RECOVERY_FILE_DEST..............: ${BLACK} ${GREEN} ${DDB_REC_FILE_DEST} ${BLACK}
${RED} DB_RECOVERY_FILE_SIZE..............: ${BLACK} ${GREEN} ${DDB_REC_FILE_SIZEG}(G) ${BLACK} ${BLUE} ${DDB_REC_FILE_SIZET}(T) ${BLACK}
${RED} DB_RECOVERY_DEST_SIZE..............: ${BLACK} ${GREEN} ${DDBRECSIZEG}(G) ${BLACK} ${BLUE} ${DDBRECSIZET}(T) ${BLACK}
${RED} DB_RECOVERY_DEST_SIZE_USED.........: ${BLACK} ${GREEN} ${DDBRECSIZEUM}(M) ${BLACK} ${BLUE} ${DDBRECSIZEUG}(G) ${BLACK} ${RED} ${DDBRECSIZEUP}% ${BLACK}
${RED} FAST_START_MTTR....................: ${BLACK} ${GREEN} ${FFAST_START_MTTR} ${BLACK}
${RED} PARALLEL_MIN_SERVER................: ${BLACK} ${GREEN} ${PPARALLEL_MIN_SERV} ${BLACK}
${RED} PARALLEL_MAX_SERVER................: ${BLACK} ${GREEN} ${PPARALLEL_MAX_SERV} ${BLACK}
${RED} AUDIT_FILE_DEST....................: ${BLACK} ${GREEN} ${AAUDIT_FILE_DEST} ${BLACK}
${RED} PARALLEL_DEG_POLICY................: ${BLACK} ${GREEN} ${PPARALLEL_DEG_POL} ${BLACK}
${RED} PARALLEL_ADAP_M....................: ${BLACK} ${GREEN} ${PPARALLEL_ADAP_M} ${BLACK}
${RED} PARALLEL_THREAD_CPU................: ${BLACK} ${GREEN} ${PPARALLEL_THREAD_CPU} ${BLACK}
${RED} PARALLEL_AUTO_TUNING...............: ${BLACK} ${GREEN} ${PPARALLEL_AUTO_TUNING} ${BLACK}
${RED} PARALLEL_IO_CAP....................: ${BLACK} ${GREEN} ${PPARALLEL_IO_CAP} ${BLACK}
${RED} OPTIMIZER_INDEX_COST...............: ${BLACK} ${GREEN} ${OOPTIMIZER_INDEX_COST} ${BLACK}
${RED} OPTIMIZER_INDEX_COST_CACH..........: ${BLACK} ${GREEN} ${OOPTIMIZER_INDEX_COST_CACH} ${BLACK}
${RED} PARALLEL_SERV_TARGET...............: ${BLACK} ${GREEN} ${PPARALLEL_SERV_TARGET} ${BLACK}
${RED} DG_BROKER_1........................: ${BLACK} ${GREEN} ${DDG_BROKER_1} ${BLACK}
${RED} DG_BROKER_2........................: ${BLACK} ${GREEN} ${DDG_BROKER_2} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} RMAN_FULL_STATUS...................: ${BLACK} ${GREEN} ${RMANFULL} ${BLACK}
${RED} RMAN_ARCHIVE_STATUS................: ${BLACK} ${GREEN} ${RMANARCH} ${BLACK}
${RED} RMAN_LAST_EXECUTION................: ${BLACK} ${GREEN} ${RRMANLAST} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} DATAGUARD_NAME.....................: ${BLACK} ${GREEN} ${DG_NAME} ${BLACK}
${RED} DATAGUARD_STATUS...................: ${BLACK} ${GREEN} ${DG_STATUS} ${BLACK}
${RED} PROTECTION_MODE....................: ${BLACK} ${GREEN} ${DG_PROTECT} ${BLACK}
${RED} FAST_START_FAILOVER................: ${BLACK} ${GREEN} ${DG_FAST} ${BLACK}
${RED} FAST_START_FAILOVER_THRESHOLD......: ${BLACK} ${GREEN} ${DG_FAST_THRES} ${BLACK}
${RED} OPERATION_TIMEOUT..................: ${BLACK} ${GREEN} ${DG_OPER_TIME} ${BLACK}
${RED} FAST_START_FAILOVER_LAG_LIMIT......: ${BLACK} ${GREEN} ${DG_FAST_LIMIT} ${BLACK}
${RED} COMMUNICATION_TIMEOUT..............: ${BLACK} ${GREEN} ${DG_COMM_TIME} ${BLACK}
${RED} OBSERVER_RECONNECT.................: ${BLACK} ${GREEN} ${DG_OBSER_RECO} ${BLACK}
${RED} FAST_START_FAILOVER_AUTO_REINSTATE.: ${BLACK} ${GREEN} ${DG_FAST_A_R} ${BLACK}
${RED} FAST_START_FAILOVER_PMY_SHUTDOWN...: ${BLACK} ${GREEN} ${DG_FAST_SHUT} ${BLACK}
${RED} BY_STANDER_FOLLOW_ROLE_CHANGE......: ${BLACK} ${GREEN} ${DG_BYST_CHANG} ${BLACK}
${RED} OBSERVER_OVERRIDE..................: ${BLACK} ${GREEN} ${DG_OBSER_OVER} ${BLACK}
${RED} EXTERNAL_DESTINATION_1.............: ${BLACK} ${GREEN} ${DG_EXT_DEST1} ${BLACK}
${RED} EXTERNAL_DESTINATION_2.............: ${BLACK} ${GREEN} ${DG_EXT_DEST} ${BLACK}
${RED} PRIMARY_LOST_WRITE_ACTION..........: ${BLACK} ${GREEN} ${DG_PRIMARY_ACT} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} NLS_LANGUAGE_FORMAT................: ${BLACK} ${GREEN} ${NLS_LANGUAGE} ${BLACK}
${RED} NLS_DATE_LANGUAGE..................: ${BLACK} ${GREEN} ${NLS_DATE_LANGUAGE} ${BLACK}
${RED} NLS_CHARACTERSET...................: ${BLACK} ${GREEN} ${NLS_CHARACTERSET} ${BLACK}
${RED} NLS_TERRITORY......................: ${BLACK} ${GREEN} ${NNLS_TERRITORY} ${BLACK}
${RED} NLS_ISO_CURRENCY...................: ${BLACK} ${GREEN} ${NNLS_ISO_CURRENCY} ${BLACK}
${RED} NLS_COMP...........................: ${BLACK} ${GREEN} ${NNLS_COMP} ${BLACK}
${RED} NLS_SORT...........................: ${BLACK} ${GREEN} ${NNLS_SORT} ${BLACK}
${RED} NLS_CURRENCY.......................: ${BLACK} ${GREEN} ${NNLS_CURRENCY} ${BLACK}
${RED} NLS_DUAL_CURRENCY..................: ${BLACK} ${GREEN} ${NNLS_DUAL_CURRENCY} ${BLACK}
${RED} NLS_NUM_CHAR.......................: ${BLACK} ${GREEN} ${NNLS_NUM_CHAR} ${BLACK}
${RED} NLS_CALENDAR.......................: ${BLACK} ${GREEN} ${NNLS_CALENDAR} ${BLACK}
${RED} NLS_DATE_FORMAT....................: ${BLACK} ${GREEN} ${NLS_DATE_FORMAT} ${BLACK}
${RED} NLS_TIME_FORMAT....................: ${BLACK} ${GREEN} ${NNLS_TIME_FORMAT} ${BLACK}
${RED} NLS_TIMESTAMP_FOR..................: ${BLACK} ${GREEN} ${NNLS_TIMESTAMP_FOR} ${BLACK}
${RED} NLS_TIME_TZ........................: ${BLACK} ${GREEN} ${NNLS_TIME_TZ} ${BLACK}
${RED} NLS_TIMESTAMP_TZ...................: ${BLACK} ${GREEN} ${NNLS_TIMESTAMP_TZ} ${BLACK}
>--------------------------------------------------------------------------------------------------
${RED} LEGEND: (K) = KB | (M) = MB | (G) = GB | (T) = TB | (S) = Seconds | (M) = Minutes | (H) = Hours | (D) = Days ${BLACK}"
#
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
dash.install) # "SQL DASHBOARD INSTALLATION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SQL DASHBOARD INSTALLATION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- CREATING DASHBOARD ENVIRONMENT ON SYSTEM --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_dba_dash_install
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- DASHBOARD ENVIRONMENT ON SYSTEM CREATED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SQL DASHBOARD INSTALLED ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
dash) # "SQL DASHBOARD [ REAL TIME MONITORING ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SQL DASHBOARD [ REAL TIME MONITORING ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${DASH_EXISTS} = "" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} " -- YOU DON'T HAVE THE DASHBOARD INSTALLED YET, CHOOSE THE OPTION: ${RED} dash.install ${BLACK} --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
elif [ ${DASH_EXISTS} = "JSS" ]
then
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} " -- TO EXIT OF THE DASHBOARD: ${RED} CTRL + C ${BLACK} 2 TIMES AND ${RED} ENTER ${BLACK} --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
conn / as sysdba
alter session set current_schema=system;
SET LINESIZE 5000 pagesize 0 Arraysize 51 TAB OFF
select * from table(jss.gtop(51));
/
quit;
EOF
else
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} " -- YOU DON'T HAVE THE DASHBOARD INSTALLED YET, CHOOSE THE OPTION: ${RED} dash.install ${BLACK} --"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
fi
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
check) # "CHECK HEALTH OF ALL ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- CHECK HEALTH OF ALL ENVIRONMENT -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- DO YOU WANT SEND ALL INFORMATIONS TO YOUR EMAIL? [ n ] or [ y ] -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
YESNO=""
read YESNO
if [ "${YESNO}" = "" ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- YOU NEED TO SET AN OPTION [ n ] or [ y ] -- ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
elif [ "${YESNO}" = "y" ] || [ "${YESNO}" = "Y" ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- CREATING REPORT FILE, PLEASE WAIT!!! -- ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  sleep 2
  func_load 100
  func_dba_check_with_report_file
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- REPORT FILE CREATED AND SENT, PLEASE CHECK YOUR EMAIL!!! -- ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  read
  func_load 100
elif [ "${YESNO}" = "n" ] || [ "${YESNO}" = "N" ]
then
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- YOU CHOOSED TO NOT SEND ALL INFORMATIONS TO YOUR EMAIL -- ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  sleep 2
  func_load 100
  func_dba_check_without_report_file
else
  clear
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- YOU NEED TO SET AN OPTION [ n ] or [ y ] -- ${BLACK}"
  echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
  sleep 2
  func_load 100
fi
YESNO=""
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
report) # "CREATE A FULL REPORT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CREATE A FULL REPORT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- Creating File Report, Please Wait!!! --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
func_dba_report
bzip2 -9 /tmp/*_${ORACLE_SID}*.html
mail -s "${DATE}_${ORACLE_SID}_dbinfo.html" -a /tmp/*_${ORACLE_SID}*.html.bz2 ${EMAIL_1} < /tmp/*_${ORACLE_SID}*.html.bz2
mail -s "${DATE}_${ORACLE_SID}_dbinfo.html" -a /tmp/*_${ORACLE_SID}*.html.bz2 ${EMAIL_2} < /tmp/*_${ORACLE_SID}*.html.bz2
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- The File Was Created on /tmp/ -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "/tmp/<DATE_TIME>_<ORACLE_SID>_<HOSTNAME>.html.bz2"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#
#########################################################################################################
# RAC MENU #
#########################################################################################################
#
#########################################################################################################
rac) # Menu RAC Environments
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu RAC Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${ISRACDB} = "" ] || [ ${ISRACDB} = "false" ] || [ ${ISRACDB} = "FALSE" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- This Environment is NOT Oracle Cluster [ RAC ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Press ENTER to Back to Main Menu -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
clear
elif [ ${ISRACDB} != "" ] || [ ${ISRACDB} = "true" ] || [ ${ISRACDB} = "TRUE" ]
then
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK} SHOW INFOS ABOUT CHECK CLUSTER ALL                |+|-${RED}  2 ${BLACK} SHOW INFOS ABOUT CHECK CLUSTER                 |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK} SHOW INFOS ABOUT CHECK CRS                        |+|-${RED}  4 ${BLACK} SHOW INFOS ABOUT CHECK CSS                     |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK} SHOW INFOS ABOUT CHECK EVM                        |+|-${RED}  6 ${BLACK} SHOW INFOS ABOUT CHECK CTSS                    |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK} SHOW INFOS ABOUT OCRCHECK                         |+|-${RED}  8 ${BLACK} SHOW INFOS ABOUT CRCCHECK                      |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK} SHOW INFOS ABOUT CRFCHECK                         |+|-${RED} 10 ${BLACK} SHOW INFOS ABOUT CSS VOTEDISK                  |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK} SHOW INFOS ABOUT CSS IPMI CONFIG                  |+|-${RED} 12 ${BLACK} SHOW INFOS ABOUT CSS IPMI DEVICE               |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK} SHOW INFOS ABOUT CRS ACTIVE VERSION               |+|-${RED} 14 ${BLACK} SHOW INFOS ABOUT CRS ADMINISTRATOR             |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK} SHOW INFOS ABOUT CRS AUTOSTART                    |+|-${RED} 16 ${BLACK} SHOW INFOS ABOUT CLUSTERWARE VERSION / STATUS  |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|-${RED} 17 ${BLACK}                                                   |+|-${RED} 18 ${BLACK} SHOW INFOS ABOUT CRS RELEASE VERSION           |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK} SHOW INFOS ABOUT CRS RELEASE PATCH                |+|-${RED} 20 ${BLACK} SHOW INFOS ABOUT CRS SOFTWARE PATCH            |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK} SHOW INFOS ABOUT CRS SOFTWARE VERSION             |+|-${RED} 22 ${BLACK} SHOW INFOS ABOUT CRS SOFTWARE VERSION ALL      |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK} SHOW INFOS ABOUT CRS CLUSTER GUID                 |+|-${RED} 24 ${BLACK} SHOW INFOS ABOUT CSS DIAG WAIT                 |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK} SHOW INFOS ABOUT CSS PRIORITY                     |+|-${RED} 26 ${BLACK} SHOW INFOS ABOUT CSS LOG FILE SIZE             |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK} SHOW INFOS ABOUT CSS IPMI ADDR                    |+|-${RED} 28 ${BLACK} SHOW INFOS ABOUT CSS REBOOT TIME               |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK} SHOW INFOS ABOUT CSS MISSCOUNT                    |+|-${RED} 30 ${BLACK} SHOW INFOS ABOUT CSS DISKTIMEOUT               |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK} SHOW INFOS ABOUT CSS LEAF MISSCOUNT               |+|-${RED} 32 ${BLACK} SHOW INFOS ABOUT CLUSTER MODE STATUS           |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK} SHOW INFOS ABOUT CLUSTER MODE CONFIG              |+|-${RED} 34 ${BLACK} SHOW INFOS ABOUT CLUSTER HUB SIZE              |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK} SHOW INFOS ABOUT NODE ROLE CONFIG ALL             |+|-${RED} 36 ${BLACK} SHOW INFOS ABOUT NODE ROLE STATUS ALL          |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK} SHOW INFOS ABOUT GET PERM RESOURCE                |+|-${RED} 38 ${BLACK} SHOW INFOS ABOUT GET PERM TYPE                 |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK} SHOW INFOS ABOUT GET PERM SERVER POOL             |+|-${RED} 40 ${BLACK} SHOW INFOS ABOUT GET PERM CATEGORY             |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK} SHOW INFOS ABOUT GET PERM POLICYSET               |+|-${RED} 42 ${BLACK} SHOW INFOS ABOUT LSMODULES CRS                 |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK} SHOW INFOS ABOUT LSMODULES CSS                    |+|-${RED} 44 ${BLACK} SHOW INFOS ABOUT LSMODULES EVM                 |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK} SHOW INFOS ABOUT OCR CONFIG BACKUP                |+|-${RED} 46 ${BLACK} SHOW INFOS ABOUT OCLUMON MANAGE REP SIZE       |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK} SHOW INFOS ABOUT OIFCFG GETIF                     |+|-${RED} 48 ${BLACK} SHOW INFOS ABOUT CRS_STAT -T                   |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK} SHOW INFOS ABOUT CRS_STAT -P                      |+|-${RED} 50 ${BLACK} SHOW INFOS ABOUT CRSCTL STAT RES -T -INIT      |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK} SHOW INFOS ABOUT CRSCTL STAT RES -T               |+|-${RED} 52 ${BLACK} SHOW INFOS ABOUT CRSCTL STAT RES -P            |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK} SHOW INFOS ABOUT CRSCTL STATUS RESOURCE           |+|-${RED} 54 ${BLACK} SHOW INFOS ABOUT CRSCTL STATUS TYPE            |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK} SHOW INFOS ABOUT CRSCTL STATUS SERVER             |+|-${RED} 56 ${BLACK} SHOW INFOS ABOUT CRSCTL STATUS SERVER POOL     |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK} SHOW INFOS ABOUT SRVCTL STATUS SERVICE            |+|-${RED} 58 ${BLACK} SHOW INFOS ABOUT SRVCTL STATUS ASM             |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK} SHOW INFOS ABOUT SRVCTL CONFIG ASM                |+|-${RED} 60 ${BLACK} SHOW INFORS ABOUT SRVCTL CONFIG SCAN_LISTENER  |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK} SHOW INFORS ABOUT SRVCTL CONFIG SCAN              |+|-${RED} 62 ${BLACK} SHOW INFORS ABOUT SRVCTL CONFIG GNS            |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK} SHOW INFORS ABOUT SRVCTL STATUS GNS               |+|-${RED} 64 ${BLACK} CLUVFY HEALTHCHECK CLUSTER BEST PRACTICE       |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK} CLUVFY HEALTHCHECK ASM BEST PRACTICE              |+|-${RED} 66 ${BLACK} CLUVFY HEALTHCHECK DATABASE BEST PRACTICE      |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK} SHOW INFOS ABOUT ACFS DRIVE STATE VERSION         |+|-${RED} 68 ${BLACK} SHOW INFOS ABOUT ACFS DBG                      |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK} SHOW INFOS ABOUT ACFS DBG DETAILS                 |+|-${RED} 70 ${BLACK} SHOW INFOS ABOUT ACFSUTIL PLOG CONFIG          |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK} SHOW INFOS ABOUT ACFSUTIL FS                      |+|-${RED} 72 ${BLACK} SHOW INFOS ABOUT ASM VOLUME STAT               |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK} SHOW INFOS ABOUT LSBLK                            |+|-${RED} 74 ${BLACK}                                                |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK} Verify RAC/GRID INFRASTRUCTURE on The Environment |+|-${RED} 76 ${BLACK}                                                |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                                   |+|-${RED} 78 ${BLACK}                                                |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                                   |+|-${RED} 80 ${BLACK}                                                |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|+|-${RED} 81 ${BLACK}                                                   |+|-${RED} 82 ${BLACK}                                                |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK}                                                   |+|-${RED} 84 ${BLACK}                                                |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                                   |+|-${RED} 86 ${BLACK}                                                |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                                   |+|-${RED} 88 ${BLACK}                                                |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                                   |+|-${RED} 90 ${BLACK}                                                |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                                   |+|-${RED} 92 ${BLACK}                                                |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                                   |+|-${RED} 94 ${BLACK}                                                |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                                   |+|-${RED} 96 ${BLACK}                                                |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                                   |+|-${RED} 98 ${BLACK}                                                |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                                   |+|-${RED} 0  ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
MENU_RAC=""
read MENU_RAC
clear
case "${MENU_RAC}"
in
#########################################################################################################
1) # "SHOW INFOS ABOUT CHECK CLUSTER ALL"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CHECK CLUSTER ALL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl check cluster -all
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # "SHOW INFOS ABOUT CHECK CLUSTER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CHECK CLUSTER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl check cluster
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # "SHOW INFOS ABOUT CHECK CRS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CHECK CRS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl check crs
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # "SHOW INFOS ABOUT CHECK CSS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CHECK CSS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl check css
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # "SHOW INFOS ABOUT CHECK EVM"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CHECK EVM ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl check evm
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # "SHOW INFOS ABOUT CHECK CTSS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CHECK CTSS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl check ctss
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # "SHOW INFOS ABOUT OCRCHECK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT OCRCHECK ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/ocrcheck
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # "SHOW INFOS ABOUT CRCCHECK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRCCHECK ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crccheck
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # "SHOW INFOS ABOUT CRFCHECK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRFCHECK ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crfcheck
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # "SHOW INFOS ABOUT CSS VOTEDISK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS VOTEDISK ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query css votedisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # "SHOW INFOS ABOUT CSS IPMI CONFIG"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS IPMI CONFIG ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query css ipmiconfig
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # "SHOW INFOS ABOUT CSS IPMI DEVICE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS IPMI DEVICE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query css ipmidevice
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # "SHOW INFOS ABOUT CRS ACTIVE VERSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS ACTIVE VERSION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs activeversion
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # "SHOW INFOS ABOUT CRS ADMINISTRATOR"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS ADMINISTRATOR ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs administrator
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # "SHOW INFOS ABOUT CRS AUTOSTART"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS AUTOSTART ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs autostart
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# ${GRID_HOME}/bin/ ???
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs activeversion -f
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # "SHOW INFOS ABOUT CRS RELEASE VERSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS RELEASE VERSION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs releaseversion
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # "SHOW INFOS ABOUT CRS RELEASE PATCH"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS RELEASE PATCH ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs releasepatch
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # "SHOW INFOS ABOUT CRS SOFTWARE PATCH"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS SOFTWARE PATCH ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs softwarepatch
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # "SHOW INFOS ABOUT CRS SOFTWARE VERSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS SOFTWARE VERSION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs softwareversion
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # "SHOW INFOS ABOUT CRS SOFTWARE VERSION ALL"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS SOFTWARE VERSION ALL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl query crs softwareversion -all
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # "SHOW INFOS ABOUT CRS CLUSTER GUID"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS CLUSTER GUID ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css clusterguid
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # "SHOW INFOS ABOUT CSS DIAG WAIT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS DIAG WAIT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css diagwait
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # "SHOW INFOS ABOUT CSS PRIORITY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS PRIORITY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css priority
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # "SHOW INFOS ABOUT CSS LOG FILE SIZE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS LOG FILE SIZE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css logfilesize
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # "SHOW INFOS ABOUT CSS IPMI ADDR"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS IPMI ADDR ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css ipmiaddr
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # "SHOW INFOS ABOUT CSS REBOOT TIME"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS REBOOT TIME ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css reboottime
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # "SHOW INFOS ABOUT CSS MISSCOUNT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS MISSCOUNT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css misscount
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # "SHOW INFOS ABOUT CSS DISKTIMEOUT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS DISKTIMEOUT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css disktimeout
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # "SHOW INFOS ABOUT CSS LEAF MISSCOUNT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CSS LEAF MISSCOUNT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get css leafmisscount
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # "SHOW INFOS ABOUT CLUSTER MODE STATUS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CLUSTER MODE STATUS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get cluster mode status
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # "SHOW INFOS ABOUT CLUSTER MODE CONFIG"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CLUSTER MODE CONFIG ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get cluster mode config
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # "SHOW INFOS ABOUT CLUSTER HUB SIZE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CLUSTER HUB SIZE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get cluster hubsize
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # "SHOW INFOS ABOUT NODE ROLE CONFIG ALL"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT NODE ROLE CONFIG ALL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get node role config -all
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # "SHOW INFOS ABOUT NODE ROLE STATUS ALL"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT NODE ROLE STATUS ALL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl get node role status -all
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # "SHOW INFOS ABOUT GET PERM RESOURCE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT GET PERM RESOURCE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl getperm resource
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # "SHOW INFOS ABOUT GET PERM TYPE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT GET PERM TYPE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl getperm type
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # "SHOW INFOS ABOUT GET PERM SERVER POOL"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT GET PERM SERVER POOL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl getperm serverpool
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # "SHOW INFOS ABOUT GET PERM CATEGORY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT GET PERM CATEGORY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl getperm category
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # "SHOW INFOS ABOUT GET PERM POLICYSET"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT GET PERM POLICYSET ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl getperm policyset
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # "SHOW INFOS ABOUT LSMODULES CRS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT LSMODULES CRS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl lsmodules crs
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # "SHOW INFOS ABOUT LSMODULES CSS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT LSMODULES CSS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl lsmodules css
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # "SHOW INFOS ABOUT LSMODULES EVM"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT LSMODULES EVM ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/crsctl lsmodules evm
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # "SHOW INFOS ABOUT OCR CONFIG BACKUP"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT OCR CONFIG BACKUP ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/ocrconfig -showbackup
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # "SHOW INFOS ABOUT OCLUMON MANAGE REP SIZE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT OCLUMON MANAGE REP SIZE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/oclumon manage -get repsize
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # "SHOW INFOS ABOUT OIFCFG GETIF"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT OIFCFG GETIF ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/oifcfg getif
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # "SHOW INFOS ABOUT CRS_STAT -T"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS_STAT -T ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crs_stat -t
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # "SHOW INFOS ABOUT CRS_STAT -P"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRS_STAT -P ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crs_stat -p
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # "SHOW INFOS ABOUT CRSCTL STAT RES -T -INIT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRSCTL STAT RES -T -INIT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl stat res -t -init
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # "SHOW INFOS ABOUT CRSCTL STAT RES -T"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRSCTL STAT RES -T ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl stat res -t
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # "SHOW INFOS ABOUT CRSCTL STAT RES -P"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRSCTL STAT RES -P ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl stat res -p
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # "SHOW INFOS ABOUT CRSCTL STATUS RESOURCE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRSCTL STATUS RESOURCE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl status resource
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # "SHOW INFOS ABOUT CRSCTL STATUS TYPE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRSCTL STATUS TYPE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl status type
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # "SHOW INFOS ABOUT CRSCTL STATUS SERVER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRSCTL STATUS SERVER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl status server
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # "SHOW INFOS ABOUT CRSCTL STATUS SERVER POOL"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CRSCTL STATUS SERVER POOL ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/crsctl status serverpool
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # "SHOW INFOS ABOUT SRVCTL STATUS SERVICE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT SRVCTL STATUS SERVICE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#${GRID_HOME}/bin/srvctl status service
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # "SHOW INFOS ABOUT SRVCTL STATUS ASM"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT SRVCTL STATUS ASM ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/srvctl status asm
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # "SHOW INFOS ABOUT SRVCTL CONFIG ASM"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT SRVCTL CONFIG ASM ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/srvctl config asm
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # "SHOW INFORS ABOUT SRVCTL CONFIG SCAN_LISTENER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFORS ABOUT SRVCTL CONFIG SCAN_LISTENER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/srvctl config scan_listener
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # "SHOW INFORS ABOUT SRVCTL CONFIG SCAN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFORS ABOUT SRVCTL CONFIG SCAN ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/srvctl config scan
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # "SHOW INFORS ABOUT SRVCTL CONFIG GNS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFORS ABOUT SRVCTL CONFIG GNS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/srvctl config gns
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # "SHOW INFORS ABOUT SRVCTL STATUS GNS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFORS ABOUT SRVCTL STATUS GNS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/srvctl status gns
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # "CLUVFY HEALTHCHECK CLUSTER BEST PRACTICE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CLUVFY HEALTHCHECK CLUSTER BEST PRACTICE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/cluvfy comp healthcheck -collect cluster -bestpractice
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # "CLUVFY HEALTHCHECK ASM BEST PRACTICE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CLUVFY HEALTHCHECK ASM BEST PRACTICE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/cluvfy comp healthcheck -collect asm -bestpractice
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # "CLUVFY HEALTHCHECK DATABASE BEST PRACTICE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} CLUVFY HEALTHCHECK DATABASE BEST PRACTICE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/cluvfy comp healthcheck -collect database -bestpractice
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # "SHOW INFOS ABOUT ACFS DRIVE STATE VERSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT ACFS DRIVE STATE VERSION ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
acfsdriverstate version
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # "SHOW INFOS ABOUT ACFS DBG"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT ACFS DBG ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
acfsdbg
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # "SHOW INFOS ABOUT ACFS DBG DETAILS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT ACFS DBG DETAILS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
for i in `ls /dev/asm/`
do
acfsdbg $i
done
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # "SHOW INFOS ABOUT ACFSUTIL PLOG CONFIG"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT ACFSUTIL PLOG CONFIG ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
acfsutil plogconfig -q
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # "SHOW INFOS ABOUT ACFSUTIL FS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT ACFSUTIL FS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
acfsutil info fs
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # "SHOW INFOS ABOUT ASM VOLUME STAT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT ASM VOLUME STAT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
asmcmd -p volstat
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # "SHOW INFOS ABOUT LSBLK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT LSBLK ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
lsblk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # "VERIFY ALL RAC ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL RAC ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
${GRID_HOME}/bin/
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
# ODA MENU #
#########################################################################################################
#
#########################################################################################################
oda) # Menu ODA Environments
#########################################################################################################
#
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu ODA Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${ISRACDB} = "" ] || [ ${ISRACDB} = "false" ] || [ ${ISRACDB} = "FALSE" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- This Environment is NOT Oracle Database Appliance [ ODA ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Press ENTER to Back to Main Menu -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
clear
elif [ ${ISRACDB} != "" ] || [ ${ISRACDB} = "true" ] || [ ${ISRACDB} = "TRUE" ]
then
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK} VALIDATE DEFAULT SYSTEM CHECKS                    |+|-${RED}  2 ${BLACK} VALIDATE ALL CHECKS                            |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK} VALIDATE COMPONENTS CHECKS                        |+|-${RED}  4 ${BLACK}                                                |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK}                                                   |+|-${RED}  6 ${BLACK}                                                |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK}                                                   |+|-${RED}  8 ${BLACK}                                                |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK}                                                   |+|-${RED} 10 ${BLACK} SHOW ORACLE AUTO SERVICE REQUEST [ ASR ]       |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK} SHOW STATUS OF THE COOLING UNITS                  |+|-${RED} 12 ${BLACK} SHOW INFOS ABOUT THE DISK CONTROLLERS          |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK} SHOW INFOS ABOUT DEPLOY ODA CORES                 |+|-${RED} 14 ${BLACK} SHOW CORE ALLOCATIONS TO VM MAPPINGS           |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK} SHOW INFOS ABOUT EACH EXISTING DATABASE           |+|-${RED} 16 ${BLACK} SHOW CONFIGURATION FILE NAMES AND PARAMETERS   |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|-${RED} 17 ${BLACK} SHOW INFOS ABOUT EACH EXISTING HOMES              |+|-${RED} 18 ${BLACK} SHOW INFOS ABOUT DATABASE STORAGE              |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK} SHOW INFOS ABOUT DISKS                            |+|-${RED} 20 ${BLACK} SHOW INFOS ABOUT DISKGROUPS                    |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK} SHOW INFOS ABOUT STORAGE ENCLOSURE                |+|-${RED} 22 ${BLACK} SHOW INFOS ABOUT ENV TYPE AND HARDWARE         |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK} SHOW INFOS ABOUT SAS EXPANDER                     |+|-${RED} 24 ${BLACK} SHOW INFOS ABOUT CLOUD FILE SYSTEM [ ACFS ]    |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK} SHOW INFOS ABOUT INFINIBAND CARD [ NETWORK ]      |+|-${RED} 26 ${BLACK} SHOW INFOS ABOUT INTERNAL RAID [ DISKS ]       |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK} SHOW INFOS ABOUT MEMORY MODULES                   |+|-${RED} 28 ${BLACK} SHOW INFOS ABOUT NETWORK                       |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK} SHOW INFOS ABOUT POWER SUPPLY                     |+|-${RED} 30 ${BLACK} SHOW INFOS ABOUT CPU PROCESSORS                |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK} SHOW INFOS ABOUT STATUS OF RAID REBUILD           |+|-${RED} 32 ${BLACK} SHOW INFOS ABOUT VIRTUAL MACHINE REPOSITORIES  |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK} SHOW INFOS ABOUT SERVER                           |+|-${RED} 34 ${BLACK} SHOW INFOS ABOUT STORAGE FOR CONTROLLERS       |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK} SHOW INFOS ABOUT VALIDATION STORAGE               |+|-${RED} 36 ${BLACK} SHOW HARD STORAGE ERRORS                       |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK} SHOW SOFT VALIDATION ERRORS / FAILURES            |+|-${RED} 38 ${BLACK} SHOW INFOS ABOUT VIRTUAL DISKS ON VM PLATFORM  |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK} SHOW PATCH VERSION                                |+|-${RED} 40 ${BLACK} SHOW PATCH VERSION DETAILS                     |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK} SHOW INFOS ABOUT VIRTUAL NETWORKS                 |+|-${RED} 42 ${BLACK} SHOW INFOS ABOUT VIRTUAL MACHINES              |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK} SHOW INFOS ABOUT GUI VM CONSOLE                   |+|-${RED} 44 ${BLACK} SHOW INFOS ABOUT VM TEMPLATES                  |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK} SHOW COMPONENTS DESCRIBE                          |+|-${RED} 46 ${BLACK} SHOW LAST PATCH DESCRIBE                       |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK}                                                   |+|-${RED} 48 ${BLACK}                                                |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK}                                                   |+|-${RED} 50 ${BLACK}                                                |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK}                                                   |+|-${RED} 52 ${BLACK}                                                |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK}                                                   |+|-${RED} 54 ${BLACK}                                                |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK}                                                   |+|-${RED} 56 ${BLACK}                                                |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK}                                                   |+|-${RED} 58 ${BLACK}                                                |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK}                                                   |+|-${RED} 60 ${BLACK}                                                |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK}                                                   |+|-${RED} 62 ${BLACK}                                                |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK}                                                   |+|-${RED} 64 ${BLACK}                                                |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK}                                                   |+|-${RED} 66 ${BLACK}                                                |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK}                                                   |+|-${RED} 68 ${BLACK}                                                |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK}                                                   |+|-${RED} 70 ${BLACK}                                                |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK}                                                   |+|-${RED} 72 ${BLACK}                                                |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK}                                                   |+|-${RED} 74 ${BLACK}                                                |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK}                                                   |+|-${RED} 76 ${BLACK}                                                |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                                   |+|-${RED} 78 ${BLACK}                                                |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                                   |+|-${RED} 80 ${BLACK}                                                |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|-|-${RED} 81 ${BLACK}                                                   |-|-${RED} 82 ${BLACK}                                                |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK}                                                   |+|-${RED} 84 ${BLACK}                                                |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                                   |+|-${RED} 86 ${BLACK}                                                |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                                   |+|-${RED} 88 ${BLACK}                                                |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                                   |+|-${RED} 90 ${BLACK}                                                |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                                   |+|-${RED} 92 ${BLACK}                                                |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                                   |+|-${RED} 94 ${BLACK}                                                |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                                   |+|-${RED} 96 ${BLACK}                                                |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                                   |+|-${RED} 98 ${BLACK}                                                |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                                   |+|-${RED} 0  ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+---+----+---------------------------------------------------+---+----+------------------------------------------------+-+---------------------------+-+------------------------------------------+"
MENU_ODA=""
read MENU_ODA
clear
case "${MENU_ODA}"
in
#########################################################################################################
1) # "VALIDATE DEFAULT SYSTEM CHECKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VALIDATE DEFAULT SYSTEM CHECKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli validate -d -v
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # "VALIDATE ALL CHECKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VALIDATE ALL CHECKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli validate -a
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # "VALIDATE COMPONENTS CHECKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VALIDATE COMPONENTS CHECKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
select ODA_COMP in `oakcli validate -l`
do
  OODA_COMP=${ODA_COMP}
  break 1
done
# oakcli validate -l
oakcli validate -c ${OODA_COMP}
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # "SHOW ORACLE AUTO SERVICE REQUEST [ ASR ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW ORACLE AUTO SERVICE REQUEST [ ASR ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show asr
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # "SHOW STATUS OF THE COOLING UNITS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW STATUS OF THE COOLING UNITS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show cooling
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # "SHOW INFOS ABOUT THE DISK CONTROLLERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT THE DISK CONTROLLERS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show controller
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # "SHOW INFOS ABOUT DEPLOY ODA CORES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT DEPLOY ODA CORES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show core_config_key
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # "SHOW CORE ALLOCATIONS TO VM MAPPINGS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW CORE ALLOCATIONS TO VM MAPPINGS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show cpupool
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # "SHOW INFOS ABOUT EACH EXISTING DATABASE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT EACH EXISTING DATABASE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show databases
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # "SHOW CONFIGURATION FILE NAMES AND PARAMETERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW CONFIGURATION FILE NAMES AND PARAMETERS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show db_config_params
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # "SHOW INFOS ABOUT EACH EXISTING HOMES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT EACH EXISTING HOMES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show dbhomes
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # "SHOW INFOS ABOUT DATABASE STORAGE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT DATABASE STORAGE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show dbstorage
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # "SHOW INFOS ABOUT DISKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT DISKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show disk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # "SHOW INFOS ABOUT DISKGROUPS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT DISKGROUPS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show diskgroup
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # "SHOW INFOS ABOUT STORAGE ENCLOSURE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT STORAGE ENCLOSURE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show enclosure
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # "SHOW INFOS ABOUT ENV TYPE AND HARDWARE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT ENV TYPE AND HARDWARE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show env_hw
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # "SHOW INFOS ABOUT SAS EXPANDER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT SAS EXPANDER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show expander
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # "SHOW INFOS ABOUT CLOUD FILE SYSTEM [ ACFS ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT CLOUD FILE SYSTEM [ ACFS ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show fs
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # "SHOW INFOS ABOUT INFINIBAND CARD [ NETWORK ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT INFINIBAND CARD [ NETWORK ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show ib
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # "SHOW INFOS ABOUT INTERNAL RAID [ DISKS ]"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT INTERNAL RAID [ DISKS ] ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show iraid
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # "SHOW INFOS ABOUT MEMORY MODULES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT MEMORY MODULES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show memory
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # "SHOW INFOS ABOUT NETWORK"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT NETWORK ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show network
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # "SHOW INFOS ABOUT POWER SUPPLY"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT POWER SUPPLY ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show power
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # "SHOW INFORS ABOUT CPU PROCESSORS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFORS ABOUT CPU PROCESSORS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show processor
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # "SHOW INFOS ABOUT STATUS OF RAID REBUILD"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT STATUS OF RAID REBUILD ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show raidsyncstatus
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # "SHOW INFOS ABOUT VIRTUAL MACHINE REPOSITORIES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT VIRTUAL MACHINE REPOSITORIES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show repo
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # "SHOW INFOS ABOUT SERVER"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT SERVER ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show server
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # "SHOW INFOS ABOUT STORAGE FOR CONTROLLERS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT STORAGE FOR CONTROLLERS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show storage
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # "SHOW INFOS ABOUT VALIDATION STORAGE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT VALIDATION STORAGE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show validation storage
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # "SHOW HARD STORAGE ERRORS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW HARD STORAGE ERRORS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show validation storage errors
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # "SHOW SOFT VALIDATION ERRORS / FAILURES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW SOFT VALIDATION ERRORS / FAILURES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show validation storage failures
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # "SHOW INFOS ABOUT VIRTUAL DISKS ON VM PLATFORM"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT VIRTUAL DISKS ON VM PLATFORM ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show vdisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # "SHOW PATCH VERSION"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show version
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # "SHOW PATCH VERSION DETAILS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show version -detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # "SHOW INFOS ABOUT VIRTUAL NETWORKS"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT VIRTUAL NETWORKS ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show vlan
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # "SHOW INFOS ABOUT VIRTUAL MACHINES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT VIRTUAL MACHINES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show vm
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # "SHOW INFOS ABOUT GUI VM CONSOLE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT GUI VM CONSOLE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show vmconsole
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # "SHOW INFOS ABOUT VM TEMPLATES"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW INFOS ABOUT VM TEMPLATES ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
oakcli show vmtemplate
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # "SHOW COMPONENTS DESCRIBE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW COMPONENTS DESCRIBE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
odacli describe-component
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # "SHOW LAST PATCH DESCRIBE"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SHOW LAST PATCH DESCRIBE ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
odacli describe-latestpatch
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # "VERIFY ALL ODA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL ODA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
help) # "ODA HELP"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} ODA HELP ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} DIRECTORY PATHS OF ODA ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "Grid Base..............: /u01/app/grid"
echo ${ECHO} "Grid Home..............: /u01/app/release-specific_name/grid"
echo ${ECHO} "Oracle Base............: /u01/app/oracle"
echo ${ECHO} "Oracle Home............: /u01/app/oracle/product/dbhome_release-specific_namesequence_number"
echo ${ECHO} "Oracle Inventory.......: /u01/app/oraInventory"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} SOME COMMANDS ON ODA ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "oakcli add disk -local"
echo ${ECHO} "oakcli apply"
echo ${ECHO} "oakcli clone commands"
echo ${ECHO} "oakcli clone vdisk"
echo ${ECHO} "oakcli clone vm"
echo ${ECHO} "oakcli configure commands"
echo ${ECHO} "oakcli configure additionalnet"
echo ${ECHO} "oakcli configure asr"
echo ${ECHO} "oakcli configure cpupool"
echo ${ECHO} "oakcli configure firstnet"
echo ${ECHO} "oakcli configure ib2fiber"
echo ${ECHO} "oakcli configure network"
echo ${ECHO} "oakcli configure oda_base"
echo ${ECHO} "oakcli configure repo"
echo ${ECHO} "oakcli configure vm"
echo ${ECHO} "oakcli configure vmtemplate"
echo ${ECHO} "oakcli copy"
echo ${ECHO} "oakcli create commands"
echo ${ECHO} "oakcli create cpupool"
echo ${ECHO} "oakcli create database"
echo ${ECHO} "oakcli create dbhome"
echo ${ECHO} "oakcli create dbstorage"
echo ${ECHO} "oakcli create db_config_params"
echo ${ECHO} "oakcli create repo"
echo ${ECHO} "oakcli create snapshotdb"
echo ${ECHO} "oakcli create vdisk"
echo ${ECHO} "oakcli create vlan"
echo ${ECHO} "oakcli delete commands"
echo ${ECHO} "oakcli delete cpupool"
echo ${ECHO} "oakcli delete database"
echo ${ECHO} "oakcli delete db_config_params"
echo ${ECHO} "oakcli delete dbhome"
echo ${ECHO} "oakcli delete dbstorage"
echo ${ECHO} "oakcli delete repo"
echo ${ECHO} "oakcli delete vdisk"
echo ${ECHO} "oakcli delete vlan"
echo ${ECHO} "oakcli delete vm"
echo ${ECHO} "oakcli delete vmtemplate"
echo ${ECHO} "oakcli deploy"
echo ${ECHO} "oakcli diskwritecache"
echo ${ECHO} "oakcli diskwritecache status"
echo ${ECHO} "oakcli import vmtemplate"
echo ${ECHO} "oakcli locate disk"
echo ${ECHO} "oakcli manage diagcollect"
echo ${ECHO} "oakcli migrate vm"
echo ${ECHO} "oakcli modify"
echo ${ECHO} "oakcli orachk"
echo ${ECHO} "oakcli resize dbstorage"
echo ${ECHO} "oakcli restart oda_base"
echo ${ECHO} "oakcli show commands"
echo ${ECHO} "oakcli start commands"
echo ${ECHO} "oakcli stop command"
echo ${ECHO} "oakcli stordiag"
echo ${ECHO} "oakcli test asr"
echo ${ECHO} "oakcli unpack"
echo ${ECHO} "oakcli update"
echo ${ECHO} "oakcli upgrade"
echo ${ECHO} "oakcli validate"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
# EXADATA MENU #
#########################################################################################################
#
#########################################################################################################
exadata) # Menu EXADATA Environments
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu EXADATA Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${WHOIS} = "root" ] || [ ${WHOIS} = "oracle" ] || [ ${WHOIS} = "grid" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- YOUR USER IS NOT celladmin or cellmonitor, YOU CAN NOT USE THIS SCRIPT WITH OTHER USER -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Press ENTER to Back to Main Menu -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
clear
### "_exadata_feature_on" = true
elif [ ${WHOIS} = "celladmin" ] || [ ${WHOIS} = "cellmonitor" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- VERIFY CELL DETAILS ${BLACK} -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK} VERIFY EXADATA TOPOLOGY                           |+|-${RED}  2 ${BLACK}                                                |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK}                                                   |+|-${RED}  4 ${BLACK}                                                |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK}                                                   |+|-${RED}  6 ${BLACK}                                                |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK}                                                   |+|-${RED}  8 ${BLACK}                                                |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK}                                                   |+|-${RED} 10 ${BLACK}                                                |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK}                                                   |+|-${RED} 12 ${BLACK}                                                |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK}                                                   |+|-${RED} 14 ${BLACK}                                                |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK}                                                   |+|-${RED} 16 ${BLACK}                                                |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|-${RED} 17 ${BLACK}                                                   |+|-${RED} 18 ${BLACK}                                                |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK}                                                   |+|-${RED} 20 ${BLACK}                                                |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK}                                                   |+|-${RED} 22 ${BLACK}                                                |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK}                                                   |+|-${RED} 24 ${BLACK}                                                |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK}                                                   |+|-${RED} 26 ${BLACK}                                                |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK}                                                   |+|-${RED} 28 ${BLACK}                                                |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK}                                                   |+|-${RED} 30 ${BLACK}                                                |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK}                                                   |+|-${RED} 32 ${BLACK}                                                |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK}                                                   |+|-${RED} 34 ${BLACK}                                                |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK}                                                   |+|-${RED} 36 ${BLACK}                                                |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK}                                                   |+|-${RED} 38 ${BLACK}                                                |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK}                                                   |+|-${RED} 40 ${BLACK}                                                |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK}                                                   |+|-${RED} 42 ${BLACK}                                                |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK}                                                   |+|-${RED} 44 ${BLACK}                                                |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK}                                                   |+|-${RED} 46 ${BLACK}                                                |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK}                                                   |+|-${RED} 48 ${BLACK}                                                |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK}                                                   |+|-${RED} 50 ${BLACK}                                                |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK}                                                   |+|-${RED} 52 ${BLACK}                                                |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK}                                                   |+|-${RED} 54 ${BLACK}                                                |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK}                                                   |+|-${RED} 56 ${BLACK}                                                |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK}                                                   |+|-${RED} 58 ${BLACK}                                                |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK}                                                   |+|-${RED} 60 ${BLACK}                                                |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK}                                                   |+|-${RED} 62 ${BLACK}                                                |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK}                                                   |+|-${RED} 64 ${BLACK}                                                |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK}                                                   |+|-${RED} 66 ${BLACK}                                                |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK}                                                   |+|-${RED} 68 ${BLACK}                                                |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK}                                                   |+|-${RED} 70 ${BLACK}                                                |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK}                                                   |+|-${RED} 72 ${BLACK}                                                |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK}                                                   |+|-${RED} 74 ${BLACK}                                                |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK}                                                   |+|-${RED} 76 ${BLACK}                                                |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                                   |+|-${RED} 78 ${BLACK}                                                |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                                   |+|-${RED} 80 ${BLACK}                                                |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|-|-${RED} 81 ${BLACK}                                                   |-|-${RED} 82 ${BLACK}                                                |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK}                                                   |+|-${RED} 84 ${BLACK}                                                |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                                   |+|-${RED} 86 ${BLACK}                                                |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                                   |+|-${RED} 88 ${BLACK}                                                |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                                   |+|-${RED} 90 ${BLACK}                                                |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                                   |+|-${RED} 92 ${BLACK}                                                |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                                   |+|-${RED} 94 ${BLACK}                                                |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                                   |+|-${RED} 96 ${BLACK}                                                |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                                   |+|-${RED} 98 ${BLACK}                                                |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                                   |+|-${RED} 0  ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
MENU_EXA=""
read MENU_EXA
clear
case "${MENU_EXA}"
in
#########################################################################################################
1) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
/opt/oracle.SupportTolls/ibdiagtools/verify-topology quarterrack
/opt/oracle.SupportTolls/ibdiagtools/verify-topology -t quarterrack
/opt/oracle.SupportTolls/ibdiagtools/verify-topology halfrack
/opt/oracle.SupportTolls/ibdiagtools/verify-topology -t halfrack
/opt/oracle.SupportTolls/ibdiagtools/verify-topology fullrack
/opt/oracle.SupportTolls/ibdiagtools/verify-topology -t fullrack
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe cell
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe physicaldisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe lun
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe celldisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe griddisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe flashcache
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe flashcachecontent
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe metriccurrent
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe metricdefinition
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e describe metrichistory
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list cell # Will display Oracle Exadata Storage Servers/Cells information
cellcli -e list cell detail
cellcli -e list cell attributes all
cellcli -e list cell attributes rsStatus
cellcli -e list cell attributes name, interconnectCount
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list celldisk # Will display cell disks information
cellcli -e list celldisk detail
cellcli -e list celldisk FD_01_cell07
cellcli -e list celldisk FD_01_cell13 detail
cellcli -e list celldisk attributes all
cellcli -e list celldisk attributes name, devicePartition
cellcli -e list celldisk attributes name, devicePartition where size>20G
cellcli -e list celldisk attributes name,interleaving where disktype=harddisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list physicaldisk # Will display physical disks information
cellcli -e list physicaldisk detail
cellcli -e list physicaldisk 34:5
cellcli -e list physicaldisk 34:11 detail
cellcli -e list physicaldisk attributes all
cellcli -e list physicaldisk attributes name, id, slotnumber
cellcli -e list physicaldisk attributes name, disktype, makemodel, physicalrpm, physicalport, status
cellcli -e list physicaldisk attributes name, disktype, errCmdTimeoutCount, errHardReadCount, errHardWriteCount
cellcli -e list physicaldisk attributes name, id, slotnumber where disktype="flashdisk" and status != "not present"
cellcli -e list physicaldisk attributes name, physicalInterface, physicalInsertTime where disktype = 'Harddisk'
cellcli -e list physicaldisk where diskType='Flashdisk'
cellcli -e list physicaldisk where diskType=flashdisk and status='poor performance' detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list lun
cellcli -e list lun detail
cellcli -e list lun 0_8 detail
cellcli -e list lun attributes all
cellcli -e list lun attributes name, cellDisk, raidLevel, status
cellcli -e list lun where disktype=flashdisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list griddisk # Will display grid disks information
cellcli -e list griddisk detail
cellcli -e list griddisk DG_01_cell03 detail
cellcli -e list griddisk attributes all
cellcli -e list griddisk attributes name, size
cellcli -e list griddisk attributes name, cellDisk, diskType
cellcli -e list griddisk attributes name, ASMDeactivationOutcome, ASMModeStatus
cellcli -e list griddisk attributes name, cellDisk,status where size=476.546875G
cellcli -e list griddisk attributes name where asmdeactivationoutcome != 'Yes'
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list flashcache # Will display flash cache information
cellcli -e list flashcache detail
cellcli -e list flashcache attributes all
cellcli -e list flashcache attributes degradedCelldisks
cellcli -e help list FLASHCACHECONTENT
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list celldisk CD_08_exadatalcel10 detail
cellcli -e list celldisk CD_02_exadatalcel10 detail
cellcli -e list celldisk CD_disk01_cell detail
cellcli -e list celldisk CD_disk02_cell detail
cellcli -e list celldisk CD_disk03_cell detail
cellcli -e list celldisk CD_disk04_cell detail
cellcli -e list celldisk CD_disk05_cell detail
cellcli -e list celldisk CD_disk06_cell detail
cellcli -e list celldisk CD_disk07_cell detail
cellcli -e list celldisk CD_disk08_cell detail
cellcli -e list celldisk CD_disk09_cell detail
cellcli -e list celldisk CD_disk10_cell detail
cellcli -e list celldisk CD_disk11_cell detail
cellcli -e list celldisk CD_disk12_cell detail
cellcli -e list celldisk FD_00_cell detail
cellcli -e list celldisk FD_01_cell detail
cellcli -e list celldisk FD_02_cell detail
cellcli -e list celldisk FD_03_cell detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list celldisk attributes name, status, size
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list celldisk attributes name, devicePartition where size > 200g;
cellcli -e list celldisk attributes name, freespace where freespace != 0
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list physicaldisk E15SBS detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list physicaldisk FLASH_5_3 detail
cellcli -e list physicaldisk attributes name, disktype, errCmdTimeoutCount, errHardReadCount, errHardWriteCount
cellcli -e list physicaldisk where diskType='Flashdisk'
cellcli -e list physicaldisk where diskType=FlashDisk and status != normal detail
cellcli -e list lun
cellcli -e list lun 0_0 detail
cellcli -e list lun 5_3 detail
cellcli -e list lun attributes name, cellDisk, raidLevel, status
cellcli -e list lun where disktype=harddisk
cellcli -e list lun where disktype=flashdisk
cellcli -e list griddisk
cellcli -e list griddisk data_CD_disk01_cell detail
cellcli -e list griddisk data_FD_00_cell detail
cellcli -e list griddisk reco_CD_disk07_cell detail
cellcli -e list griddisk RECO_DMORL_CD_02_exadatalcel10 detail
cellcli -e list griddisk attributes name, size, ASMModeStatus
cellcli -e list griddisk attributes name where asmdeactivationoutcome='yes'
cellcli -e list griddisk attributes name, cellDisk, diskType where disktype='harddisk'
cellcli -e list griddisk attributes name, cellDisk, diskType where disktype='flashdisk'
cellcli -e list alerthistory
cellcli -e list alerthistory 8_1 detail
cellcli -e list alerthistory where severity like '[warning|critical]'
cellcli -e list alertdefinition detail
cellcli -e list metricdefinition detail
cellcli -e list metriccurrent detail
cellcli -e list metriccurrent where name = "CT_IO_WT_LG_RQ"
cellcli -e list metriccurrent where name = "N_NIC_RCV_SEC"
cellcli -e list metriccurrent attributes name, metricvalue where objecttype="cell"
cellcli -e list metricdefinition attributes name, description where objecttype="cell"
cellcli -e list threshold detail
cellcli -e list iormplan detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list physicaldisk FLASH_5_3 detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list physicaldisk attributes name, disktype, errCmdTimeoutCount, errHardReadCount, errHardWriteCount
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list physicaldisk where diskType='Flashdisk'
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list physicaldisk where diskType=FlashDisk and status != normal detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list lun
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list lun attributes name, cellDisk, raidLevel, status
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list lun where disktype=harddisk
cellcli -e list lun where disktype=flashdisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list griddisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list griddisk data_CD_disk01_cell detail
cellcli -e list griddisk data_FD_00_cell detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list griddisk reco_CD_disk07_cell detail
cellcli -e list griddisk RECO_DMORL_CD_02_exadatalcel10 detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list griddisk attributes name, size, ASMModeStatus
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list griddisk attributes name where asmdeactivationoutcome='yes'
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list griddisk attributes name, cellDisk, diskType where disktype='harddisk'
cellcli -e list griddisk attributes name, cellDisk, diskType where disktype='flashdisk'
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list alerthistory
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list alerthistory 8_1 detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list alerthistory where severity like '[warning|critical]'
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list alertdefinition detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list metricdefinition detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list metriccurrent detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list metriccurrent where name = "CT_IO_WT_LG_RQ"
cellcli -e list metriccurrent where name = "N_NIC_RCV_SEC"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list metriccurrent attributes name, metricvalue where objecttype="cell"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list metricdefinition attributes name, description where objecttype="cell"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list threshold detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
cellcli -e list iormplan detail
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata alert
# dcli -l root -g ~/cell_group "cellcli -e list metriccurrent where alertState!=\'Normal\'"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cell CPU utilization
# dcli -l root -g ~/cell_group "cellcli -e list metriccurrent CL_CPUT"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cells flashdisk with status NOT present
# dcli -l root -g ~/cell_group "cellcli -e list physicaldisk attributes name, id, slotnumber where disktype=\"flashdisk\" and status=\'not present\'"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cell current temperature
# dcli -l root -g ~/cell_group 'cellcli -e list cell detail' | egrep temperature
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata alert history
# dcli -l root -g ~/cell_group "cellcli -e list metrichistory where alertState!=\'Normal\'"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cells battery replacement checks
# dcli -l root -g ~/cell_group '/opt/MegaRAID/MegaCli/MegaCli64 -adpbbucmd -aALL' |grep replaced
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cells harddisk with status NOT present
# dcli -l root -g ~/cell_group "cellcli -e list physicaldisk attributes name, id, slotnumber where disktype=\"harddisk\" and status=\'not present\'"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cells services checks
# dcli -l root -g ~/cell_group 'cellcli -e list cell detail' | egrep '(cellsrvStatus)|(msStatus)|(rsStatus)'
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cells memory checks
# dcli -l root -g ~/cell_group --vmstat="-a 3 2"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata physical memory checks
# dcli -g ~/all_group -l root "cat /proc/meminfo | egrep '^MemTotal:|^MemFree:|^Cached:
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata physical disk checks
# dcli -g ~/all_group -l root /opt/MegaRAID/MegaCli/MegaCli64 AdpAllInfo -aALL | grep "Device Present" -A 8
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cell fan status
# dcli -l root -g ~/cell_group 'cellcli -e list cell detail' | egrep fan
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata storage cell model detail
# dcli -l root -g ~/cell_group 'cellcli -e list cell detail' | egrep makeModel -- For cell
# dcli -l root -g ~/dbs_group 'dmidecode -s system-product-name'  -- For DB node
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
#Exadata cells power status
# dcli -l root -g ~/cell_group 'cellcli -e list cell detail' | egrep power
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e  list cell   # - Will display Oracle Exadata Storage Servers/Cells information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e  list cell detail # - Will display Oracle Exadata Storage Servers/Cells information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e  list cell attributes all # - Will display Oracle Exadata Storage Servers/Cells information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e  list cell attributes rsStatus # - Will display Oracle Exadata Storage Servers/Cells information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk         #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk detail #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk 34:5 #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk 34:11 detail #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk attributes all #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk attributes name, id, slotnumber #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk attributes name, disktype, makemodel, physicalrpm, physicalport, status #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk attributes name, disktype, errCmdTimeoutCount, errHardReadCount, errHardWriteCount #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk where diskType='Flashdisk' #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk attributes name, id, slotnumber where disktype="flashdisk" and status != "not present" #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk attributes name, physicalInterface, physicalInsertTime where disktype = 'Harddisk' #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list physicaldisk where diskType=flashdisk and status='poor performance' detail #  - Will display physical disks information
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list lun                  # - Will display LUNs information
# cellcli -e list lun detail
# cellcli -e list lun 0_8 detail
# cellcli -e list lun attributes all
# cellcli -e list lun attributes name, cellDisk, raidLevel, status
# cellcli -e list lun where disktype=flashdisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list celldisk            # - Will display cell disks information
# cellcli -e list celldisk detail
# cellcli -e list celldisk FD_01_cell07
# cellcli -e list celldisk FD_01_cell13 detail
# cellcli -e list celldisk attributes all
# cellcli -e list celldisk attributes name, devicePartition
# cellcli -e list celldisk attributes name, devicePartition where size>20G
# cellcli -e list celldisk attributes name,interleaving where disktype=harddisk
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list griddisk                                                            # - Will display grid disks information
# cellcli -e list griddisk detail
# cellcli -e list griddisk DG_01_cell03 detail
# cellcli -e list griddisk attributes all
# cellcli -e list griddisk attributes name, size
# cellcli -e list griddisk attributes name, cellDisk, diskType
# cellcli -e list griddisk attributes name, ASMDeactivationOutcome, ASMModeStatus     # - describe command does not show these two attributes
# cellcli -e list griddisk attributes name, cellDisk, status where size=476.546875G
# cellcli -e list griddisk attributes name where asmdeactivationoutcome != 'Yes'
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# cellcli -e list flashcache           # - Will display flash cache information
# cellcli -e list flashcache detail
# cellcli -e list flashcache attributes all
# cellcli -e list flashcache attributes degradedCelldisks
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
dcli -g cell_group -l root 'cellcli -e "list alerthistory"'    # root
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
dcli -g dbs_group -l root "ps -ef | grep grid"   # root (dbs_group it is a file with all database server hosts)
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
dcli -g dbs_group -l root "/u01/app/11.2.0.4/grid/bin/crsctl stop crs" # root (dbs_group it is a file with all database server hosts)
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# ipmitool bmc reset cold # root (reset do Ilom de todos os Storage Servers)
# dcli -g cell_group -l root "ipmitool bmc reset cold" # root (cell_group it a file with all storege servers hosts)
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
dcli -g cell_group -l root "imagehistory"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
dcli -g cell_group -l root "imageinfo"
dcli -g dbs_group -l root "rpm -qa | grep ofa"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# dcli -g cell_group -l root "cellcli -e alter cell shutdown services all" # root (shutdown all exadata services)
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
# --cellcli -e alter cell restart services rs
# --cellcli -e alter cell restart services ms
# --cellcli -e alter cell restart services cellsrv
# --cellcli -e alter cell restart services all
# --cellcli -e alter cell shutdown services rs
# --cellcli -e alter cell shutdown services ms
# --cellcli -e alter cell shutdown services cellsrv
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
kfod
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} VERIFY ASM PROCESSESS on CELLS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus /nolog <<EOF
# conn / as sysasm
conn / as sysdba
col path for a40
select path, label, header_status from v\$asm_disk order by path;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} VERIFY ASM PROCESSESS on CELLS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
# conn / as sysasm
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select dg.name
  , d.name
  , d.failgroup
  , d.state
FROM v\$asm_disk d, v\$asm_diskgroup dg
WHERE d.group_number = dg.group_number
AND dg.name = 'DATA';
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select name
  , total_mb
  , state
FROM v\$asm_diskgroup
WHERE name = 'DATA';
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
select sql_id
  , physical_read_bytes A
  , io_interconnect_bytes B
  , io_cell_offload_eligible_bytes C
  , io_cell_offload_returned_bytes D
  FROM v\$sql
WHERE sql_text LIKE '%large_table%'
AND sql_text NOT LIKE '%v$sql%';
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
col segment_name format a25
col MB format 999.9
select segment_name
  , SUM (bytes)/1024/1024 MB
FROM user_segments
WHERE segment_name LIKE 'LARGE%'
GROUP BY segment_name
ORDER BY 2;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "-- ${RED} VERIFY ASM PROCESSESS on CELLS ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sqlplus -S /nolog <<EOF
# conn / as sysasm
conn / as sysdba
set pages 700 lines 700 timing on feedback on colsep '|'
prompt
prompt ##############################################################
prompt # #
prompt ##############################################################
col name for a70
col MB format 9,999.9
select a.name
  , b.value/1024/1024 MB
FROM v\$sysstat a, v\$mystat b
WHERE a.statistic# = b.statistic#
AND (a.name IN ('physical read total bytes', 'physical write total bytes', 'cell IO uncompressed bytes') OR a.name LIKE 'cell phy%')
order by 1;
quit;
EOF
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # "VERIFY ALL EXADATA ENVIRONMENT"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} VERIFY ALL EXADATA ENVIRONMENT ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

# dbmcli
# Command-line administration tool for configuring database servers, and managing objects in the server environment.

# cellcli
# Command-line administration tool for Oracle Exadata Storage Server Software

# dcli
# Runs commands on multiple compute nodes and cells in parallel threads

# exacli
# Command-line administration tool for Oracle Exadata Storage Server Software. It runs on compute nodes and enables you to manage cells remotely.

# exadcli
# The exadcli utility runs commands on multiple cells in parallel threads. You can issue an ExaCLI command to be run on multiple cells.

# OEDA
# The Exadata Deployment Assistant tool used to gather the information needed to deploy the Exadata Database Machine. The information entered in the tool is used to create the configuration files used to deploy the machine.

# checkip.sh
# Run the Network Check script on the network where the machine will be deployed to validate the specified names and IP addresses have been added correctly to the name server, and they do not conflict with the existing network configuration.

# exachk
# Exachk utility used to conduct a comprehensive Exadata Health Check on Exadata Database Machine to validate hardware, firmware and configuration.

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
# DATAGUARD MENU #
#########################################################################################################
#
#########################################################################################################
dataguardmenu) # Menu DATAGUARD Environments
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu DATAGUARD Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${ISRACDB} = "" ] || [ ${ISRACDB} = "false" ] || [ ${ISRACDB} = "FALSE" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- This Environment is NOT Oracle Cluster [ RAC ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Press ENTER to Back to Main Menu -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
clear
elif [ ${ISRACDB} != "" ] || [ ${ISRACDB} = "true" ] || [ ${ISRACDB} = "TRUE" ]
then
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK}                                                   |+|-${RED}  2 ${BLACK}                                                   |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK}                                                   |+|-${RED}  4 ${BLACK}                                                   |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK}                                                   |+|-${RED}  6 ${BLACK}                                                   |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK}                                                   |+|-${RED}  8 ${BLACK}                                                   |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK}                                                   |+|-${RED} 10 ${BLACK}                                                   |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK}                                                   |+|-${RED} 12 ${BLACK}                                                   |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK}                                                   |+|-${RED} 14 ${BLACK}                                                   |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK}                                                   |+|-${RED} 16 ${BLACK}                                                   |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|-${RED} 17 ${BLACK}                                                   |+|-${RED} 18 ${BLACK}                                                   |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK}                                                   |+|-${RED} 20 ${BLACK}                                                   |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK}                                                   |+|-${RED} 22 ${BLACK}                                                   |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK}                                                   |+|-${RED} 24 ${BLACK}                                                   |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK}                                                   |+|-${RED} 26 ${BLACK}                                                   |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK}                                                   |+|-${RED} 28 ${BLACK}                                                   |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK}                                                   |+|-${RED} 30 ${BLACK}                                                   |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK}                                                   |+|-${RED} 32 ${BLACK}                                                   |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK}                                                   |+|-${RED} 34 ${BLACK}                                                   |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK}                                                   |+|-${RED} 36 ${BLACK}                                                   |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK}                                                   |+|-${RED} 38 ${BLACK}                                                   |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK}                                                   |+|-${RED} 40 ${BLACK}                                                   |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK}                                                   |+|-${RED} 42 ${BLACK}                                                   |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK}                                                   |+|-${RED} 44 ${BLACK}                                                   |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK}                                                   |+|-${RED} 46 ${BLACK}                                                   |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK}                                                   |+|-${RED} 48 ${BLACK}                                                   |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK}                                                   |+|-${RED} 50 ${BLACK}                                                   |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK}                                                   |+|-${RED} 52 ${BLACK}                                                   |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK}                                                   |+|-${RED} 54 ${BLACK}                                                   |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK}                                                   |+|-${RED} 56 ${BLACK}                                                   |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK}                                                   |+|-${RED} 58 ${BLACK}                                                   |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK}                                                   |+|-${RED} 60 ${BLACK}                                                   |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK}                                                   |+|-${RED} 62 ${BLACK}                                                   |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK}                                                   |+|-${RED} 64 ${BLACK}                                                   |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK}                                                   |+|-${RED} 66 ${BLACK}                                                   |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK}                                                   |+|-${RED} 68 ${BLACK}                                                   |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK}                                                   |+|-${RED} 70 ${BLACK}                                                   |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK}                                                   |+|-${RED} 72 ${BLACK}                                                   |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK}                                                   |+|-${RED} 74 ${BLACK}                                                   |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK}                                                   |+|-${RED} 76 ${BLACK}                                                   |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                                   |+|-${RED} 78 ${BLACK}                                                   |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                                   |+|-${RED} 80 ${BLACK}                                                   |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|+|-${RED} 81 ${BLACK}                                                   |+|-${RED} 82 ${BLACK}                                                   |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}BLACK}
|+|-${RED} 83 ${BLACK}                                                   |+|-${RED} 84 ${BLACK}                                                   |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                                   |+|-${RED} 86 ${BLACK}                                                   |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                                   |+|-${RED} 88 ${BLACK}                                                   |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                                   |+|-${RED} 90 ${BLACK}                                                   |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                                   |+|-${RED} 92 ${BLACK}                                                   |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                                   |+|-${RED} 94 ${BLACK}                                                   |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                                   |+|-${RED} 96 ${BLACK}                                                   |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                                   |+|-${RED} 98 ${BLACK}                                                   |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                                   |+|-${RED} 0  ${BLACK} EXIT                                              |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
MENU_DATAGUARD=""
read MENU_DATAGUARD
clear
case "${MENU_DATAGUARD}"
in
#########################################################################################################
1) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
# GOLDENGATE MENU #
#########################################################################################################
#
#########################################################################################################
goldengate) # Menu OGG Environments
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu GOLDENGATE Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${OOGG} = "" ] || [ ${OOGG} = "false" ] || [ ${OOGG} = "FALSE" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- This Environment is NOT Oracle GoldenGate [ OGG ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Press ENTER to Back to Main Menu -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
clear
elif [ ${OOGG} != "" ] || [ ${OOGG} = "true" ] || [ ${OOGG} = "TRUE" ]
then
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK} GoldenGate Validate Database [@]                  |+|-${RED}  2 ${BLACK} GoldenGate Validate Database All               |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK}                                                   |+|-${RED}  4 ${BLACK}                                                |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK} Full Check of GoldenGate on Database              |+|-${RED}  6 ${BLACK}                                                |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK}                                                   |+|-${RED}  8 ${BLACK}                                                |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK}                                                   |+|-${RED} 10 ${BLACK}                                                |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK}                                                   |+|-${RED} 12 ${BLACK}                                                |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK}                                                   |+|-${RED} 14 ${BLACK}                                                |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK}                                                   |+|-${RED} 16 ${BLACK}                                                |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|-${RED} 17 ${BLACK}                                                   |+|-${RED} 18 ${BLACK}                                                |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK}                                                   |+|-${RED} 20 ${BLACK}                                                |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK}                                                   |+|-${RED} 22 ${BLACK}                                                |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK}                                                   |+|-${RED} 24 ${BLACK}                                                |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK}                                                   |+|-${RED} 26 ${BLACK}                                                |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK}                                                   |+|-${RED} 28 ${BLACK}                                                |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK}                                                   |+|-${RED} 30 ${BLACK}                                                |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK}                                                   |+|-${RED} 32 ${BLACK}                                                |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK}                                                   |+|-${RED} 34 ${BLACK}                                                |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK}                                                   |+|-${RED} 36 ${BLACK}                                                |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK}                                                   |+|-${RED} 38 ${BLACK}                                                |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK}                                                   |+|-${RED} 40 ${BLACK}                                                |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK}                                                   |+|-${RED} 42 ${BLACK}                                                |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK}                                                   |+|-${RED} 44 ${BLACK}                                                |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK}                                                   |+|-${RED} 46 ${BLACK}                                                |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK}                                                   |+|-${RED} 48 ${BLACK}                                                |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK}                                                   |+|-${RED} 50 ${BLACK}                                                |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK}                                                   |+|-${RED} 52 ${BLACK}                                                |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK}                                                   |+|-${RED} 54 ${BLACK}                                                |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK}                                                   |+|-${RED} 56 ${BLACK}                                                |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK}                                                   |+|-${RED} 58 ${BLACK}                                                |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK}                                                   |+|-${RED} 60 ${BLACK}                                                |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK}                                                   |+|-${RED} 62 ${BLACK}                                                |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK}                                                   |+|-${RED} 64 ${BLACK}                                                |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK}                                                   |+|-${RED} 66 ${BLACK}                                                |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK}                                                   |+|-${RED} 68 ${BLACK}                                                |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK}                                                   |+|-${RED} 70 ${BLACK}                                                |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK}                                                   |+|-${RED} 72 ${BLACK}                                                |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK}                                                   |+|-${RED} 74 ${BLACK}                                                |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK}                                                   |+|-${RED} 76 ${BLACK}                                                |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                                   |+|-${RED} 78 ${BLACK}                                                |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                                   |+|-${RED} 80 ${BLACK}                                                |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|+|-${RED} 81 ${BLACK}                                                   |+|-${RED} 82 ${BLACK}                                                |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK}                                                   |+|-${RED} 84 ${BLACK}                                                |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                                   |+|-${RED} 86 ${BLACK}                                                |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                                   |+|-${RED} 88 ${BLACK}                                                |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                                   |+|-${RED} 90 ${BLACK}                                                |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                                   |+|-${RED} 92 ${BLACK}                                                |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                                   |+|-${RED} 94 ${BLACK}                                                |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                                   |+|-${RED} 96 ${BLACK}                                                |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                                   |+|-${RED} 98 ${BLACK}                                                |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                                   |+|-${RED} 0  ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
MENU_OGG=""
read MENU_OGG
clear
case "${MENU_OGG}"
in
#########################################################################################################
1) # "GoldenGate Validate Database"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} GoldenGate Validate Database ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ENTER THE NAME OF THE SCHEMA or ${RED} ENTER ${BLACK} TO FINISH --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read SCHEMA
if [ "${SCHEMA}" = "" ]
then
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- NO SCHEMA SELECTED --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
else
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- WAIT A MOMENT PLEASE, THE CHECK IS RUNNING --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
SCHEMA=$(echo ${SCHEMA} | tr [a-z] [A-Z])
typeset SCHEMA
func_ogg_001 ${SCHEMA}
fi
SCHEMA=""
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # "GoldenGate Validate Database All"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} GoldenGate Validate Database All ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_ogg_002
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_081
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_dba_082
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # "Full Check of GoldenGate on Database"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Full Check of GoldenGate on Database ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_ogg_005
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_ogg_006
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_ogg_007
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_ogg_008
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_ogg_009
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_ogg_010
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
# WALLET MENU #
#########################################################################################################
#
#########################################################################################################
wallet) # Menu WALLET Environments
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu WALLET Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${ISRACDB} = "" ] || [ ${ISRACDB} = "false" ] || [ ${ISRACDB} = "FALSE" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- This Environment is NOT Oracle Cluster [ RAC ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Press ENTER to Back to Main Menu -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
clear
elif [ ${ISRACDB} != "" ] || [ ${ISRACDB} = "true" ] || [ ${ISRACDB} = "TRUE" ]
then
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK}                                                   |+|-${RED}  2 ${BLACK}                                                |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK}                                                   |+|-${RED}  4 ${BLACK}                                                |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK}                                                   |+|-${RED}  6 ${BLACK}                                                |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK}                                                   |+|-${RED}  8 ${BLACK}                                                |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK}                                                   |+|-${RED} 10 ${BLACK}                                                |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK}                                                   |+|-${RED} 12 ${BLACK}                                                |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK}                                                   |+|-${RED} 14 ${BLACK}                                                |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK}                                                   |+|-${RED} 16 ${BLACK}                                                |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|-${RED} 17 ${BLACK}                                                   |+|-${RED} 18 ${BLACK}                                                |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK}                                                   |+|-${RED} 20 ${BLACK}                                                |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK}                                                   |+|-${RED} 22 ${BLACK}                                                |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK}                                                   |+|-${RED} 24 ${BLACK}                                                |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK}                                                   |+|-${RED} 26 ${BLACK}                                                |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK}                                                   |+|-${RED} 28 ${BLACK}                                                |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK}                                                   |+|-${RED} 30 ${BLACK}                                                |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK}                                                   |+|-${RED} 32 ${BLACK}                                                |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK}                                                   |+|-${RED} 34 ${BLACK}                                                |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK}                                                   |+|-${RED} 36 ${BLACK}                                                |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK}                                                   |+|-${RED} 38 ${BLACK}                                                |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK}                                                   |+|-${RED} 40 ${BLACK}                                                |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK}                                                   |+|-${RED} 42 ${BLACK}                                                |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK}                                                   |+|-${RED} 44 ${BLACK}                                                |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK}                                                   |+|-${RED} 46 ${BLACK}                                                |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK}                                                   |+|-${RED} 48 ${BLACK}                                                |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK}                                                   |+|-${RED} 50 ${BLACK}                                                |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK}                                                   |+|-${RED} 52 ${BLACK}                                                |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK}                                                   |+|-${RED} 54 ${BLACK}                                                |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK}                                                   |+|-${RED} 56 ${BLACK}                                                |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK}                                                   |+|-${RED} 58 ${BLACK}                                                |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK}                                                   |+|-${RED} 60 ${BLACK}                                                |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK}                                                   |+|-${RED} 62 ${BLACK}                                                |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK}                                                   |+|-${RED} 64 ${BLACK}                                                |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK}                                                   |+|-${RED} 66 ${BLACK}                                                |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK}                                                   |+|-${RED} 68 ${BLACK}                                                |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK}                                                   |+|-${RED} 70 ${BLACK}                                                |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK}                                                   |+|-${RED} 72 ${BLACK}                                                |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK}                                                   |+|-${RED} 74 ${BLACK}                                                |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK}                                                   |+|-${RED} 76 ${BLACK}                                                |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                                   |+|-${RED} 78 ${BLACK}                                                |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                                   |+|-${RED} 80 ${BLACK}                                                |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|+|-${RED} 81 ${BLACK}                                                   |+|-${RED} 82 ${BLACK}                                                |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK}                                                   |+|-${RED} 84 ${BLACK}                                                |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                                   |+|-${RED} 86 ${BLACK}                                                |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                                   |+|-${RED} 88 ${BLACK}                                                |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                                   |+|-${RED} 90 ${BLACK}                                                |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                                   |+|-${RED} 92 ${BLACK}                                                |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                                   |+|-${RED} 94 ${BLACK}                                                |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                                   |+|-${RED} 96 ${BLACK}                                                |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                                   |+|-${RED} 98 ${BLACK}                                                |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                                   |+|-${RED} 0  ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
MENU_WALLET=""
read MENU_WALLET
clear
case "${MENU_WALLET}"
in
#########################################################################################################
1) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
# AUTOUPGRADE MENU #
#########################################################################################################
#
#########################################################################################################
autoup) # Menu AUTOUPGRADE Environments
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu AUTOUPGRADE Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${DBVERSION} -ge "12" ]
then
clear
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK} Show Contents of The Patches (BP/PSU)             |+|-${RED}  2 ${BLACK}                                                |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK}                                                   |+|-${RED}  4 ${BLACK}                                                |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK}                                                   |+|-${RED}  6 ${BLACK}                                                |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK}                                                   |+|-${RED}  8 ${BLACK}                                                |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK}                                                   |+|-${RED} 10 ${BLACK}                                                |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK}                                                   |+|-${RED} 12 ${BLACK}                                                |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK}                                                   |+|-${RED} 14 ${BLACK}                                                |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK}                                                   |+|-${RED} 16 ${BLACK}                                                |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|+|-${RED} 17 ${BLACK}                                                   |+|-${RED} 18 ${BLACK}                                                |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK}                                                   |+|-${RED} 20 ${BLACK}                                                |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK}                                                   |+|-${RED} 22 ${BLACK}                                                |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK}                                                   |+|-${RED} 24 ${BLACK}                                                |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK}                                                   |+|-${RED} 26 ${BLACK}                                                |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK}                                                   |+|-${RED} 28 ${BLACK}                                                |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK}                                                   |+|-${RED} 30 ${BLACK}                                                |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK}                                                   |+|-${RED} 32 ${BLACK}                                                |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK}                                                   |+|-${RED} 34 ${BLACK}                                                |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK}                                                   |+|-${RED} 36 ${BLACK}                                                |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK}                                                   |+|-${RED} 38 ${BLACK}                                                |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK}                                                   |+|-${RED} 40 ${BLACK}                                                |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK}                                                   |+|-${RED} 42 ${BLACK}                                                |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK}                                                   |+|-${RED} 44 ${BLACK}                                                |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK}                                                   |+|-${RED} 46 ${BLACK}                                                |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK}                                                   |+|-${RED} 48 ${BLACK}                                                |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK}                                                   |+|-${RED} 50 ${BLACK}                                                |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK}                                                   |+|-${RED} 52 ${BLACK}                                                |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK}                                                   |+|-${RED} 54 ${BLACK}                                                |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK}                                                   |+|-${RED} 56 ${BLACK}                                                |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK}                                                   |+|-${RED} 58 ${BLACK}                                                |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK}                                                   |+|-${RED} 60 ${BLACK}                                                |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK}                                                   |+|-${RED} 62 ${BLACK}                                                |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK}                                                   |+|-${RED} 64 ${BLACK}                                                |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK}                                                   |+|-${RED} 66 ${BLACK}                                                |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK}                                                   |+|-${RED} 68 ${BLACK}                                                |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK}                                                   |+|-${RED} 70 ${BLACK}                                                |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK}                                                   |+|-${RED} 72 ${BLACK}                                                |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK}                                                   |+|-${RED} 74 ${BLACK}                                                |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK}                                                   |+|-${RED} 76 ${BLACK}                                                |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                                   |+|-${RED} 78 ${BLACK}                                                |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                                   |+|-${RED} 80 ${BLACK}                                                |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|+|-${RED} 81 ${BLACK}                                                   |+|-${RED} 82 ${BLACK}                                                |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK}                                                   |+|-${RED} 84 ${BLACK}                                                |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                                   |+|-${RED} 86 ${BLACK}                                                |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                                   |+|-${RED} 88 ${BLACK}                                                |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                                   |+|-${RED} 90 ${BLACK}                                                |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                                   |+|-${RED} 92 ${BLACK}                                                |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                                   |+|-${RED} 94 ${BLACK}                                                |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                                   |+|-${RED} 96 ${BLACK}                                                |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                                   |+|-${RED} 98 ${BLACK}                                                |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                                   |+|-${RED} 0  ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
MENU_AUTOUPGRADE=""
read MENU_AUTOUPGRADE
clear
case "${MENU_AUTOUPGRADE}"
in
#########################################################################################################
1) # "Show Contents of The Patches (BP/PSU)"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Show Contents of The Patches (BP/PSU) ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_001
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_002
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_003
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_004
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_005
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_006
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_007
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_008
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_009
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
func_autoup_010
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
# LINUX MENU #
#########################################################################################################
#
#########################################################################################################
linux) # Menu LINUX Environments
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} Menu LINUX Environments ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
if [ ${ISRACDB} = "" ] || [ ${ISRACDB} = "false" ] || [ ${ISRACDB} = "FALSE" ]
then
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- This Environment is NOT Oracle Cluster [ RAC ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Press ENTER to Back to Main Menu -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
read
clear
elif [ ${ISRACDB} != "" ] || [ ${ISRACDB} = "true" ] || [ ${ISRACDB} = "TRUE" ]
then
while true
do
clear
echo ${ECHO} "\
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| OS: ${GREEN} ${OS} ${BLACK} | UPTIME: ${GREEN} ${UUPTIME} ${BLACK} | KERNEL: ${GREEN} ${KERNEL} ${BLACK} | PROCS: ${GREEN} ${CCPU} ${BLACK} | MEMORY: ${GREEN} ${TMEM} ${BLACK} | MEM_USED: ${RED} ${UMEM} ${BLACK} | MEM_FREE: ${GREEN} ${FMEM} ${BLACK} | SWAP: ${GREEN} ${STMEM} ${BLACK} | SWAP_USED: ${RED} ${SUMEM} ${BLACK} | SWAP_FREE: ${GREEN} ${SFMEM} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
|+|-${RED}  1 ${BLACK}                                   |+|-${RED}  2 ${BLACK}                                                |+| VERSION......................: ${RED} ${DBVERSION} ${BLACK}
|+|-${RED}  3 ${BLACK}                                   |+|-${RED}  4 ${BLACK}                                                |+| RELEASE......................: ${RED} ${ODBRELEASE} ${BLACK}
|+|-${RED}  5 ${BLACK}                                   |+|-${RED}  6 ${BLACK}                                                |+| EDITION......................: ${RED} ${EEDITION} ${BLACK}
|+|-${RED}  7 ${BLACK}                                   |+|-${RED}  8 ${BLACK}                                                |+| ACTIVE_STATE.................: ${RED} ${AACTSTATE} ${BLACK}
|+|-${RED}  9 ${BLACK}                                   |+|-${RED} 10 ${BLACK}                                                |+| OPEN_MODE....................: ${RED} ${DDBMODE} ${BLACK}
|+|-${RED} 11 ${BLACK}                                   |+|-${RED} 12 ${BLACK}                                                |+| DATABASE_ROLE................: ${RED} ${DDBROLE} ${BLACK}
|+|-${RED} 13 ${BLACK}                                   |+|-${RED} 14 ${BLACK}                                                |+| INSTANCE_NAME................: ${RED} ${ORACLE_SID} ${BLACK}
|+|-${RED} 15 ${BLACK}                                   |+|-${RED} 16 ${BLACK}                                                |+| DB_UNIQUE_NAME...............: ${RED} ${DBUNNAME} ${BLACK}
|-|-${RED} 17 ${BLACK}                                   |+|-${RED} 18 ${BLACK}                                                |+| SERVICE_NAME.................: ${RED} ${DBSERVNAME} ${BLACK}
|+|-${RED} 19 ${BLACK}                                   |+|-${RED} 20 ${BLACK}                                                |+| DB_BLOCK_SIZE................: ${RED} ${DDBSIZEK}(K) ${BLACK}#${BLUE} ${DDBSIZEM}(M) ${BLACK}
|+|-${RED} 21 ${BLACK}                                   |+|-${RED} 22 ${BLACK}                                                |+| MEM_MAX_TARGET...............: ${RED} ${MMEMMAXM}(M) ${BLACK}#${BLUE} ${MMEMMAXG}(G) ${BLACK}#${YEL} ${MMEMMAXT}(T) ${BLACK}
|+|-${RED} 23 ${BLACK}                                   |+|-${RED} 24 ${BLACK}                                                |+| MEM_TARGET...................: ${RED} ${MMENTARGETM}(M) ${BLACK}#${BLUE} ${MMENTARGETG}(G) ${BLACK}#${YEL} ${MMENTARGETT}(T) ${BLACK}
|+|-${RED} 25 ${BLACK}                                   |+|-${RED} 26 ${BLACK}                                                |+| SGA_MAX_SIZE.................: ${RED} ${SSGAMAXM}(M) ${BLACK}#${BLUE} ${SSGAMAXG}(G) ${BLACK}#${YEL} ${SSGAMAXT}(T) ${BLACK}
|+|-${RED} 27 ${BLACK}                                   |+|-${RED} 28 ${BLACK}                                                |+| SGA_TARGET...................: ${RED} ${SSGATARGETM}(M) ${BLACK}#${BLUE} ${SSGATARGETG}(G) ${BLACK}#${YEL} ${SSGATARGETT}(T) ${BLACK}
|+|-${RED} 29 ${BLACK}                                   |+|-${RED} 30 ${BLACK}                                                |+| PGA_AGGREGATE_LIMIT..........: ${RED} ${PPGALIMITK}(K) ${BLACK}#${BLUE} ${PPGALIMITM}(M) ${BLACK}#${YEL} ${PPGALIMITG}(G) ${BLACK}
|+|-${RED} 31 ${BLACK}                                   |+|-${RED} 32 ${BLACK}                                                |+| PGA_AGGREGATE_TARGET.........: ${RED} ${PPGATARGETK}(K) ${BLACK}#${BLUE} ${PPGATARGETM}(M) ${BLACK}#${YEL} ${PPGATARGETG}(G) ${BLACK}
|+|-${RED} 33 ${BLACK}                                   |+|-${RED} 34 ${BLACK}                                                |+| DATABASE_UPTIME..............: ${RED} ${DDBUPTIME} ${BLACK}#${BLUE} ${DDBUPTIMED} Day(s) UP ${BLACK}
|+|-${RED} 35 ${BLACK}                                   |+|-${RED} 36 ${BLACK}                                                |+| WAS_UPDATED_ON...............: ${RED} ${VVERSIONTIME} ${BLACK}#${BLUE} ${VVERSIONTIMED} Day(s) Ago ${BLACK}
|+|-${RED} 37 ${BLACK}                                   |+|-${RED} 38 ${BLACK}                                                |+| DATABASE_SIZE................: ${RED} ${DDB_SIZEM}(M) ${BLACK}#${BLUE} ${DDB_SIZEG}(G) ${BLACK}#${YEL} ${DDB_SIZET}(T) ${BLACK}
|+|-${RED} 39 ${BLACK}                                   |+|-${RED} 40 ${BLACK}                                                |+| DB_CACHE_SIZE................: ${RED} ${DDBCACHESIZEK}(K) ${BLACK}#${BLUE} ${DDBCACHESIZEM}(M) ${BLACK}#${YEL} ${DDBCACHESIZEG}(G) ${BLACK}
|+|-${RED} 41 ${BLACK}                                   |+|-${RED} 42 ${BLACK}                                                |+| SHARED_POOL_SIZE.............: ${RED} ${SSHAREDPOOLK}(K) ${BLACK}#${BLUE} ${SSHAREDPOOLM}(M) ${BLACK}#${YEL} ${SSHAREDPOOLG}(G) ${BLACK}
|+|-${RED} 43 ${BLACK}                                   |+|-${RED} 44 ${BLACK}                                                |+| SCN..........................: ${RED} ${DDBSCN} ${BLACK}
|+|-${RED} 45 ${BLACK}                                   |+|-${RED} 46 ${BLACK}                                                |+| ARCHIVE......................: ${RED} ${ARCH} ${BLACK}
|+|-${RED} 47 ${BLACK}                                   |+|-${RED} 48 ${BLACK}                                                |+| EXADATA......................: ${RED} ${ISEXADATAOK} ${BLACK}
|+|-${RED} 49 ${BLACK}                                   |+|-${RED} 50 ${BLACK}                                                |+| ASM / RAC....................: ${RED} ASM: ${ISASMOK} ${BLACK}#${BLUE} RAC: ${ISRACDB} ${BLACK}
|+|-${RED} 51 ${BLACK}                                   |+|-${RED} 52 ${BLACK}                                                |+| DATAGUARD....................: ${RED} ${ISDGDB} ${BLACK}
|+|-${RED} 53 ${BLACK}                                   |+|-${RED} 54 ${BLACK}                                                |+| GOLDENGATE...................: ${RED} ${OOGG} ${BLACK}
|+|-${RED} 55 ${BLACK}                                   |+|-${RED} 56 ${BLACK}                                                |+| PARTITIONING.................: ${RED} ${DDBPART} ${BLACK}
|+|-${RED} 57 ${BLACK}                                   |+|-${RED} 58 ${BLACK}                                                |+| SQL_TUNING...................: ${RED} ${SSQLTUN} ${BLACK}
|+|-${RED} 59 ${BLACK}                                   |+|-${RED} 60 ${BLACK}                                                |+| SPATIAL......................: ${RED} ${DDBSPAT} ${BLACK}
|+|-${RED} 61 ${BLACK}                                   |+|-${RED} 62 ${BLACK}                                                |+| MULTIMEDIA_( < 19c ).........: ${RED} ${OORAMULTIMEDIA} ${BLACK}
|+|-${RED} 63 ${BLACK}                                   |+|-${RED} 64 ${BLACK}                                                |+| TEXT.........................: ${RED} ${OORATEXT} ${BLACK}
|+|-${RED} 65 ${BLACK}                                   |+|-${RED} 66 ${BLACK}                                                |+| STBY_FILE_MANAGEMENT.........: ${RED} ${SSTBYFILEMAN} ${BLACK}
|+|-${RED} 67 ${BLACK}                                   |+|-${RED} 68 ${BLACK}                                                |+| FORCE_LOGGING................: ${RED} ${DDBFLOG} ${BLACK}
|+|-${RED} 69 ${BLACK}                                   |+|-${RED} 70 ${BLACK}                                                |+| FLASHBACK....................: ${RED} ${DDBFLASHB} ${BLACK}
|+|-${RED} 71 ${BLACK}                                   |+|-${RED} 72 ${BLACK}                                                |+| FLASHBACK_SIZE...............: ${RED} ${FFLASHSIZEM}(M) ${BLACK}#${BLUE} ${FFLASHSIZEG}(G) ${BLACK}#${YEL} ${FFLASHSIZET}(T) ${BLACK}
|+|-${RED} 73 ${BLACK}                                   |+|-${RED} 74 ${BLACK}                                                |+| FLASHBACK_RETENTION..........: ${RED} ${FFLASHRETM}(M) ${BLACK}#${BLUE} ${FFLASHRETH}(H) ${BLACK}#${YEL} ${FFLASHRETD}(D) ${BLACK}
|+|-${RED} 75 ${BLACK}                                   |+|-${RED} 76 ${BLACK}                                                |+| PROTECTION_MODE..............: ${RED} ${PPROTMODE} ${BLACK}
|+|-${RED} 77 ${BLACK}                                   |+|-${RED} 78 ${BLACK}                                                |+| DB_RECOVERY_DEST_SIZE........: ${RED} ${DDBRECSIZEG}(G) ${BLACK}#${BLUE} ${DDBRECSIZET}(T) ${BLACK}#[ USED ]#${RED} ${DDBRECSIZEUP}% ${BLACK}
|+|-${RED} 79 ${BLACK}                                   |+|-${RED} 80 ${BLACK}                                                |+| UNDO_RETENTION...............: ${RED} ${UUNDOS}(S) ${BLACK}#${BLUE} ${UUNDOM}(M) ${BLACK}#${YEL} ${UUNDOH}(H) ${BLACK}
|+|-${RED} 81 ${BLACK}                                   |+|-${RED} 82 ${BLACK}                                                |+| ARCH_LAG_TARGET..............: ${RED} ${ARCHLAG} ${BLACK}#${BLUE} ${AARCHLAGTIMEM}(M) ${BLACK}#${YEL} ${AARCHLAGTIMEH}(H) ${BLACK}#${GREEN} ${AARCHLAGTIMED}(D) ${BLACK}
|+|-${RED} 83 ${BLACK}                                   |+|-${RED} 84 ${BLACK}                                                |+| LOG_ARCH_FORMAT..............: ${RED} ${LLOGARCHFOR} ${BLACK}
|+|-${RED} 85 ${BLACK}                                   |+|-${RED} 86 ${BLACK}                                                |+| OPEN_CURSORS.................: ${RED} ${OOPENCUR} ${BLACK}
|+|-${RED} 87 ${BLACK}                                   |+|-${RED} 88 ${BLACK}                                                |+| PROCESSES....................: ${RED} ${PPROCESS} ${BLACK}
|+|-${RED} 89 ${BLACK}                                   |+|-${RED} 90 ${BLACK}                                                |+| RECYCLEBIN...................: ${RED} ${RRECYCLEBIN} ${BLACK}
|+|-${RED} 91 ${BLACK}                                   |+|-${RED} 92 ${BLACK}                                                |+| ORA-00600_ALERTLOG_( 30-D )..: ${RED} ${OORA600} ${BLACK}
|+|-${RED} 93 ${BLACK}                                   |+|-${RED} 94 ${BLACK}                                                |+| ERRORS_ALERTLOG_( 15-D ).....: ${RED} ${EERRORS} ${BLACK}
|+|-${RED} 95 ${BLACK}                                   |+|-${RED} 96 ${BLACK}                                                |+| TBS_WARNING_( > 80% )........: ${RED} ${TTBS_WARNING} ${BLACK}
|+|-${RED} 97 ${BLACK}                                   |+|-${RED} 98 ${BLACK}                                                |+| TBS_CRITICAL_( > 90% ).......: ${RED} ${TTBS_CRITICAL} ${BLACK}
|+|-${RED} 99 ${BLACK}                                   |+|-${RED} 0  ${BLACK} EXIT                                           |+| DISK_SPACE_STATUS............: ${RED} ${DISK_SPACE_STATUS} ${BLACK}
+-+-+----+---------------------------------------------------+-+-+----+------------------------------------------------+-+------------------------------+-+----------------------------------------------------+
| CHOOSE ONE OF THOSE OPTIONS ${RED} 0 - 99 ${BLACK}: OPTIONS WITH ${RED} @ ${BLACK} HAS MORE FILTERS | VERSION: ${BLUE} ${SoftwareVersion} ${BLACK} | MODIFIED: ${RED} ${DateModification} ${BLACK} | DATE & TIME: ${BLUE} ${DDATE} ${TTIME} ${BLACK}
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
MENU_LINUX=""
read MENU_LINUX
clear
case "${MENU_LINUX}"
in
#########################################################################################################
1) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
hostnamectl status
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
2) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
3) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
4) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
5) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
6) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
7) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
8) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
9) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
10) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
11) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
12) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
13) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
14) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
15) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
16) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
17) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
18) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
19) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
20) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
21) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
22) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
23) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
24) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
25) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
26) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
27) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
28) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
29) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
30) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
31) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
32) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
33) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
34) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
35) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
36) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
37) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
38) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
39) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
40) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
41) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
42) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
43) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
44) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
45) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
46) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
47) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
48) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
49) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
50) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
51) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
52) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
53) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
54) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
55) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
56) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
57) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
58) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
59) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
60) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
61) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
62) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
63) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
64) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
65) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
66) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
67) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
68) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
69) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
70) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
71) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
72) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
73) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
74) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
75) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
76) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
77) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
78) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
79) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
80) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
81) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
82) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
83) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
84) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
85) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
86) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
87) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
88) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
89) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
90) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
91) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
92) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
93) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
94) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
95) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
96) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
97) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
98) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
99) # ""
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED}  ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100

echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
break
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done
fi
;;
#
#########################################################################################################
help) # "HELP MAIN"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} HELP ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
func_load 100
clear
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Options Outsite of MENU -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) report.................: ${BLACK} ${BLUE} Create A FULL REPORT OF YOUR ENVIRONMENT (HTML) -- ${BLACK}"            # -
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) check..................: ${BLACK} ${BLUE} Run a Complete Check and Create a Text Report to Email -- ${BLACK}"     # -
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) general................: ${BLACK} ${BLUE} Show a General View of Database -- ${BLACK}"                            # +
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) services...............: ${BLACK} ${BLUE} Show All services Details of Operacion System -- ${BLACK}"              # 
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) jobs...................: ${BLACK} ${BLUE} Show All Submited RDBMS Jobs -- ${BLACK}"                               # +
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) listener...............: ${BLACK} ${BLUE} Show All Listener Configurations -- ${BLACK}"                           # 
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) rman...................: ${BLACK} ${BLUE} Show All RMAN Configurations -- ${BLACK}"                               # 
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) dnfs...................: ${BLACK} ${BLUE} Show All DNFS Information -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) dgstatus...............: ${BLACK} ${BLUE} Show All DATAGUARD BROKEN Configurations -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) dash.install...........: ${BLACK} ${BLUE} Install the Dash Board (Real Time Monitoring) -- ${BLACK}"              # +
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) dash...................: ${BLACK} ${BLUE} Execute the Dash Board (Real Time Monitoring) -- ${BLACK}"              # +
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) monitor.install........: ${BLACK} ${BLUE} Install the Monitoring (need verify first) -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) monitor................: ${BLACK} ${BLUE} Monitor All Database Informations -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) kernel.................: ${BLACK} ${BLUE} Show the Actual Kernel Configurations and the New Options -- ${BLACK}"  # +
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) dmesg..................: ${BLACK} ${BLUE} Show All Informations of Operation System DMESG -- ${BLACK}"            # +
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) rac....................: ${BLACK} ${BLUE} Show The All Informations of your Oracle Cluster [ RAC ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) oda....................: ${BLACK} ${BLUE} Show The All Informations of your Oracle Database Appliance [ ODA ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exadata................: ${BLACK} ${BLUE} Show The All Informations of your Oracle Exadata -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) dataguard..............: ${BLACK} ${BLUE} Show The All Informations of your Oracle Dataguard [ DG ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) goldengate.............: ${BLACK} ${BLUE} Show The All Informations of your Oracle GoldenGate [ OGG ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) wallet.................: ${BLACK} ${BLUE} Show The All Informations of your Oracle Wallet [ WALLET ] -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) autoup.................: ${BLACK} ${BLUE} Show The All Informations of your Oracle AutoUpgrade -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) linux..................: ${BLACK} ${BLUE} Show The All Informations of your Linux -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) corrupted..............: ${BLACK} ${BLUE} Show All Corrupted Objects -- ${BLACK}"                                 # + 
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) cron...................: ${BLACK} ${BLUE} Show All CRONTAB Configuraitons -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) sqlid..................: ${BLACK} ${BLUE} Show All SQL IDs Information -- ${BLACK}"                               # +
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) bind...................: ${BLACK} ${BLUE} Show BIND Variable of a SQL ID -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) execplan...............: ${BLACK} ${BLUE} Change The Execution Plan of a SQL ID -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) ddl....................: ${BLACK} ${BLUE} Show All SQL DDLs Information -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) concurrency............: ${BLACK} ${BLUE} Show All SQL With Conncurency -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) password...............: ${BLACK} ${BLUE} Show Password Information -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) restpoint..............: ${BLACK} ${BLUE} Show Restore Points in Your Database -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) sysaux.................: ${BLACK} ${BLUE} Run Shrink Space on SYSAUX TBS -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) indexes................: ${BLACK} ${BLUE} Identify Indexes can be rebuild (Candidates) -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) platform...............: ${BLACK} ${BLUE} Show All About Your System Platform -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) restore................: ${BLACK} ${BLUE} Show The Informations About Lost Datafiles, Controlfiles and Redolog Files -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) performance............: ${BLACK} ${BLUE} Show The Informations About ASH, AWR and Tuning -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) flashback..............: ${BLACK} ${BLUE} Show The Informations About Flashback Logs -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaasmdu...............: ${BLACK} ${BLUE} Show The Informations About Exadata ASM - DU -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exacellstatus..........: ${BLACK} ${BLUE} Show The Informations About Exadata Cell Server Status -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exahowstart............: ${BLACK} ${BLUE} Show The Informations About Exadata How Smart -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaracklayout..........: ${BLACK} ${BLUE} Show The Informations About Exadata RACK Layout -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaracklayoutmany......: ${BLACK} ${BLUE} Show The Informations About Exadata RACK Layout Many -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (+) hugepages..............: ${BLACK} ${BLUE} Show The Informations About Huge Pages -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaversion.............: ${BLACK} ${BLUE} Show The Informations About Exadata Version -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exalspatches...........: ${BLACK} ${BLUE} Show The Informations About Exadata LS Patches -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exalspatchsemany.......: ${BLACK} ${BLUE} Show The Informations About Exadata LS Patches Many -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exanbfiles.............: ${BLACK} ${BLUE} Show The Informations About Exadata NB Files -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaracstatus...........: ${BLACK} ${BLUE} Show The Informations About Exadata RAC Status -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaracmonitor..........: ${BLACK} ${BLUE} Show The Informations About Exadata RAC Monitor -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaracalldbs...........: ${BLACK} ${BLUE} Show The Informations About Exadata RAC All DBs -- ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} (-) exaredefinetabs........: ${BLACK} ${BLUE} Show The Informations About Exadata Redefine Tabs -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- Options With (+) Are Working, Options With (-) Are NOT Working Yet -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- If you have any questions, problems or recommendations, please send an email to: dba.ribas@gmail.com -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "PRESS ${RED} ENTER ${BLACK} TO GO BACK TO MAIN MENU"
read
clear
;;
#########################################################################################################
0) # " -- EXITING OF THE ORACLE MONITORING --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} "`date +%Y%m%d_%H\:%M\:%S`: ${RED} -- EXITING OF THE ORACLE MONITORING -- ${BLACK}"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
exit 1
;;
#########################################################################################################
*) # " -- ERRORS --"
#########################################################################################################
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
echo ${ECHO} " -- ONLY VALID OPTIONS BETWEEN ${RED} 0 and 99 ${BLACK},${RED} help ${BLACK},${RED} dash ${BLACK} or ${RED} REPORT ${BLACK} --"
echo ${ECHO} ">--------------------------------------------------------------------------------------------------${RED} ${OPTION} ${BLACK}"
sleep 3
clear
;;
esac
done